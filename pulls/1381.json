{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1381",
    "id": 1081574622,
    "node_id": "PR_kwDOAN28mc5Ad4Te",
    "html_url": "https://github.com/bitcoin/bips/pull/1381",
    "diff_url": "https://github.com/bitcoin/bips/pull/1381.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1381.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1381",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1381/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
    "number": 1381,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIPXXX: Taproot Annex Format ",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is WIP, see ML post for context.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2022-10-10T05:59:28Z",
    "updated_at": "2023-09-25T19:50:10Z",
    "mergeable": true,
    "mergeable_state": "unstable",
    "merge_commit_sha": "5755f5a8e11d675bda9495213b071deff6f5ff1f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ariard:2022-07-bip-annex",
      "ref": "2022-07-bip-annex",
      "sha": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 157139753,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTcxMzk3NTM=",
        "name": "bips",
        "full_name": "ariard/bips",
        "owner": {
          "login": "ariard",
          "id": 23310655,
          "node_id": "MDQ6VXNlcjIzMzEwNjU1",
          "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ariard",
          "html_url": "https://github.com/ariard",
          "followers_url": "https://api.github.com/users/ariard/followers",
          "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
          "organizations_url": "https://api.github.com/users/ariard/orgs",
          "repos_url": "https://api.github.com/users/ariard/repos",
          "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ariard/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ariard/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/ariard/bips",
        "archive_url": "https://api.github.com/repos/ariard/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ariard/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ariard/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ariard/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ariard/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ariard/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ariard/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ariard/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ariard/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ariard/bips/contributors",
        "deployments_url": "https://api.github.com/repos/ariard/bips/deployments",
        "downloads_url": "https://api.github.com/repos/ariard/bips/downloads",
        "events_url": "https://api.github.com/repos/ariard/bips/events",
        "forks_url": "https://api.github.com/repos/ariard/bips/forks",
        "git_commits_url": "https://api.github.com/repos/ariard/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ariard/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ariard/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ariard/bips.git",
        "issue_comment_url": "https://api.github.com/repos/ariard/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ariard/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ariard/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ariard/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ariard/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ariard/bips/languages",
        "merges_url": "https://api.github.com/repos/ariard/bips/merges",
        "milestones_url": "https://api.github.com/repos/ariard/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ariard/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ariard/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ariard/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:ariard/bips.git",
        "stargazers_url": "https://api.github.com/repos/ariard/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/ariard/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ariard/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/ariard/bips/subscription",
        "tags_url": "https://api.github.com/repos/ariard/bips/tags",
        "teams_url": "https://api.github.com/repos/ariard/bips/teams",
        "trees_url": "https://api.github.com/repos/ariard/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ariard/bips.git",
        "hooks_url": "https://api.github.com/repos/ariard/bips/hooks",
        "svn_url": "https://github.com/ariard/bips",
        "homepage": "bitcoin.org",
        "language": "Python",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 6569,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-01-17T00:32:59Z",
        "created_at": "2018-11-12T01:30:19Z",
        "updated_at": "2018-11-12T01:30:22Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "41490b74f7a9d52a58d9a1e1fd94f3ee6d8553e7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5573,
        "stargazers_count": 8336,
        "watchers_count": 8336,
        "size": 13657,
        "default_branch": "master",
        "open_issues_count": 118,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-25T13:01:25Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-09-25T18:47:41Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 173,
    "deletions": 0,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 33,
    "comments": 6
  },
  "events": [
    {
      "event": "subscribed",
      "id": 7751578579,
      "node_id": "SE_lADOAN28mc5TmofNzwAAAAHOB7PT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/7751578579",
      "actor": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T11:13:08Z"
    },
    {
      "event": "comment_deleted",
      "id": 7836605012,
      "node_id": "CDE_lADOAN28mc5TmofNzwAAAAHTGRpU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/7836605012",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-17T18:25:37Z"
    },
    {
      "event": "reviewed",
      "id": 1212692939,
      "node_id": "PRR_kwDOAN28mc5ISDnL",
      "url": null,
      "actor": null,
      "commit_id": "df5af5bcac36400abc3f0c2f4269aa6314ee42e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "manda2020panda",
        "id": 47097619,
        "node_id": "MDQ6VXNlcjQ3MDk3NjE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/47097619?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/manda2020panda",
        "html_url": "https://github.com/manda2020panda",
        "followers_url": "https://api.github.com/users/manda2020panda/followers",
        "following_url": "https://api.github.com/users/manda2020panda/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/manda2020panda/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/manda2020panda/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/manda2020panda/subscriptions",
        "organizations_url": "https://api.github.com/users/manda2020panda/orgs",
        "repos_url": "https://api.github.com/users/manda2020panda/repos",
        "events_url": "https://api.github.com/users/manda2020panda/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/manda2020panda/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#pullrequestreview-1212692939",
      "submitted_at": "2022-12-11T12:56:56Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
    },
    {
      "event": "reviewed",
      "id": 1212692961,
      "node_id": "PRR_kwDOAN28mc5ISDnh",
      "url": null,
      "actor": null,
      "commit_id": "df5af5bcac36400abc3f0c2f4269aa6314ee42e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "manda2020panda",
        "id": 47097619,
        "node_id": "MDQ6VXNlcjQ3MDk3NjE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/47097619?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/manda2020panda",
        "html_url": "https://github.com/manda2020panda",
        "followers_url": "https://api.github.com/users/manda2020panda/followers",
        "following_url": "https://api.github.com/users/manda2020panda/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/manda2020panda/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/manda2020panda/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/manda2020panda/subscriptions",
        "organizations_url": "https://api.github.com/users/manda2020panda/orgs",
        "repos_url": "https://api.github.com/users/manda2020panda/repos",
        "events_url": "https://api.github.com/users/manda2020panda/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/manda2020panda/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#pullrequestreview-1212692961",
      "submitted_at": "2022-12-11T12:57:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
    },
    {
      "event": "commented",
      "id": 1370509905,
      "node_id": "IC_kwDOAN28mc5RsFJR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1370509905",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-04T05:42:13Z",
      "updated_at": "2023-01-04T05:42:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/020991.html is the mailing list post in question.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#issuecomment-1370509905",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1381"
    },
    {
      "event": "commented",
      "id": 1371699454,
      "node_id": "IC_kwDOAN28mc5Rwnj-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1371699454",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-05T02:34:44Z",
      "updated_at": "2023-01-05T02:34:44Z",
      "author_association": "MEMBER",
      "body": "Yes current state of the TLV format discussion is here: https://github.com/ariard/bips/pull/1 and implementation here: https://github.com/bitcoin-inquisition/bitcoin/pull/9",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#issuecomment-1371699454",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1381"
    },
    {
      "event": "reviewed",
      "id": 1236784866,
      "node_id": "PRR_kwDOAN28mc5Jt9bi",
      "url": null,
      "actor": null,
      "commit_id": "df5af5bcac36400abc3f0c2f4269aa6314ee42e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#pullrequestreview-1236784866",
      "submitted_at": "2023-01-05T02:58:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8240792477,
      "node_id": "HRFPE_lADOAN28mc5TmofNzwAAAAHrMIOd",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/8240792477",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T00:26:15Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDlkYzNmNzRiMzg0ZjE0M2I3ZjFiZGFkMzBkYzBmZTI1MjljOGU2M2Y",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "tree": {
        "sha": "9c81d034dee0c3b63ddff02e2911c9f841861a52",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9c81d034dee0c3b63ddff02e2911c9f841861a52"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/135ca1a2f1bafd4e108e947c027662ad6c64011e",
          "sha": "135ca1a2f1bafd4e108e947c027662ad6c64011e",
          "html_url": "https://github.com/bitcoin/bips/commit/135ca1a2f1bafd4e108e947c027662ad6c64011e"
        }
      ],
      "message": "Add BIP annex.\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "committer": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2023-01-17T00:32:44Z"
      },
      "author": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2022-07-19T00:12:49Z"
      },
      "sha": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8240813343,
      "node_id": "HRFPE_lADOAN28mc5TmofNzwAAAAHrMNUf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/8240813343",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T00:33:01Z"
    },
    {
      "event": "commented",
      "id": 1384707949,
      "node_id": "IC_kwDOAN28mc5SiPdt",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1384707949",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T00:56:47Z",
      "updated_at": "2023-01-17T00:56:47Z",
      "author_association": "MEMBER",
      "body": "Updated at 6f3dcc2 with the suggestions from https://github.com/ariard/bips/pull/1.\r\n\r\nI think I still have two issues with the current approach:\r\n- in case of script path spend, we might have a redeem path with `<pubkey_alice> OP_CHECKSIG <pubkey_bob> OP_CHECKSIG`, where Alice is committing to annex X and Bob is committing to annex Y as spending policies. The current approach by {type,length} delta encoding might prevent to combine them. I don't know if it's a use we care about, and if we should have some clawback mechanism to aggregate annexes from signers sharing the same tapscript.\r\n- re-using the delta for both type and length might be unpractical as the accumulating the delta for the length might have no relation at all with the size of the data item. ",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#issuecomment-1384707949",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1381"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T00:57:37Z",
      "updated_at": "2023-01-17T00:57:37Z",
      "source": {
        "issue": {
          "id": 1398760483,
          "node_id": "PR_kwDOCV3DKc5AQ_9q",
          "url": "https://api.github.com/repos/ariard/bips/issues/1",
          "repository_url": "https://api.github.com/repos/ariard/bips",
          "labels_url": "https://api.github.com/repos/ariard/bips/issues/1/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/ariard/bips/issues/1/comments",
          "events_url": "https://api.github.com/repos/ariard/bips/issues/1/events",
          "html_url": "https://github.com/ariard/bips/pull/1",
          "number": 1,
          "state": "closed",
          "state_reason": null,
          "title": "Use serialize.h::VarInt for encoding",
          "body": "Here's what I've been thinking of... It has two main differences: it encodes the type as a delta, which enforces a canonical encoding (lowest types go first), and it's slightly more compressed.\r\n\r\nI think what you've currently got encodes:\r\n\r\n * type = `[0, 2**14)`, length(value) = 1,2,3 -- 2 bytes + length(value)\r\n * type = `[0, 2**14)`, length(value) = 0 or [4,253] -- 3 bytes + length(value)\r\n\r\nI guess I find the \"enforce canonical ordering by encoding as types as a delta\" the most compelling part.\r\n\r\nI found the `RecordLowerBitMask` stuff hard to follow as it's currently explained, fwiw.\r\n\r\n...\r\n\r\nAlternatively, perhaps doing a custom encoding with VarInt would be both clear and fine:\r\n\r\n```\r\nx = read_bytes(1)\r\ny = read_VarInt()\r\ntype = last_type + (y << 6) + (x >> 2)\r\nsize = x & 0x3\r\nif size == 3: size += read_VarInt()\r\nvalue = read_bytes(size)\r\n```\r\n\r\nSo your encoding is always:\r\n\r\n * base_type_size : 1 byte (6 bits for type, 2 bits for size)\r\n * extended_type : VarInt\r\n * extended_size : optional VarInt (type_size & 3 == 3)\r\n * value : size\r\n\r\nThat's still pretty compressed, and gives a canonical encoding/ordering...",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/ariard/bips/pulls/1",
            "html_url": "https://github.com/ariard/bips/pull/1",
            "diff_url": "https://github.com/ariard/bips/pull/1.diff",
            "patch_url": "https://github.com/ariard/bips/pull/1.patch"
          },
          "closed_at": "2023-01-17T00:57:37Z",
          "created_at": "2022-10-06T04:24:41Z",
          "updated_at": "2023-01-17T00:57:37Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1385016312,
      "node_id": "IC_kwDOAN28mc5Sjav4",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1385016312",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T08:28:40Z",
      "updated_at": "2023-01-17T08:28:40Z",
      "author_association": "CONTRIBUTOR",
      "body": ">     * in case of script path spend, we might have a redeem path with `<pubkey_alice> OP_CHECKSIG <pubkey_bob> OP_CHECKSIG`, where Alice is committing to annex X and Bob is committing to annex Y as spending policies. The current approach by {type,length} delta encoding might prevent to combine them. I don't know if it's a use we care about, and if we should have some clawback mechanism to aggregate annexes from signers sharing the same tapscript.\r\n\r\nCHECKSIG can only commit to an input's annex as a whole; so in the case above either X=Y=the entire annex, or one or both of the signatures are invalid/incompatible. You'd need something like:\r\n\r\n   ANNEXLENGTH 3 EQUALVERIFY\r\n   0 PUSHANNEX 2 EQUALVERIFY TOALT\r\n   PUSHANNEX 1 EQUALVERIFY EXTRASIGDATA <alice> CHECKSIGVERIFY\r\n   RESETSIGDATA FROMALT PUSHANNEX 1 EQUALVERIFY EXTRASIGDATA <bob> CHECKSIG\r\n\r\nspent by having the following annex (eg): {0: [15, 1], 1: [alicepolicy], 15: [bobpolicy]}, where the novel opcodes behave as:\r\n\r\n  * annexlength tells you the number of distinct tags in the annex\r\n  * pushannex pops n of the stack, looks up annex entry n, and pushes each value from the annex with tag n onto the stack, followed by the count (possibly 0)\r\n  * extrasigdata pops an element off the stack, hashes it, and will commit to the (cumulative) hash in subsequent checksig operations\r\n  * resetsigdata resets that cumulative hash\r\n\r\nSo the \"annexlength\" check is used to prevent malleability, then the first \"0 pushannex\" will put [1 15 2] on the stack (2 at the top); the second pushannex will update the stack to [alicepolicy 1], extrasigdata will ensure alice's signature commits to \"alicepolicy\", the final pushannex will update the stack to [bobpolicy 1], etc. You'd also need a SIGHASH_NOANNEX or similar, of course.\r\n\r\nAlice and Bob would still need to agree on the script that defines which subset of the annex they'll each commit to; currently that obviously has to be at the time they define their shared pubkey, but even with OP_EVAL or graftroot, while they could delay that agreement, they'd still need to do it sometime. You'd need a much more generic language to allow them to each choose which parts of the annex to sign at signing time.\r\n\r\n>     * re-using the delta for both type and length might be unpractical as the accumulating the delta for the length might have no relation at all with the size of the data item.\r\n\r\nThey don't need to have any relation? If the previous element had type X, size N1, and this element has type X+K and size N2, you just encode (K, N2), as:\r\n\r\n * if N2 < 127: K*128 + N2\r\n * if N2 >= 127: (K*128 + 127), (N2-127)",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#issuecomment-1385016312",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1381"
    },
    {
      "event": "reviewed",
      "id": 1251639337,
      "node_id": "PRR_kwDOAN28mc5KmoAp",
      "url": null,
      "actor": null,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#pullrequestreview-1251639337",
      "submitted_at": "2023-01-17T14:32:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-21T01:27:13Z",
      "updated_at": "2023-01-21T01:27:13Z",
      "source": {
        "issue": {
          "id": 1398520813,
          "node_id": "PR_kwDOHVjEp85AQLoy",
          "url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/issues/9",
          "repository_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/issues/9/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/issues/9/comments",
          "events_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/issues/9/events",
          "html_url": "https://github.com/bitcoin-inquisition/bitcoin/pull/9",
          "number": 9,
          "state": "open",
          "state_reason": null,
          "title": "Always Look On The Bright Side of the Annex",
          "body": "Build on top  of #4.\r\n\r\nThis PR proposes a validation format for the taproot [annex](https://github.com/ariard/bips/blob/2022-07-bip-annex/bip-annex.mediawiki). It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them. The data records can be subject to new validation rules.\r\n\r\nSo what's the PR standard we're looking for new softfork idea? There is a WIP BIP available here:\r\nhttps://github.com/ariard/bips/blob/2022-07-bip-annex/bip-annex.mediawiki\r\n\r\nList of following use-cases that could be supported with the annex:\r\n- per-input lock-time\r\n- historical block hash commitment\r\n- sighash_group\r\n- pay-with-neighboor-txid\r\n- block-feerate lock-point\r\n- \"tx size is smaller than K\" \r\n- more?",
          "user": {
            "login": "ariard",
            "id": 23310655,
            "node_id": "MDQ6VXNlcjIzMzEwNjU1",
            "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ariard",
            "html_url": "https://github.com/ariard",
            "followers_url": "https://api.github.com/users/ariard/followers",
            "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
            "organizations_url": "https://api.github.com/users/ariard/orgs",
            "repos_url": "https://api.github.com/users/ariard/repos",
            "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ariard/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5635511078,
              "node_id": "LA_kwDOHVjEp88AAAABT-cTJg",
              "url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "color": "ededed",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/pulls/9",
            "html_url": "https://github.com/bitcoin-inquisition/bitcoin/pull/9",
            "diff_url": "https://github.com/bitcoin-inquisition/bitcoin/pull/9.diff",
            "patch_url": "https://github.com/bitcoin-inquisition/bitcoin/pull/9.patch"
          },
          "created_at": "2022-10-05T23:59:03Z",
          "updated_at": "2023-09-16T00:32:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1265234734,
      "node_id": "PRR_kwDOAN28mc5LafMu",
      "url": null,
      "actor": null,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#pullrequestreview-1265234734",
      "submitted_at": "2023-01-23T09:22:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T12:21:06Z",
      "updated_at": "2023-02-17T12:21:06Z",
      "source": {
        "issue": {
          "id": 1588098233,
          "node_id": "PR_kwDOHVjEp85KJwBc",
          "url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/issues/22",
          "repository_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/issues/22/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/issues/22/comments",
          "events_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/issues/22/events",
          "html_url": "https://github.com/bitcoin-inquisition/bitcoin/pull/22",
          "number": 22,
          "state": "closed",
          "state_reason": null,
          "title": "Add annex data carrier option behind -annexcarrier option",
          "body": "Allow 0 to 126 byte pushes in annex of the format:\r\n\r\n`0x50 <1 byte data len> <len bytes>`\r\n\r\nIn the worst case this should add 129 WU of weight malleability to a transaction(including the witness stack element length byte).\r\n\r\nThis format is meant to be compatible with a full BIP proposal, and if it ends up being incompatible, removed, as this is policy only, on signet. https://github.com/bitcoin-inquisition/bitcoin/pull/9 Has a bit of work to go to get in prime time, so in the interim I'd like to base some speculative work on this specific carveout. \r\n\r\nI have special-purpose use for annex data that doesn't involve any softforks. My plan is to get this and https://github.com/bitcoin-inquisition/bitcoin/pull/23 into inquisition so people can start running eltoo CLN nodes on signet for experimentation/understanding. These same changes would support any number of APO-based channel architectures as well(Daric, AJ's two-stage with penalties, ???), so I think this is a solid step forward for experimentation without opening up the network to spam attacks.\r\n\r\nSee https://github.com/instagibbs/bolts/tree/eltoo_draft if you want way too much detail in how it's intended to be used.",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5276051658,
              "node_id": "LA_kwDOHVjEp88AAAABOnooyg",
              "url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/labels/relay-policy",
              "name": "relay-policy",
              "description": "",
              "color": "6DAD94",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/milestones/2",
            "html_url": "https://github.com/bitcoin-inquisition/bitcoin/milestone/2",
            "labels_url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/milestones/2/labels",
            "id": 8847134,
            "node_id": "MI_kwDOHVjEp84Ahv8e",
            "number": 2,
            "state": "open",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "ajtowns",
              "id": 127186,
              "node_id": "MDQ6VXNlcjEyNzE4Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/ajtowns",
              "html_url": "https://github.com/ajtowns",
              "followers_url": "https://api.github.com/users/ajtowns/followers",
              "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
              "organizations_url": "https://api.github.com/users/ajtowns/orgs",
              "repos_url": "https://api.github.com/users/ajtowns/repos",
              "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/ajtowns/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 1,
            "closed_issues": 13,
            "created_at": "2023-01-12T08:02:53Z",
            "updated_at": "2023-09-06T17:29:25Z"
          },
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-inquisition/bitcoin/pulls/22",
            "html_url": "https://github.com/bitcoin-inquisition/bitcoin/pull/22",
            "diff_url": "https://github.com/bitcoin-inquisition/bitcoin/pull/22.diff",
            "patch_url": "https://github.com/bitcoin-inquisition/bitcoin/pull/22.patch"
          },
          "closed_at": "2023-03-22T12:53:14Z",
          "created_at": "2023-02-16T17:33:28Z",
          "updated_at": "2023-04-13T06:02:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1303445514,
      "node_id": "PRR_kwDOAN28mc5NsQAK",
      "url": null,
      "actor": null,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#pullrequestreview-1303445514",
      "submitted_at": "2023-02-17T13:37:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
    },
    {
      "event": "reviewed",
      "id": 1307867860,
      "node_id": "PRR_kwDOAN28mc5N9HrU",
      "url": null,
      "actor": null,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#pullrequestreview-1307867860",
      "submitted_at": "2023-02-21T17:18:12Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-29T13:59:43Z",
      "updated_at": "2023-05-29T13:59:43Z",
      "source": {
        "issue": {
          "id": 1727824148,
          "node_id": "I_kwDOABII585m_IEU",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27768",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27768/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27768/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27768/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/27768",
          "number": 27768,
          "state": "closed",
          "state_reason": "completed",
          "title": "Allow accepting non-standard transactions on mainnet via local rpc",
          "body": "To mitigate mempool divergence between nodes and miners, node operators should have the ability to submit non-standard transactions to their local mempools. One of the reasons to do so is to improve the quality of fee estimates.\r\n\r\nAcceptance via the p2p network has been discussed in https://github.com/bitcoin/bitcoin/pull/27578 and is deemed to be problematic. This issue is for enabling non-standard transaction submission for the `sendrawtransaction` rpc only.\r\n",
          "user": {
            "login": "joostjager",
            "id": 4638168,
            "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/joostjager",
            "html_url": "https://github.com/joostjager",
            "followers_url": "https://api.github.com/users/joostjager/followers",
            "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
            "organizations_url": "https://api.github.com/users/joostjager/orgs",
            "repos_url": "https://api.github.com/users/joostjager/repos",
            "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/joostjager/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 477890092,
              "node_id": "MDU6TGFiZWw0Nzc4OTAwOTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Questions%20and%20Help",
              "name": "Questions and Help",
              "color": "006688",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 10,
          "closed_at": "2023-06-04T18:12:14Z",
          "created_at": "2023-05-26T15:20:50Z",
          "updated_at": "2023-06-04T18:12:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1452970322,
      "node_id": "PRR_kwDOAN28mc5WmpFS",
      "url": null,
      "actor": null,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#pullrequestreview-1452970322",
      "submitted_at": "2023-05-31T11:44:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
    },
    {
      "event": "commented",
      "id": 1571153828,
      "node_id": "IC_kwDOAN28mc5dpeek",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1571153828",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T00:53:13Z",
      "updated_at": "2023-06-01T00:54:14Z",
      "author_association": "MEMBER",
      "body": "> I thought the taproot upgrade introduced the annex field to allow for future protocol expansions without requiring further soft forks?\r\n\r\nThere is an interesting design open question - If we could have restrained soft-fork semantics introduced by economic or proof-of-work mechanism, or with expiring enforcement. There was such an idea presented on the mailing list a while back [“Automatically reverting (“transitory”) soft forks\" ](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020242.html).\r\n\r\nCan we design the taproot annex as a safe sandbox under some consensus boundaries ?",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#issuecomment-1571153828",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1381"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T11:23:26Z",
      "updated_at": "2023-06-21T11:23:26Z",
      "source": {
        "issue": {
          "id": 1767367995,
          "node_id": "PR_kwDOABII585TiQc8",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27926",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27926/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27926/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27926/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27926",
          "number": 27926,
          "state": "open",
          "state_reason": null,
          "title": "policy: make unstructured annex standard",
          "body": "This PR opens up the annex in a limited way:\r\n\r\n* If any one of the inputs commits to an annex, all inputs must. This is a mechanism to opt-in to annex use, preventing participants in a multi-party transaction from adding an unexpected annex which would increase the tx weight and lower the fee rate. See https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021736.html\r\n\r\n* Allow empty annexes, to let users opt-in to annex usage with the minimum number of bytes.\r\n\r\n* Additionally, only allow annexes that start with `0x00`. This keeps open the possibility to support structured annexes such as for example the tlv format proposed in https://github.com/bitcoin/bips/pull/1381. A potential future structured format would start with a non-zero byte.\r\n\r\n* Limit the maximum size of unstructured annex data to 256 bytes. Including the annex tag 0x50 and the unstructured data tag 0x00, this makes for a maximum total witness element size of 258 bytes. This upper limit somewhat protects participants in a multi-party transaction that uses the annex against annex inflation.\r\n\r\n  The constant 256 is chosen so that it provides enough space to accommodate several schnorr signatures. This is useful for implementing annex covenants with multiple presigned transactions. For a PoC of a single transaction annex covenant, see https://github.com/joostjager/annex-covenants\r\n\r\nTodo:\r\n* [ ] fix/add tests\r\n\r\nRelated:\r\n* Max 126 byte unstructured annex without opt-in: https://github.com/bitcoin-inquisition/bitcoin/pull/22",
          "user": {
            "login": "joostjager",
            "id": 4638168,
            "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/joostjager",
            "html_url": "https://github.com/joostjager",
            "followers_url": "https://api.github.com/users/joostjager/followers",
            "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
            "organizations_url": "https://api.github.com/users/joostjager/orgs",
            "repos_url": "https://api.github.com/users/joostjager/repos",
            "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/joostjager/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27926",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27926",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27926.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27926.patch"
          },
          "created_at": "2023-06-21T11:23:26Z",
          "updated_at": "2023-09-03T10:00:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "convert_to_draft",
      "id": 9679957455,
      "node_id": "CTDE_lADOAN28mc5TmofNzwAAAAJA-G3P",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/9679957455",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T17:51:20Z"
    },
    {
      "event": "labeled",
      "id": 9679958905,
      "node_id": "LE_lADOAN28mc5TmofNzwAAAAJA-HN5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/9679958905",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T17:51:42Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "MPins",
        "id": 88947526,
        "node_id": "MDQ6VXNlcjg4OTQ3NTI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/88947526?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MPins",
        "html_url": "https://github.com/MPins",
        "followers_url": "https://api.github.com/users/MPins/followers",
        "following_url": "https://api.github.com/users/MPins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MPins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MPins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MPins/subscriptions",
        "organizations_url": "https://api.github.com/users/MPins/orgs",
        "repos_url": "https://api.github.com/users/MPins/repos",
        "events_url": "https://api.github.com/users/MPins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MPins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T16:36:05Z",
      "updated_at": "2023-07-19T16:36:05Z",
      "source": {
        "issue": {
          "id": 1812309049,
          "node_id": "I_kwDOHi0ngs5sBaQ5",
          "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/6",
          "repository_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org",
          "labels_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/6/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/6/comments",
          "events_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/6/events",
          "html_url": "https://github.com/saopaulobitdevs/saopaulobitdevs.org/issues/6",
          "number": 6,
          "state": "closed",
          "state_reason": "completed",
          "title": "Taproot Annex",
          "body": "Taproot annex https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/020991.html\r\nAqui o BIP draft https://github.com/bitcoin/bips/pull/1381",
          "user": {
            "login": "MPins",
            "id": 88947526,
            "node_id": "MDQ6VXNlcjg4OTQ3NTI2",
            "avatar_url": "https://avatars.githubusercontent.com/u/88947526?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MPins",
            "html_url": "https://github.com/MPins",
            "followers_url": "https://api.github.com/users/MPins/followers",
            "following_url": "https://api.github.com/users/MPins/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MPins/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MPins/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MPins/subscriptions",
            "organizations_url": "https://api.github.com/users/MPins/orgs",
            "repos_url": "https://api.github.com/users/MPins/repos",
            "events_url": "https://api.github.com/users/MPins/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MPins/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 1,
          "closed_at": "2023-07-19T16:39:44Z",
          "created_at": "2023-07-19T16:36:05Z",
          "updated_at": "2023-07-19T16:39:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "MPins",
        "id": 88947526,
        "node_id": "MDQ6VXNlcjg4OTQ3NTI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/88947526?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MPins",
        "html_url": "https://github.com/MPins",
        "followers_url": "https://api.github.com/users/MPins/followers",
        "following_url": "https://api.github.com/users/MPins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MPins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MPins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MPins/subscriptions",
        "organizations_url": "https://api.github.com/users/MPins/orgs",
        "repos_url": "https://api.github.com/users/MPins/repos",
        "events_url": "https://api.github.com/users/MPins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MPins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T16:40:25Z",
      "updated_at": "2023-07-19T16:40:25Z",
      "source": {
        "issue": {
          "id": 1786898987,
          "node_id": "I_kwDOHi0ngs5qgeor",
          "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/5",
          "repository_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org",
          "labels_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/5/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/5/comments",
          "events_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/5/events",
          "html_url": "https://github.com/saopaulobitdevs/saopaulobitdevs.org/issues/5",
          "number": 5,
          "state": "closed",
          "state_reason": "completed",
          "title": "Topicos Julho/2023",
          "body": "Issue para propor e discutir os topicos para o proximo bitdevs.\r\n\r\nComentem com os topicos que voces gostariam de abordar/discutir",
          "user": {
            "login": "lorenzolfm",
            "id": 38786333,
            "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lorenzolfm",
            "html_url": "https://github.com/lorenzolfm",
            "followers_url": "https://api.github.com/users/lorenzolfm/followers",
            "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
            "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
            "repos_url": "https://api.github.com/users/lorenzolfm/repos",
            "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5694222796,
              "node_id": "LA_kwDOHi0ngs8AAAABU2bxzA",
              "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/labels/discussion",
              "name": "discussion",
              "description": "",
              "color": "E9652D",
              "default": false
            }
          ],
          "assignee": {
            "login": "lorenzolfm",
            "id": 38786333,
            "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lorenzolfm",
            "html_url": "https://github.com/lorenzolfm",
            "followers_url": "https://api.github.com/users/lorenzolfm/followers",
            "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
            "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
            "repos_url": "https://api.github.com/users/lorenzolfm/repos",
            "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "lorenzolfm",
              "id": 38786333,
              "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
              "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lorenzolfm",
              "html_url": "https://github.com/lorenzolfm",
              "followers_url": "https://api.github.com/users/lorenzolfm/followers",
              "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
              "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
              "repos_url": "https://api.github.com/users/lorenzolfm/repos",
              "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 18,
          "closed_at": "2023-07-24T18:48:10Z",
          "created_at": "2023-07-03T22:52:55Z",
          "updated_at": "2023-07-24T18:48:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1734367486,
      "node_id": "IC_kwDOAN28mc5nYFj-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1734367486",
      "actor": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-25T19:50:10Z",
      "updated_at": "2023-09-25T19:50:10Z",
      "author_association": "NONE",
      "body": "We could consider using a prefix varint, where the number of leading 1s in the initial and subsequent bytes, until a 0 is reached, determines how many additional bytes follow. The only advantage is performance, since you don't have a potential branch on every byte, and you can load data bytes directly. I don't know if that's enough of an advantage to use a less-common varint encoding, but it's worth considering. Here's a good. [Hacker News post](https://news.ycombinator.com/item?id=11263378) about the encoding.",
      "user": {
        "login": "casey",
        "id": 1945,
        "node_id": "MDQ6VXNlcjE5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/casey",
        "html_url": "https://github.com/casey",
        "followers_url": "https://api.github.com/users/casey/followers",
        "following_url": "https://api.github.com/users/casey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/casey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/casey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
        "organizations_url": "https://api.github.com/users/casey/orgs",
        "repos_url": "https://api.github.com/users/casey/repos",
        "events_url": "https://api.github.com/users/casey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/casey/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1381#issuecomment-1734367486",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1381"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1062070884",
      "pull_request_review_id": 1236784866,
      "id": 1062070884,
      "node_id": "PRRC_kwDOAN28mc4_Tepk",
      "diff_hunk": "@@ -0,0 +1,166 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== Type-Length-Value Format ===\n+\n+A TLV (Type-Length-Value) format is used to allow for the backwards-compatible addition of new fields\n+to the annex.\n+\n+A `tlv_record` represents a single annex field, encoded in the form:\n+* `VarInt` | 1-byte `RecordLowerBitMask`: `type`\n+* `VarInt`: length\n+* `length`: value\n+\n+The `type` is encoded using the VarInt format <ref>'''Why using VarInt''' In practice, chances are the record\n+value to be small following power law distribution. So if the small values can be stored in fewer bytes,\n+that's a saving. </ref> and a 1-byte `RecordLowerMask`.\n+\n+The `length` is encoded using the VarInt format signaling the size of `value` in bytes.\n+\n+The value depends entirely on the `type` and should be encoded or decoded according to the annex record\n+specific format determined by `type`.\n+\n+The following function is used to validate the annex:\n+\n+    bool VerifyAnnex(const std::vector<unsigned char>& annex_stack, ScriptExecutionData& execdata)\n+    {\n+        CDataStream annex(MakeByteSpan(annex_stack), ANNEX_SER_TYPE, ANNEX_SER_VERSION);\n+    \n+        /* Pop annex tag */\n+        uint8_t annex_tag;\n+        annex.read(AsWritableBytes(Span{&annex_tag, 1}));\n+        assert(annex_tag == ANNEX_TAG);\n+    \n+        /* Annex record are encoded as:\n+         * `VarInt` + 1 bytes: type\n+         * `VarInt` OR 0 bytes: length\n+         * `length`-bytes: value\n+         */\n+        while (!annex_stack.empty()) {\n+    \n+            /* `VarInt`-bytes to encode the higher-mask type\n+             * 1-byte to encode the lower-mask type\n+             * 8192 records with 2 bytes.\n+             * 1056767 records with 3 bytes.\n+             * 40456331200 records with 4 bytes.\n+             * See `VarIntMode` comment in serialize.h for more.\n+             */\n+            uint64_t nRecordHigherMask = 0;\n+            annex >> VARINT(nRecordHigherMask);\n+            uint8_t nRecordLowerMask;\n+            annex.read(AsWritableBytes(Span{&nRecordLowerMask, 1}));\n+    \n+            const uint64_t nRecordType = nRecordHigherMask * 64 + (nRecordLowerMask & 0x3F);\n+            size_t nRecordLength = 0;\n+    \n+            /* `VarInt`-bytes to encode the record length.\n+             * 1-byte for 4 to 130 bytes of length.\n+             * 2-byte for 131 to 16514 bytes of length.\n+             * 3-byte for 16515 to 2113666 bytes of length.\n+             * Special-case for record value of length 0, 1, 2, 3, bytes. Save 1 byte of record length.\n+             */\n+            if ((nRecordLowerMask & 0xc0) == 0) {\n+                annex >> VARINT(nRecordLength);\n+                nRecordLength += 3;\n+            } else {\n+                /* Special-case for record value of length 0, 1, 2, 3 bytes. Save 1 byte of record length */\n+                nRecordLength = ((nRecordLowerMask & 0xc0) >> 6);\n+            }\n+    \n+            /* Consensus rule : the annex is not short - end of data\n+             * before reading is finished */\n+            if (annex.size() < nRecordLength)\n+                return false;\n+    \n+            std::vector<unsigned char> vRecordValue;\n+            vRecordValue.resize(nRecordLength);\n+            annex.read(AsWritableBytes(Span{&vRecordValue, nRecordLength}));\n+    \n+            switch (nRecordType) {\n+                /* Consensus rule : record value must make sense, per\n+                 * the tag spec */\n+                default:\n+                    return true;\n+            }\n+        }\n+        return true;\n+    }\n+\n+== Security ==\n+\n+=== DoSy annex ===\n+\n+Lengthy annex bytes stream could be given to nodes as a CPU DoS vector. Standard policy rules should be adequate\n+to prevent that concern. If many annex fields are considered as valid and/or their validation is expensive, a\n+compensation mechanism should be introduced to constrain witness producer to commit higher fees (e.g inflate witness\n+weight in function of annex size).",
      "path": "bip-annex.mediawiki",
      "position": null,
      "original_position": 146,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "df5af5bcac36400abc3f0c2f4269aa6314ee42e5",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is a little bit backwards -- I think it would be better to say that the annex should always be simple and fast to parse and verify (eg, only using information from the transaction, its utxos, and block headers; only requiring a single pass to parse) and that any expensive computation (such as signature validation) should be left for script evaluation.\r\n\r\nEither way, this seems more like a \"rationale\" thing?",
      "created_at": "2023-01-05T02:58:03Z",
      "updated_at": "2023-01-05T02:58:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1062070884",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1062070884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": 143,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1067365269",
      "pull_request_review_id": 1244470507,
      "id": 1067365269,
      "node_id": "PRRC_kwDOAN28mc4_nrOV",
      "diff_hunk": "@@ -0,0 +1,166 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== Type-Length-Value Format ===\n+\n+A TLV (Type-Length-Value) format is used to allow for the backwards-compatible addition of new fields\n+to the annex.\n+\n+A `tlv_record` represents a single annex field, encoded in the form:\n+* `VarInt` | 1-byte `RecordLowerBitMask`: `type`\n+* `VarInt`: length\n+* `length`: value\n+\n+The `type` is encoded using the VarInt format <ref>'''Why using VarInt''' In practice, chances are the record\n+value to be small following power law distribution. So if the small values can be stored in fewer bytes,\n+that's a saving. </ref> and a 1-byte `RecordLowerMask`.\n+\n+The `length` is encoded using the VarInt format signaling the size of `value` in bytes.\n+\n+The value depends entirely on the `type` and should be encoded or decoded according to the annex record\n+specific format determined by `type`.\n+\n+The following function is used to validate the annex:\n+\n+    bool VerifyAnnex(const std::vector<unsigned char>& annex_stack, ScriptExecutionData& execdata)\n+    {\n+        CDataStream annex(MakeByteSpan(annex_stack), ANNEX_SER_TYPE, ANNEX_SER_VERSION);\n+    \n+        /* Pop annex tag */\n+        uint8_t annex_tag;\n+        annex.read(AsWritableBytes(Span{&annex_tag, 1}));\n+        assert(annex_tag == ANNEX_TAG);\n+    \n+        /* Annex record are encoded as:\n+         * `VarInt` + 1 bytes: type\n+         * `VarInt` OR 0 bytes: length\n+         * `length`-bytes: value\n+         */\n+        while (!annex_stack.empty()) {\n+    \n+            /* `VarInt`-bytes to encode the higher-mask type\n+             * 1-byte to encode the lower-mask type\n+             * 8192 records with 2 bytes.\n+             * 1056767 records with 3 bytes.\n+             * 40456331200 records with 4 bytes.\n+             * See `VarIntMode` comment in serialize.h for more.\n+             */\n+            uint64_t nRecordHigherMask = 0;\n+            annex >> VARINT(nRecordHigherMask);\n+            uint8_t nRecordLowerMask;\n+            annex.read(AsWritableBytes(Span{&nRecordLowerMask, 1}));\n+    \n+            const uint64_t nRecordType = nRecordHigherMask * 64 + (nRecordLowerMask & 0x3F);\n+            size_t nRecordLength = 0;\n+    \n+            /* `VarInt`-bytes to encode the record length.\n+             * 1-byte for 4 to 130 bytes of length.\n+             * 2-byte for 131 to 16514 bytes of length.\n+             * 3-byte for 16515 to 2113666 bytes of length.\n+             * Special-case for record value of length 0, 1, 2, 3, bytes. Save 1 byte of record length.\n+             */\n+            if ((nRecordLowerMask & 0xc0) == 0) {\n+                annex >> VARINT(nRecordLength);\n+                nRecordLength += 3;\n+            } else {\n+                /* Special-case for record value of length 0, 1, 2, 3 bytes. Save 1 byte of record length */\n+                nRecordLength = ((nRecordLowerMask & 0xc0) >> 6);\n+            }\n+    \n+            /* Consensus rule : the annex is not short - end of data\n+             * before reading is finished */\n+            if (annex.size() < nRecordLength)\n+                return false;\n+    \n+            std::vector<unsigned char> vRecordValue;\n+            vRecordValue.resize(nRecordLength);\n+            annex.read(AsWritableBytes(Span{&vRecordValue, nRecordLength}));\n+    \n+            switch (nRecordType) {\n+                /* Consensus rule : record value must make sense, per\n+                 * the tag spec */\n+                default:\n+                    return true;\n+            }\n+        }\n+        return true;\n+    }\n+\n+== Security ==\n+\n+=== DoSy annex ===\n+\n+Lengthy annex bytes stream could be given to nodes as a CPU DoS vector. Standard policy rules should be adequate\n+to prevent that concern. If many annex fields are considered as valid and/or their validation is expensive, a\n+compensation mechanism should be introduced to constrain witness producer to commit higher fees (e.g inflate witness\n+weight in function of annex size).",
      "path": "bip-annex.mediawiki",
      "position": null,
      "original_position": 146,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "df5af5bcac36400abc3f0c2f4269aa6314ee42e5",
      "in_reply_to_id": 1062070884,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, putting stuff in annex is cheap for verifiers, unless new verification burdens are added.",
      "created_at": "2023-01-11T19:10:12Z",
      "updated_at": "2023-01-11T19:10:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1067365269",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1067365269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": 143,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072266416",
      "pull_request_review_id": 1251639337,
      "id": 1072266416,
      "node_id": "PRRC_kwDOAN28mc4_6Xyw",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== CompressedInt Integer Encoding ===\n+\n+Variable-length integers: bytes are a MSB base-128 encoding of the number.\n+The high bit in each byte signifies whether another digit follows. To make\n+sure the encoding is one-to-one, one is subtracted from all but the last digit.\n+Thus, the byte sequence a[] with length len, where all but the last byte\n+has bit 128 set, encodes the number:\n+\n+  (a[len-1] & 0x7F) + sum(i=1..len-1, 128^i*((a[len-i-1] & 0x7F)+1))\n+\n+Properties:\n+ * Very small (0-127: 1 byte, 128-16511: 2 bytes, 16512-2113663: 3 bytes)\n+ * Every integer has exactly one encoding\n+ * Encoding does not depend on size of original integer type\n+ * No redundancy: every (infinite) byte sequence corresponds to a list\n+   of encoded integers.\n+\n+Examples:\n+ * 0:         [0x00]  256:        [0x81 0x00]\n+ * 1:         [0x01]  16383:      [0xFE 0x7F]\n+ * 127:       [0x7F]  16384:      [0xFF 0x00]\n+ * 128:  [0x80 0x00]  16511:      [0xFF 0x7F]\n+ * 255:  [0x80 0x7F]  65535: [0x82 0xFE 0x7F]\n+ * 2^32:           [0x8E 0xFE 0xFE 0xFF 0x00]\n+\n+ read_CompressedInt():\n+     result = 0\n+     while not eof():\n+         b = read_bytes(1)\n+         if b < 128: return result + b\n+         result += b - 127\n+         result *= 128\n+     fail()\n+\n+ write_CompressedInt(n):\n+     out = []\n+     while True:\n+         out.append( n % 128 )\n+         if n <= 127: break\n+         n = (n // 128) - 1\n+     while len(out) > 1:\n+         write(out.pop() | 0x80)\n+     write(out.pop())\n+\n+=== Type-Length-Value Format ===\n+\n+The annex is defined as containing an ordered set of \"type, value\" pairs, where the type is a non-negative integer, and the value is a byte stream, and the pairs are listed in non-decreasing order by type.\n+\n+The annex is encoded as follows:\n+\n+ write(0x50)\n+ last_type = 0\n+ for type, value in annex:\n+    delta = type - last_type\n+    assert delta >= 0, \"annex must be ordered by type\"\n+    if length(value) < 127:\n+        write_CompressedInt(delta * 128 + length(value))\n+    else:\n+        write_CompressedInt(delta * 128 + 127)\n+        write_CompressedInt(length(value) - 127)\n+    write(value)\n+    last_type = type\n+\n+And conversely the annex may be decoded as follows:\n+\n+ assert read_bytes(1) == 0x50, \"annex must begin with annex marker\"\n+ last_type = 0\n+ annex = []\n+ while not eof():\n+    deltalen = read_CompressedInt()\n+    type = last_type + (deltalen >> 7)\n+    length = deltalen & 0x7F\n+    if length == 0x7F:\n+        length += read_CompressedInt()\n+    value = read_bytes(length)\n+    annex.append( (type, value) )\n+    last_type = type\n+\n+Rather than encoding the type directly, we encode the difference between\n+the previous type (initially 0), both minimising the encoding and ensuring\n+a canonical ordering for annex entries.\n+\n+If length(value) is between 0 and 126 bytes, then:\n+* entries with delta=0 are encoded in 1+length(value) bytes\n+* entries with delta=1..128 are encoded in 2+length(value) bytes\n+* entries with delta=129..16512 are encoded in 3+length(value) bytes\n+\n+The meaning of the value byte stream depends entirely on the `type` and may require further encoding/deconding as appropriate.\n+\n+=== Annex validation rules ===\n+\n+* If the annex does not decode successfully (that is, if read_CompressedInt() or read_bytes(length) fail due to reaching eof early); fail.",
      "path": "bip-annex.mediawiki",
      "position": 145,
      "original_position": 145,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* If the annex does not decode successfully (e.g., if read_CompressedInt() or read_bytes(length) fail due to reaching eof early): fail.\r\n```",
      "created_at": "2023-01-17T14:18:14Z",
      "updated_at": "2023-01-17T14:32:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1072266416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072266416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072267721",
      "pull_request_review_id": 1251639337,
      "id": 1072267721,
      "node_id": "PRRC_kwDOAN28mc4_6YHJ",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.",
      "path": "bip-annex.mediawiki",
      "position": 20,
      "original_position": 20,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nIt allows extension of the usual transaction fields with new data records allowing taproot signatures to commit to them.\r\n```",
      "created_at": "2023-01-17T14:19:18Z",
      "updated_at": "2023-01-17T14:32:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1072267721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072267721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072271243",
      "pull_request_review_id": 1251639337,
      "id": 1072271243,
      "node_id": "PRRC_kwDOAN28mc4_6Y-L",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). ",
      "path": "bip-annex.mediawiki",
      "position": 32,
      "original_position": 32,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nreleased in the early days of the network, soft-forks either extended the validation semantic\r\nof some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\r\nor in one case added a whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \r\n```",
      "created_at": "2023-01-17T14:22:12Z",
      "updated_at": "2023-01-17T14:32:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1072271243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072271243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": 30,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072272382",
      "pull_request_review_id": 1251639337,
      "id": 1072272382,
      "node_id": "PRRC_kwDOAN28mc4_6ZP-",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation",
      "path": "bip-annex.mediawiki",
      "position": 38,
      "original_position": 38,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nthis element is the annex. This BIP defines the remaining bytes' semantics and validation\r\n```",
      "created_at": "2023-01-17T14:23:12Z",
      "updated_at": "2023-01-17T14:32:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1072272382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072272382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072275589",
      "pull_request_review_id": 1251639337,
      "id": 1072275589,
      "node_id": "PRRC_kwDOAN28mc4_6aCF",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection",
      "path": "bip-annex.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nA commitment to a historical block hash could be a new annex data field to enable replay protection\r\n```",
      "created_at": "2023-01-17T14:25:46Z",
      "updated_at": "2023-01-17T14:32:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1072275589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072275589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072275817",
      "pull_request_review_id": 1251639337,
      "id": 1072275817,
      "node_id": "PRRC_kwDOAN28mc4_6aFp",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed",
      "path": "bip-annex.mediawiki",
      "position": 46,
      "original_position": 46,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nin the case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\r\n```",
      "created_at": "2023-01-17T14:25:57Z",
      "updated_at": "2023-01-17T14:32:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1072275817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072275817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072280582",
      "pull_request_review_id": 1251639337,
      "id": 1072280582,
      "node_id": "PRRC_kwDOAN28mc4_6bQG",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== CompressedInt Integer Encoding ===",
      "path": "bip-annex.mediawiki",
      "position": 54,
      "original_position": 54,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any historical precedence for this kind of encoding? If so, please add reference.",
      "created_at": "2023-01-17T14:29:53Z",
      "updated_at": "2023-01-17T14:32:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1072280582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1072280582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1083808384",
      "pull_request_review_id": 1265234734,
      "id": 1083808384,
      "node_id": "PRRC_kwDOAN28mc5AmZqA",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be",
      "path": "bip-annex.mediawiki",
      "position": 48,
      "original_position": 48,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you make it more clear from the beginning that there are two ways to look at the annex records: `out-of-script rule enforcement` and `in-script rule enforcement`?",
      "created_at": "2023-01-23T09:22:29Z",
      "updated_at": "2023-01-23T09:22:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1083808384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1083808384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1083821947",
      "pull_request_review_id": 1265251334,
      "id": 1083821947,
      "node_id": "PRRC_kwDOAN28mc5Amc97",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be",
      "path": "bip-annex.mediawiki",
      "position": 48,
      "original_position": 48,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1083808384,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe \"rules enforced directly by the presence of an annex element\" (like nLockTime or nSequence making a tx invalid in context) and \"interaction with script rules\" (PUSH_ANNEX_RECORD behaves like OP_CLTV or OP_CSV requiring a particular nLockTime or nSequence value; or SIGHASH_GROUP proposes CHECKSIG hashing working differently depending on an annex value -- those rules should be independent of the tx's context, ie they either always pass or always fail, just as a mismatching nLockTime for your OP_CLTV will always mean the tx is invalid, no matter how long you wait before broadcasting it) ?",
      "created_at": "2023-01-23T09:33:33Z",
      "updated_at": "2023-01-23T09:33:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1083821947",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1083821947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1107769427",
      "pull_request_review_id": 1300418036,
      "id": 1107769427,
      "node_id": "PRRC_kwDOAN28mc5CBzhT",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== CompressedInt Integer Encoding ===",
      "path": "bip-annex.mediawiki",
      "position": 54,
      "original_position": 54,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1072280582,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This encoding is from https://github.com/bitcoin/bitcoin/pull/1677/commits/4d6144f97faf9d2a6c89f41d7d2360f21f0b71e2   (https://github.com/bitcoin/bitcoin/pull/1677)\r\n\r\nI don't think there's any precedence for it in other BIPs",
      "created_at": "2023-02-15T21:57:20Z",
      "updated_at": "2023-02-15T21:58:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1107769427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1107769427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1109816370",
      "pull_request_review_id": 1303438733,
      "id": 1109816370,
      "node_id": "PRRC_kwDOAN28mc5CJnQy",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== CompressedInt Integer Encoding ===",
      "path": "bip-annex.mediawiki",
      "position": 54,
      "original_position": 54,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1072280582,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~This is [unsigned LEB128](https://en.wikipedia.org/wiki/LEB128)?~\r\n\r\nNo, it is [VLQ](https://en.wikipedia.org/wiki/Variable-length_quantity)",
      "created_at": "2023-02-17T13:33:17Z",
      "updated_at": "2023-02-17T13:36:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1109816370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1109816370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1109822090",
      "pull_request_review_id": 1303445514,
      "id": 1109822090,
      "node_id": "PRRC_kwDOAN28mc5CJoqK",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== CompressedInt Integer Encoding ===\n+\n+Variable-length integers: bytes are a MSB base-128 encoding of the number.\n+The high bit in each byte signifies whether another digit follows. To make\n+sure the encoding is one-to-one, one is subtracted from all but the last digit.\n+Thus, the byte sequence a[] with length len, where all but the last byte\n+has bit 128 set, encodes the number:\n+\n+  (a[len-1] & 0x7F) + sum(i=1..len-1, 128^i*((a[len-i-1] & 0x7F)+1))\n+\n+Properties:\n+ * Very small (0-127: 1 byte, 128-16511: 2 bytes, 16512-2113663: 3 bytes)\n+ * Every integer has exactly one encoding\n+ * Encoding does not depend on size of original integer type\n+ * No redundancy: every (infinite) byte sequence corresponds to a list\n+   of encoded integers.\n+\n+Examples:\n+ * 0:         [0x00]  256:        [0x81 0x00]\n+ * 1:         [0x01]  16383:      [0xFE 0x7F]\n+ * 127:       [0x7F]  16384:      [0xFF 0x00]\n+ * 128:  [0x80 0x00]  16511:      [0xFF 0x7F]\n+ * 255:  [0x80 0x7F]  65535: [0x82 0xFE 0x7F]\n+ * 2^32:           [0x8E 0xFE 0xFE 0xFF 0x00]\n+\n+ read_CompressedInt():\n+     result = 0\n+     while not eof():\n+         b = read_bytes(1)\n+         if b < 128: return result + b\n+         result += b - 127\n+         result *= 128\n+     fail()\n+\n+ write_CompressedInt(n):\n+     out = []\n+     while True:\n+         out.append( n % 128 )\n+         if n <= 127: break\n+         n = (n // 128) - 1\n+     while len(out) > 1:\n+         write(out.pop() | 0x80)\n+     write(out.pop())\n+\n+=== Type-Length-Value Format ===\n+\n+The annex is defined as containing an ordered set of \"type, value\" pairs, where the type is a non-negative integer, and the value is a byte stream, and the pairs are listed in non-decreasing order by type.\n+\n+The annex is encoded as follows:\n+\n+ write(0x50)\n+ last_type = 0\n+ for type, value in annex:\n+    delta = type - last_type\n+    assert delta >= 0, \"annex must be ordered by type\"\n+    if length(value) < 127:\n+        write_CompressedInt(delta * 128 + length(value))\n+    else:\n+        write_CompressedInt(delta * 128 + 127)\n+        write_CompressedInt(length(value) - 127)\n+    write(value)\n+    last_type = type\n+\n+And conversely the annex may be decoded as follows:\n+\n+ assert read_bytes(1) == 0x50, \"annex must begin with annex marker\"\n+ last_type = 0\n+ annex = []\n+ while not eof():\n+    deltalen = read_CompressedInt()\n+    type = last_type + (deltalen >> 7)\n+    length = deltalen & 0x7F\n+    if length == 0x7F:\n+        length += read_CompressedInt()\n+    value = read_bytes(length)\n+    annex.append( (type, value) )\n+    last_type = type\n+\n+Rather than encoding the type directly, we encode the difference between\n+the previous type (initially 0), both minimising the encoding and ensuring\n+a canonical ordering for annex entries.",
      "path": "bip-annex.mediawiki",
      "position": 134,
      "original_position": 134,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "canonical up to reordering of entries of the same type.",
      "created_at": "2023-02-17T13:37:54Z",
      "updated_at": "2023-02-17T13:37:54Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1109822090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1109822090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1109970798",
      "pull_request_review_id": 1303652651,
      "id": 1109970798,
      "node_id": "PRRC_kwDOAN28mc5CKM9u",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== CompressedInt Integer Encoding ===\n+\n+Variable-length integers: bytes are a MSB base-128 encoding of the number.\n+The high bit in each byte signifies whether another digit follows. To make\n+sure the encoding is one-to-one, one is subtracted from all but the last digit.\n+Thus, the byte sequence a[] with length len, where all but the last byte\n+has bit 128 set, encodes the number:\n+\n+  (a[len-1] & 0x7F) + sum(i=1..len-1, 128^i*((a[len-i-1] & 0x7F)+1))\n+\n+Properties:\n+ * Very small (0-127: 1 byte, 128-16511: 2 bytes, 16512-2113663: 3 bytes)\n+ * Every integer has exactly one encoding\n+ * Encoding does not depend on size of original integer type\n+ * No redundancy: every (infinite) byte sequence corresponds to a list\n+   of encoded integers.\n+\n+Examples:\n+ * 0:         [0x00]  256:        [0x81 0x00]\n+ * 1:         [0x01]  16383:      [0xFE 0x7F]\n+ * 127:       [0x7F]  16384:      [0xFF 0x00]\n+ * 128:  [0x80 0x00]  16511:      [0xFF 0x7F]\n+ * 255:  [0x80 0x7F]  65535: [0x82 0xFE 0x7F]\n+ * 2^32:           [0x8E 0xFE 0xFE 0xFF 0x00]\n+\n+ read_CompressedInt():\n+     result = 0\n+     while not eof():\n+         b = read_bytes(1)\n+         if b < 128: return result + b\n+         result += b - 127\n+         result *= 128\n+     fail()\n+\n+ write_CompressedInt(n):\n+     out = []\n+     while True:\n+         out.append( n % 128 )\n+         if n <= 127: break\n+         n = (n // 128) - 1\n+     while len(out) > 1:\n+         write(out.pop() | 0x80)\n+     write(out.pop())\n+\n+=== Type-Length-Value Format ===\n+\n+The annex is defined as containing an ordered set of \"type, value\" pairs, where the type is a non-negative integer, and the value is a byte stream, and the pairs are listed in non-decreasing order by type.\n+\n+The annex is encoded as follows:\n+\n+ write(0x50)\n+ last_type = 0\n+ for type, value in annex:\n+    delta = type - last_type\n+    assert delta >= 0, \"annex must be ordered by type\"\n+    if length(value) < 127:\n+        write_CompressedInt(delta * 128 + length(value))\n+    else:\n+        write_CompressedInt(delta * 128 + 127)\n+        write_CompressedInt(length(value) - 127)\n+    write(value)\n+    last_type = type\n+\n+And conversely the annex may be decoded as follows:\n+\n+ assert read_bytes(1) == 0x50, \"annex must begin with annex marker\"\n+ last_type = 0\n+ annex = []\n+ while not eof():\n+    deltalen = read_CompressedInt()\n+    type = last_type + (deltalen >> 7)\n+    length = deltalen & 0x7F\n+    if length == 0x7F:\n+        length += read_CompressedInt()\n+    value = read_bytes(length)\n+    annex.append( (type, value) )\n+    last_type = type\n+\n+Rather than encoding the type directly, we encode the difference between\n+the previous type (initially 0), both minimising the encoding and ensuring\n+a canonical ordering for annex entries.",
      "path": "bip-annex.mediawiki",
      "position": 134,
      "original_position": 134,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1109822090,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The way I think about the annex is that as a total function from non-negative integers to vectors of byte strings.\r\n\r\nSo if you're mapping type 9 to the vector `[\"abc\", \"def\"]` then that is distinct from mapping type 9 to the vector `[\"def\", \"abc\"]`, and \"canonical\" here means there's exactly one encoding for each mapping.\r\n\r\nIn particular, I'm thinking that a script opcode to examine an annex entry might look like `9 PUSH_ANNEX 2 EQUALVERIFY` -- now you have \"abc\" at the top of the stack and \"def\" beneath it. In that case the annex entries of a single type cannot always be reordered without changing their semantics.\r\n\r\n(The current text says `The annex is defined as containing an ordered set of \"type, value\" pairs,` -- my thinking was that \"ordered set\" already captures the idea that reordering entries changes the semantics)",
      "created_at": "2023-02-17T15:24:14Z",
      "updated_at": "2023-02-17T15:24:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1109970798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1109970798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1113361257",
      "pull_request_review_id": 1307867860,
      "id": 1113361257,
      "node_id": "PRRC_kwDOAN28mc5CXItp",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)\n+  Title: Taproot Annex Format\n+  Author:\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 757967\n+  License: BSD-3-Clause\n+  Requires: 340, 341, 342\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a validation format for the taproot annex ([https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP341]).\n+It allows to extend the usual transaction fields with new data records allowing witness signatures to commit to them.\n+The data records can be subject to new validation rules.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+From the limited set of Bitcoin transaction fields (i.e nVersion, inputs, outputs, nLocktime, etc)\n+released in the early days of the network, few soft-forks occurred extending the validation semantic\n+of some transaction fields (e.g [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68])\n+or adding whole new field to solve the malleability issue (e.g [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]). \n+While a generic mechanism consensus to extend the block commmitments have been provisioned with BIP141, \n+there is lacking an equivalent generic mechanism to extend the transaction data fields.\n+\n+This proposal introduces a format to add new data fields in the Taproot annex. BIP341 mandates\n+that if a witness includes at least two elements and the first byte of the last element is 0x50,\n+this element is qualified as the annex. The remaining bytes semantics are defined by new validation\n+rules following a highly byte efficient Type-Length-Value format.\n+\n+Specific semantics for the new data fields can be introduced with future soft-forks to enable a range\n+of use-cases. For now there is only one nLocktime field in a transaction and all inputs must share\n+the same value. It could be possible to define per-input lock-time enabling aggregation of off-chain\n+protocols transactions (e.g [https://github.com/lightning/bolts/blob/master/03-transactions.md#htlc-timeout-and-htlc-success-transactions Lightning HTLC-timeout]).\n+A commitment to historical block hash could be also a new annex data field to enable replay protection\n+in case of persisting forks. Another use-case, a group of input-outputs could be bundled and signed\n+together to enable fee-bumping batching of off-chain protocols transactions. <ref> '''What if the\n+use-cases require access to the annex fields by Script operations ?''' A new PUSH_ANNEX_RECORD could be\n+defined to make accessible annex fields to Script operations. </ref> Beyond, the annex format aims to\n+be reusable across spends of SegWit versions.\n+\n+== Specification ==\n+\n+=== CompressedInt Integer Encoding ===\n+\n+Variable-length integers: bytes are a MSB base-128 encoding of the number.\n+The high bit in each byte signifies whether another digit follows. To make\n+sure the encoding is one-to-one, one is subtracted from all but the last digit.\n+Thus, the byte sequence a[] with length len, where all but the last byte\n+has bit 128 set, encodes the number:\n+\n+  (a[len-1] & 0x7F) + sum(i=1..len-1, 128^i*((a[len-i-1] & 0x7F)+1))\n+\n+Properties:\n+ * Very small (0-127: 1 byte, 128-16511: 2 bytes, 16512-2113663: 3 bytes)\n+ * Every integer has exactly one encoding\n+ * Encoding does not depend on size of original integer type\n+ * No redundancy: every (infinite) byte sequence corresponds to a list\n+   of encoded integers.\n+\n+Examples:\n+ * 0:         [0x00]  256:        [0x81 0x00]\n+ * 1:         [0x01]  16383:      [0xFE 0x7F]\n+ * 127:       [0x7F]  16384:      [0xFF 0x00]\n+ * 128:  [0x80 0x00]  16511:      [0xFF 0x7F]\n+ * 255:  [0x80 0x7F]  65535: [0x82 0xFE 0x7F]\n+ * 2^32:           [0x8E 0xFE 0xFE 0xFF 0x00]\n+\n+ read_CompressedInt():\n+     result = 0\n+     while not eof():\n+         b = read_bytes(1)\n+         if b < 128: return result + b\n+         result += b - 127\n+         result *= 128\n+     fail()\n+\n+ write_CompressedInt(n):\n+     out = []\n+     while True:\n+         out.append( n % 128 )\n+         if n <= 127: break\n+         n = (n // 128) - 1\n+     while len(out) > 1:\n+         write(out.pop() | 0x80)\n+     write(out.pop())\n+\n+=== Type-Length-Value Format ===\n+\n+The annex is defined as containing an ordered set of \"type, value\" pairs, where the type is a non-negative integer, and the value is a byte stream, and the pairs are listed in non-decreasing order by type.\n+\n+The annex is encoded as follows:\n+\n+ write(0x50)\n+ last_type = 0\n+ for type, value in annex:\n+    delta = type - last_type\n+    assert delta >= 0, \"annex must be ordered by type\"\n+    if length(value) < 127:\n+        write_CompressedInt(delta * 128 + length(value))\n+    else:\n+        write_CompressedInt(delta * 128 + 127)\n+        write_CompressedInt(length(value) - 127)\n+    write(value)\n+    last_type = type\n+\n+And conversely the annex may be decoded as follows:\n+\n+ assert read_bytes(1) == 0x50, \"annex must begin with annex marker\"\n+ last_type = 0\n+ annex = []\n+ while not eof():\n+    deltalen = read_CompressedInt()\n+    type = last_type + (deltalen >> 7)\n+    length = deltalen & 0x7F\n+    if length == 0x7F:\n+        length += read_CompressedInt()\n+    value = read_bytes(length)\n+    annex.append( (type, value) )\n+    last_type = type\n+\n+Rather than encoding the type directly, we encode the difference between\n+the previous type (initially 0), both minimising the encoding and ensuring\n+a canonical ordering for annex entries.\n+\n+If length(value) is between 0 and 126 bytes, then:\n+* entries with delta=0 are encoded in 1+length(value) bytes\n+* entries with delta=1..128 are encoded in 2+length(value) bytes\n+* entries with delta=129..16512 are encoded in 3+length(value) bytes\n+\n+The meaning of the value byte stream depends entirely on the `type` and may require further encoding/deconding as appropriate.\n+\n+=== Annex validation rules ===\n+\n+* If the annex does not decode successfully (that is, if read_CompressedInt() or read_bytes(length) fail due to reaching eof early); fail.\n+* If the annex type is invalid following the type validation semantics defined in future softforks, fail the validation.\n+\n+Additionally, care should be taken to not fail on potential overflow either in read_CompressedInt() or when cacluating `last_type + (deltalen >> 7)`.\n+\n+== Security ==\n+\n+== Rationale ==\n+\n+The annex should always be simple and fast to parse and verify (e.g only using information from the transaction, its utxos, and block headers;\n+only requiring a single pass to parse) and that any expensive computation (such as signature validation) should be left for script evaluation.\n+\n+<references />\n+\n+== Reference Implementation ==\n+\n+https://github.com/ariard/bitcoin/commits/2022-10-inquis-annex\n+\n+== Deployment ==\n+\n+\n+== Backwards compatibility ==",
      "path": "bip-annex.mediawiki",
      "position": 166,
      "original_position": 166,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can't be empty.",
      "created_at": "2023-02-21T17:18:08Z",
      "updated_at": "2023-02-21T17:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1113361257",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1113361257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1211576701",
      "pull_request_review_id": 1452970322,
      "id": 1211576701,
      "node_id": "PRRC_kwDOAN28mc5INzF9",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": null,
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought the taproot upgrade introduced the annex field to allow for future protocol expansions without requiring further soft forks? Doesn't the requirement of this bip for another soft fork to make the field useable defeat that purpose?",
      "created_at": "2023-05-31T11:44:15Z",
      "updated_at": "2023-05-31T11:44:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1211576701",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1211576701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1211695463",
      "pull_request_review_id": 1453178306,
      "id": 1211695463,
      "node_id": "PRRC_kwDOAN28mc5IOQFn",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The annex field gives space for future protocol expansions, but each expansion requires a soft fork in order to give it semantics.\r\n\r\nThat said, this particular format BIP in principle could alternatively be defined so that invalidly formatted annex fields do not invalidate the transaction, and instead just prevent the interpretation of the annex in this format.  There would be advantages and disadvantages to such an alternative definition.",
      "created_at": "2023-05-31T13:10:43Z",
      "updated_at": "2023-05-31T13:10:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1211695463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1211695463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1211733178",
      "pull_request_review_id": 1453242274,
      "id": 1211733178,
      "node_id": "PRRC_kwDOAN28mc5IOZS6",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There could also be a policy-only relaxation(as we've done in the inquisition repo), but the same tradeoffs apply",
      "created_at": "2023-05-31T13:36:56Z",
      "updated_at": "2023-05-31T13:36:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1211733178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1211733178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1212450746",
      "pull_request_review_id": 1454375744,
      "id": 1212450746,
      "node_id": "PRRC_kwDOAN28mc5IRIe6",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I thought the taproot upgrade introduced the annex field to allow for future protocol expansions without requiring further soft forks? Doesn't the requirement of this bip for another soft fork to make the field useable defeat that purpose?\r\n\r\nThe idea is to have a type-length-value record where new semantics can be assigned to each record without the record developers having to think about the consensus syntax issues (e.g what if another record use multi-bytes length) though the semantic issues will be still something to reason on.\r\n\r\nI still think even if you have a policy-only relaxation of the annex, we have to deploy a relaxation for each new record. ",
      "created_at": "2023-06-01T00:46:31Z",
      "updated_at": "2023-06-01T00:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1212450746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1212450746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1213409866",
      "pull_request_review_id": 1455882014,
      "id": 1213409866,
      "node_id": "PRRC_kwDOAN28mc5IUypK",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thinking about the most minimal change to make the annex useable on the short term. How about just defining in policy a way to express an 'unstructured' block of data for now? For example starting unstructured data with byte `0`, and then later define tlv or something else in a way that the first byte is never `0`?",
      "created_at": "2023-06-01T16:31:01Z",
      "updated_at": "2023-06-01T16:31:01Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1213409866",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1213409866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1213959017",
      "pull_request_review_id": 1456706485,
      "id": 1213959017,
      "node_id": "PRRC_kwDOAN28mc5IW4tp",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is probably also more efficient for the unstructured data case than tlv using a single record that still requires a length to be encoded.",
      "created_at": "2023-06-02T06:03:02Z",
      "updated_at": "2023-06-02T06:03:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1213959017",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1213959017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1214401910",
      "pull_request_review_id": 1457506495,
      "id": 1214401910,
      "node_id": "PRRC_kwDOAN28mc5IYk12",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To avoid any possibility of misunderstanding the suggestion: https://github.com/bitcoin/bitcoin/compare/master...joostjager:bitcoin:std-annex",
      "created_at": "2023-06-02T13:44:48Z",
      "updated_at": "2023-06-02T13:44:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1214401910",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1214401910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1220719425",
      "pull_request_review_id": 1466475188,
      "id": 1220719425,
      "node_id": "PRRC_kwDOAN28mc5IwrNB",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Thinking about the most minimal change to make the annex useable on the short term. How about just defining in policy a way to express an 'unstructured' block of data for now?\r\n\r\nLooking on current approach we would burn at least one type record (`0x00`) ? This is more efficient for unstructured data as effectively you save the encoded length. As an alternative we can versions the annex and have one of them being reserved for policy-only experimentations.\r\n\r\nConcerns with current approach if/when consensus semantic is assigned to the annex, all the policy-only annexes will become enforced in a different way, breaking use-cases. Protocol evolvability matters.",
      "created_at": "2023-06-07T02:21:38Z",
      "updated_at": "2023-06-07T02:21:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1220719425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1220719425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1220910704",
      "pull_request_review_id": 1466678938,
      "id": 1220910704,
      "node_id": "PRRC_kwDOAN28mc5IxZ5w",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unstructured data has a lot of uses. With nothing in the annex having consensus meaning yet, these are also the only uses for now. I think it is worth the burning of that one record.\r\n\r\nWhether you'd interpret the `0` byte as a version or not is something to define later I think? You can either define other versions with different formats, or map tlv straight onto the non-`0`-starting remainder of the data space.\r\n\r\nAlso linking https://github.com/bitcoin/bitcoin/pull/24007 as a potential way to deal with the coinjoin problem described in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021736.html.",
      "created_at": "2023-06-07T06:09:54Z",
      "updated_at": "2023-06-07T06:31:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1220910704",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1220910704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1221509030",
      "pull_request_review_id": 1467529666,
      "id": 1221509030,
      "node_id": "PRRC_kwDOAN28mc5Izr-m",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see why you'd burn anything rather than just adopt the format already described in this PR and dedicate tag `0` to unstructured data (as done in [the inquisition PR](https://github.com/bitcoin-inquisition/bitcoin/pull/22)). In particular that answers two questions: how to have multiple data items in a single input (eg \"ord\", \"image/jpeg\", \"[the jpeg]\"), and how to use structured data / data with consensus meaning in future (use a different tag/have the first compressed int be multiple bytes).\r\n\r\nTo put `[\"ord\", \"text/plain;charset=utf8\", \"Hello, world\"]` in the annex via the current proposal here, you'd encode:\r\n\r\n```\r\n   50  - annex\r\n   03  - type 0, length 3\r\n   6f7264 - \"ord\"\r\n   17 - type 0, length 23\r\n   746578742f706c61696e3b636861727365743d75746638 - text/plain;...\r\n   0c - type 0, length 12\r\n   48656c6c6f2c20776f726c64 - \"Hello, world\"\r\n```\r\n\r\nFor data longer than 126 bytes, you'd prefix it with `7f` then the \"CompressedInt\" encoding of its length minus 127, eg `7f96e471` for 390,000 (encoded as 127 then 389873), and then you'd just include the 390kB of data directly. That's a total overhead of 13 witness bytes (3 bytes for the total annex witness size, 1 byte for the annex tag, 4 bytes for \"ord\" and its length, 5 bytes for the lengths of the mime type and data).",
      "created_at": "2023-06-07T12:29:36Z",
      "updated_at": "2023-06-07T12:29:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1221509030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1221509030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1221528064",
      "pull_request_review_id": 1467559325,
      "id": 1221528064,
      "node_id": "PRRC_kwDOAN28mc5IzwoA",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For large amounts of data, the overhead is indeed small. But there might be current or future use cases that only require smaller bits of unstructured data for which the overhead weighs more heavily. EDIT: For <127 bytes of unstructured data there is no overhead indeed in this proposal, so agree that this is hardly an argument.\r\n\r\nOther than that I think tlv is great. I proposed `0`-prefix for unstructured data to keep things as simple as possible initially without compromising future upgradeability, to avoid a potentially lengthy process to get to a standard for tlv.",
      "created_at": "2023-06-07T12:44:20Z",
      "updated_at": "2023-06-07T12:59:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1221528064",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1221528064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1222949216",
      "pull_request_review_id": 1469766719,
      "id": 1222949216,
      "node_id": "PRRC_kwDOAN28mc5I5Llg",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I detailed another format that would optimize the unstructured annex data case more in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021756.html\r\n\r\nIn short: any annex is considered unstructured and does not incur any overhead at all, unless the annex starts with a magic byte which is to be repeated for unstructured data. Other values of the second byte are reserved for future extensions.",
      "created_at": "2023-06-08T12:08:17Z",
      "updated_at": "2023-06-08T12:08:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1222949216",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1222949216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1223685388",
      "pull_request_review_id": 1470972201,
      "id": 1223685388,
      "node_id": "PRRC_kwDOAN28mc5I7_UM",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Other than that I think tlv is great. I proposed `0`-prefix for unstructured data to keep things as simple as possible initially without compromising future upgradeability, to avoid a potentially lengthy process to get to a standard for tlv.\r\n\r\nIf you don't like lengthy processes, don't extend them by proposing unnecessary alternatives when there's already a workable proposal?\r\n\r\nCompared to this PR, what you propose adds overhead for encoding data that has consensus meaning, or where multiple items of data need to be included.",
      "created_at": "2023-06-09T00:40:12Z",
      "updated_at": "2023-06-09T00:40:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1223685388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1223685388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1223891100",
      "pull_request_review_id": 1471301727,
      "id": 1223891100,
      "node_id": "PRRC_kwDOAN28mc5I8xic",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">Compared to this PR, what you propose adds overhead for encoding data that has consensus meaning, or where multiple items of data need to be included.\r\n\r\nIt indeed depends on whether you want to space-optimize for structured or for unstructured data.\r\n\r\n>If you don't like lengthy processes, don't extend them by proposing unnecessary alternatives when there's already a workable proposal?\r\n\r\nI think it is important to explore alternatives. It maps out the design space and shows the trade-offs, which also exist in the case of tlv. Tlv isn't strictly better.\r\n\r\nA \"workable\" proposal doesn't necessarily mean that it won't need to go through a lengthy process still. In my experience, starting with a simpler alternative can often expedite things and depending on future usage patterns it may even be the optimal choice.\r\n\r\nMost important for me though is that the annex becomes usable in some form regardless of the exact space requirements. If you're saying that the tlv proposal can easily be guided through the process and enabled in policy for the next release, it's all good for me.",
      "created_at": "2023-06-09T06:23:12Z",
      "updated_at": "2023-06-09T06:23:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1223891100",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1223891100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1224906986",
      "pull_request_review_id": 1473199150,
      "id": 1224906986,
      "node_id": "PRRC_kwDOAN28mc5JApjq",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> For large amounts of data, the overhead is indeed small. But there might be current or future use cases that only require smaller bits of unstructured data for which the overhead weighs more heavily. EDIT: For <127 bytes of unstructured data there is no overhead indeed in this proposal, so agree that this is hardly an argument.\r\n\r\nIf you have users leveraging smaller bits of unstructured data who cannot afford the TLV record bytes fee overhead cost, I think the economically rational position is to design a L2 system to uplift the unstructured data from on-chain to off-chain ?\r\n\r\nOf course there is the question if you can maintain the accountability and visibility properties that your use-case is looking for with a L2 system relying on private state.\r\n\r\n> It indeed depends on whether you want to space-optimize for structured or for unstructured data.\r\n\r\nOn the question of space-optimization, in my mind if the annex is used for economically space-sensitive use-case like channel factories or payment pools in the future, even few bytes of witness waste translates in raising the economic bar to afford access to those advanced Bitcoin payment systems. ",
      "created_at": "2023-06-10T00:08:13Z",
      "updated_at": "2023-06-10T00:08:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1224906986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1224906986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1225237745",
      "pull_request_review_id": 1473368308,
      "id": 1225237745,
      "node_id": "PRRC_kwDOAN28mc5JB6Tx",
      "diff_hunk": "@@ -0,0 +1,173 @@\n+<pre>\n+  BIP: XXX\n+  Layer: Consensus (soft fork)",
      "path": "bip-annex.mediawiki",
      "position": 3,
      "original_position": 3,
      "commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "original_commit_id": "9dc3f74b384f143b7f1bdad30dc0fe2529c8e63f",
      "in_reply_to_id": 1211576701,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think it is important to explore alternatives.\r\n\r\nIt's valuable to explore alternatives if they potentially offer benefits; but this doesn't -- it just makes one use case slightly cheaper and other uses slightly more expensive. The cost to exploring alternatives is that it delays the entire process of making a decision, which was what you were complaining about in the first place.",
      "created_at": "2023-06-10T09:34:15Z",
      "updated_at": "2023-06-10T09:34:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1381#discussion_r1225237745",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1225237745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1381"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3,
      "original_line": 3,
      "side": "RIGHT"
    }
  ]
}