{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1500",
    "id": 1536572316,
    "node_id": "PR_kwDOAN28mc5bljuc",
    "html_url": "https://github.com/bitcoin/bips/pull/1500",
    "diff_url": "https://github.com/bitcoin/bips/pull/1500.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1500.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1500/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/debd349e6181d949cbea0691fcc0d67b265b02a8",
    "number": 1500,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "BIP346: OP_TXHASH and OP_CHECKTXHASHVERIFY",
    "user": {
      "login": "stevenroose",
      "id": 853468,
      "node_id": "MDQ6VXNlcjg1MzQ2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevenroose",
      "html_url": "https://github.com/stevenroose",
      "followers_url": "https://api.github.com/users/stevenroose/followers",
      "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
      "organizations_url": "https://api.github.com/users/stevenroose/orgs",
      "repos_url": "https://api.github.com/users/stevenroose/repos",
      "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stevenroose/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "\r\n\r\n\r\n## Semantic changes\r\n\r\nI thought it might be valuable to keep track of actual semantic changes being made since the initial out-of-draft version.\r\n\r\n* 2023-12-19: Added relative indices for individual mode.\r\n\r\n\r\n\r\n## Implementations \r\n\r\n* A proposed implementation for Bitcoin Core is available here:\r\n  https://github.com/bitcoin/bitcoin/pull/29050\r\n* A proposed implementation for rust-bitcoin is available here:\r\n  https://github.com/rust-bitcoin/rust-bitcoin/pull/2275\r\n",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 6924377447,
        "node_id": "LA_kwDOAN28mc8AAAABnLmdZw",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/PR%20Author%20action%20required",
        "name": "PR Author action required",
        "description": "Needs updates, has unaddressed review comments, or is otherwise waiting for PR author",
        "color": "e99695",
        "default": false
      }
    ],
    "created_at": "2023-09-30T11:40:55Z",
    "updated_at": "2025-08-19T16:14:48Z",
    "mergeable": true,
    "mergeable_state": "unstable",
    "merged": false,
    "merge_commit_sha": "b5b2d54caa48cb33bae0493c8b94529ade29f39f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "stevenroose:txhash",
      "ref": "txhash",
      "sha": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 15035550,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTAzNTU1MA==",
        "name": "bips",
        "full_name": "stevenroose/bips",
        "owner": {
          "login": "stevenroose",
          "id": 853468,
          "node_id": "MDQ6VXNlcjg1MzQ2OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stevenroose",
          "html_url": "https://github.com/stevenroose",
          "followers_url": "https://api.github.com/users/stevenroose/followers",
          "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
          "organizations_url": "https://api.github.com/users/stevenroose/orgs",
          "repos_url": "https://api.github.com/users/stevenroose/repos",
          "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stevenroose/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/stevenroose/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/stevenroose/bips",
        "archive_url": "https://api.github.com/repos/stevenroose/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stevenroose/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stevenroose/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stevenroose/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stevenroose/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stevenroose/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stevenroose/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stevenroose/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stevenroose/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stevenroose/bips/contributors",
        "deployments_url": "https://api.github.com/repos/stevenroose/bips/deployments",
        "downloads_url": "https://api.github.com/repos/stevenroose/bips/downloads",
        "events_url": "https://api.github.com/repos/stevenroose/bips/events",
        "forks_url": "https://api.github.com/repos/stevenroose/bips/forks",
        "git_commits_url": "https://api.github.com/repos/stevenroose/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stevenroose/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stevenroose/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stevenroose/bips.git",
        "issue_comment_url": "https://api.github.com/repos/stevenroose/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stevenroose/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stevenroose/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stevenroose/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stevenroose/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stevenroose/bips/languages",
        "merges_url": "https://api.github.com/repos/stevenroose/bips/merges",
        "milestones_url": "https://api.github.com/repos/stevenroose/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stevenroose/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stevenroose/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stevenroose/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:stevenroose/bips.git",
        "stargazers_url": "https://api.github.com/repos/stevenroose/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/stevenroose/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stevenroose/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/stevenroose/bips/subscription",
        "tags_url": "https://api.github.com/repos/stevenroose/bips/tags",
        "teams_url": "https://api.github.com/repos/stevenroose/bips/teams",
        "trees_url": "https://api.github.com/repos/stevenroose/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stevenroose/bips.git",
        "hooks_url": "https://api.github.com/repos/stevenroose/bips/hooks",
        "svn_url": "https://github.com/stevenroose/bips",
        "homepage": "bitcoin.org",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 15868,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-14T15:57:03Z",
        "created_at": "2013-12-09T01:50:33Z",
        "updated_at": "2024-05-19T03:57:56Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "58ffd93812ff25e87d53d1f202fbb389fdfb85bb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5706,
        "stargazers_count": 10131,
        "watchers_count": 10131,
        "size": 16580,
        "default_branch": "master",
        "open_issues_count": 33,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-18T19:43:37Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-08-19T15:01:39Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 3332,
    "deletions": 0,
    "changed_files": 6,
    "commits": 1,
    "review_comments": 84,
    "comments": 9
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 10517205429,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAJy39G1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10517205429",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5b4092a8804762d1809c5d800045e190255793c1",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/5b4092a8804762d1809c5d800045e190255793c1",
      "created_at": "2023-09-30T11:44:01Z"
    },
    {
      "event": "reviewed",
      "id": 1691790241,
      "node_id": "PRR_kwDOAN28mc5k1quh",
      "url": null,
      "actor": null,
      "commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2023-10-23T06:35:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1691790241",
      "submitted_at": "2023-10-23T06:35:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "commented",
      "id": 1775541954,
      "node_id": "IC_kwDOAN28mc5p1J7C",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1775541954",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-23T16:11:38Z",
      "updated_at": "2023-10-23T16:11:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Alternatively, but slightly even more complicating the cases, since the first two fields (version, locktime), are not very valuable without anything else (especially since we have `OP_CLTV`), we could introduce four special-cased bytes to mimick other popular SIGHASH modes: 0x00, 0x01, 0x02 and 0x03. Though locktime might be useful with `OP_TX` at some point. So I would argue against that. Mimicking \"regular\" sighashes isn't super useful in the first place because any system that expects to use regular sighashes can use current regular schnorr keys.",
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-1775541954",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "mentioned",
      "id": 10749745486,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAKAvBlO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745486",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "subscribed",
      "id": 10749745493,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKAvBlV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745493",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "mentioned",
      "id": 10749745509,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAKAvBll",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745509",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "subscribed",
      "id": 10749745519,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKAvBlv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745519",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "mentioned",
      "id": 10749745526,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAKAvBl2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745526",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "subscribed",
      "id": 10749745536,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKAvBmA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745536",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "reviewed",
      "id": 1694118285,
      "node_id": "PRR_kwDOAN28mc5k-jGN",
      "url": null,
      "actor": null,
      "commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2023-10-24T06:41:07Z",
      "author_association": "NONE",
      "user": {
        "login": "sennhann29",
        "id": 139481458,
        "node_id": "U_kgDOCFBRcg",
        "avatar_url": "https://avatars.githubusercontent.com/u/139481458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sennhann29",
        "html_url": "https://github.com/sennhann29",
        "followers_url": "https://api.github.com/users/sennhann29/followers",
        "following_url": "https://api.github.com/users/sennhann29/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sennhann29/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sennhann29/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sennhann29/subscriptions",
        "organizations_url": "https://api.github.com/users/sennhann29/orgs",
        "repos_url": "https://api.github.com/users/sennhann29/repos",
        "events_url": "https://api.github.com/users/sennhann29/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sennhann29/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1694118285",
      "submitted_at": "2023-10-24T06:41:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "mentioned",
      "id": 10749961308,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAKAv2Rc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749961308",
      "actor": {
        "login": "sennhann29",
        "id": 139481458,
        "node_id": "U_kgDOCFBRcg",
        "avatar_url": "https://avatars.githubusercontent.com/u/139481458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sennhann29",
        "html_url": "https://github.com/sennhann29",
        "followers_url": "https://api.github.com/users/sennhann29/followers",
        "following_url": "https://api.github.com/users/sennhann29/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sennhann29/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sennhann29/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sennhann29/subscriptions",
        "organizations_url": "https://api.github.com/users/sennhann29/orgs",
        "repos_url": "https://api.github.com/users/sennhann29/repos",
        "events_url": "https://api.github.com/users/sennhann29/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sennhann29/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T07:05:02Z"
    },
    {
      "event": "subscribed",
      "id": 10749961323,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKAv2Rr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749961323",
      "actor": {
        "login": "sennhann29",
        "id": 139481458,
        "node_id": "U_kgDOCFBRcg",
        "avatar_url": "https://avatars.githubusercontent.com/u/139481458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sennhann29",
        "html_url": "https://github.com/sennhann29",
        "followers_url": "https://api.github.com/users/sennhann29/followers",
        "following_url": "https://api.github.com/users/sennhann29/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sennhann29/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sennhann29/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sennhann29/subscriptions",
        "organizations_url": "https://api.github.com/users/sennhann29/orgs",
        "repos_url": "https://api.github.com/users/sennhann29/repos",
        "events_url": "https://api.github.com/users/sennhann29/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sennhann29/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T07:05:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11207030082,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKb_bVC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11207030082",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "71073ff9a6873a73cfd752ef3de3ee9ff5e916f1",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/71073ff9a6873a73cfd752ef3de3ee9ff5e916f1",
      "created_at": "2023-12-11T08:42:37Z"
    },
    {
      "event": "ready_for_review",
      "id": 11207031471,
      "node_id": "RFRE_lADOAN28mc5ydFO8zwAAAAKb_bqv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11207031471",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T08:42:44Z"
    },
    {
      "event": "commented",
      "id": 1849566150,
      "node_id": "IC_kwDOAN28mc5uPiPG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1849566150",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T08:44:00Z",
      "updated_at": "2023-12-11T08:44:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "I just pushed an updated version of this BIP. It has a reference implementation that produces test vectors that are tested against an implementation for Bitcoin Core and for rust-bitcoin.\r\n\r\nI think it should be ready for review. I have one small last TODO in the specification related to txfs malleability.",
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-1849566150",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11207565144,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKcBd9Y",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11207565144",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4462135dfe9a5eca791a7b818804e3ea9760f8b9",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/4462135dfe9a5eca791a7b818804e3ea9760f8b9",
      "created_at": "2023-12-11T09:23:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11207801225,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKcCXmJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11207801225",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1724c354643c34d05d6fcfad6aeedb2fde886b22",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/1724c354643c34d05d6fcfad6aeedb2fde886b22",
      "created_at": "2023-12-11T09:42:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11208071729,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKcDZox",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11208071729",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8da98a1e95a09d643cccce2d284eb768f17b5687",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/8da98a1e95a09d643cccce2d284eb768f17b5687",
      "created_at": "2023-12-11T10:04:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265404031,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeGx_",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265404031",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7c5559d9e432ca55ed95826940bea15e79e079bb",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/7c5559d9e432ca55ed95826940bea15e79e079bb",
      "created_at": "2023-12-16T09:15:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265412034,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeIvC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265412034",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "07955817df4e4a3bb497915421165ae8696e9379",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/07955817df4e4a3bb497915421165ae8696e9379",
      "created_at": "2023-12-16T09:20:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265419086,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeKdO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265419086",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5ca3d1d3278202931de9bbe80c66e247c0edc17b",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/5ca3d1d3278202931de9bbe80c66e247c0edc17b",
      "created_at": "2023-12-16T09:25:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265422468,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeLSE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265422468",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "330d9c1490999d9271df98e4f5e7c279b8261d40",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/330d9c1490999d9271df98e4f5e7c279b8261d40",
      "created_at": "2023-12-16T09:26:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265454001,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeS-x",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265454001",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "16dd4551574e53e5d936c7f590445165be3186f6",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/16dd4551574e53e5d936c7f590445165be3186f6",
      "created_at": "2023-12-16T09:51:53Z"
    },
    {
      "event": "subscribed",
      "id": 11266915218,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKfj3uS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11266915218",
      "actor": {
        "login": "sethforprivacy",
        "id": 40500387,
        "node_id": "MDQ6VXNlcjQwNTAwMzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40500387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sethforprivacy",
        "html_url": "https://github.com/sethforprivacy",
        "followers_url": "https://api.github.com/users/sethforprivacy/followers",
        "following_url": "https://api.github.com/users/sethforprivacy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sethforprivacy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sethforprivacy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sethforprivacy/subscriptions",
        "organizations_url": "https://api.github.com/users/sethforprivacy/orgs",
        "repos_url": "https://api.github.com/users/sethforprivacy/repos",
        "events_url": "https://api.github.com/users/sethforprivacy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sethforprivacy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-17T00:38:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11289585570,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKg6Wei",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11289585570",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/245c0b96463620a69a73a402f92987e8a52d8eed",
      "created_at": "2023-12-19T13:16:20Z"
    },
    {
      "event": "reviewed",
      "id": 1796550166,
      "node_id": "PRR_kwDOAN28mc5rFS4W",
      "url": null,
      "actor": null,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-01-16T15:55:17Z",
      "author_association": "MEMBER",
      "body": "Missing a section on backward compatibility",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1796550166",
      "submitted_at": "2023-12-26T19:23:14Z",
      "state": "DISMISSED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "reviewed",
      "id": 1799874836,
      "node_id": "PRR_kwDOAN28mc5rR-kU",
      "url": null,
      "actor": null,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-01-01T23:31:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for the delay!  I've finally found a round tuit, and have performed a more detailed review.",
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1799874836",
      "submitted_at": "2024-01-01T23:31:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "reviewed",
      "id": 1804049526,
      "node_id": "PRR_kwDOAN28mc5rh5x2",
      "url": null,
      "actor": null,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-01-04T12:36:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "halseth",
        "id": 3765732,
        "node_id": "MDQ6VXNlcjM3NjU3MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3765732?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/halseth",
        "html_url": "https://github.com/halseth",
        "followers_url": "https://api.github.com/users/halseth/followers",
        "following_url": "https://api.github.com/users/halseth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/halseth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/halseth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/halseth/subscriptions",
        "organizations_url": "https://api.github.com/users/halseth/orgs",
        "repos_url": "https://api.github.com/users/halseth/repos",
        "events_url": "https://api.github.com/users/halseth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/halseth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1804049526",
      "submitted_at": "2024-01-04T12:36:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "comment_deleted",
      "id": 11954228882,
      "node_id": "CDE_lADOAN28mc5ydFO8zwAAAALIhw6S",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11954228882",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T16:26:10Z"
    },
    {
      "event": "reviewed",
      "id": 1926615925,
      "node_id": "PRR_kwDOAN28mc5y1dN1",
      "url": null,
      "actor": null,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-03-10T18:06:58Z",
      "author_association": "NONE",
      "user": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1926615925",
      "submitted_at": "2024-03-10T18:06:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12274305771,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAALbmwrr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12274305771",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "52df2b8bf8f5ebf03723c0466874e2c14f8e9e13",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/52df2b8bf8f5ebf03723c0466874e2c14f8e9e13",
      "created_at": "2024-03-27T23:45:24Z"
    },
    {
      "event": "labeled",
      "id": 12568631693,
      "node_id": "LE_lADOAN28mc5ydFO8zwAAAALtJhmN",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12568631693",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-23T03:39:37Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2075518357,
      "node_id": "IC_kwDOAN28mc57teWV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2075518357",
      "actor": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T17:54:11Z",
      "updated_at": "2024-04-24T17:54:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Assigned BIP 346. ",
      "user": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-2075518357",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "labeled",
      "id": 12746715101,
      "node_id": "LE_lADOAN28mc5ydFO8zwAAAAL3w2_d",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12746715101",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T16:50:44Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "reviewed",
      "id": 2046171374,
      "node_id": "PRR_kwDOAN28mc559hju",
      "url": null,
      "actor": null,
      "commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-05-08T16:55:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "There seem to be a lot of unresolved comments in this PR, and the document appears to still be missing the Backwards Compatibility section. Please resolve existing review comments and let us know when this is ready for an editor review",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-2046171374",
      "submitted_at": "2024-05-08T16:55:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "reviewed",
      "id": 2069281021,
      "node_id": "PRR_kwDOAN28mc57Vrj9",
      "url": null,
      "actor": null,
      "commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-05-21T18:02:21Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "arminsabouri",
        "id": 24356537,
        "node_id": "MDQ6VXNlcjI0MzU2NTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24356537?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arminsabouri",
        "html_url": "https://github.com/arminsabouri",
        "followers_url": "https://api.github.com/users/arminsabouri/followers",
        "following_url": "https://api.github.com/users/arminsabouri/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arminsabouri/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arminsabouri/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arminsabouri/subscriptions",
        "organizations_url": "https://api.github.com/users/arminsabouri/orgs",
        "repos_url": "https://api.github.com/users/arminsabouri/repos",
        "events_url": "https://api.github.com/users/arminsabouri/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arminsabouri/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-2069281021",
      "submitted_at": "2024-05-21T18:02:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "reviewed",
      "id": 2072251083,
      "node_id": "PRR_kwDOAN28mc57hArL",
      "url": null,
      "actor": null,
      "commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-05-22T20:33:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Did a first pass. Big Concept ACK from me. I have some notes about doc organization and plan to do another pass really drilling into the details soon.",
      "user": {
        "login": "ProofOfKeags",
        "id": 4033651,
        "node_id": "MDQ6VXNlcjQwMzM2NTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4033651?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ProofOfKeags",
        "html_url": "https://github.com/ProofOfKeags",
        "followers_url": "https://api.github.com/users/ProofOfKeags/followers",
        "following_url": "https://api.github.com/users/ProofOfKeags/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ProofOfKeags/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ProofOfKeags/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ProofOfKeags/subscriptions",
        "organizations_url": "https://api.github.com/users/ProofOfKeags/orgs",
        "repos_url": "https://api.github.com/users/ProofOfKeags/repos",
        "events_url": "https://api.github.com/users/ProofOfKeags/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ProofOfKeags/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-2072251083",
      "submitted_at": "2024-05-22T20:33:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "commented",
      "id": 2477350715,
      "node_id": "IC_kwDOAN28mc6TqV87",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2477350715",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T20:29:32Z",
      "updated_at": "2024-11-14T20:29:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey @stevenroose, this pull request has had unaddressed review for over six months. Are you still working on this? If not, is there someone else that wants to pick this project up?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-2477350715",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "mentioned",
      "id": 15304060899,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAOQMW_j",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15304060899",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T20:29:34Z"
    },
    {
      "event": "subscribed",
      "id": 15304060913,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAOQMW_x",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15304060913",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T20:29:34Z"
    },
    {
      "event": "commented",
      "id": 2549754577,
      "node_id": "IC_kwDOAN28mc6X-irR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2549754577",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:14:32Z",
      "updated_at": "2024-12-17T22:14:32Z",
      "author_association": "MEMBER",
      "body": "> Hey @stevenroose, this pull request has had unaddressed review for over six months. Are you still working on this? If not, is there someone else that wants to pick this project up?\r\n\r\npinging @stevenroose",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-2549754577",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "mentioned",
      "id": 15693922236,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAOnbj-8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15693922236",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:14:33Z"
    },
    {
      "event": "subscribed",
      "id": 15693922247,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAOnbj_H",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15693922247",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:14:33Z"
    },
    {
      "event": "renamed",
      "id": 15693927335,
      "node_id": "RTE_lADOAN28mc5ydFO8zwAAAAOnblOn",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15693927335",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:15:02Z",
      "rename": {
        "from": "Add BIP for OP_TXHASH and OP_CHECKTXHASHVERIFY",
        "to": "BIP draft: OP_TXHASH and OP_CHECKTXHASHVERIFY"
      }
    },
    {
      "event": "renamed",
      "id": 15766563496,
      "node_id": "RTE_lADOAN28mc5ydFO8zwAAAAOrwqqo",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15766563496",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-26T16:01:57Z",
      "rename": {
        "from": "BIP draft: OP_TXHASH and OP_CHECKTXHASHVERIFY",
        "to": "BIP346: OP_TXHASH and OP_CHECKTXHASHVERIFY"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15925155054,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAO1NpTu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15925155054",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "da2154e9fc63dd4802eeef4af96ed71fbbe5358d",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/da2154e9fc63dd4802eeef4af96ed71fbbe5358d",
      "created_at": "2025-01-14T15:31:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15925437988,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAO1OuYk",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15925437988",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fd6b0d2e3e47cb53930d40d48dcf24a342345c92",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/fd6b0d2e3e47cb53930d40d48dcf24a342345c92",
      "created_at": "2025-01-14T15:46:40Z"
    },
    {
      "event": "commented",
      "id": 2590308741,
      "node_id": "IC_kwDOAN28mc6aZPmF",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2590308741",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-14T15:50:07Z",
      "updated_at": "2025-01-14T15:50:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey all, sorry for the long delay. I addressed some of the above comments, and also made some changes to the BIP, together with @reardencode. Changes are the following:\r\n\r\n- slightly modified the TEMPLATE special case to more correctly be equivalent to CTV \r\n- removed the 0x00 ALL special case, instead\r\n- add a special 1-byte version of the TxFieldSelector, that maps directly into a full TxFieldSelector\r\n  - this 1-byte txfs can directly emulate APO, APOAS and all currently existing sighashes, as outlined in the bip text\r\n- added wording for the bip to be an upgrade path of an existing CTV deployment",
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-2590308741",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "mentioned",
      "id": 15925498606,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAO1O9Lu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15925498606",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-14T15:50:08Z"
    },
    {
      "event": "subscribed",
      "id": 15925498622,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAO1O9L-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15925498622",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-14T15:50:08Z"
    },
    {
      "event": "unlabeled",
      "id": 15925551566,
      "node_id": "UNLE_lADOAN28mc5ydFO8zwAAAAO1PKHO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15925551566",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-14T15:53:34Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRlYmQzNDllNjE4MWQ5NDljYmVhMDY5MWZjYzBkNjdiMjY1YjAyYTg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/debd349e6181d949cbea0691fcc0d67b265b02a8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/debd349e6181d949cbea0691fcc0d67b265b02a8",
      "tree": {
        "sha": "754c3469f6ae7a0ad45514c251e42878367aa78f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/754c3469f6ae7a0ad45514c251e42878367aa78f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 754c3469f6ae7a0ad45514c251e42878367aa78f\nparent 58ffd93812ff25e87d53d1f202fbb389fdfb85bb\nauthor Steven Roose <steven@stevenroose.org> 1694013395 +0100\ncommitter Steven Roose <steven@stevenroose.org> 1736870214 +0000\n\nAdd BIP for OP_TXHASH and OP_CHECKTXHASHVERIFY\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3hDoJimoytVbcAuXLyqI1/jWjocFAmeGiUYACgkQLyqI1/jW\njocAmw/8CWfPs+QV3DfOLgiFT2J1Ctq6OahVFzLVbee9ADPjw+7bK7+5/KPBTw8R\n6rZxEMExDQnkElVrLfC6SKWzsxH272WFawRObFwU33wVLD+3ize0ETT2V03cNAib\nA/sItRESqf/h6vIQuoNypO3Bv2VByDkZfIa7aCh1kZ3DiV7QunnpHBx+EX7bb8tC\nbhwu1g8xyI3Y+TrvlwY/x74IMr63HrbA0o44Z5TJUZekU/2dwuoQV5jGeWQYnUHv\nJ02SCicKYZjKQXFXmpC5/bmFgBATe19Uidbjl5d1eBOuI7UuZpPrwOBJv7ukryW0\n2qn0RHisfjMUqZ7kdtMsdSer3mVb/WB8Bil1E7DOBiAll6+YCKNgl9D1M+Rh1LIS\nQhTQ9e6Eq22OiCMtesoXP562Gg/qaV87yhQ27fSxJquRDLrnCXGgSRj/Zh/8XEaD\n6zvxy135SDS0ww/lKD1f+UMkHsf6SQQ3bFf7aiv81Uj3ELP/SvDNlZ8seGZPecnt\nFdKfwvVWHjWLO1iv74BXLJ5BeRBdqCaaXAP/Idlz6T0hmaj/C8oq32CV+eolhFMm\n6k4BqXen/JWcx7q5ygm0QtvN8JYS074YCTcLt2kFQxWo856LfIYGXtNyaW5rbp0A\n/tc5NV48jk1XvYsho9gG4fP9w5jo1pdt7SVUImF4WqJc9su3oPM=\n=sRhA\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/58ffd93812ff25e87d53d1f202fbb389fdfb85bb",
          "sha": "58ffd93812ff25e87d53d1f202fbb389fdfb85bb",
          "html_url": "https://github.com/bitcoin/bips/commit/58ffd93812ff25e87d53d1f202fbb389fdfb85bb"
        }
      ],
      "message": "Add BIP for OP_TXHASH and OP_CHECKTXHASHVERIFY",
      "committer": {
        "name": "Steven Roose",
        "email": "steven@stevenroose.org",
        "date": "2025-01-14T15:56:54Z"
      },
      "author": {
        "name": "Steven Roose",
        "email": "steven@stevenroose.org",
        "date": "2023-09-06T15:16:35Z"
      },
      "sha": "debd349e6181d949cbea0691fcc0d67b265b02a8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15925608421,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAO1PX_l",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15925608421",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "commit_url": "https://api.github.com/repos/stevenroose/bips/commits/debd349e6181d949cbea0691fcc0d67b265b02a8",
      "created_at": "2025-01-14T15:57:05Z"
    },
    {
      "event": "review_dismissed",
      "id": 15963958838,
      "node_id": "RDE_lADOAN28mc5ydFO8zwAAAAO3hq42",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15963958838",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T15:55:17Z",
      "dismissed_review": {
        "state": "CHANGES_REQUESTED",
        "review_id": 1796550166,
        "dismissal_message": "The requested Backward Compatibility section has been added",
        "dismissal_commit_id": null
      }
    },
    {
      "event": "reviewed",
      "id": 2553115630,
      "node_id": "PRR_kwDOAN28mc6YLXPu",
      "url": null,
      "actor": null,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-01-16T16:50:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "This seems to be pretty far along.\r\nThere are a few minor formatting issues which are described in line.\r\n\r\nPlease add the required Copyright section and consider renaming the \"Summary\" section \"Specification\".",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-2553115630",
      "submitted_at": "2025-01-16T16:50:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "labeled",
      "id": 16215705361,
      "node_id": "LE_lADOAN28mc5ydFO8zwAAAAPGiAcR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16215705361",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-06T20:29:06Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "reviewed",
      "id": 2678889563,
      "node_id": "PRR_kwDOAN28mc6frJxb",
      "url": null,
      "actor": null,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-03-12T15:10:36Z",
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-2678889563",
      "submitted_at": "2025-03-12T15:10:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "reviewed",
      "id": 2679897473,
      "node_id": "PRR_kwDOAN28mc6fu_2B",
      "url": null,
      "actor": null,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-03-12T21:19:44Z",
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-2679897473",
      "submitted_at": "2025-03-12T21:19:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "commented",
      "id": 2719160722,
      "node_id": "IC_kwDOAN28mc6iExmS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2719160722",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-12T21:21:23Z",
      "updated_at": "2025-03-12T21:21:23Z",
      "author_association": "MEMBER",
      "body": "@stevenroose mind updating this draft per the review feedback (thanks!)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-2719160722",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "mentioned",
      "id": 16721342917,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAPkq3HF",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16721342917",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-12T21:21:25Z"
    },
    {
      "event": "subscribed",
      "id": 16721342934,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAPkq3HW",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16721342934",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-12T21:21:25Z"
    },
    {
      "event": "reviewed",
      "id": 2699694176,
      "node_id": "PRR_kwDOAN28mc6g6hBg",
      "url": null,
      "actor": null,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-03-19T18:46:40Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-2699694176",
      "submitted_at": "2025-03-19T18:46:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "unsubscribed",
      "id": 17882894684,
      "node_id": "UE_lADOAN28mc5ydFO8zwAAAAQp51Fc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17882894684",
      "actor": {
        "login": "Leenuus",
        "id": 133017480,
        "node_id": "U_kgDOB-2viA",
        "avatar_url": "https://avatars.githubusercontent.com/u/133017480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Leenuus",
        "html_url": "https://github.com/Leenuus",
        "followers_url": "https://api.github.com/users/Leenuus/followers",
        "following_url": "https://api.github.com/users/Leenuus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Leenuus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Leenuus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Leenuus/subscriptions",
        "organizations_url": "https://api.github.com/users/Leenuus/orgs",
        "repos_url": "https://api.github.com/users/Leenuus/repos",
        "events_url": "https://api.github.com/users/Leenuus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Leenuus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T10:10:20Z"
    },
    {
      "event": "commented",
      "id": 2992998077,
      "node_id": "IC_kwDOAN28mc6yZYa9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2992998077",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T21:44:02Z",
      "updated_at": "2025-06-20T21:44:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey @stevenroose, this PR has had unaddressed review for over five months. The document seems close to ready for being merged in Draft status. Could you provide an update on what you expect the next steps to be here? Are you still planning to finish this? Would you like someone else to help?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-2992998077",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "mentioned",
      "id": 18253936919,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAARABPkX",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18253936919",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T21:44:06Z"
    },
    {
      "event": "subscribed",
      "id": 18253936922,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAARABPka",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18253936922",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T21:44:06Z"
    },
    {
      "event": "unsubscribed",
      "id": 18254878891,
      "node_id": "UE_lADOAN28mc5ydFO8zwAAAARAE1ir",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18254878891",
      "actor": {
        "login": "0xf0xx0",
        "id": 33764485,
        "node_id": "MDQ6VXNlcjMzNzY0NDg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/33764485?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xf0xx0",
        "html_url": "https://github.com/0xf0xx0",
        "followers_url": "https://api.github.com/users/0xf0xx0/followers",
        "following_url": "https://api.github.com/users/0xf0xx0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xf0xx0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xf0xx0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xf0xx0/subscriptions",
        "organizations_url": "https://api.github.com/users/0xf0xx0/orgs",
        "repos_url": "https://api.github.com/users/0xf0xx0/repos",
        "events_url": "https://api.github.com/users/0xf0xx0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xf0xx0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-21T00:41:23Z"
    },
    {
      "event": "commented",
      "id": 3201381583,
      "node_id": "IC_kwDOAN28mc6-0TTP",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3201381583",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T16:14:48Z",
      "updated_at": "2025-08-19T16:14:48Z",
      "author_association": "MEMBER",
      "body": "Hi @stevenroose, are you still planning to update/finish this BIP draft? Would it be worth bringing in someone to help?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-3201381583",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "mentioned",
      "id": 19228182502,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAR6Fsfm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19228182502",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T16:14:50Z"
    },
    {
      "event": "subscribed",
      "id": 19228182519,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAR6Fsf3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19228182519",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T16:14:50Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368181858",
      "pull_request_review_id": 1691790241,
      "id": 1368181858,
      "node_id": "PRRC_kwDOAN28mc5RjMxi",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 73,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please provide symbolic names for all these.  And then use them instead of 0xff|0xf6|0xbf|0xbf etc.  More verbose, but much clearer.",
      "created_at": "2023-10-23T06:29:52Z",
      "updated_at": "2023-10-23T06:35:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1368181858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368181858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368182751",
      "pull_request_review_id": 1691790241,
      "id": 1368182751,
      "node_id": "PRRC_kwDOAN28mc5RjM_f",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs\n+\n+* The last (highest) bit of the first byte, we will call the \"control bit\", and\n+  it can be used to control the behavior of the opcode. For OP_TXHASH and\n+  OP_CHECKTXHASHVERIFY, the control bit is used to determine whether the\n+  TxFieldSelector itself has to be included in the resulting hash. (For\n+  potential other uses of the TxFieldSelector (like a hypothetical OP_TX), this\n+  bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    1. prevouts\n+    2. sequences\n+    3. scriptSigs\n+    4. prevout scriptPubkeys\n+    5. prevout values\n+    6. taproot annexes (only in case of tapscript spend)\n+  * Specifying which fields of the outputs will be selected:\n+    7. scriptPubkeys\n+    8. values\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit indicates whether the \"number of in-/outputs\" should be\n+    committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    - 0x00 means \"no in/outputs\" (hence only the number of them as 0x80)\n+    - 0x40 means \"select only the in/output of the current input index\".\n+    - 0x3f means \"select all in/outputs\".\n+  * The second highest bit is the \"specification mode\":\n+    - Set to 0 it means \"prefix mode\".\n+    - Set to 1 it means \"individual mode\".\n+  * The third highest bit is used to indicate the \"index size\", i.e. the number\n+    of bytes will be used to represent in/output indices.\n+  * In \"prefix mode\",\n+    - With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    - With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 5 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select.\n+    - With \"index size\" set to 0, interpret the following `n` individual bytes\n+      as the indices of an individual in/outputs to select.\n+    - With \"index size\" set to 1, interpret the next `n` pairs of two bytes as\n+      the indices of individual in/outputs to select.\n+\n+\n+The function ValidateTxFieldSelector has the following semantics, it\n+effectively checks that the TxFieldSelector value is valid according to\n+above rules:\n+\n+* If there are 0 bytes, it becomes the default of 0xff|0xf6|0xff|0xff; succeed.\n+* If the first byte is exactly 0x00, the Script execution succeeds immediately.\n+  //TODO(stevenroose) is this valuable? it's the only \"exception case\" that\n+  could potentially be hooked for some future upgrade",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 130,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why not allow extra bytes at the end to mean OP_SUCCESS?",
      "created_at": "2023-10-23T06:31:09Z",
      "updated_at": "2023-10-23T06:35:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1368182751",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368182751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368904131",
      "pull_request_review_id": 1692925870,
      "id": 1368904131,
      "node_id": "PRRC_kwDOAN28mc5Rl9HD",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 73,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": 1368181858,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah that's why I did the textual clarification. In the ref impl I have constants for them. I could add them into the BIP text as well, makes sense.",
      "created_at": "2023-10-23T15:50:58Z",
      "updated_at": "2023-10-23T15:50:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1368904131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368904131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368912187",
      "pull_request_review_id": 1692939088,
      "id": 1368912187,
      "node_id": "PRRC_kwDOAN28mc5Rl_E7",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs\n+\n+* The last (highest) bit of the first byte, we will call the \"control bit\", and\n+  it can be used to control the behavior of the opcode. For OP_TXHASH and\n+  OP_CHECKTXHASHVERIFY, the control bit is used to determine whether the\n+  TxFieldSelector itself has to be included in the resulting hash. (For\n+  potential other uses of the TxFieldSelector (like a hypothetical OP_TX), this\n+  bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    1. prevouts\n+    2. sequences\n+    3. scriptSigs\n+    4. prevout scriptPubkeys\n+    5. prevout values\n+    6. taproot annexes (only in case of tapscript spend)\n+  * Specifying which fields of the outputs will be selected:\n+    7. scriptPubkeys\n+    8. values\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit indicates whether the \"number of in-/outputs\" should be\n+    committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    - 0x00 means \"no in/outputs\" (hence only the number of them as 0x80)\n+    - 0x40 means \"select only the in/output of the current input index\".\n+    - 0x3f means \"select all in/outputs\".\n+  * The second highest bit is the \"specification mode\":\n+    - Set to 0 it means \"prefix mode\".\n+    - Set to 1 it means \"individual mode\".\n+  * The third highest bit is used to indicate the \"index size\", i.e. the number\n+    of bytes will be used to represent in/output indices.\n+  * In \"prefix mode\",\n+    - With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    - With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 5 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select.\n+    - With \"index size\" set to 0, interpret the following `n` individual bytes\n+      as the indices of an individual in/outputs to select.\n+    - With \"index size\" set to 1, interpret the next `n` pairs of two bytes as\n+      the indices of individual in/outputs to select.\n+\n+\n+The function ValidateTxFieldSelector has the following semantics, it\n+effectively checks that the TxFieldSelector value is valid according to\n+above rules:\n+\n+* If there are 0 bytes, it becomes the default of 0xff|0xf6|0xff|0xff; succeed.\n+* If the first byte is exactly 0x00, the Script execution succeeds immediately.\n+  //TODO(stevenroose) is this valuable? it's the only \"exception case\" that\n+  could potentially be hooked for some future upgrade",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 130,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": 1368182751,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@roconnor-blockstream  has previously warned about non-trivial OP_SUCCESS semantics. Though the current SUCCESS semantics are \"any OP_SUCCESS opcode *occurring in the script* means SUCCESS\", but we could have different semantics that allow any opcode internally to trigger \"instant success\", but (1) that are very different semantics and will require entirely different code and (2) it becomes way harder to reason about.\r\n\r\nIIRC, @sanket1729 also noted that such SUCCESS semantics make reasoning about scripts for things like miniscript way harder.\r\n\r\nActually this BIP seems outdated, I have to push a small update. I decided to propose to make the `0x00` special case mean \"ALL\" to make this more ergonomic to use as a sighash together with CSFS. (\"ALL\" isn't valuable as a template check because it contains the prevout scriptPubkey which should contain the hash) Other suggestions welcome.",
      "created_at": "2023-10-23T15:57:30Z",
      "updated_at": "2023-10-23T15:57:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1368912187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368912187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1422168551",
      "pull_request_review_id": 1774660979,
      "id": 1422168551,
      "node_id": "PRRC_kwDOAN28mc5UxJHn",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 73,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": 1368181858,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added all the bit names to the BIP text.",
      "created_at": "2023-12-11T09:27:50Z",
      "updated_at": "2023-12-11T09:27:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1422168551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1422168551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439093730",
      "pull_request_review_id": 1799874836,
      "id": 1439093730,
      "node_id": "PRRC_kwDOAN28mc5VxtPi",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 31,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I realize it's traditional, but why are we adding new non-Taproot opcodes?  Is there a case where this is desirable?",
      "created_at": "2024-01-01T22:38:05Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439093730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439093730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094729",
      "pull_request_review_id": 1799874836,
      "id": 1439094729,
      "node_id": "PRRC_kwDOAN28mc5VxtfJ",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 71,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, \"would be useful if that were proposed which it isn't\".  I am skeptical of this magic value.\r\n\r\nWhile I understand Russell O'Connor's dislike of runtime OP_SUCCESS, it is a lesser evil here than this kind of guessing of future utility which will no doubt prove suboptimal when we get there.\r\n\r\nAnd for miniscript: sure, it will only generate and decode a push followed by TXHASH.  But there are other things it can't decode too, and that's OK.",
      "created_at": "2024-01-01T22:47:50Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439094729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094915",
      "pull_request_review_id": 1799874836,
      "id": 1439094915,
      "node_id": "PRRC_kwDOAN28mc5VxtiD",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 63,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You re-use this term TXFS_SPECIAL_TEMPLATE twice for different things, which is confusing.",
      "created_at": "2024-01-01T22:49:51Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439094915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094917",
      "pull_request_review_id": 1799874836,
      "id": 1439094917,
      "node_id": "PRRC_kwDOAN28mc5VxtiF",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 87,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `&nbsp;` HTML makes reading the markdown awkward, BTW.",
      "created_at": "2024-01-01T22:49:55Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439094917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 80,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439095106",
      "pull_request_review_id": 1799874836,
      "id": 1439095106,
      "node_id": "PRRC_kwDOAN28mc5VxtlC",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 94,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a footnote, at best, mentioning how this could be expanded for a new OP_TX.  But there's no reason to design for it now that I can see, except to leave a clear carve-out for future expansion.\r\n\r\nSo `TXFS_CONTROL` is a terrible name.  `TXFS_FIELD_SELECTOR` perhaps?",
      "created_at": "2024-01-01T22:52:44Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439095106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439095106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439096276",
      "pull_request_review_id": 1799874836,
      "id": 1439096276,
      "node_id": "PRRC_kwDOAN28mc5Vxt3U",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 118,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I'm following this correctly, the (non-special) TxFieldSelector format is, in bytes:\r\n\r\nCORE_SELECTOR [INOUT_SELECTOR] [IN_SELECTOR] [OUT_SELECTOR]\r\n\r\nIf `TXFS_INPUTS` is set in the CORE_SELECTOR, then INOUT_SELECTOR and IN_SELECTOR are present.  If `TXFS_OUTPUTS` is set in CORE_SELECTOR, then INOUT_SELECTOR and OUT_SELECTOR are present?\r\n",
      "created_at": "2024-01-01T23:00:57Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439096276",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439096276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439096337",
      "pull_request_review_id": 1799874836,
      "id": 1439096337,
      "node_id": "PRRC_kwDOAN28mc5Vxt4R",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 121,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not the remaining bits, since you haven't yet mentioned 0x40.",
      "created_at": "2024-01-01T23:01:34Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439096337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439096337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439098009",
      "pull_request_review_id": 1799874836,
      "id": 1439098009,
      "node_id": "PRRC_kwDOAN28mc5VxuSZ",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 161,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is incredibly complex, and seems to mismatch what I can see covenants being used for in practice.  I anticipate fees being high in future, such that people will do a reasonable amount of engineering to minimize their total footprint.  In particular, they will want to *add fees* after commitment, and want to *batch transactions* using stacking.\r\n\r\nThe first case implies you want to *exclude* a specific input and output, to allow for fees, or at least allow binding not to cover the final input/output.  The second case implies you want to mul/divide an input number to get the corresponding range of outputs.\r\n\r\nThe simplest case is a single input and output pair: a-la SIGHASH_SINGLE.  This both allows almost arbitrary fee inputs/outputs, and stacking.\r\n\r\nBut what if you want to bind a pair of inputs to one output?  Or a pair of outputs to one input?  Both seem reasonably common things to want to do (e.g. opening a dual-funded lightning channel, and closing a channel).\r\n\r\nThat means you need to be able to select outputs as \"current input index / 2\" or \"current input index * 2 and current input index * 2 + 1\".  Numbers other than 2 are possible but this is the most likely case (since, in order to stack, all txs must be of same input-output number form, and I consider 1 and 2 by far the most likely numbers here).",
      "created_at": "2024-01-01T23:17:19Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439098009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439098009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439098416",
      "pull_request_review_id": 1799874836,
      "id": 1439098416,
      "node_id": "PRRC_kwDOAN28mc5VxuYw",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.\n+\n+The TxFieldSelector is invalid when\n+* a byte is expected but missing\n+* additional unexpected bytes are present\n+* index size is set to 1 while not being necessary\n+* a leading number of individual index is selected out of bounds of the in/outputs\n+* individual indices are duplicated or not in increasing order\n+\n+These limitations are to avoid potential TxFieldSelector malleability. It is\n+however allowed to use leading mode where it could be \"all\". This\n+is important to allow for optional addition of extra inputs or outputs.\n+\n+//TODO(stevenroose) should we disallow individual that could be leading?\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 10. If this brings the budget below zero,",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 194,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This needs much more justification.  Why 10?  It has an implied cost of 2 already, since you have to use the opcode and a selector.    If it has to hash a lot, hasn't someone already paid that to make such a large transaction?",
      "created_at": "2024-01-01T23:21:25Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439098416",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439098416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439099495",
      "pull_request_review_id": 1799874836,
      "id": 1439099495,
      "node_id": "PRRC_kwDOAN28mc5Vxupn",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.\n+\n+The TxFieldSelector is invalid when\n+* a byte is expected but missing\n+* additional unexpected bytes are present\n+* index size is set to 1 while not being necessary\n+* a leading number of individual index is selected out of bounds of the in/outputs\n+* individual indices are duplicated or not in increasing order\n+\n+These limitations are to avoid potential TxFieldSelector malleability. It is\n+however allowed to use leading mode where it could be \"all\". This\n+is important to allow for optional addition of extra inputs or outputs.\n+\n+//TODO(stevenroose) should we disallow individual that could be leading?\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 10. If this brings the budget below zero,\n+  the script fails immediately.<br>The following considerations should be made:\n+  * All fields that can be of arbitrary size are cachable as TransactionHash always hashes their hashed values.\n+  * In \"individual mode\", a user can at most commit 32 inputs or outputs,\n+    which we don't consider excessive for potential repeated use.\n+  * In \"leading mode\", a caching strategy can be used where the SHA256 context\n+    is stored every N in/outputs so that multiple executions of the\n+    TransactionHash function can use the caches and only have to hash an\n+    additional N-1 items at most.\n+\n+\n+# Motivation\n+\n+This BIP specifies a basic transaction introspection primitive that is useful\n+to either reduce interactivity in multi-user protocols or to enforce some basic\n+constraints on transactions.\n+\n+Additionally, the constructions specified in this BIP can lay the groundwork for\n+some potential future upgrades:\n+* The TxFieldSelector construction would work well with a hypothetical opcode\n+  `OP_TX` that allows for directly introspecting the transaction by putting the\n+  fields selected on the stack instead of hashing them together.\n+* The TransactionHash obtained by `OP_TXHASH` can be combined with a\n+  hypothetical opcode `OP_CHECKSIGFROMSTACK` to effectively create an\n+  incredibly flexible signature hash, which would enable constructions like\n+  `SIGHASH_ANYPREVOUT`.\n+\n+## Comparing with some alternative proposals\n+\n+* This proposal strictly generalizes BIP-119's `OP_CHECKTEMPLATEVERIFY`, as the\n+  default mode of our TxFieldSelector is effectively the same (though not\n+  byte-for-byte identical) as what `OP_CTV` acomplishes, without costing any\n+  additional bytes. Additionally, using `OP_CHECKTXHASHVERIFY` allows for more\n+  flexibility which can help in the case for\n+  * enabling adding fees to a transaction without breaking a multi-tx protocol;\n+  * multi-user protocols where users are only concerned about their own inputs and outputs.\n+\n+* Constructions like `OP_IN_OUT_VALUE` used with `OP_EQUALVERIFY` can be\n+  emulated by two `OP_TXHASH` instances by using the TxFieldSelector to select\n+  a single input value first and a single output value second and enforcing\n+  equality on the hashes. Neither of these alternatives can be used to enforce\n+  small value differencials without the availability of 64-bit arithmetic in\n+  Script.\n+\n+* Like mentioned above, `SIGHASH_ANYPREVOUT` can be emulated using `OP_TXHASH`\n+  when combined with `OP_CHECKSIGFROMSTACK`: \n+  `<txfs> OP_TXHASH <pubkey> OP_CHECKSIGFROMSTACK` effectively emulates `SIGHASH_ANYPREVOUT`.\n+\n+\n+# Detailed Specification\n+\n+A reference implementation in Rust is provided attached as part of this BIP",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 245,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "OK, I would *really* appreciate a table of all the bits and exactly what and how they encode them.  It's particularly nasty because some values are little-endian 32 bit encoded, not CScriptNum encoded, and others are varint encoded?  \r\n\r\nBut it's nice to be explicit in each case, for people like me who are not deep in the weeds of bitcoin's onchain representation, since it helps when considering how to use this alongside things like OP_CAT and extended arithmetic opcodes.",
      "created_at": "2024-01-01T23:29:48Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439099495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439099495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439511356",
      "pull_request_review_id": 1800528458,
      "id": 1439511356,
      "node_id": "PRRC_kwDOAN28mc5VzTM8",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 31,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439093730,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, bare OP_CHECKTXHASHVERIFY is really efficient. CTV also adds them. It's 34 bytes output script and 0 bytes witness/scriptsig. As opposed to 34 (spk) + 33 (cb: ver + internal key) + 34 (tapscript) for taproot.",
      "created_at": "2024-01-02T14:42:08Z",
      "updated_at": "2024-01-02T14:42:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439511356",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439511356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439514371",
      "pull_request_review_id": 1800533542,
      "id": 1439514371,
      "node_id": "PRRC_kwDOAN28mc5VzT8D",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 71,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439094729,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the SUCCESS argument has merit, though. Also IMO it's not too much of a pain to pick one of the many SUCCESS opcodes tapscript still has to make a OP_TXHASH2 if really needed. I also don't like that witness input can turn an opcode into a SUCCESS operation for the entire script. This can be tricky when collaboratively constructing scripts.",
      "created_at": "2024-01-02T14:45:30Z",
      "updated_at": "2024-01-02T14:45:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439514371",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439514371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439515370",
      "pull_request_review_id": 1800535115,
      "id": 1439515370,
      "node_id": "PRRC_kwDOAN28mc5VzULq",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 63,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439094915,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah sorry, one of them is a typo and should be `TXFS_SPECIAL_ALL`. Fixing.",
      "created_at": "2024-01-02T14:46:35Z",
      "updated_at": "2024-01-02T14:46:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439515370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439515370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439524358",
      "pull_request_review_id": 1800549758,
      "id": 1439524358,
      "node_id": "PRRC_kwDOAN28mc5VzWYG",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 87,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439094917,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah this was annoying me a lot. It's 10x more readable than the mediawiki from before, though. Found a way to fix it.",
      "created_at": "2024-01-02T14:56:27Z",
      "updated_at": "2024-01-02T14:56:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439524358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439524358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 80,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439527101",
      "pull_request_review_id": 1800554247,
      "id": 1439527101,
      "node_id": "PRRC_kwDOAN28mc5VzXC9",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 118,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439096276,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Exactly. I'm thinking of changing this as follows:\r\n\r\n- remove `TXFS_INPUTS` and `TXFS_OUTPUTS` bits\r\n- reader will know the entire size of the txfs, so when a second byte is present, look at the bits present in the `INOUT_SELECTOR` byte to know whether to expect `IN_SELECTOR` and/or `OUT_SELECTOR`.\r\n- this frees up two bits in the `CORE_SELECTOR`, one of which I'm thinking to repurpose for `SPEND_SCRIPT` (i.e. scriptCode for segwit v0 inputs and tapscript for v1 inputs, scriptPubkey for non-segwit)",
      "created_at": "2024-01-02T14:59:21Z",
      "updated_at": "2024-01-02T14:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439527101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439527101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439529044",
      "pull_request_review_id": 1800557378,
      "id": 1439529044,
      "node_id": "PRRC_kwDOAN28mc5VzXhU",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 121,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439096337,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't know what you mean. I mean the remaining 7 lowest bits, after the `TXFS_INOUT_NUMBER` (might rename COUNT) bit. 0x40 is is 0b01000000.",
      "created_at": "2024-01-02T15:01:25Z",
      "updated_at": "2024-01-02T15:01:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439529044",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439529044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439541476",
      "pull_request_review_id": 1800574588,
      "id": 1439541476,
      "node_id": "PRRC_kwDOAN28mc5Vzajk",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 161,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439098009,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah this is true. Initially I didn't have relative indices. I'm still not entirely convinced they are useful. Precisely for the 1-in 2-out case which seems super common to me. I heard \"you'd be surprised how easy it is to add an extra input\".\r\n\r\nMy initial thought was that private aggregation (i.e. not through public broadcast media like mempools) would be easily possible as a user can just create/sign a thousand variants of their txs, for each possible input index. This works with absolute indices and doesn't need relative indices. It might even work with public broadcast.\r\n\r\nThe problem is that doing this with absolute indices only works if everyone in the protocol has the same in-out ratio. (Everyone needs 1-to-2 so you can sign 1in1,2out, 2in3,4out, 3in5,6out, etc). Otherwise you get a quadratic amount of data. With relative indices, you can sign XinX,1out, XinX,2out, XinX,3out,.. and this way the coordinator can put you in any place and put your second output in some arbitraty place and pick your signatures based on where your second output is placed.\r\n\r\nOk this doesn't really require relative indices, but it requires the ability to mix \"current\" with absolute.",
      "created_at": "2024-01-02T15:12:00Z",
      "updated_at": "2024-01-02T15:14:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439541476",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439541476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439559332",
      "pull_request_review_id": 1800603241,
      "id": 1439559332,
      "node_id": "PRRC_kwDOAN28mc5Vze6k",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.\n+\n+The TxFieldSelector is invalid when\n+* a byte is expected but missing\n+* additional unexpected bytes are present\n+* index size is set to 1 while not being necessary\n+* a leading number of individual index is selected out of bounds of the in/outputs\n+* individual indices are duplicated or not in increasing order\n+\n+These limitations are to avoid potential TxFieldSelector malleability. It is\n+however allowed to use leading mode where it could be \"all\". This\n+is important to allow for optional addition of extra inputs or outputs.\n+\n+//TODO(stevenroose) should we disallow individual that could be leading?\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 10. If this brings the budget below zero,",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 194,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439098416,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah it's tricky. In practice, it has a similar amortized per-tx hash cost that sighashes have. It's hard to count those to the budget because they are amortized, it's basically hashing all the large tx fields once so that if they are repeatedly requested their hash can be used.\r\n\r\nAfter the amortized hash cost, it's just a finite series of ~32-byte chunks with maximally 64 in/out which in total can have 8 fields that are each ~32 bytes. This is ~16,384 bytes max.\r\n\r\nThen, another consideration is that it would be nice and reasonable if TXHASH+CSFS would not have a higher cost than what naturally would be placed in the witness, the 64-byte signature.\r\n\r\nI see it like this: we have a 64-byte budget to divide over TXHASH+CSFS as I think it's reasonable that this combination doesn't cost more than 28% more than a CHECKSIG (which is 50).\r\n\r\nSo maybe it's right that TXHASH can actually cost more, something like 25 if CSFS would be priced at 35 or 40.",
      "created_at": "2024-01-02T15:31:26Z",
      "updated_at": "2024-01-02T15:31:26Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439559332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439559332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439562880",
      "pull_request_review_id": 1800606831,
      "id": 1439562880,
      "node_id": "PRRC_kwDOAN28mc5VzfyA",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.\n+\n+The TxFieldSelector is invalid when\n+* a byte is expected but missing\n+* additional unexpected bytes are present\n+* index size is set to 1 while not being necessary\n+* a leading number of individual index is selected out of bounds of the in/outputs\n+* individual indices are duplicated or not in increasing order\n+\n+These limitations are to avoid potential TxFieldSelector malleability. It is\n+however allowed to use leading mode where it could be \"all\". This\n+is important to allow for optional addition of extra inputs or outputs.\n+\n+//TODO(stevenroose) should we disallow individual that could be leading?\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 10. If this brings the budget below zero,\n+  the script fails immediately.<br>The following considerations should be made:\n+  * All fields that can be of arbitrary size are cachable as TransactionHash always hashes their hashed values.\n+  * In \"individual mode\", a user can at most commit 32 inputs or outputs,\n+    which we don't consider excessive for potential repeated use.\n+  * In \"leading mode\", a caching strategy can be used where the SHA256 context\n+    is stored every N in/outputs so that multiple executions of the\n+    TransactionHash function can use the caches and only have to hash an\n+    additional N-1 items at most.\n+\n+\n+# Motivation\n+\n+This BIP specifies a basic transaction introspection primitive that is useful\n+to either reduce interactivity in multi-user protocols or to enforce some basic\n+constraints on transactions.\n+\n+Additionally, the constructions specified in this BIP can lay the groundwork for\n+some potential future upgrades:\n+* The TxFieldSelector construction would work well with a hypothetical opcode\n+  `OP_TX` that allows for directly introspecting the transaction by putting the\n+  fields selected on the stack instead of hashing them together.\n+* The TransactionHash obtained by `OP_TXHASH` can be combined with a\n+  hypothetical opcode `OP_CHECKSIGFROMSTACK` to effectively create an\n+  incredibly flexible signature hash, which would enable constructions like\n+  `SIGHASH_ANYPREVOUT`.\n+\n+## Comparing with some alternative proposals\n+\n+* This proposal strictly generalizes BIP-119's `OP_CHECKTEMPLATEVERIFY`, as the\n+  default mode of our TxFieldSelector is effectively the same (though not\n+  byte-for-byte identical) as what `OP_CTV` acomplishes, without costing any\n+  additional bytes. Additionally, using `OP_CHECKTXHASHVERIFY` allows for more\n+  flexibility which can help in the case for\n+  * enabling adding fees to a transaction without breaking a multi-tx protocol;\n+  * multi-user protocols where users are only concerned about their own inputs and outputs.\n+\n+* Constructions like `OP_IN_OUT_VALUE` used with `OP_EQUALVERIFY` can be\n+  emulated by two `OP_TXHASH` instances by using the TxFieldSelector to select\n+  a single input value first and a single output value second and enforcing\n+  equality on the hashes. Neither of these alternatives can be used to enforce\n+  small value differencials without the availability of 64-bit arithmetic in\n+  Script.\n+\n+* Like mentioned above, `SIGHASH_ANYPREVOUT` can be emulated using `OP_TXHASH`\n+  when combined with `OP_CHECKSIGFROMSTACK`: \n+  `<txfs> OP_TXHASH <pubkey> OP_CHECKSIGFROMSTACK` effectively emulates `SIGHASH_ANYPREVOUT`.\n+\n+\n+# Detailed Specification\n+\n+A reference implementation in Rust is provided attached as part of this BIP",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 245,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439099495,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, I agree. I think I tried to encode values the way they are consistently encoded in other contexts like sighashes and p2p. But I will go over them and list them in the BIP as well. It's true that I didn't consider the interactions between regular LE encoding and CScriptNum encoding which is what will be used when math is done in Script for things like values.",
      "created_at": "2024-01-02T15:33:14Z",
      "updated_at": "2024-01-02T15:34:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439562880",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439562880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441121096",
      "pull_request_review_id": 1803255418,
      "id": 1441121096,
      "node_id": "PRRC_kwDOAN28mc5V5cNI",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 31,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439093730,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, I forgot that OP_SUCCESSx was only a taproot thing, not a segwit thing.  Yuck!",
      "created_at": "2024-01-03T23:57:42Z",
      "updated_at": "2024-01-03T23:57:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1441121096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441121096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441682243",
      "pull_request_review_id": 1804049526,
      "id": 1441682243,
      "node_id": "PRRC_kwDOAN28mc5V7lND",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 40,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "halseth",
        "id": 3765732,
        "node_id": "MDQ6VXNlcjM3NjU3MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3765732?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/halseth",
        "html_url": "https://github.com/halseth",
        "followers_url": "https://api.github.com/users/halseth/followers",
        "following_url": "https://api.github.com/users/halseth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/halseth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/halseth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/halseth/subscriptions",
        "organizations_url": "https://api.github.com/users/halseth/orgs",
        "repos_url": "https://api.github.com/users/halseth/repos",
        "events_url": "https://api.github.com/users/halseth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/halseth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should maybe specify that the element is not popped off the stack, or is that implicit?",
      "created_at": "2024-01-04T12:17:44Z",
      "updated_at": "2024-01-04T12:36:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1441682243",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441682243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441691926",
      "pull_request_review_id": 1804049526,
      "id": 1441691926,
      "node_id": "PRRC_kwDOAN28mc5V7nkW",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 72,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "halseth",
        "id": 3765732,
        "node_id": "MDQ6VXNlcjM3NjU3MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3765732?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/halseth",
        "html_url": "https://github.com/halseth",
        "followers_url": "https://api.github.com/users/halseth/followers",
        "following_url": "https://api.github.com/users/halseth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/halseth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/halseth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/halseth/subscriptions",
        "organizations_url": "https://api.github.com/users/halseth/orgs",
        "repos_url": "https://api.github.com/users/halseth/repos",
        "events_url": "https://api.github.com/users/halseth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/halseth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This should be `TXFS_SPECIAL_ALL`? Maybe same as Rusty is saying.",
      "created_at": "2024-01-04T12:27:15Z",
      "updated_at": "2024-01-04T12:36:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1441691926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441691926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441693630",
      "pull_request_review_id": 1804049526,
      "id": 1441693630,
      "node_id": "PRRC_kwDOAN28mc5V7n--",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 63,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "halseth",
        "id": 3765732,
        "node_id": "MDQ6VXNlcjM3NjU3MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3765732?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/halseth",
        "html_url": "https://github.com/halseth",
        "followers_url": "https://api.github.com/users/halseth/followers",
        "following_url": "https://api.github.com/users/halseth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/halseth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/halseth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/halseth/subscriptions",
        "organizations_url": "https://api.github.com/users/halseth/orgs",
        "repos_url": "https://api.github.com/users/halseth/repos",
        "events_url": "https://api.github.com/users/halseth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/halseth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"what\" is set equal to `TXFS_SPECIAL_TEMPLATE`? Maybe define what the bytes of the field selector means before the special cases.",
      "created_at": "2024-01-04T12:28:53Z",
      "updated_at": "2024-01-04T12:36:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1441693630",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441693630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441699724",
      "pull_request_review_id": 1804049526,
      "id": 1441699724,
      "node_id": "PRRC_kwDOAN28mc5V7peM",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 79,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "halseth",
        "id": 3765732,
        "node_id": "MDQ6VXNlcjM3NjU3MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3765732?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/halseth",
        "html_url": "https://github.com/halseth",
        "followers_url": "https://api.github.com/users/halseth/followers",
        "following_url": "https://api.github.com/users/halseth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/halseth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/halseth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/halseth/subscriptions",
        "organizations_url": "https://api.github.com/users/halseth/orgs",
        "repos_url": "https://api.github.com/users/halseth/repos",
        "events_url": "https://api.github.com/users/halseth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/halseth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Found this section very hard to follow. Would it be an idea to more gently introduce an example field selector to show how it looks like (bit representation)?",
      "created_at": "2024-01-04T12:36:16Z",
      "updated_at": "2024-01-04T12:36:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1441699724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1441699724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1443245460",
      "pull_request_review_id": 1806633589,
      "id": 1443245460,
      "node_id": "PRRC_kwDOAN28mc5WBi2U",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 121,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439096337,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oops, yes.",
      "created_at": "2024-01-05T18:37:03Z",
      "updated_at": "2024-01-05T18:37:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1443245460",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1443245460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1443559013",
      "pull_request_review_id": 1807143567,
      "id": 1443559013,
      "node_id": "PRRC_kwDOAN28mc5WCvZl",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 161,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439098009,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This leaves some protocols vulnerable to the partial signature attacks.  Say the covenant requires your outputs go half to pubkeyA and half to pubkeyB.  Now I have two identical 1BTC covenant UTXO inputs, but re-use the same outputs to satisfy both, and steal the other 1BTC.\r\n\r\nThe same problem applies to \"tell me the outputs in the witness data\".",
      "created_at": "2024-01-06T01:54:06Z",
      "updated_at": "2024-01-06T01:54:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1443559013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1443559013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1443559334",
      "pull_request_review_id": 1807143787,
      "id": 1443559334,
      "node_id": "PRRC_kwDOAN28mc5WCvem",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.\n+\n+The TxFieldSelector is invalid when\n+* a byte is expected but missing\n+* additional unexpected bytes are present\n+* index size is set to 1 while not being necessary\n+* a leading number of individual index is selected out of bounds of the in/outputs\n+* individual indices are duplicated or not in increasing order\n+\n+These limitations are to avoid potential TxFieldSelector malleability. It is\n+however allowed to use leading mode where it could be \"all\". This\n+is important to allow for optional addition of extra inputs or outputs.\n+\n+//TODO(stevenroose) should we disallow individual that could be leading?\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 10. If this brings the budget below zero,",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 194,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1439098416,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is not a signature budget, it's a hashing budget.  Perhaps we should make this a first-class citizen then?\r\n\r\nSee https://rusty.ozlabs.org/2023/12/22/script-limits-opcat.html#my-proposal-a-dynamic-limit-for-hashing",
      "created_at": "2024-01-06T01:55:54Z",
      "updated_at": "2024-01-06T01:55:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1443559334",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1443559334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1518922340",
      "pull_request_review_id": 1926615925,
      "id": 1518922340,
      "node_id": "PRRC_kwDOAN28mc5aiOpk",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 159,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does this allow everlasting covenants (coins locked forever in a fixed set of addresses)? It is not clear from the text of BIP if this is possible and an intended use-case. IIUC, it is impossible because of chicken-and-egg problem: output script has to include a hash of itself to make an everlasting covenant which is impossible. But it is better to clarify this in BIP text explicitly, including a formal proof of why an everlasting covenant is impossible or (if it is possible) discuss use-cases and consequences.",
      "created_at": "2024-03-10T18:06:58Z",
      "updated_at": "2024-03-10T18:06:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1518922340",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1518922340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542158551",
      "pull_request_review_id": 1964935446,
      "id": 1542158551,
      "node_id": "PRRC_kwDOAN28mc5b63jX",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 40,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1441682243,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, it might be worth mentioning yeah, but I thought it was implicit as the other opcode explicitly mentions that it takes the items from the stack. It's kinda characteristic of a `-VERIFY` opcode to not touch the stack.",
      "created_at": "2024-03-27T23:47:02Z",
      "updated_at": "2024-03-27T23:47:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1542158551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542158551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542158997",
      "pull_request_review_id": 1964936133,
      "id": 1542158997,
      "node_id": "PRRC_kwDOAN28mc5b63qV",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 72,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1441691926,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed I think.",
      "created_at": "2024-03-27T23:48:04Z",
      "updated_at": "2024-03-27T23:48:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1542158997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542158997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542159311",
      "pull_request_review_id": 1964936513,
      "id": 1542159311,
      "node_id": "PRRC_kwDOAN28mc5b63vP",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 63,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1441693630,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I improved this section. What I mean is \"The input txfield selector is set from empty to this one, so whatever that one means\".",
      "created_at": "2024-03-27T23:48:39Z",
      "updated_at": "2024-03-27T23:48:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1542159311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542159311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542159651",
      "pull_request_review_id": 1964936993,
      "id": 1542159651,
      "node_id": "PRRC_kwDOAN28mc5b630j",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 79,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1441699724,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, it might be the case. In the latest version I added some example bit selectors after the written explanation. Can you see if they make sense to you?",
      "created_at": "2024-03-27T23:49:17Z",
      "updated_at": "2024-03-27T23:49:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1542159651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542159651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542635937",
      "pull_request_review_id": 1965670425,
      "id": 1542635937,
      "node_id": "PRRC_kwDOAN28mc5b8sGh",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 159,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1518922340,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, this is not possible AFAIK. But I wouldn't be comfortable making that claim, if you see what people can do. Especially if we get OP_CAT and OP_TWEAKADD.",
      "created_at": "2024-03-28T10:04:33Z",
      "updated_at": "2024-03-28T10:04:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1542635937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1542635937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1592568200",
      "pull_request_review_id": 2043350654,
      "id": 1592568200,
      "node_id": "PRRC_kwDOAN28mc5e7KmI",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 159,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1518922340,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Huh? Isn't this trivial, just by requiring prevout sPK/value = output sPK/value? Something like `PUSH3[0x00 0x18 0x40] TXHASH PUSH3[0x00 0x60 0x40] TXHASH EQUAL` (don't commit the field selector, grab the sPK/value, for just this input/output, check the txhashes are equal) ? You mightn't be able to do anything very interesting though.",
      "created_at": "2024-05-07T14:20:02Z",
      "updated_at": "2024-05-07T14:20:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1592568200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1592568200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1594336092",
      "pull_request_review_id": 2046171374,
      "id": 1594336092,
      "node_id": "PRRC_kwDOAN28mc5fB6Nc",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 10,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please incorporate the assigned number, add the README table entry, and add the Post-History header to link to the mailing list discussion or other fora where this proposal was discussed.",
      "created_at": "2024-05-08T16:53:46Z",
      "updated_at": "2024-05-08T16:55:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1594336092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1594336092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 2,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608731193",
      "pull_request_review_id": 2069281021,
      "id": 1608731193,
      "node_id": "PRRC_kwDOAN28mc5f40o5",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_ALL`\n+    * 2: `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.\n+\n+    Special case `TXFS_SPECIAL_ALL` is 4 bytes long, as follows:\n+    * 1: `TXFS_ALL`\n+    * 2: `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: (unused)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 118,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "in_reply_to_id": null,
      "user": {
        "login": "arminsabouri",
        "id": 24356537,
        "node_id": "MDQ6VXNlcjI0MzU2NTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24356537?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arminsabouri",
        "html_url": "https://github.com/arminsabouri",
        "followers_url": "https://api.github.com/users/arminsabouri/followers",
        "following_url": "https://api.github.com/users/arminsabouri/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arminsabouri/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arminsabouri/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arminsabouri/subscriptions",
        "organizations_url": "https://api.github.com/users/arminsabouri/orgs",
        "repos_url": "https://api.github.com/users/arminsabouri/repos",
        "events_url": "https://api.github.com/users/arminsabouri/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arminsabouri/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is a typo?\r\n```suggestion\r\n  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL | TXFS_CONTROL`\r\n```",
      "created_at": "2024-05-21T18:02:21Z",
      "updated_at": "2024-05-21T18:02:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1608731193",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608731193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610580559",
      "pull_request_review_id": 2072251083,
      "id": 1610580559,
      "node_id": "PRRC_kwDOAN28mc5f_4JP",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 62,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "in_reply_to_id": null,
      "user": {
        "login": "ProofOfKeags",
        "id": 4033651,
        "node_id": "MDQ6VXNlcjQwMzM2NTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4033651?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ProofOfKeags",
        "html_url": "https://github.com/ProofOfKeags",
        "followers_url": "https://api.github.com/users/ProofOfKeags/followers",
        "following_url": "https://api.github.com/users/ProofOfKeags/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ProofOfKeags/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ProofOfKeags/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ProofOfKeags/subscriptions",
        "organizations_url": "https://api.github.com/users/ProofOfKeags/orgs",
        "repos_url": "https://api.github.com/users/ProofOfKeags/repos",
        "events_url": "https://api.github.com/users/ProofOfKeags/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ProofOfKeags/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can I suggest that we move the section on the special cases to be *after* the fundamental atomic selector flags? It's much easier to read this document by building up from the building blocks rather than starting with the template and having to squint to find where all the sub-properties are defined later.\r\n\r\nI think the discussion for the optimized case follows very naturally once we understand the components here.",
      "created_at": "2024-05-22T20:06:06Z",
      "updated_at": "2024-05-22T20:33:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1610580559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610580559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610602728",
      "pull_request_review_id": 2072251083,
      "id": 1610602728,
      "node_id": "PRRC_kwDOAN28mc5f_9jo",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_ALL`\n+    * 2: `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.\n+\n+    Special case `TXFS_SPECIAL_ALL` is 4 bytes long, as follows:\n+    * 1: `TXFS_ALL`\n+    * 2: `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: (unused)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+\n+* For both inputs and then outputs, expect an additional byte as follows:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of\n+    in-/outputs\" should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\" (hence only the\n+      number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output\n+      of the current input index\" (it is invalid when current index exceeds\n+      number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_LEADING_SIZE`) is\n+    used to indicate the \"index size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+\n+  * In \"individual mode\", the third highest bit (`TXFS_INOUT_INDIVIDUAL_MODE`)\n+    indicates whether we are passing absolute indices (0) or indices relative\n+    to the current input (1), the remaining lowest 5 bits will be interpreted\n+    as `n`, the number of individual in/outputs follow.\n+    * In absolute mode (second highest bit is 0), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the absolute index to select.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the absolute index to select.\n+    * In relative mode (second highest bit is 1), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the relative index in two's complement.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the relative index in two's\n+        complement.\n+\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 7936\n+* up to 32 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -8191 to +8192.\n+\n+### TxFieldSelector malleability\n+\n+It is possible to represent the same selected data using multiple different\n+TxFieldSelectors. For this reason, users are strongly advised to always set the\n+`TXFS_CONTROL` that commits to the TxFieldSelector that was used to get the\n+hash.\n+\n+\n+\n+### Visualization\n+\n+* first byte\n+\n+```\n+1 0 1 1 1 1 1 1\n+| | | | | | | ^ version\n+| | | | | | ^ locktime\n+| | | | | ^ current input index\n+| | | | ^ current input control block\n+| | | ^ current input spend script\n+| | ^ current script last OP_CODESEPARATOR\n+| ^ currently unused\n+^ control bit (ie. include TXFS in hash)\n+```\n+\n+* second byte\n+\n+```\n+ v outputs\n+<-> <---------> inputs\n+1 1 1 1 1 1 1 1\n+| | | | | | | ^ prevouts\n+| | | | | | ^ sequences\n+| | | | | ^ scriptSigs\n+| | | | ^ prevout scriptPubkeys\n+| | | ^ prevout values\n+| | ^ taproot annexes\n+| ^ scriptPubkeys\n+^ values",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 213,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "in_reply_to_id": null,
      "user": {
        "login": "ProofOfKeags",
        "id": 4033651,
        "node_id": "MDQ6VXNlcjQwMzM2NTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4033651?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ProofOfKeags",
        "html_url": "https://github.com/ProofOfKeags",
        "followers_url": "https://api.github.com/users/ProofOfKeags/followers",
        "following_url": "https://api.github.com/users/ProofOfKeags/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ProofOfKeags/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ProofOfKeags/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ProofOfKeags/subscriptions",
        "organizations_url": "https://api.github.com/users/ProofOfKeags/orgs",
        "repos_url": "https://api.github.com/users/ProofOfKeags/repos",
        "events_url": "https://api.github.com/users/ProofOfKeags/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ProofOfKeags/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The \"v\" threw me off so I'm offering a suggestion that may help readability.\r\n\r\n```suggestion\r\n<-> outputs\r\n| | <---------> inputs\r\n1 1 1 1 1 1 1 1\r\n| | | | | | | ^ prevouts\r\n| | | | | | ^ sequences\r\n| | | | | ^ scriptSigs\r\n| | | | ^ prevout scriptPubkeys\r\n| | | ^ prevout values\r\n| | ^ taproot annexes\r\n| ^ scriptPubkeys\r\n^ values\r\n```",
      "created_at": "2024-05-22T20:25:58Z",
      "updated_at": "2024-05-22T20:33:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1610602728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610602728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 203,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610609966",
      "pull_request_review_id": 2072251083,
      "id": 1610609966,
      "node_id": "PRRC_kwDOAN28mc5f__Uu",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_ALL`\n+    * 2: `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.\n+\n+    Special case `TXFS_SPECIAL_ALL` is 4 bytes long, as follows:\n+    * 1: `TXFS_ALL`\n+    * 2: `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: (unused)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+\n+* For both inputs and then outputs, expect an additional byte as follows:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of\n+    in-/outputs\" should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\" (hence only the\n+      number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output\n+      of the current input index\" (it is invalid when current index exceeds\n+      number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_LEADING_SIZE`) is\n+    used to indicate the \"index size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+\n+  * In \"individual mode\", the third highest bit (`TXFS_INOUT_INDIVIDUAL_MODE`)\n+    indicates whether we are passing absolute indices (0) or indices relative\n+    to the current input (1), the remaining lowest 5 bits will be interpreted\n+    as `n`, the number of individual in/outputs follow.\n+    * In absolute mode (second highest bit is 0), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the absolute index to select.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the absolute index to select.\n+    * In relative mode (second highest bit is 1), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the relative index in two's complement.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the relative index in two's\n+        complement.\n+\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 7936\n+* up to 32 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -8191 to +8192.\n+\n+### TxFieldSelector malleability\n+\n+It is possible to represent the same selected data using multiple different\n+TxFieldSelectors. For this reason, users are strongly advised to always set the\n+`TXFS_CONTROL` that commits to the TxFieldSelector that was used to get the\n+hash.\n+\n+\n+\n+### Visualization\n+\n+* first byte\n+\n+```\n+1 0 1 1 1 1 1 1\n+| | | | | | | ^ version\n+| | | | | | ^ locktime\n+| | | | | ^ current input index\n+| | | | ^ current input control block\n+| | | ^ current input spend script\n+| | ^ current script last OP_CODESEPARATOR\n+| ^ currently unused\n+^ control bit (ie. include TXFS in hash)\n+```\n+\n+* second byte\n+\n+```\n+ v outputs\n+<-> <---------> inputs\n+1 1 1 1 1 1 1 1\n+| | | | | | | ^ prevouts\n+| | | | | | ^ sequences\n+| | | | | ^ scriptSigs\n+| | | | ^ prevout scriptPubkeys\n+| | | ^ prevout values\n+| | ^ taproot annexes\n+| ^ scriptPubkeys\n+^ values\n+```\n+\n+* in/output selector byte\n+\n+\"only the first 3\"\n+```\n+1 0 0 0 0 0 1 1\n+| | | <-------> integer 0b00011 == 3\n+| | ^ index size 0: single byte\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only the first 257\"\n+```\n+1 0 1 0 0 0 0 1  0 0 0 0 0 0 0 1\n+| | | <------------------------> integer 0b00001 00000001 == 257\n+| | ^ index size 1: two bytes\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only indices 0 and 2\"\n+```\n+0 1 0 0 0 0 1 0  0 0 0 0 0 0 0 1  0 0 0 0 0 0 1 1\n+| | | |                           <--------------> second idx: 3\n+| | | |          <--------------> first idx: 1\n+| | | | <-----> selection count: 0b10 == 2\n+| | | ^ index size 0: single byte per index\n+| | ^ absolute index\n+| ^ individual mode\n+^ don't commit the number of in/outputs",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 245,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "in_reply_to_id": null,
      "user": {
        "login": "ProofOfKeags",
        "id": 4033651,
        "node_id": "MDQ6VXNlcjQwMzM2NTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4033651?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ProofOfKeags",
        "html_url": "https://github.com/ProofOfKeags",
        "followers_url": "https://api.github.com/users/ProofOfKeags/followers",
        "following_url": "https://api.github.com/users/ProofOfKeags/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ProofOfKeags/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ProofOfKeags/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ProofOfKeags/subscriptions",
        "organizations_url": "https://api.github.com/users/ProofOfKeags/orgs",
        "repos_url": "https://api.github.com/users/ProofOfKeags/repos",
        "events_url": "https://api.github.com/users/ProofOfKeags/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ProofOfKeags/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n0 1 0 0 0 0 1 0  0 0 0 0 0 0 0 1  0 0 0 0 0 0 1 1\r\n| | | |                           <-------------> second idx: 3\r\n| | | |          <-------------> first idx: 1\r\n| | | | <-----> selection count: 0b10 == 2\r\n| | | ^ index size 0: single byte per index\r\n| | ^ absolute index\r\n| ^ individual mode\r\n^ don't commit the number of in/outputs\r\n```",
      "created_at": "2024-05-22T20:31:58Z",
      "updated_at": "2024-05-22T20:33:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1610609966",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610609966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 238,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1915062716",
      "pull_request_review_id": 2550120240,
      "id": 1915062716,
      "node_id": "PRRC_kwDOAN28mc5yJYm8",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 159,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": 1518922340,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah this super naive variant is possible. It could be used for softchains (merge mining), I heard. ",
      "created_at": "2025-01-14T15:34:54Z",
      "updated_at": "2025-01-14T15:34:54Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1915062716",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1915062716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1915088582",
      "pull_request_review_id": 2550161534,
      "id": 1915088582,
      "node_id": "PRRC_kwDOAN28mc5yJe7G",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_ALL`\n+    * 2: `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.\n+\n+    Special case `TXFS_SPECIAL_ALL` is 4 bytes long, as follows:\n+    * 1: `TXFS_ALL`\n+    * 2: `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: (unused)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+\n+* For both inputs and then outputs, expect an additional byte as follows:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of\n+    in-/outputs\" should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\" (hence only the\n+      number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output\n+      of the current input index\" (it is invalid when current index exceeds\n+      number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_LEADING_SIZE`) is\n+    used to indicate the \"index size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+\n+  * In \"individual mode\", the third highest bit (`TXFS_INOUT_INDIVIDUAL_MODE`)\n+    indicates whether we are passing absolute indices (0) or indices relative\n+    to the current input (1), the remaining lowest 5 bits will be interpreted\n+    as `n`, the number of individual in/outputs follow.\n+    * In absolute mode (second highest bit is 0), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the absolute index to select.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the absolute index to select.\n+    * In relative mode (second highest bit is 1), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the relative index in two's complement.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the relative index in two's\n+        complement.\n+\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 7936\n+* up to 32 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -8191 to +8192.\n+\n+### TxFieldSelector malleability\n+\n+It is possible to represent the same selected data using multiple different\n+TxFieldSelectors. For this reason, users are strongly advised to always set the\n+`TXFS_CONTROL` that commits to the TxFieldSelector that was used to get the\n+hash.\n+\n+\n+\n+### Visualization\n+\n+* first byte\n+\n+```\n+1 0 1 1 1 1 1 1\n+| | | | | | | ^ version\n+| | | | | | ^ locktime\n+| | | | | ^ current input index\n+| | | | ^ current input control block\n+| | | ^ current input spend script\n+| | ^ current script last OP_CODESEPARATOR\n+| ^ currently unused\n+^ control bit (ie. include TXFS in hash)\n+```\n+\n+* second byte\n+\n+```\n+ v outputs\n+<-> <---------> inputs\n+1 1 1 1 1 1 1 1\n+| | | | | | | ^ prevouts\n+| | | | | | ^ sequences\n+| | | | | ^ scriptSigs\n+| | | | ^ prevout scriptPubkeys\n+| | | ^ prevout values\n+| | ^ taproot annexes\n+| ^ scriptPubkeys\n+^ values",
      "path": "bip-txhash.md",
      "position": null,
      "original_position": 213,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "2258ebe48cd387ff2f05e1881f54640815b4ab07",
      "in_reply_to_id": 1610602728,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ack thanks",
      "created_at": "2025-01-14T15:45:41Z",
      "updated_at": "2025-01-14T15:45:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1915088582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1915088582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 203,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1916866915",
      "pull_request_review_id": 2553115630,
      "id": 1916866915,
      "node_id": "PRRC_kwDOAN28mc5yQRFj",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>",
      "path": "bip-0346.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  Author: Steven Roose <steven@roose.io>\r\n          Brandon Black <freedom@reardencode.com>\r\n```",
      "created_at": "2025-01-15T15:34:00Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1916866915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1916866915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1916868987",
      "pull_request_review_id": 2553115630,
      "id": 1916868987,
      "node_id": "PRRC_kwDOAN28mc5yQRl7",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03",
      "path": "bip-0346.md",
      "position": 9,
      "original_position": 9,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Per BIP 2, the \"Created\" header field uses the date a BIP was assigned a number.\r\n```suggestion\r\n  Created: 2024-04-24\r\n```",
      "created_at": "2025-01-15T15:35:23Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1916868987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1916868987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 9,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918816738",
      "pull_request_review_id": 2553115630,
      "id": 1918816738,
      "node_id": "PRRC_kwDOAN28mc5yXtHi",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`",
      "path": "bip-0346.md",
      "position": 17,
      "original_position": 17,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I double checked, OP_SUCCESS appears to be unclaimed, OP_VAULT used `OP_SUCCESS187` and `OP_SUCCESS188`.",
      "created_at": "2025-01-16T16:04:05Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918816738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918816738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918821625",
      "pull_request_review_id": 2553115630,
      "id": 1918821625,
      "node_id": "PRRC_kwDOAN28mc5yXuT5",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.",
      "path": "bip-0346.md",
      "position": 39,
      "original_position": 39,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I count three different contexts, so maybe:\r\n\r\n```suggestion\r\n(`0xb3`) as a soft fork upgrade. This opcode is active in legacy script,\r\nsegwitv0 p2wsh, and tapscript contexts.\r\n```",
      "created_at": "2025-01-16T16:07:24Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918821625",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918821625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": 38,
      "original_start_line": 38,
      "start_side": "RIGHT",
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918823174",
      "pull_request_review_id": 2553115630,
      "id": 1918823174,
      "node_id": "PRRC_kwDOAN28mc5yXusG",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.",
      "path": "bip-0346.md",
      "position": 47,
      "original_position": 47,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* The TxFieldSelector is valid, fail otherwise.\r\n```",
      "created_at": "2025-01-16T16:08:22Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918823174",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918823174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918826033",
      "pull_request_review_id": 2553115630,
      "id": 1918826033,
      "node_id": "PRRC_kwDOAN28mc5yXvYx",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.",
      "path": "bip-0346.md",
      "position": 57,
      "original_position": 57,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "maybe \"in tapscript\" or \"in the context of tapscript\"?\r\n\r\n```suggestion\r\nopcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript.\r\n```",
      "created_at": "2025-01-16T16:10:10Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918826033",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918826033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": 56,
      "original_start_line": 56,
      "start_side": "RIGHT",
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918829200",
      "pull_request_review_id": 2553115630,
      "id": 1918829200,
      "node_id": "PRRC_kwDOAN28mc5yXwKQ",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`",
      "path": "bip-0346.md",
      "position": 78,
      "original_position": 78,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How is the pipe symbol to be interpreted here?",
      "created_at": "2025-01-16T16:12:14Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918829200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918829200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918833455",
      "pull_request_review_id": 2553115630,
      "id": 1918833455,
      "node_id": "PRRC_kwDOAN28mc5yXxMv",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:",
      "path": "bip-0346.md",
      "position": 101,
      "original_position": 101,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    signature hashing modes and those defined in [BIP-118: SIGHASH_ANYPREVOUT for Taproot Scripts](bip-0118.mediawiki):\r\n```",
      "created_at": "2025-01-16T16:15:20Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918833455",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918833455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918835552",
      "pull_request_review_id": 2553115630,
      "id": 1918835552,
      "node_id": "PRRC_kwDOAN28mc5yXxtg",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:\n+\n+| BIP-341/118 sighash type     | 1-byte TxFieldSelector |\n+| :--------------------------- | :--------------------- |\n+| `ALL`                        | `0b11111111`           |\n+| `SINGLE`                     | `0b11110111`           |\n+| `NONE`                       | `0b11110011`           |\n+| `ALL|ANYONECANPAY`           | `0b11111101`           |\n+| `SINGLE|ANYONECANPAY`        | `0b11110101`           |\n+| `NONE|ANYONECANPAY`          | `0b11110001`           |\n+| `ALL|ANYPREVOUT`             | `0b11101101`           |\n+| `SINGLE|ANYPREVOUT`          | `0b11100101`           |\n+| `NONE|ANYPREVOUT`            | `0b11100001`           |\n+| `ALL|ANYPREVOUTANYSCRIPT`    | `0b11001101`           |\n+| `SINGLE|ANYPREVOUTANYSCRIPT` | `0b11000101`           |\n+| `NONE|ANYPREVOUTANYSCRIPT`   | `0b11000001`           |\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:",
      "path": "bip-0346.md",
      "position": 118,
      "original_position": 118,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to me that we are now in the case where the TxFieldSelector is longer than 1 byte. It would perhaps be helpful to explicitly communicate that:\r\n\r\n```suggestion\r\n* If the TxFieldSelector is longer than 1 byte, the first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\r\n```",
      "created_at": "2025-01-16T16:16:48Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918835552",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918835552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 118,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918843104",
      "pull_request_review_id": 2553115630,
      "id": 1918843104,
      "node_id": "PRRC_kwDOAN28mc5yXzjg",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:\n+\n+| BIP-341/118 sighash type     | 1-byte TxFieldSelector |\n+| :--------------------------- | :--------------------- |\n+| `ALL`                        | `0b11111111`           |\n+| `SINGLE`                     | `0b11110111`           |\n+| `NONE`                       | `0b11110011`           |\n+| `ALL|ANYONECANPAY`           | `0b11111101`           |\n+| `SINGLE|ANYONECANPAY`        | `0b11110101`           |\n+| `NONE|ANYONECANPAY`          | `0b11110001`           |\n+| `ALL|ANYPREVOUT`             | `0b11101101`           |\n+| `SINGLE|ANYPREVOUT`          | `0b11100101`           |\n+| `NONE|ANYPREVOUT`            | `0b11100001`           |\n+| `ALL|ANYPREVOUTANYSCRIPT`    | `0b11001101`           |\n+| `SINGLE|ANYPREVOUTANYSCRIPT` | `0b11000101`           |\n+| `NONE|ANYPREVOUTANYSCRIPT`   | `0b11000001`           |\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: current input annex (or empty) (`TXFS_CURRENT_INPUT_TAPROOT_ANNEX`)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and",
      "path": "bip-0346.md",
      "position": 137,
      "original_position": 137,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I’m probably missing something, but the option for the TxFieldSelector to only have a single byte here appears to be at odds with the special case above in line 83 \"If the TxFieldSelector has exactly 1 byte, […]\"",
      "created_at": "2025-01-16T16:21:36Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918843104",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918843104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 137,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918848561",
      "pull_request_review_id": 2553115630,
      "id": 1918848561,
      "node_id": "PRRC_kwDOAN28mc5yX04x",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:\n+\n+| BIP-341/118 sighash type     | 1-byte TxFieldSelector |\n+| :--------------------------- | :--------------------- |\n+| `ALL`                        | `0b11111111`           |\n+| `SINGLE`                     | `0b11110111`           |\n+| `NONE`                       | `0b11110011`           |\n+| `ALL|ANYONECANPAY`           | `0b11111101`           |\n+| `SINGLE|ANYONECANPAY`        | `0b11110101`           |\n+| `NONE|ANYONECANPAY`          | `0b11110001`           |\n+| `ALL|ANYPREVOUT`             | `0b11101101`           |\n+| `SINGLE|ANYPREVOUT`          | `0b11100101`           |\n+| `NONE|ANYPREVOUT`            | `0b11100001`           |\n+| `ALL|ANYPREVOUTANYSCRIPT`    | `0b11001101`           |\n+| `SINGLE|ANYPREVOUTANYSCRIPT` | `0b11000101`           |\n+| `NONE|ANYPREVOUTANYSCRIPT`   | `0b11000001`           |\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: current input annex (or empty) (`TXFS_CURRENT_INPUT_TAPROOT_ANNEX`)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUES`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`",
      "path": "bip-0346.md",
      "position": 155,
      "original_position": 155,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please explain the semantics of these lines. Does the pipe represent string concatenation, or some other form of concatenation here?",
      "created_at": "2025-01-16T16:25:15Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918848561",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918848561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": 153,
      "original_start_line": 153,
      "start_side": "RIGHT",
      "line": 155,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918854479",
      "pull_request_review_id": 2553115630,
      "id": 1918854479,
      "node_id": "PRRC_kwDOAN28mc5yX2VP",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:\n+\n+| BIP-341/118 sighash type     | 1-byte TxFieldSelector |\n+| :--------------------------- | :--------------------- |\n+| `ALL`                        | `0b11111111`           |\n+| `SINGLE`                     | `0b11110111`           |\n+| `NONE`                       | `0b11110011`           |\n+| `ALL|ANYONECANPAY`           | `0b11111101`           |\n+| `SINGLE|ANYONECANPAY`        | `0b11110101`           |\n+| `NONE|ANYONECANPAY`          | `0b11110001`           |\n+| `ALL|ANYPREVOUT`             | `0b11101101`           |\n+| `SINGLE|ANYPREVOUT`          | `0b11100101`           |\n+| `NONE|ANYPREVOUT`            | `0b11100001`           |\n+| `ALL|ANYPREVOUTANYSCRIPT`    | `0b11001101`           |\n+| `SINGLE|ANYPREVOUTANYSCRIPT` | `0b11000101`           |\n+| `NONE|ANYPREVOUTANYSCRIPT`   | `0b11000001`           |\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: current input annex (or empty) (`TXFS_CURRENT_INPUT_TAPROOT_ANNEX`)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUES`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+\n+* For both inputs and then outputs, expect an additional byte as follows:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of\n+    in-/outputs\" should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\" (hence only the\n+      number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output\n+      of the current input index\" (it is invalid when current index exceeds\n+      number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_LEADING_SIZE`) is\n+    used to indicate the \"index size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+\n+  * In \"individual mode\", the third highest bit (`TXFS_INOUT_INDIVIDUAL_MODE`)\n+    indicates whether we are passing absolute indices (0) or indices relative\n+    to the current input (1), the remaining lowest 5 bits will be interpreted\n+    as `n`, the number of individual in/outputs follow.\n+    * In absolute mode (second highest bit is 0), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the absolute index to select.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the absolute index to select.\n+    * In relative mode (second highest bit is 1), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the relative index in two's complement.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the relative index in two's\n+        complement.\n+\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 7936\n+* up to 32 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -8191 to +8192.\n+\n+\n+### TxFieldSelector malleability\n+\n+It is possible to represent the same selected data using multiple different\n+TxFieldSelectors. For this reason, users are strongly advised to always set the\n+`TXFS_CONTROL` that commits to the TxFieldSelector that was used to get the\n+hash.\n+\n+\n+\n+### Visualization\n+\n+* first byte\n+\n+```\n+1 0 1 1 1 1 1 1\n+| | | | | | | ^ version\n+| | | | | | ^ locktime\n+| | | | | ^ current input index\n+| | | | ^ current input control block\n+| | | ^ current input spend script\n+| | ^ current script last OP_CODESEPARATOR\n+| ^ unused\n+^ control bit (ie. include TXFS in hash)\n+```\n+\n+* second byte\n+\n+```\n+<-> outputs\n+| | <---------> inputs\n+1 1 1 1 1 1 1 1\n+| | | | | | | ^ prevouts\n+| | | | | | ^ sequences\n+| | | | | ^ scriptSigs\n+| | | | ^ prevout scriptPubkeys\n+| | | ^ prevout values\n+| | ^ taproot annexes\n+| ^ scriptPubkeys\n+^ values\n+```\n+\n+* in/output selector byte\n+\n+\"only the first 3\"\n+```\n+1 0 0 0 0 0 1 1\n+| | | <-------> integer 0b00011 == 3\n+| | ^ index size 0: single byte\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only the first 257\"\n+```\n+1 0 1 0 0 0 0 1  0 0 0 0 0 0 0 1\n+| | | <------------------------> integer 0b00001 00000001 == 257\n+| | ^ index size 1: two bytes\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only indices 0 and 2\"\n+```\n+0 1 0 0 0 0 1 0  0 0 0 0 0 0 0 1  0 0 0 0 0 0 1 1\n+| | | |                           <--------------> second idx: 3\n+| | | |          <-------------> first idx: 1\n+| | | | <-----> selection count: 0b10 == 2\n+| | | ^ index size 0: single byte per index\n+| | ^ absolute index\n+| ^ individual mode\n+^ don't commit the number of in/outputs\n+```\n+\n+* total example\n+\n+```\n+bf ff c2 01 03 83\n+ |  |           ^ commit number of outputs + leading 3 outputs\n+ |  | <------> commit number of inputs + inputs at indices 1 and 3\n+ |  ^ all input and output fields\n+ ^ all regular fields, except for the unused one\n+```\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 25. If this brings the budget below zero,\n+  the script fails immediately.<br>The following considerations should be made:\n+  * All fields that can be of arbitrary size are cachable as TransactionHash",
      "path": "bip-0346.md",
      "position": 313,
      "original_position": 313,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  * All fields that can be of arbitrary size are cacheable as TransactionHash\r\n```",
      "created_at": "2025-01-16T16:29:14Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918854479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918854479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 313,
      "original_line": 313,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918863889",
      "pull_request_review_id": 2553115630,
      "id": 1918863889,
      "node_id": "PRRC_kwDOAN28mc5yX4oR",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:\n+\n+| BIP-341/118 sighash type     | 1-byte TxFieldSelector |\n+| :--------------------------- | :--------------------- |\n+| `ALL`                        | `0b11111111`           |\n+| `SINGLE`                     | `0b11110111`           |\n+| `NONE`                       | `0b11110011`           |\n+| `ALL|ANYONECANPAY`           | `0b11111101`           |\n+| `SINGLE|ANYONECANPAY`        | `0b11110101`           |\n+| `NONE|ANYONECANPAY`          | `0b11110001`           |\n+| `ALL|ANYPREVOUT`             | `0b11101101`           |\n+| `SINGLE|ANYPREVOUT`          | `0b11100101`           |\n+| `NONE|ANYPREVOUT`            | `0b11100001`           |\n+| `ALL|ANYPREVOUTANYSCRIPT`    | `0b11001101`           |\n+| `SINGLE|ANYPREVOUTANYSCRIPT` | `0b11000101`           |\n+| `NONE|ANYPREVOUTANYSCRIPT`   | `0b11000001`           |\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: current input annex (or empty) (`TXFS_CURRENT_INPUT_TAPROOT_ANNEX`)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUES`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+\n+* For both inputs and then outputs, expect an additional byte as follows:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of\n+    in-/outputs\" should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\" (hence only the\n+      number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output\n+      of the current input index\" (it is invalid when current index exceeds\n+      number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_LEADING_SIZE`) is\n+    used to indicate the \"index size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+\n+  * In \"individual mode\", the third highest bit (`TXFS_INOUT_INDIVIDUAL_MODE`)\n+    indicates whether we are passing absolute indices (0) or indices relative\n+    to the current input (1), the remaining lowest 5 bits will be interpreted\n+    as `n`, the number of individual in/outputs follow.\n+    * In absolute mode (second highest bit is 0), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the absolute index to select.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the absolute index to select.\n+    * In relative mode (second highest bit is 1), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the relative index in two's complement.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the relative index in two's\n+        complement.\n+\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 7936\n+* up to 32 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -8191 to +8192.\n+\n+\n+### TxFieldSelector malleability\n+\n+It is possible to represent the same selected data using multiple different\n+TxFieldSelectors. For this reason, users are strongly advised to always set the\n+`TXFS_CONTROL` that commits to the TxFieldSelector that was used to get the\n+hash.\n+\n+\n+\n+### Visualization\n+\n+* first byte\n+\n+```\n+1 0 1 1 1 1 1 1\n+| | | | | | | ^ version\n+| | | | | | ^ locktime\n+| | | | | ^ current input index\n+| | | | ^ current input control block\n+| | | ^ current input spend script\n+| | ^ current script last OP_CODESEPARATOR\n+| ^ unused\n+^ control bit (ie. include TXFS in hash)\n+```\n+\n+* second byte\n+\n+```\n+<-> outputs\n+| | <---------> inputs\n+1 1 1 1 1 1 1 1\n+| | | | | | | ^ prevouts\n+| | | | | | ^ sequences\n+| | | | | ^ scriptSigs\n+| | | | ^ prevout scriptPubkeys\n+| | | ^ prevout values\n+| | ^ taproot annexes\n+| ^ scriptPubkeys\n+^ values\n+```\n+\n+* in/output selector byte\n+\n+\"only the first 3\"\n+```\n+1 0 0 0 0 0 1 1\n+| | | <-------> integer 0b00011 == 3\n+| | ^ index size 0: single byte\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only the first 257\"\n+```\n+1 0 1 0 0 0 0 1  0 0 0 0 0 0 0 1\n+| | | <------------------------> integer 0b00001 00000001 == 257\n+| | ^ index size 1: two bytes\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only indices 0 and 2\"\n+```\n+0 1 0 0 0 0 1 0  0 0 0 0 0 0 0 1  0 0 0 0 0 0 1 1\n+| | | |                           <--------------> second idx: 3\n+| | | |          <-------------> first idx: 1\n+| | | | <-----> selection count: 0b10 == 2\n+| | | ^ index size 0: single byte per index\n+| | ^ absolute index\n+| ^ individual mode\n+^ don't commit the number of in/outputs\n+```\n+\n+* total example\n+\n+```\n+bf ff c2 01 03 83\n+ |  |           ^ commit number of outputs + leading 3 outputs\n+ |  | <------> commit number of inputs + inputs at indices 1 and 3\n+ |  ^ all input and output fields\n+ ^ all regular fields, except for the unused one\n+```\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 25. If this brings the budget below zero,\n+  the script fails immediately.<br>The following considerations should be made:\n+  * All fields that can be of arbitrary size are cachable as TransactionHash\n+    always hashes their hashed values.\n+  * In \"individual mode\", a user can at most commit 32 inputs or outputs,\n+    which we don't consider excessive for potential repeated use.\n+  * In \"leading mode\", a caching strategy can be used where the SHA256 context\n+    is stored every N in/outputs so that multiple executions of the\n+    TransactionHash function can use the caches and only have to hash an\n+    additional N-1 items at most.\n+\n+\n+# Motivation\n+\n+This BIP specifies a basic transaction introspection primitive that is useful\n+to either reduce interactivity in multi-user protocols or to enforce some basic\n+constraints on transactions.\n+\n+Additionally, the constructions specified in this BIP can lay the groundwork for\n+some potential future upgrades:\n+* The TxFieldSelector construction would work well with a hypothetical opcode\n+  `OP_TX` that allows for directly introspecting the transaction by putting the\n+  fields selected on the stack instead of hashing them together.\n+* The TransactionHash obtained by `OP_TXHASH` can be combined with a\n+  hypothetical opcode `OP_CHECKSIGFROMSTACK` to effectively create an",
      "path": "bip-0346.md",
      "position": 335,
      "original_position": 335,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You mean like the one proposed in BIP 348? ;)\r\n\r\n```suggestion\r\n* The TransactionHash obtained by `OP_TXHASH` can be combined with the\r\n  proposed opcode `OP_CHECKSIGFROMSTACK` (see [BIP-348](bip-0348.md)) to effectively create an\r\n```",
      "created_at": "2025-01-16T16:34:56Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918863889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918863889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": 334,
      "original_start_line": 334,
      "start_side": "RIGHT",
      "line": 335,
      "original_line": 335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918866009",
      "pull_request_review_id": 2553115630,
      "id": 1918866009,
      "node_id": "PRRC_kwDOAN28mc5yX5JZ",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:\n+\n+| BIP-341/118 sighash type     | 1-byte TxFieldSelector |\n+| :--------------------------- | :--------------------- |\n+| `ALL`                        | `0b11111111`           |\n+| `SINGLE`                     | `0b11110111`           |\n+| `NONE`                       | `0b11110011`           |\n+| `ALL|ANYONECANPAY`           | `0b11111101`           |\n+| `SINGLE|ANYONECANPAY`        | `0b11110101`           |\n+| `NONE|ANYONECANPAY`          | `0b11110001`           |\n+| `ALL|ANYPREVOUT`             | `0b11101101`           |\n+| `SINGLE|ANYPREVOUT`          | `0b11100101`           |\n+| `NONE|ANYPREVOUT`            | `0b11100001`           |\n+| `ALL|ANYPREVOUTANYSCRIPT`    | `0b11001101`           |\n+| `SINGLE|ANYPREVOUTANYSCRIPT` | `0b11000101`           |\n+| `NONE|ANYPREVOUTANYSCRIPT`   | `0b11000001`           |\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: current input annex (or empty) (`TXFS_CURRENT_INPUT_TAPROOT_ANNEX`)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUES`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+\n+* For both inputs and then outputs, expect an additional byte as follows:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of\n+    in-/outputs\" should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\" (hence only the\n+      number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output\n+      of the current input index\" (it is invalid when current index exceeds\n+      number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_LEADING_SIZE`) is\n+    used to indicate the \"index size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+\n+  * In \"individual mode\", the third highest bit (`TXFS_INOUT_INDIVIDUAL_MODE`)\n+    indicates whether we are passing absolute indices (0) or indices relative\n+    to the current input (1), the remaining lowest 5 bits will be interpreted\n+    as `n`, the number of individual in/outputs follow.\n+    * In absolute mode (second highest bit is 0), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the absolute index to select.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the absolute index to select.\n+    * In relative mode (second highest bit is 1), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the relative index in two's complement.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the relative index in two's\n+        complement.\n+\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 7936\n+* up to 32 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -8191 to +8192.\n+\n+\n+### TxFieldSelector malleability\n+\n+It is possible to represent the same selected data using multiple different\n+TxFieldSelectors. For this reason, users are strongly advised to always set the\n+`TXFS_CONTROL` that commits to the TxFieldSelector that was used to get the\n+hash.\n+\n+\n+\n+### Visualization\n+\n+* first byte\n+\n+```\n+1 0 1 1 1 1 1 1\n+| | | | | | | ^ version\n+| | | | | | ^ locktime\n+| | | | | ^ current input index\n+| | | | ^ current input control block\n+| | | ^ current input spend script\n+| | ^ current script last OP_CODESEPARATOR\n+| ^ unused\n+^ control bit (ie. include TXFS in hash)\n+```\n+\n+* second byte\n+\n+```\n+<-> outputs\n+| | <---------> inputs\n+1 1 1 1 1 1 1 1\n+| | | | | | | ^ prevouts\n+| | | | | | ^ sequences\n+| | | | | ^ scriptSigs\n+| | | | ^ prevout scriptPubkeys\n+| | | ^ prevout values\n+| | ^ taproot annexes\n+| ^ scriptPubkeys\n+^ values\n+```\n+\n+* in/output selector byte\n+\n+\"only the first 3\"\n+```\n+1 0 0 0 0 0 1 1\n+| | | <-------> integer 0b00011 == 3\n+| | ^ index size 0: single byte\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only the first 257\"\n+```\n+1 0 1 0 0 0 0 1  0 0 0 0 0 0 0 1\n+| | | <------------------------> integer 0b00001 00000001 == 257\n+| | ^ index size 1: two bytes\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only indices 0 and 2\"\n+```\n+0 1 0 0 0 0 1 0  0 0 0 0 0 0 0 1  0 0 0 0 0 0 1 1\n+| | | |                           <--------------> second idx: 3\n+| | | |          <-------------> first idx: 1\n+| | | | <-----> selection count: 0b10 == 2\n+| | | ^ index size 0: single byte per index\n+| | ^ absolute index\n+| ^ individual mode\n+^ don't commit the number of in/outputs\n+```\n+\n+* total example\n+\n+```\n+bf ff c2 01 03 83\n+ |  |           ^ commit number of outputs + leading 3 outputs\n+ |  | <------> commit number of inputs + inputs at indices 1 and 3\n+ |  ^ all input and output fields\n+ ^ all regular fields, except for the unused one\n+```\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 25. If this brings the budget below zero,\n+  the script fails immediately.<br>The following considerations should be made:\n+  * All fields that can be of arbitrary size are cachable as TransactionHash\n+    always hashes their hashed values.\n+  * In \"individual mode\", a user can at most commit 32 inputs or outputs,\n+    which we don't consider excessive for potential repeated use.\n+  * In \"leading mode\", a caching strategy can be used where the SHA256 context\n+    is stored every N in/outputs so that multiple executions of the\n+    TransactionHash function can use the caches and only have to hash an\n+    additional N-1 items at most.\n+\n+\n+# Motivation\n+\n+This BIP specifies a basic transaction introspection primitive that is useful\n+to either reduce interactivity in multi-user protocols or to enforce some basic\n+constraints on transactions.\n+\n+Additionally, the constructions specified in this BIP can lay the groundwork for\n+some potential future upgrades:\n+* The TxFieldSelector construction would work well with a hypothetical opcode\n+  `OP_TX` that allows for directly introspecting the transaction by putting the\n+  fields selected on the stack instead of hashing them together.\n+* The TransactionHash obtained by `OP_TXHASH` can be combined with a\n+  hypothetical opcode `OP_CHECKSIGFROMSTACK` to effectively create an\n+  incredibly flexible signature hash, which would enable constructions like\n+  `SIGHASH_ANYPREVOUT`.\n+\n+\n+## Comparing with some alternative proposals\n+\n+* This proposal strictly generalizes BIP-119's `OP_CHECKTEMPLATEVERIFY`, as the",
      "path": "bip-0346.md",
      "position": 342,
      "original_position": 342,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* This proposal strictly generalizes [BIP-119](bip-0119.mediawiki)'s `OP_CHECKTEMPLATEVERIFY`, as the\r\n```",
      "created_at": "2025-01-16T16:36:16Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918866009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918866009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 342,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918866564",
      "pull_request_review_id": 2553115630,
      "id": 1918866564,
      "node_id": "PRRC_kwDOAN28mc5yX5SE",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```",
      "path": "bip-0346.md",
      "position": 1,
      "original_position": 1,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n<pre>\r\n```",
      "created_at": "2025-01-16T16:36:40Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918866564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918866564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918866918",
      "pull_request_review_id": 2553115630,
      "id": 1918866918,
      "node_id": "PRRC_kwDOAN28mc5yX5Xm",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```",
      "path": "bip-0346.md",
      "position": 11,
      "original_position": 11,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n</pre>\r\n```",
      "created_at": "2025-01-16T16:36:56Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918866918",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918866918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918870895",
      "pull_request_review_id": 2553115630,
      "id": 1918870895,
      "node_id": "PRRC_kwDOAN28mc5yX6Vv",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:\n+\n+| BIP-341/118 sighash type     | 1-byte TxFieldSelector |\n+| :--------------------------- | :--------------------- |\n+| `ALL`                        | `0b11111111`           |\n+| `SINGLE`                     | `0b11110111`           |\n+| `NONE`                       | `0b11110011`           |\n+| `ALL|ANYONECANPAY`           | `0b11111101`           |\n+| `SINGLE|ANYONECANPAY`        | `0b11110101`           |\n+| `NONE|ANYONECANPAY`          | `0b11110001`           |\n+| `ALL|ANYPREVOUT`             | `0b11101101`           |\n+| `SINGLE|ANYPREVOUT`          | `0b11100101`           |\n+| `NONE|ANYPREVOUT`            | `0b11100001`           |\n+| `ALL|ANYPREVOUTANYSCRIPT`    | `0b11001101`           |\n+| `SINGLE|ANYPREVOUTANYSCRIPT` | `0b11000101`           |\n+| `NONE|ANYPREVOUTANYSCRIPT`   | `0b11000001`           |\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: current input annex (or empty) (`TXFS_CURRENT_INPUT_TAPROOT_ANNEX`)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUES`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+\n+* For both inputs and then outputs, expect an additional byte as follows:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of\n+    in-/outputs\" should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\" (hence only the\n+      number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output\n+      of the current input index\" (it is invalid when current index exceeds\n+      number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_LEADING_SIZE`) is\n+    used to indicate the \"index size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+\n+  * In \"individual mode\", the third highest bit (`TXFS_INOUT_INDIVIDUAL_MODE`)\n+    indicates whether we are passing absolute indices (0) or indices relative\n+    to the current input (1), the remaining lowest 5 bits will be interpreted\n+    as `n`, the number of individual in/outputs follow.\n+    * In absolute mode (second highest bit is 0), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the absolute index to select.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the absolute index to select.\n+    * In relative mode (second highest bit is 1), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the relative index in two's complement.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the relative index in two's\n+        complement.\n+\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 7936\n+* up to 32 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -8191 to +8192.\n+\n+\n+### TxFieldSelector malleability\n+\n+It is possible to represent the same selected data using multiple different\n+TxFieldSelectors. For this reason, users are strongly advised to always set the\n+`TXFS_CONTROL` that commits to the TxFieldSelector that was used to get the\n+hash.\n+\n+\n+\n+### Visualization\n+\n+* first byte\n+\n+```\n+1 0 1 1 1 1 1 1\n+| | | | | | | ^ version\n+| | | | | | ^ locktime\n+| | | | | ^ current input index\n+| | | | ^ current input control block\n+| | | ^ current input spend script\n+| | ^ current script last OP_CODESEPARATOR\n+| ^ unused\n+^ control bit (ie. include TXFS in hash)\n+```\n+\n+* second byte\n+\n+```\n+<-> outputs\n+| | <---------> inputs\n+1 1 1 1 1 1 1 1\n+| | | | | | | ^ prevouts\n+| | | | | | ^ sequences\n+| | | | | ^ scriptSigs\n+| | | | ^ prevout scriptPubkeys\n+| | | ^ prevout values\n+| | ^ taproot annexes\n+| ^ scriptPubkeys\n+^ values\n+```\n+\n+* in/output selector byte\n+\n+\"only the first 3\"\n+```\n+1 0 0 0 0 0 1 1\n+| | | <-------> integer 0b00011 == 3\n+| | ^ index size 0: single byte\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only the first 257\"\n+```\n+1 0 1 0 0 0 0 1  0 0 0 0 0 0 0 1\n+| | | <------------------------> integer 0b00001 00000001 == 257\n+| | ^ index size 1: two bytes\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only indices 0 and 2\"\n+```\n+0 1 0 0 0 0 1 0  0 0 0 0 0 0 0 1  0 0 0 0 0 0 1 1\n+| | | |                           <--------------> second idx: 3\n+| | | |          <-------------> first idx: 1\n+| | | | <-----> selection count: 0b10 == 2\n+| | | ^ index size 0: single byte per index\n+| | ^ absolute index\n+| ^ individual mode\n+^ don't commit the number of in/outputs\n+```\n+\n+* total example\n+\n+```\n+bf ff c2 01 03 83\n+ |  |           ^ commit number of outputs + leading 3 outputs\n+ |  | <------> commit number of inputs + inputs at indices 1 and 3\n+ |  ^ all input and output fields\n+ ^ all regular fields, except for the unused one\n+```\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 25. If this brings the budget below zero,\n+  the script fails immediately.<br>The following considerations should be made:\n+  * All fields that can be of arbitrary size are cachable as TransactionHash\n+    always hashes their hashed values.\n+  * In \"individual mode\", a user can at most commit 32 inputs or outputs,\n+    which we don't consider excessive for potential repeated use.\n+  * In \"leading mode\", a caching strategy can be used where the SHA256 context\n+    is stored every N in/outputs so that multiple executions of the\n+    TransactionHash function can use the caches and only have to hash an\n+    additional N-1 items at most.\n+\n+\n+# Motivation\n+\n+This BIP specifies a basic transaction introspection primitive that is useful\n+to either reduce interactivity in multi-user protocols or to enforce some basic\n+constraints on transactions.\n+\n+Additionally, the constructions specified in this BIP can lay the groundwork for\n+some potential future upgrades:\n+* The TxFieldSelector construction would work well with a hypothetical opcode\n+  `OP_TX` that allows for directly introspecting the transaction by putting the\n+  fields selected on the stack instead of hashing them together.\n+* The TransactionHash obtained by `OP_TXHASH` can be combined with a\n+  hypothetical opcode `OP_CHECKSIGFROMSTACK` to effectively create an\n+  incredibly flexible signature hash, which would enable constructions like\n+  `SIGHASH_ANYPREVOUT`.\n+\n+\n+## Comparing with some alternative proposals\n+\n+* This proposal strictly generalizes BIP-119's `OP_CHECKTEMPLATEVERIFY`, as the\n+  default mode of our TxFieldSelector is semantically the same (though not\n+  byte-for-byte identical) as what `OP_CTV` accomplishes, without costing any\n+  additional bytes. Additionally, using `OP_CHECKTXHASHVERIFY` allows for more\n+  flexibility which can help in the case for\n+  * enabling adding fees to a transaction without breaking a multi-tx protocol;\n+  * multi-user protocols where users are only concerned about their own inputs and outputs.\n+\n+* Constructions like `OP_IN_OUT_VALUE` used with `OP_EQUALVERIFY` can be\n+  emulated by two `OP_TXHASH` instances by using the TxFieldSelector to select\n+  a single input value first and a single output value second and enforcing\n+  equality on the hashes. Neither of these alternatives can be used to enforce\n+  small value differencials without the availability of 64-bit arithmetic in\n+  Script.\n+\n+* Like mentioned above, `SIGHASH_ANYPREVOUT` can be emulated using `OP_TXHASH`\n+  when combined with `OP_CHECKSIGFROMSTACK`: \n+  `<txfs> OP_TXHASH <pubkey> OP_CHECKSIGFROMSTACK` effectively emulates `SIGHASH_ANYPREVOUT`.\n+\n+\n+# Detailed Specification",
      "path": "bip-0346.md",
      "position": 362,
      "original_position": 362,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems to be talking about the Reference Implementation, not a Specification?",
      "created_at": "2025-01-16T16:39:35Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918870895",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918870895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 362,
      "original_line": 362,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918871824",
      "pull_request_review_id": 2553115630,
      "id": 1918871824,
      "node_id": "PRRC_kwDOAN28mc5yX6kQ",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary",
      "path": "bip-0346.md",
      "position": 33,
      "original_position": 33,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this section perhaps be called \"Specification\"?",
      "created_at": "2025-01-16T16:40:09Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918871824",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918871824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918876587",
      "pull_request_review_id": 2553115630,
      "id": 1918876587,
      "node_id": "PRRC_kwDOAN28mc5yX7ur",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.\n+* The TxHash of the transaction is calculated at the current input index using\n+  the TxFieldSelector.\n+* The StackTxHash equals the TxHash, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript\n+opcode (`0xbd`) as a soft fork upgrade. This opcode is only active in tapscript\n+context.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* The TxFieldSelector must be valid, fail otherwise.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys and amounts.\n+\n+    Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * 1: `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX`\n+    * 2: `TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+    * 3: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * 4: `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+  * If the TxFieldSelector has exactly 1 byte, it has its 8 bits\n+    assigned as follows, from lowest to highest:\n+    * 2/1: Inputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 4/3: Outputs\n+      * 00: `TXFS_INOUT_SELECTION_NONE`\n+      * 01: `TXFS_INOUT_SELECTION_CURRENT`\n+      * 11: `TXFS_INOUT_SELECTION_ALL`\n+    * 5: `TXFS_INPUTS_PREVOUTS`\n+    * 6: `TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES`\n+    * 7: `TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_SPENTSCRIPT | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`\n+    * 8: `TXFS_CURRENT_INPUT_IDX`\n+\n+    Additionally, it includes `TXFS_VERSION | TXFS_LOCKTIME | TXFS_CONTROL | TXFS_CURRENT_INPUT_TAPROOT_ANNEX | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_OUTPUTS_ALL`\n+\n+    These 1-byte selections allow the TxFieldSelector to emulate current\n+    signature hashing modes and those defined in BIP-118:\n+\n+| BIP-341/118 sighash type     | 1-byte TxFieldSelector |\n+| :--------------------------- | :--------------------- |\n+| `ALL`                        | `0b11111111`           |\n+| `SINGLE`                     | `0b11110111`           |\n+| `NONE`                       | `0b11110011`           |\n+| `ALL|ANYONECANPAY`           | `0b11111101`           |\n+| `SINGLE|ANYONECANPAY`        | `0b11110101`           |\n+| `NONE|ANYONECANPAY`          | `0b11110001`           |\n+| `ALL|ANYPREVOUT`             | `0b11101101`           |\n+| `SINGLE|ANYPREVOUT`          | `0b11100101`           |\n+| `NONE|ANYPREVOUT`            | `0b11100001`           |\n+| `ALL|ANYPREVOUTANYSCRIPT`    | `0b11001101`           |\n+| `SINGLE|ANYPREVOUTANYSCRIPT` | `0b11000101`           |\n+| `NONE|ANYPREVOUTANYSCRIPT`   | `0b11000001`           |\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * 1: version (`TXFS_VERSION`)\n+  * 2: locktime (`TXFS_LOCKTIME`)\n+  * 3: current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * 4: current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * 5: current input spent script (i.e. witness script or tapscript) (`TXFS_CURRENT_INPUT_SPENTSCRIPT`)\n+  * 6: current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * 7: current input annex (or empty) (`TXFS_CURRENT_INPUT_TAPROOT_ANNEX`)\n+  * 8: `TXFS_CONTROL` (i.e. include TxFieldSelector into hash)\n+\n+* The highest bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* The second byte will be used to indicate fields from the inputs and outputs.\n+  If there is only a single byte present, no information from the inputs and\n+  outputs will be committed. Otherwise, of the second byte, the 8 bits are\n+  assigned the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * 1: prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * 2: sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * 3: scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * 4: prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * 5: prevout values (`TXFS_INPUTS_PREV_VALUES`)\n+    * 6: taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * 7: scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * 8: values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+\n+* For both inputs and then outputs, expect an additional byte as follows:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of\n+    in-/outputs\" should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\" (hence only the\n+      number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output\n+      of the current input index\" (it is invalid when current index exceeds\n+      number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_LEADING_SIZE`) is\n+    used to indicate the \"index size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+\n+  * In \"individual mode\", the third highest bit (`TXFS_INOUT_INDIVIDUAL_MODE`)\n+    indicates whether we are passing absolute indices (0) or indices relative\n+    to the current input (1), the remaining lowest 5 bits will be interpreted\n+    as `n`, the number of individual in/outputs follow.\n+    * In absolute mode (second highest bit is 0), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the absolute index to select.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the absolute index to select.\n+    * In relative mode (second highest bit is 1), for each of the `n` indices,\n+      at least one extra byte is expected.\n+      * If that byte's highest bit is set to 0, the remaining 7 bits represent\n+        the relative index in two's complement.\n+      * If that byte's highest bit is set to 1, the remaining 7 bits, together\n+        with the next byte's 8 bits represent the relative index in two's\n+        complement.\n+\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 7936\n+* up to 32 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -8191 to +8192.\n+\n+\n+### TxFieldSelector malleability\n+\n+It is possible to represent the same selected data using multiple different\n+TxFieldSelectors. For this reason, users are strongly advised to always set the\n+`TXFS_CONTROL` that commits to the TxFieldSelector that was used to get the\n+hash.\n+\n+\n+\n+### Visualization\n+\n+* first byte\n+\n+```\n+1 0 1 1 1 1 1 1\n+| | | | | | | ^ version\n+| | | | | | ^ locktime\n+| | | | | ^ current input index\n+| | | | ^ current input control block\n+| | | ^ current input spend script\n+| | ^ current script last OP_CODESEPARATOR\n+| ^ unused\n+^ control bit (ie. include TXFS in hash)\n+```\n+\n+* second byte\n+\n+```\n+<-> outputs\n+| | <---------> inputs\n+1 1 1 1 1 1 1 1\n+| | | | | | | ^ prevouts\n+| | | | | | ^ sequences\n+| | | | | ^ scriptSigs\n+| | | | ^ prevout scriptPubkeys\n+| | | ^ prevout values\n+| | ^ taproot annexes\n+| ^ scriptPubkeys\n+^ values\n+```\n+\n+* in/output selector byte\n+\n+\"only the first 3\"\n+```\n+1 0 0 0 0 0 1 1\n+| | | <-------> integer 0b00011 == 3\n+| | ^ index size 0: single byte\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only the first 257\"\n+```\n+1 0 1 0 0 0 0 1  0 0 0 0 0 0 0 1\n+| | | <------------------------> integer 0b00001 00000001 == 257\n+| | ^ index size 1: two bytes\n+| ^ leading mode\n+^ commit the number of in/outputs\n+```\n+\n+\"only indices 0 and 2\"\n+```\n+0 1 0 0 0 0 1 0  0 0 0 0 0 0 0 1  0 0 0 0 0 0 1 1\n+| | | |                           <--------------> second idx: 3\n+| | | |          <-------------> first idx: 1\n+| | | | <-----> selection count: 0b10 == 2\n+| | | ^ index size 0: single byte per index\n+| | ^ absolute index\n+| ^ individual mode\n+^ don't commit the number of in/outputs\n+```\n+\n+* total example\n+\n+```\n+bf ff c2 01 03 83\n+ |  |           ^ commit number of outputs + leading 3 outputs\n+ |  | <------> commit number of inputs + inputs at indices 1 and 3\n+ |  ^ all input and output fields\n+ ^ all regular fields, except for the unused one\n+```\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 25. If this brings the budget below zero,\n+  the script fails immediately.<br>The following considerations should be made:\n+  * All fields that can be of arbitrary size are cachable as TransactionHash\n+    always hashes their hashed values.\n+  * In \"individual mode\", a user can at most commit 32 inputs or outputs,\n+    which we don't consider excessive for potential repeated use.\n+  * In \"leading mode\", a caching strategy can be used where the SHA256 context\n+    is stored every N in/outputs so that multiple executions of the\n+    TransactionHash function can use the caches and only have to hash an\n+    additional N-1 items at most.\n+\n+\n+# Motivation\n+\n+This BIP specifies a basic transaction introspection primitive that is useful\n+to either reduce interactivity in multi-user protocols or to enforce some basic\n+constraints on transactions.\n+\n+Additionally, the constructions specified in this BIP can lay the groundwork for\n+some potential future upgrades:\n+* The TxFieldSelector construction would work well with a hypothetical opcode\n+  `OP_TX` that allows for directly introspecting the transaction by putting the\n+  fields selected on the stack instead of hashing them together.\n+* The TransactionHash obtained by `OP_TXHASH` can be combined with a\n+  hypothetical opcode `OP_CHECKSIGFROMSTACK` to effectively create an\n+  incredibly flexible signature hash, which would enable constructions like\n+  `SIGHASH_ANYPREVOUT`.\n+\n+\n+## Comparing with some alternative proposals\n+\n+* This proposal strictly generalizes BIP-119's `OP_CHECKTEMPLATEVERIFY`, as the\n+  default mode of our TxFieldSelector is semantically the same (though not\n+  byte-for-byte identical) as what `OP_CTV` accomplishes, without costing any\n+  additional bytes. Additionally, using `OP_CHECKTXHASHVERIFY` allows for more\n+  flexibility which can help in the case for\n+  * enabling adding fees to a transaction without breaking a multi-tx protocol;\n+  * multi-user protocols where users are only concerned about their own inputs and outputs.\n+\n+* Constructions like `OP_IN_OUT_VALUE` used with `OP_EQUALVERIFY` can be\n+  emulated by two `OP_TXHASH` instances by using the TxFieldSelector to select\n+  a single input value first and a single output value second and enforcing\n+  equality on the hashes. Neither of these alternatives can be used to enforce\n+  small value differencials without the availability of 64-bit arithmetic in\n+  Script.\n+\n+* Like mentioned above, `SIGHASH_ANYPREVOUT` can be emulated using `OP_TXHASH`\n+  when combined with `OP_CHECKSIGFROMSTACK`: \n+  `<txfs> OP_TXHASH <pubkey> OP_CHECKSIGFROMSTACK` effectively emulates `SIGHASH_ANYPREVOUT`.\n+\n+\n+# Detailed Specification\n+\n+A reference implementation in Rust is provided attached as part of this BIP\n+together with a JSON file of test vectors generated using the reference\n+implementation.\n+\n+\n+# Backwards Compatibility",
      "path": "bip-0346.md",
      "position": 369,
      "original_position": 369,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This might also be a good place to mention the interactions with BIP 118, BIP 119, BIP 347, and BIP 348.",
      "created_at": "2025-01-16T16:43:15Z",
      "updated_at": "2025-01-16T16:50:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1918876587",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918876587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 369,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1991722175",
      "pull_request_review_id": 2678889563,
      "id": 1991722175,
      "node_id": "PRRC_kwDOAN28mc52t0S_",
      "diff_hunk": "@@ -1134,6 +1134,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Brandon Black, Jeremy Rubin\n | Standard\n | Draft\n+|-\n+| [[bip-0346.mediawiki|346]]\n+| Consensus (soft fork)\n+| OP_TXHASH and OP_TXHASHVERIFY",
      "path": "README.mediawiki",
      "position": 7,
      "original_position": 7,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n| OP_TXHASH and OP_CHECKTXHASHVERIFY\r\n```",
      "created_at": "2025-03-12T15:10:36Z",
      "updated_at": "2025-03-12T15:10:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1991722175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1991722175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1140,
      "original_line": 1140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1992311776",
      "pull_request_review_id": 2679897473,
      "id": 1992311776,
      "node_id": "PRRC_kwDOAN28mc52wEPg",
      "diff_hunk": "@@ -1134,6 +1134,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Brandon Black, Jeremy Rubin\n | Standard\n | Draft\n+|-\n+| [[bip-0346.mediawiki|346]]",
      "path": "README.mediawiki",
      "position": 5,
      "original_position": 5,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "CI is failing in part because this section should be inserted between BIPs 345 and 347.",
      "created_at": "2025-03-12T21:19:44Z",
      "updated_at": "2025-03-12T21:19:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1992311776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1992311776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1138,
      "original_line": 1138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2004026072",
      "pull_request_review_id": 2699694176,
      "id": 2004026072,
      "node_id": "PRRC_kwDOAN28mc53cwLY",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.",
      "path": "bip-0346.md",
      "position": 47,
      "original_position": 47,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": null,
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Still digesting this proposal so apologies if bad question, but it might make sense for this opcode to trivially succeed if the tx field selector is not well defined by this BIP? This gives us flexibility in the future with extending how tx's are hashed? 🤷‍♂️ ",
      "created_at": "2025-03-19T18:46:40Z",
      "updated_at": "2025-03-19T18:46:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r2004026072",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2004026072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2082255631",
      "pull_request_review_id": 2829320520,
      "id": 2082255631,
      "node_id": "PRRC_kwDOAN28mc58HLMP",
      "diff_hunk": "@@ -0,0 +1,438 @@\n+```\n+  BIP: 346\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>, Brandon Black <freedom@reardencode.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0346\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and `OP_TXHASH`, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+As mentioned in the Deployment section, alternatively, the\n+`OP_CHECKTXHASHVERIFY` semantics could be used to upgrade an existing deployment\n+of the `OP_CHECKTEMPLATEVERIFY` opcode. The opcode `OP_TXHASH` could then\n+potentially be renamed to `OP_TEMPLATEHASH`.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode\n+(`0xb3`) as a soft fork upgrade. This opcode is active in both legacy script,\n+segwitv0 p2wsh and tapscript contexts.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, NOP otherwise.\n+* The first 32 bytes are interpreted as the StackTxHash and the remaining\n+  suffix bytes specify the TxFieldSelector.\n+* The TxFieldSelector valid, fail otherwise.",
      "path": "bip-0346.md",
      "position": 47,
      "original_position": 47,
      "commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "original_commit_id": "debd349e6181d949cbea0691fcc0d67b265b02a8",
      "in_reply_to_id": 2004026072,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's not possible. We want to push something to the stack and going from nothing to the stack to something on the stack is a breaking change. Unfortunately it's not possible to have softfork-able hooks into this opcode.",
      "created_at": "2025-05-09T18:15:25Z",
      "updated_at": "2025-05-09T18:15:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r2082255631",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2082255631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    }
  ]
}