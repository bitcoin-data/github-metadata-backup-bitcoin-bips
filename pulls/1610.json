{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1610",
    "id": 1907628789,
    "node_id": "PR_kwDOAN28mc5xtBr1",
    "html_url": "https://github.com/bitcoin/bips/pull/1610",
    "diff_url": "https://github.com/bitcoin/bips/pull/1610.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1610.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1610/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
    "number": 1610,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP miniscript",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2024-06-06T16:20:48Z",
    "updated_at": "2024-06-20T14:37:01Z",
    "mergeable": true,
    "mergeable_state": "unstable",
    "merge_commit_sha": "3f18dc2cb98871a9847ac60dd1a4b26a2b2e714c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:miniscript",
      "ref": "miniscript",
      "sha": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45007004,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNzAwNA==",
        "name": "bips",
        "full_name": "achow101/bips",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bips",
        "archive_url": "https://api.github.com/repos/achow101/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bips/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bips/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bips/downloads",
        "events_url": "https://api.github.com/repos/achow101/bips/events",
        "forks_url": "https://api.github.com/repos/achow101/bips/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bips.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bips/languages",
        "merges_url": "https://api.github.com/repos/achow101/bips/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bips.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bips/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bips/tags",
        "teams_url": "https://api.github.com/repos/achow101/bips/teams",
        "trees_url": "https://api.github.com/repos/achow101/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bips.git",
        "hooks_url": "https://api.github.com/repos/achow101/bips/hooks",
        "svn_url": "https://github.com/achow101/bips",
        "homepage": "bitcoin.org",
        "language": "Python",
        "forks_count": 1,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 15074,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-06-20T04:06:34Z",
        "created_at": "2015-10-27T00:37:26Z",
        "updated_at": "2024-05-22T13:13:57Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "85cda4e225b4d5fd7aff403f69d827f23f6afbbc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5289,
        "stargazers_count": 9076,
        "watchers_count": 9076,
        "size": 15073,
        "default_branch": "master",
        "open_issues_count": 50,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-06-20T12:34:03Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2024-06-20T10:35:01Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 442,
    "deletions": 0,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 19,
    "comments": 22
  },
  "events": [
    {
      "event": "labeled",
      "id": 13069993789,
      "node_id": "LE_lADOAN28mc6LZS8tzwAAAAMLCEc9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13069993789",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T17:17:44Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2161373088,
      "node_id": "IC_kwDOAN28mc6A0--g",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161373088",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:29:59Z",
      "updated_at": "2024-06-11T18:29:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Was wondering whether @sipa, @apoelstra, @sanket1729, @darosior might want to review this?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161373088",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13121225701,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOFgPl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225701",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "subscribed",
      "id": 13121225717,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOFgP1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225717",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "mentioned",
      "id": 13121225729,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOFgQB",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225729",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "subscribed",
      "id": 13121225739,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOFgQL",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225739",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "mentioned",
      "id": 13121225755,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOFgQb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225755",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "subscribed",
      "id": 13121225764,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOFgQk",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225764",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "mentioned",
      "id": 13121225787,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOFgQ7",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225787",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:02Z"
    },
    {
      "event": "subscribed",
      "id": 13121225800,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOFgRI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225800",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:02Z"
    },
    {
      "event": "commented",
      "id": 2161407987,
      "node_id": "IC_kwDOAN28mc6A1Hfz",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161407987",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:51:22Z",
      "updated_at": "2024-06-11T18:51:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "For the most part this looks great to me. In 3282c75eea9eb2698288c8d72e9a6af6f70b0e7c:\r\n\r\n* There is trailing whitespace on a couple of lines.\r\n* The definition of \"non-canonical\" doesn't make sense to me (and I forget what the correct definition is supposed to be :) @sipa do you remember?)\r\n* I think the `Type system` section (lowercase `s`) should be moved up and folded into the `Type System` section (uppercase `s`).\r\n",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161407987",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13121450566,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOGXJG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121450566",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:51:23Z"
    },
    {
      "event": "subscribed",
      "id": 13121450572,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOGXJM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121450572",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:51:23Z"
    },
    {
      "event": "commented",
      "id": 2161501690,
      "node_id": "IC_kwDOAN28mc6A1eX6",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161501690",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:53:24Z",
      "updated_at": "2024-06-11T19:53:24Z",
      "author_association": "MEMBER",
      "body": "@apoelstra I think it's roughly right. Non-canonical (dis)satisfactions are ones that are valid by script semantics (and thus need to be taken into account when they're available to malleators, e.g.), but can be proven to never be used by the specified non-malleable satisfaction algorithm.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161501690",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13122073627,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOIvQb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122073627",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:53:24Z"
    },
    {
      "event": "subscribed",
      "id": 13122073648,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOIvQw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122073648",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:53:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13122121577,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMOI69p",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122121577",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:57:29Z"
    },
    {
      "event": "commented",
      "id": 2161510484,
      "node_id": "IC_kwDOAN28mc6A1ghU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161510484",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:59:15Z",
      "updated_at": "2024-06-11T19:59:15Z",
      "author_association": "MEMBER",
      "body": "> There is trailing whitespace on a couple of lines.\r\n\r\nFixed\r\n\r\n\r\n\r\n> I think the `Type system` section (lowercase `s`) should be moved up and folded into the `Type System` section (uppercase `s`).\r\n\r\nThis was a deliberate decision to split the discussion/reasoning/explanation of things away from the specification. The types are explained in the discussion section since an implementor does not need to understand what each type means in order to implement miniscript.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161510484",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2161512509,
      "node_id": "IC_kwDOAN28mc6A1hA9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161512509",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:00:36Z",
      "updated_at": "2024-06-11T20:00:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa ok, rereading the text, I understand it now, but I think it's worded in a confusing way. The text says \"are not necessary to produce correct witnesses\", but the surrounding text is not about the satisfaction algorithm and it's not clear who they're \"not necessary\" to. My read of it was that they weren't necessary *to the spec*, in which case, why are they listed, and why aren't they necessary.\r\n\r\nI think the text in your comment (they are provably unused by the satisfaction algorithm but they are legal according to consensus rules and available to malleators) is much better.\r\n\r\n>This was a deliberate decision to split the discussion/reasoning/explanation of things away from the specification. The types are explained in the discussion section since an implementor does not need to understand what each type means in order to implement miniscript.\r\n\r\nOk, yeah, that's reasonable. I rescind my request then.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161512509",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13122160572,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOJEe8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122160572",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:00:37Z"
    },
    {
      "event": "subscribed",
      "id": 13122160592,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOJEfQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122160592",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:00:37Z"
    },
    {
      "event": "commented",
      "id": 2161514130,
      "node_id": "IC_kwDOAN28mc6A1haS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161514130",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:01:37Z",
      "updated_at": "2024-06-11T20:01:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK d2f8b25ba2c0ce174c9e8c34acb4d5b7ba6affd0 except that I'd still like the first occurrence of \"non-canonical\" to be changed to have a clearer definition.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161514130",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2161517188,
      "node_id": "IC_kwDOAN28mc6A1iKE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161517188",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:03:31Z",
      "updated_at": "2024-06-11T20:03:31Z",
      "author_association": "MEMBER",
      "body": "> I'd still like the first occurrence of \"non-canonical\" to be changed to have a clearer definition.\r\n\r\nSuggest some words please?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161517188",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2161525663,
      "node_id": "IC_kwDOAN28mc6A1kOf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161525663",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:08:50Z",
      "updated_at": "2024-06-11T20:09:11Z",
      "author_association": "CONTRIBUTOR",
      "body": ">Some options are not actually necessary to produce correct witnesses, and are called *non-canonical* options.\r\n\r\nshould be\r\n\r\n>Some options are inefficient and provably unnecessary to the satisfaction algorithm described below, but are valid according to Script rules and could be used by a malleator or other non-standard actor. These are called *non-canonical* options, and are listed for completeness...",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161525663",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13122536830,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMOKgV-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122536830",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:36:18Z"
    },
    {
      "event": "reviewed",
      "id": 2111432181,
      "node_id": "PRR_kwDOAN28mc592eX1",
      "url": null,
      "actor": null,
      "commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#pullrequestreview-2111432181",
      "submitted_at": "2024-06-11T20:49:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
    },
    {
      "event": "reviewed",
      "id": 2111435372,
      "node_id": "PRR_kwDOAN28mc592fJs",
      "url": null,
      "actor": null,
      "commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "A few quick comments.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#pullrequestreview-2111435372",
      "submitted_at": "2024-06-11T20:59:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13123110732,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMOMsdM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13123110732",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T21:49:00Z"
    },
    {
      "event": "reviewed",
      "id": 2115158064,
      "node_id": "PRR_kwDOAN28mc5-EsAw",
      "url": null,
      "actor": null,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#pullrequestreview-2115158064",
      "submitted_at": "2024-06-13T08:40:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
    },
    {
      "event": "reviewed",
      "id": 2115164598,
      "node_id": "PRR_kwDOAN28mc5-Etm2",
      "url": null,
      "actor": null,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#pullrequestreview-2115164598",
      "submitted_at": "2024-06-13T08:43:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
    },
    {
      "event": "reviewed",
      "id": 2115168634,
      "node_id": "PRR_kwDOAN28mc5-Eul6",
      "url": null,
      "actor": null,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#pullrequestreview-2115168634",
      "submitted_at": "2024-06-13T08:45:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13152039808,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMP7DOA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13152039808",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T19:46:55Z"
    },
    {
      "event": "commented",
      "id": 2168341054,
      "node_id": "IC_kwDOAN28mc6BPkI-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2168341054",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T16:10:39Z",
      "updated_at": "2024-06-14T16:10:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK c868e9e3d662663dafff5a4d9fbee35a6bc4b94e other than the locktime rule.\r\n\r\nI think that, after the correctness table, we should add some text like:\r\n\r\n\"Additionally there is one **global** correctness rule: every `older` fragment within a Miniscript fragment must make the same choice of height- or time-based timelocks. Similarly, every `after` fragment must make the same choice of height- or time-based timelocks. (It is permissible for the `older` fragments to differ from the `after` fragments.)\"\r\n\r\nI think it makes sense for this to appear outside of the table because all the rules in the table are local, in the sense that once you see a fragmet you know whether it's legal or not. Vs this thing which is a global rule that breaks composability.\r\n\r\nMaybe we should recommend people always use height-based timelocks to avoid running afoul of this rule?",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2168341054",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2168348347,
      "node_id": "IC_kwDOAN28mc6BPl67",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2168348347",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T16:15:38Z",
      "updated_at": "2024-06-14T16:15:38Z",
      "author_association": "MEMBER",
      "body": "@apoelstra That's too strong, I think. It is only groups that get anded/threshed together that cannot conflict in their height vs time constraints. Pure disjunctions can make distinct choices. In that sense it is not a global constraint, but a local one just like the other type properties.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2168348347",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13163008526,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMQk5IO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13163008526",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T16:15:39Z"
    },
    {
      "event": "subscribed",
      "id": 13163008541,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMQk5Id",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13163008541",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T16:15:39Z"
    },
    {
      "event": "commented",
      "id": 2168351591,
      "node_id": "IC_kwDOAN28mc6BPmtn",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2168351591",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T16:17:57Z",
      "updated_at": "2024-06-14T16:17:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ah, yes, you're right. It's a local constraint on the conjunctions and thresholds I guess.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2168351591",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2168611185,
      "node_id": "IC_kwDOAN28mc6BQmFx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2168611185",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T19:12:43Z",
      "updated_at": "2024-06-14T19:12:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "@achow101 @murchandamus I have this on my review list for this weekend. ",
      "user": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2168611185",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13164722602,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMQrbmq",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13164722602",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T19:12:44Z"
    },
    {
      "event": "subscribed",
      "id": 13164722609,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMQrbmx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13164722609",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T19:12:44Z"
    },
    {
      "event": "mentioned",
      "id": 13164722620,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMQrbm8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13164722620",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T19:12:44Z"
    },
    {
      "event": "subscribed",
      "id": 13164722629,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMQrbnF",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13164722629",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T19:12:44Z"
    },
    {
      "event": "commented",
      "id": 2171913790,
      "node_id": "IC_kwDOAN28mc6BdMY-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2171913790",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-16T22:31:32Z",
      "updated_at": "2024-06-16T22:31:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think it makes sense for this to appear outside of the table because all the rules in the table are local, in the sense that once you see a fragmet you know whether it's legal or not. Vs this thing which is a global rule that breaks composability.\r\n\r\nI think adding 5 new type properties in the table will pollute(add too many things in the row) the existing properties and confuse people. For the sake of completeness, we can write a description of how \"k\" property is computed and link to the source c++ code for details. \r\n\r\nHow about adding a line after the table:\r\n\r\n> Property 'k' is determined as follows: Each leaf node inherently possesses property 'k'. A parent node will not have property 'k' if any of its children lack this property. Furthermore, in scenarios involving thresholds (k ≥ 2) or conjunctions, property 'k'—which indicates no-timelock mixing—is absent if the node contains two or more children that require different types of timelock conditions for their satisfaction.",
      "user": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2171913790",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13208172643,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMTRLhj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13208172643",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T00:17:09Z"
    },
    {
      "event": "commented",
      "id": 2177289499,
      "node_id": "IC_kwDOAN28mc6Bxs0b",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2177289499",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T00:17:51Z",
      "updated_at": "2024-06-19T00:17:51Z",
      "author_association": "MEMBER",
      "body": "> I think adding 5 new type properties in the table will pollute(add too many things in the row) the existing properties and confuse people. For the sake of completeness, we can write a description of how \"k\" property is computed and link to the source c++ code for details.\r\n\r\nI agree\r\n\r\n> How about adding a line after the table:\r\n> \r\n> > Property 'k' is determined as follows: Each leaf node inherently possesses property 'k'. A parent node will not have property 'k' if any of its children lack this property. Furthermore, in scenarios involving thresholds (k ≥ 2) or conjunctions, property 'k'—which indicates no-timelock mixing—is absent if the node contains two or more children that require different types of timelock conditions for their satisfaction.\r\n\r\nI've added a line similar to this, with slightly different wording.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2177289499",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2178783592,
      "node_id": "IC_kwDOAN28mc6B3Zlo",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2178783592",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T13:55:02Z",
      "updated_at": "2024-06-19T13:55:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\nFor parent nodes with multiple children (thresholds and conjunctions),\r\n```\r\nshould be changed to Sanket's original `For thresholds with k >= 2 and conjunctions,`. The existing wording is confusing because it's not obvious what the rule for disjunctions or k=1 thresholds are.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2178783592",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2179154001,
      "node_id": "IC_kwDOAN28mc6B40BR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2179154001",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T17:02:54Z",
      "updated_at": "2024-06-19T17:05:47Z",
      "author_association": "MEMBER",
      "body": "> should be changed to Sanket's original `For thresholds with k >= 2 and conjunctions,`. The existing wording is confusing because it's not obvious what the rule for disjunctions or k=1 thresholds are.\r\n\r\nI find it confusing that the type is `k`, but for thresholds, we're also going to mentioning a `k` that means something completely different.\r\n\r\n***\r\n\r\nUpdated the sentence.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2179154001",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13219124186,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMT69Pa",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13219124186",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T17:04:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13219133303,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMT6_d3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13219133303",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T17:05:07Z"
    },
    {
      "event": "commented",
      "id": 2179561829,
      "node_id": "IC_kwDOAN28mc6B6Xll",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2179561829",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T23:26:30Z",
      "updated_at": "2024-06-19T23:26:30Z",
      "author_association": "MEMBER",
      "body": "If we're not going to include \"k\" as a property in the tables, then I don't think it needs a letter. It can just be described.\r\n\r\nIt's not the only type property that doesn't have a letter: \"validity\" and \"nonmalleability\" also fall in that category.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2179561829",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDA0MDFkMjQ4YzFlNGE5OGEzOWRmMmJjZTRkNDBhMTU2MmEzNmJiZDc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "tree": {
        "sha": "1a6d3424d7bcc9395b8c6c501d73975d529e50e4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1a6d3424d7bcc9395b8c6c501d73975d529e50e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/70d9b07ab80ab3c267ece48f74e4e2250226d0cc",
          "sha": "70d9b07ab80ab3c267ece48f74e4e2250226d0cc",
          "html_url": "https://github.com/bitcoin/bips/commit/70d9b07ab80ab3c267ece48f74e4e2250226d0cc"
        }
      ],
      "message": "BIP miniscript: Specify Miniscript\n\nCo-Authored-By: Antoine Poinsot <darosior@protonmail.com>",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-06-20T04:06:31Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-04-10T13:37:34Z"
      },
      "sha": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13222916428,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMUJbFM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13222916428",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T04:06:36Z"
    },
    {
      "event": "commented",
      "id": 2179767684,
      "node_id": "IC_kwDOAN28mc6B7J2E",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2179767684",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T04:07:05Z",
      "updated_at": "2024-06-20T04:07:15Z",
      "author_association": "MEMBER",
      "body": "I've removed the `k` property and wrote a subsection that describes the timelock mixing constraints. The wording is a little bit awkward though.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2179767684",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2180760121,
      "node_id": "IC_kwDOAN28mc6B-8I5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2180760121",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T13:50:00Z",
      "updated_at": "2024-06-20T13:50:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "I would suggest this wording:\r\n\r\n\"\r\n#### Timelock Type Mixing\r\n\r\nThere is one additional correctness property that Miniscript programs must satisfy: the four timelock types (absolute time-based, absolute height-based, relative time-based and relative height-based) must not be mixed in an incompatible way. Specifically, within the `and` combinator and the `thresh` combinator where k >= 2, it is illegal for both absolute height-based and time-based locktimes to appear, or for both relative height-based and time-based locktimes to appear.\r\n\r\nOutside of these combinators, it is legal to mix height-based and time-based timelocks, and it is always legal to mix absolute and relative timelocks (even if one is height-based and the other is time-based).\r\n\"\r\n\r\nI think trying to split height/time and absolute/relative into \"types\" and \"categories\" is too hard to describe clearly and that it's easier to exhaustively list all four possibilities and how the can be mixed.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2180760121",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2180847410,
      "node_id": "IC_kwDOAN28mc6B_Rcy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2180847410",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T14:25:27Z",
      "updated_at": "2024-06-20T14:27:00Z",
      "author_association": "MEMBER",
      "body": "In the Bitcoin Core implementation malleability and timelock mixing (as well as resource limit checks) are not part of \"validity\", but of \"sanity\". The distinction being that valid-but-insane miniscripts can be parsed, and the satisfaction algorithm can be run for it, and *if* it succeeds the result can be a valid transaction. Sanity additionally guarantees that the resulting policy of the actually emitted script will match the apparent policy. The idea is that when designing scripts you probably only want sane ones, but if somehow you're confronted with an insane but valid one after the fact (e.g., it already holds funds), the code shouldn't fail at the parsing stage preventing you from attempting to sign it anyway.\r\n\r\nDo we want to make that distinction clear in the BIP?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2180847410",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2180861122,
      "node_id": "IC_kwDOAN28mc6B_UzC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2180861122",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T14:31:47Z",
      "updated_at": "2024-06-20T14:31:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Similar in rust-miniscript -- though we've generalized things a bit so that the caller can (if they want to use the annoying form of the API) individually toggle all of the \"sanity\" checks. The exact definition of \"sane\" feels ad-hoc and hard to remember and usually I need to check the source code of the default rust-miniscript parser to see which flags it has set/unset.\r\n\r\nIMHO we shouldn't bother making this distinction in the BIP, and just consider insane parsers to be \"extensions\" or nonstandard. Though maybe we could add a sentence saying it's possible to do this.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2180861122",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2180872480,
      "node_id": "IC_kwDOAN28mc6B_Xkg",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2180872480",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T14:37:00Z",
      "updated_at": "2024-06-20T14:37:00Z",
      "author_association": "MEMBER",
      "body": "@apoelstra I'm not sure. The sanity checks are arguably more complicated (or at least similarly complicated) to all the validity checks combined. If we want to only treat sane scripts as BIP-valid-miniscript, then I think it should be fully specified in the BIP (including e.g. stack limit analysis).\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2180872480",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13230329584,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMUls7w",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13230329584",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T14:37:02Z"
    },
    {
      "event": "subscribed",
      "id": 13230329596,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMUls78",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13230329596",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T14:37:02Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635468427",
      "pull_request_review_id": 2111435372,
      "id": 1635468427,
      "node_id": "PRRC_kwDOAN28mc5he0SL",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 49,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "BIP141 specifies the P2WSH consensus rules (BIP143 is just the sighash scheme)",
      "created_at": "2024-06-11T20:51:38Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635468427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635468427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635469072",
      "pull_request_review_id": 2111435372,
      "id": 1635469072,
      "node_id": "PRRC_kwDOAN28mc5he0cQ",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 59,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't generally permit spaces in descriptor notation.",
      "created_at": "2024-06-11T20:52:20Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635469072",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635469072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635471120",
      "pull_request_review_id": 2111435372,
      "id": 1635471120,
      "node_id": "PRRC_kwDOAN28mc5he08Q",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 73,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps a sentence like \"From a user's perspective, Miniscript is not a separate language, but a (significant) expansion of the descriptor language\"? Alternatively, this could go in the Abstract too.",
      "created_at": "2024-06-11T20:54:36Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635471120",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635471120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635472033",
      "pull_request_review_id": 2111435372,
      "id": 1635472033,
      "node_id": "PRRC_kwDOAN28mc5he1Kh",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 123,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: consistency, either \"zero-arg\" and \"one-arg\", or \"zero arg\" and \"one arg\".",
      "created_at": "2024-06-11T20:55:31Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635472033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635472033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635472732",
      "pull_request_review_id": 2111435372,
      "id": 1635472732,
      "node_id": "PRRC_kwDOAN28mc5he1Vc",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 124,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The typing rules for timelock mixing don't seem to be included here.",
      "created_at": "2024-06-11T20:56:17Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635472732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635472732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635473445",
      "pull_request_review_id": 2111435372,
      "id": 1635473445,
      "node_id": "PRRC_kwDOAN28mc5he1gl",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u\n+| `multi_a(k,key_1,...,key_n)` | 1 &le; k &le; n                                       | B           | d; u\n+| `a:X`                        | X is B                                                | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `s:X`                        | X is Bo                                               | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `c:X`                        | X is K                                                | B           | o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+| `d:X`                        | X is Vz                                               | B           | o; n; d; *(Tapscript only)* u\n+| `v:X`                        | X is B                                                | V           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>\n+| `j:X`                        | X is Bn                                               | B           | o=o<sub>X</sub>; n; d; u=u<sub>X</sub>\n+| `n:X`                        | X is B                                                | B           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+\n+\n+#### Malleability\n+\n+Malleability is the ability for a third party (*not* a participant in the script) to modify an",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 161,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"participant\" could be made more specific: \"*not* someone who holds a participating private key\".",
      "created_at": "2024-06-11T20:57:02Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635473445",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635473445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635516999",
      "pull_request_review_id": 2111509144,
      "id": 1635516999,
      "node_id": "PRRC_kwDOAN28mc5hfAJH",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 49,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635468427,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-06-11T21:49:06Z",
      "updated_at": "2024-06-11T21:49:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635516999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635516999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517054",
      "pull_request_review_id": 2111509225,
      "id": 1635517054,
      "node_id": "PRRC_kwDOAN28mc5hfAJ-",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 59,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635469072,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-06-11T21:49:10Z",
      "updated_at": "2024-06-11T21:49:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635517054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517148",
      "pull_request_review_id": 2111509341,
      "id": 1635517148,
      "node_id": "PRRC_kwDOAN28mc5hfALc",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 73,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635471120,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-06-11T21:49:17Z",
      "updated_at": "2024-06-11T21:49:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635517148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517195",
      "pull_request_review_id": 2111509414,
      "id": 1635517195,
      "node_id": "PRRC_kwDOAN28mc5hfAML",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 123,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635472033,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-06-11T21:49:21Z",
      "updated_at": "2024-06-11T21:49:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635517195",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517273",
      "pull_request_review_id": 2111509549,
      "id": 1635517273,
      "node_id": "PRRC_kwDOAN28mc5hfANZ",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u\n+| `multi_a(k,key_1,...,key_n)` | 1 &le; k &le; n                                       | B           | d; u\n+| `a:X`                        | X is B                                                | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `s:X`                        | X is Bo                                               | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `c:X`                        | X is K                                                | B           | o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+| `d:X`                        | X is Vz                                               | B           | o; n; d; *(Tapscript only)* u\n+| `v:X`                        | X is B                                                | V           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>\n+| `j:X`                        | X is Bn                                               | B           | o=o<sub>X</sub>; n; d; u=u<sub>X</sub>\n+| `n:X`                        | X is B                                                | B           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+\n+\n+#### Malleability\n+\n+Malleability is the ability for a third party (*not* a participant in the script) to modify an",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 161,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635473445,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-06-11T21:49:28Z",
      "updated_at": "2024-06-11T21:49:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635517273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1637825017",
      "pull_request_review_id": 2115158064,
      "id": 1637825017,
      "node_id": "PRRC_kwDOAN28mc5hnzn5",
      "diff_hunk": "@@ -0,0 +1,410 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP141) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1,arg2,...)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts. From a user's perspective,\n+Miniscript is not a separate language, but rather a significant expansion of the descriptor language.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero-arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u\n+| `multi_a(k,key_1,...,key_n)` | 1 &le; k &le; n                                       | B           | d; u\n+| `a:X`                        | X is B                                                | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `s:X`                        | X is Bo                                               | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `c:X`                        | X is K                                                | B           | o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+| `d:X`                        | X is Vz                                               | B           | o; n; d; *(Tapscript only)* u\n+| `v:X`                        | X is B                                                | V           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>\n+| `j:X`                        | X is Bn                                               | B           | o=o<sub>X</sub>; n; d; u=u<sub>X</sub>\n+| `n:X`                        | X is B                                                | B           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+\n+\n+#### Malleability\n+\n+Malleability is the ability for a third party (someone who does *not* hold a participating private\n+key) to modify an existing satisfaction into another valid satisfaction. To analyze the\n+malleability guarantees of a script we define three additional type properties: \"**s**\" (signed),\n+\"**f**\" (forced) and \"**e**\" (expressive).\n+\n+The following table lists the malleability properties and requirement of each fragment.\n+\n+| Miniscript                   | Requires                                                            | Properties\n+|------------------------------|---------------------------------------------------------------------|-----------\n+| `0`                          |                                                                     | s, e\n+| `1`                          |                                                                     | f\n+| `pk_k(key)`                  |                                                                     | s, e\n+| `pk_h(key)`                  |                                                                     | s, e\n+| `older(n)`                   |                                                                     | f\n+| `after(n)`                   |                                                                     | f\n+| `sha256(h)`                  |                                                                     |\n+| `ripemd160(h)`               |                                                                     |\n+| `hash256(h)`                 |                                                                     |\n+| `hash160(h)`                 |                                                                     |\n+| `andor(X,Y,Z)`               | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Y</sub> or s<sub>Z</sub>) | s=s<sub>Z</sub> and (s<sub>X</sub> or s<sub>Y</sub>); f=f<sub>Z</sub> and (s<sub>X</sub> or f<sub>Y</sub>); e=e<sub>Z</sub> and (s<sub>X</sub> or f<sub>Y</sub>)\n+| `and_v(X,Y)`                 |                                                                     | s=s<sub>X</sub> or s<sub>Y</sub>; f=s<sub>X</sub> or f<sub>Y</sub>\n+| `and_b(X,Y)`                 |                                                                     | s=s<sub>X </sub>or s<sub>Y;</sub> f=f<sub>Xf</sub><sub>Y</sub> or s<sub>X</sub>f<sub>X</sub> or s<sub>Y</sub>f<sub>Y</sub>; e=e<sub>X</sub>e<sub>Y</sub>s<sub>X</sub>s<sub>Y</sub>\n+| `or_b(X,Z)`                  | e<sub>Xe</sub><sub>Z </sub>and (s<sub>X</sub> or s<sub>Z</sub>)     | s=s<sub>X</sub>s<sub>Z</sub>; e\n+| `or_c(X,Z)`                  | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Z</sub>)                  | s=s<sub>X</sub>s<sub>Z</sub>; f\n+| `or_d(X,Z)`                  | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Z</sub>)                  | s=s<sub>X</sub>s<sub>Z</sub>; f=f<sub>Z</sub>; e=e<sub>Z</sub>\n+| `or_i(X,Z)`                  | s<sub>X</sub> or s<sub>Z</sub>                                      | s=s<sub>X</sub>s<sub>Z</sub>; f=f<sub>X</sub>f<sub>Z</sub>; e=e<sub>X</sub>f<sub>Z</sub> or e<sub>Z</sub>f<sub>X</sub>\n+| `thresh(k,X_1,...,X_n)`      | all are e; at most k are non-s                                      | s=at most k-1 are non-s; e=all are s\n+| `multi(k,key_1,...,key_n)`   |                                                                     | s; e\n+| `multi_a(k,key_1,...,key_n)` |                                                                     | s; e\n+| `a:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `s:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `c:X`                        |                                                                     | s; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `d:X`                        |                                                                     | s=s<sub>X</sub>; e\n+| `v:X`                        |                                                                     | s=s<sub>X</sub>; f\n+| `j:X`                        |                                                                     | s=s<sub>X</sub>; e=f<sub>X\n+| `n:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+\n+### Satisfaction\n+\n+The following table shows all valid satisfactions and dissatisfactions for every Miniscript, using\n+satisfactions and dissatisfactions of its subexpressions. Multiple possibilities are separated by\n+semicolons. Some options are inefficient and provably unnecessary to the satisfaction algorithm\n+described below, but are valid according to script rules and could be used by a malleator or other\n+non-standard actor. These are called *non-canonical* options, and are listed for completeness, but\n+~~[struckthrough]~~. The fragments where a satisfaction or dissatisfaction does not exist will\n+contain *(none)*. The fragments where the satisfaction or dissatisfaction is to provide no data\n+will contain *(empty)*.\n+\n+| Miniscript                   | Dissatisfactions (dsat)                                 | Satisfactions (sat)\n+|------------------------------|---------------------------------------------------------|--------------------\n+| `0`                          | *(empty)*                                               | *(none)*\n+| `1`                          | *(none)*                                                | *(empty)*\n+| `pk_k(key)`                  | 0                                                       | sig\n+| `pk_h(key)`                  | 0 key                                                   | sig key\n+| `older(n)`                   | *(none)*                                                | *(empty)*\n+| `after(n)`                   | *(none)*                                                | *(empty)*\n+| `sha256(h)`                  | any 32-byte vector except the preimage                  | preimage\n+| `ripemd160(h)`               | any 32-byte vector except the preimage                  | preimage\n+| `hash256(h)`                 | any 32-byte vector except the preimage                  | preimage\n+| `hash160(h)`                 | any 32-byte vector except the preimage                  | preimage\n+| `andor(X,Y,Z)`               | dsat(Z) dsat(X); ~~[dsat(Y) sat(X)]~~                   | sat(Y) sat(X); sat(Z) dsat(X)\n+| `and_v(X,Y)`                 | *(none)*; ~~[dsat(Y) sat(X)]~~                          | sat(Y) sat(X)\n+| `and_b(X,Y)`                 | dsat(Y) dsat(X); ~~[sat(Y) dsat(X)]; [dsat(Y) sat(X)]~~ | sat(Y) sat(X)\n+| `or_b(X,Z)`                  | dsat(Z) dsat(X)                                         | dsat(Z) sat(X); sat(Z) dsat(X); ~~[sat(Z) sat(X)]~~\n+| `or_c(X,Z)`                  | *(none)*                                                | sat(X); sat(Z) dsat(X)\n+| `or_d(X,Z)`                  | dsat(Z) dsat(X)                                         | sat(X); sat(Z) dsat(X)\n+| `or_i(X,Z)`                  | dsat(X) 1; dsat(Z) 0                                    | sat(X) 1; sat(Z) 0\n+| `thresh(k,X_1,...,X_n)`      | All dsats; ~~[Sats/dsats with 1 &le; #(sats) &ne; k]~~  | Sats/dsats with #(sats) = k\n+| `multi(k,key_1,...,key_n)`   | 0 0 ... 0 (k+1 times)                                   | 0 sig ... sig\n+| `multi_a(k,key_1,...,key_n)` | 0 ... 0 (n times)                                       | sig/0 with #(sig) = k and #(sigs/0) = n",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 231,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it's missing a non-canonical dissatisfaction for `multi_a`: sig/0 with #(sig) &ne; k",
      "created_at": "2024-06-13T08:40:57Z",
      "updated_at": "2024-06-13T08:40:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1637825017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1637825017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1637829089",
      "pull_request_review_id": 2115164598,
      "id": 1637829089,
      "node_id": "PRRC_kwDOAN28mc5hn0nh",
      "diff_hunk": "@@ -0,0 +1,410 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP141) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1,arg2,...)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts. From a user's perspective,\n+Miniscript is not a separate language, but rather a significant expansion of the descriptor language.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero-arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 149,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: we could add \"n &le; 20\" as a constraint as per https://github.com/sipa/miniscript/pull/131",
      "created_at": "2024-06-13T08:43:56Z",
      "updated_at": "2024-06-13T08:43:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1637829089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1637829089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1637831613",
      "pull_request_review_id": 2115168634,
      "id": 1637831613,
      "node_id": "PRRC_kwDOAN28mc5hn1O9",
      "diff_hunk": "@@ -0,0 +1,410 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP141) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1,arg2,...)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts. From a user's perspective,\n+Miniscript is not a separate language, but rather a significant expansion of the descriptor language.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero-arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u\n+| `multi_a(k,key_1,...,key_n)` | 1 &le; k &le; n                                       | B           | d; u\n+| `a:X`                        | X is B                                                | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `s:X`                        | X is Bo                                               | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `c:X`                        | X is K                                                | B           | o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+| `d:X`                        | X is Vz                                               | B           | o; n; d; *(Tapscript only)* u\n+| `v:X`                        | X is B                                                | V           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>\n+| `j:X`                        | X is Bn                                               | B           | o=o<sub>X</sub>; n; d; u=u<sub>X</sub>\n+| `n:X`                        | X is B                                                | B           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+\n+\n+#### Malleability\n+\n+Malleability is the ability for a third party (someone who does *not* hold a participating private\n+key) to modify an existing satisfaction into another valid satisfaction. To analyze the\n+malleability guarantees of a script we define three additional type properties: \"**s**\" (signed),\n+\"**f**\" (forced) and \"**e**\" (expressive).\n+\n+The following table lists the malleability properties and requirement of each fragment.\n+\n+| Miniscript                   | Requires                                                            | Properties\n+|------------------------------|---------------------------------------------------------------------|-----------\n+| `0`                          |                                                                     | s, e\n+| `1`                          |                                                                     | f\n+| `pk_k(key)`                  |                                                                     | s, e\n+| `pk_h(key)`                  |                                                                     | s, e\n+| `older(n)`                   |                                                                     | f\n+| `after(n)`                   |                                                                     | f\n+| `sha256(h)`                  |                                                                     |\n+| `ripemd160(h)`               |                                                                     |\n+| `hash256(h)`                 |                                                                     |\n+| `hash160(h)`                 |                                                                     |\n+| `andor(X,Y,Z)`               | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Y</sub> or s<sub>Z</sub>) | s=s<sub>Z</sub> and (s<sub>X</sub> or s<sub>Y</sub>); f=f<sub>Z</sub> and (s<sub>X</sub> or f<sub>Y</sub>); e=e<sub>Z</sub> and (s<sub>X</sub> or f<sub>Y</sub>)\n+| `and_v(X,Y)`                 |                                                                     | s=s<sub>X</sub> or s<sub>Y</sub>; f=s<sub>X</sub> or f<sub>Y</sub>\n+| `and_b(X,Y)`                 |                                                                     | s=s<sub>X </sub>or s<sub>Y;</sub> f=f<sub>Xf</sub><sub>Y</sub> or s<sub>X</sub>f<sub>X</sub> or s<sub>Y</sub>f<sub>Y</sub>; e=e<sub>X</sub>e<sub>Y</sub>s<sub>X</sub>s<sub>Y</sub>\n+| `or_b(X,Z)`                  | e<sub>Xe</sub><sub>Z </sub>and (s<sub>X</sub> or s<sub>Z</sub>)     | s=s<sub>X</sub>s<sub>Z</sub>; e\n+| `or_c(X,Z)`                  | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Z</sub>)                  | s=s<sub>X</sub>s<sub>Z</sub>; f\n+| `or_d(X,Z)`                  | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Z</sub>)                  | s=s<sub>X</sub>s<sub>Z</sub>; f=f<sub>Z</sub>; e=e<sub>Z</sub>\n+| `or_i(X,Z)`                  | s<sub>X</sub> or s<sub>Z</sub>                                      | s=s<sub>X</sub>s<sub>Z</sub>; f=f<sub>X</sub>f<sub>Z</sub>; e=e<sub>X</sub>f<sub>Z</sub> or e<sub>Z</sub>f<sub>X</sub>\n+| `thresh(k,X_1,...,X_n)`      | all are e; at most k are non-s                                      | s=at most k-1 are non-s; e=all are s\n+| `multi(k,key_1,...,key_n)`   |                                                                     | s; e\n+| `multi_a(k,key_1,...,key_n)` |                                                                     | s; e\n+| `a:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `s:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `c:X`                        |                                                                     | s; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `d:X`                        |                                                                     | s=s<sub>X</sub>; e\n+| `v:X`                        |                                                                     | s=s<sub>X</sub>; f\n+| `j:X`                        |                                                                     | s=s<sub>X</sub>; e=f<sub>X\n+| `n:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+\n+### Satisfaction\n+\n+The following table shows all valid satisfactions and dissatisfactions for every Miniscript, using\n+satisfactions and dissatisfactions of its subexpressions. Multiple possibilities are separated by\n+semicolons. Some options are inefficient and provably unnecessary to the satisfaction algorithm\n+described below, but are valid according to script rules and could be used by a malleator or other\n+non-standard actor. These are called *non-canonical* options, and are listed for completeness, but\n+~~[struckthrough]~~. The fragments where a satisfaction or dissatisfaction does not exist will\n+contain *(none)*. The fragments where the satisfaction or dissatisfaction is to provide no data\n+will contain *(empty)*.\n+\n+| Miniscript                   | Dissatisfactions (dsat)                                 | Satisfactions (sat)\n+|------------------------------|---------------------------------------------------------|--------------------\n+| `0`                          | *(empty)*                                               | *(none)*\n+| `1`                          | *(none)*                                                | *(empty)*\n+| `pk_k(key)`                  | 0                                                       | sig\n+| `pk_h(key)`                  | 0 key                                                   | sig key\n+| `older(n)`                   | *(none)*                                                | *(empty)*\n+| `after(n)`                   | *(none)*                                                | *(empty)*\n+| `sha256(h)`                  | any 32-byte vector except the preimage                  | preimage\n+| `ripemd160(h)`               | any 32-byte vector except the preimage                  | preimage\n+| `hash256(h)`                 | any 32-byte vector except the preimage                  | preimage\n+| `hash160(h)`                 | any 32-byte vector except the preimage                  | preimage\n+| `andor(X,Y,Z)`               | dsat(Z) dsat(X); ~~[dsat(Y) sat(X)]~~                   | sat(Y) sat(X); sat(Z) dsat(X)\n+| `and_v(X,Y)`                 | *(none)*; ~~[dsat(Y) sat(X)]~~                          | sat(Y) sat(X)\n+| `and_b(X,Y)`                 | dsat(Y) dsat(X); ~~[sat(Y) dsat(X)]; [dsat(Y) sat(X)]~~ | sat(Y) sat(X)\n+| `or_b(X,Z)`                  | dsat(Z) dsat(X)                                         | dsat(Z) sat(X); sat(Z) dsat(X); ~~[sat(Z) sat(X)]~~\n+| `or_c(X,Z)`                  | *(none)*                                                | sat(X); sat(Z) dsat(X)\n+| `or_d(X,Z)`                  | dsat(Z) dsat(X)                                         | sat(X); sat(Z) dsat(X)\n+| `or_i(X,Z)`                  | dsat(X) 1; dsat(Z) 0                                    | sat(X) 1; sat(Z) 0\n+| `thresh(k,X_1,...,X_n)`      | All dsats; ~~[Sats/dsats with 1 &le; #(sats) &ne; k]~~  | Sats/dsats with #(sats) = k\n+| `multi(k,key_1,...,key_n)`   | 0 0 ... 0 (k+1 times)                                   | 0 sig ... sig\n+| `multi_a(k,key_1,...,key_n)` | 0 ... 0 (n times)                                       | sig/0 with #(sig) = k and #(sigs/0) = n\n+| `a:X`                        | dsat(X)                                                 | sat(X)\n+| `s:X`                        | dsat(X)                                                 | sat(X)\n+| `c:X`                        | dsat(X)                                                 | sat(X)\n+| `d:X`                        | 0                                                       | sat(X) 1\n+| `v:X`                        | *(none)*                                                | sat(X)\n+| `j:X`                        | 0; ~~[dsat(X) (if nonzero top stack)]~~                 | sat(X)\n+| `n:X`                        | dsat(X)                                                 | sat(X)\n+\n+#### Non-malleable Satisfaction Algorithm\n+\n+In order to produce non-malleable satisfactions we make use of a function that returns the optimal\n+satisfaction and dissatisfaction for a given expression (if any exist), or a special DONTUSE value,\n+together with an optional HASSIG marker that tracks whether the solution contains at least one\n+signature. To implement the function:\n+* Invoke the function recursively for all subexpressions, obtaining all their satisfactions/dissatisfactions.\n+* Iterate over all the valid satisfactions/dissatisfactions in the table above (including the non-canonical ones), taking into account:\n+ * The dissatisfactions for `sha256`, `ripemd160`, `hash256`, and `hash160` are always malleable, so instead use DONTUSE there.\n+ * The non-canonical options for `and_b`, `or_b`, and `thresh` are always overcomplete, so instead use DONTUSE there as well (with HASSIG flag if the original non-canonical solution had one).\n+ * The satisfactions for `pk_k`, `pk_h`, and `multi` can be marked HASSIG.\n+ * When constructing solutions by combining results for subexpressions, the result is DONTUSE if any of the constituent results is DONTUSE. Furthermore, the result gets the HASSIG tag if any of the constituents does.\n+* If among all valid solutions (including DONTUSE ones) more than one does not have the HASSIG marker, return DONTUSE.\n+* If instead exactly one does not have the HASSIG marker, return that solution.\n+* If all valid solutions have the HASSIG marker, but all of them are DONTUSE, return DONTUSE-HASSIG. The HASSIG marker is important because while this represents a choice between multiple options that would cause malleability if used, they are not available to the attacker, and we may be able to avoid them entirely still.\n+* Otherwise, all not-DONTUSE options are valid, so return the smallest one (in terms of witness size).\n+\n+To produce an overall satisfaction, invoke the function on the toplevel expression. If no valid\n+satisfaction is returned, or it is DONTUSE, fail. Otherwise, if any timelocking is used in the\n+script but the result does not have the HASSIG flag, also fail. If the satisfaction is both not\n+DONTUSE and HASSIG, return it.\n+\n+\n+## Discussion\n+\n+## Security\n+\n+Miniscript primarily aims to provide guarantees on the correctness of a Bitcoin Script. That is, to\n+guarantee **consensus soundness** and **standardness completeness**. Consensus soundness means\n+it is not possible to construct a consensus-valid witness for a Bitcoin Script unless the Miniscript\n+spending conditions are met. Standardness completeness means a standardness-valid witness can be\n+created for all spending paths of a Miniscript, assuming the resource limits are respected and there\n+is no timelock mixing.\n+\n+Additionally, Miniscript can guarantee the non-malleability and maximum size of a witness. These can\n+assist in assessing the soundness of protocols where transaction fees (and therefore transaction\n+size) are security-critical parameters.\n+\n+Hash preimages are constrained to 32 bytes to disallow various forms of griefing, including making\n+non-standard (un-relayable) transactions, consensus-invalid swaps across blockchains, as well as\n+ensure that satisfaction cost can be accurately calculated.\n+\n+In order for these properties to not just apply to script, but to an entire transaction, it's\n+important that the witness commits to all data relevant for verification. In practice this means\n+that scripts whose conditions can be met without any digital signature are insecure. Besides being\n+trivially insecure, note how a transaction lacking a signature check allows an attacker to change\n+its nLockTime and nSequence fields to meet additional timelock conditions.\n+\n+### Type System\n+\n+To statically verify the correctness and malleability guarantees discussed in the previous section,\n+we define a type system. See the specifications above for a reference of each fragment's\n+requirements and properties. Here we give more information about each type.\n+\n+Every expression has one of four basic types:\n+* \"**B**\" Base expressions. These take their inputs from the top of the stack. When satisfied, they push a nonzero value of up to 4 bytes onto the stack. When dissatisfied, they push an exact 0 onto the stack (if dissatisfaction without aborting is possible at all). This type is used for most expressions, and required for the top level expression. An example is `older(n)` = `<n> CHECKSEQUENCEVERIFY`.\n+* \"**V**\" Verify expressions. Like \"B\", these take their inputs from the top of the stack. Upon satisfaction however, they continue without pushing anything. They cannot be dissatisfied (will abort instead). A \"V\" can be obtained using the `v:` wrapper on a \"B\" expression, or by combining other \"V\" expressions using `and_v`, `or_i`, `or_c`, or `andor`. An example is `v:pk(key)` = `<key> CHECKSIGVERIFY`.\n+* \"**K**\" Key expressions. They again take their inputs from the top of the stack, but instead of verifying a condition directly they always push a public key onto the stack, for which a signature is still required to satisfy the expression. A \"K\" can be converted into a \"B\" using the `c:` wrapper. An example is `pk_h(key)` = `DUP HASH160 <Hash160(key)> EQUALVERIFY`.\n+* \"**W**\" Wrapped expressions. They take their inputs from one below the top of the stack, and push a nonzero (in case of satisfaction) or zero (in case of dissatisfaction) either on top of the stack, or one below. So for example a 3-input \"W\" would take the stack \"A B C D E F\" and turn it into \"A B F 0\" or \"A B 0 F\" in case of dissatisfaction, and \"A B F n\" or \"A B n F\" in case of satisfaction (with n a nonzero value). Every \"W\" is either `s:B` (SWAP B) or `a:B` (TOALTSTACK B FROMALTSTACK). An example is `s:pk(key)` = `SWAP <key> CHECKSIG`.\n+\n+Then there are 6 type modifiers, which guarantee additional properties:\n+* \"**z**\" Zero-arg: this expression always consumes exactly 0 stack elements.\n+* \"**o**\" One-arg: this expression always consumes exactly 1 stack element.\n+* \"**n**\" Nonzero: this expression always consumes at least 1 stack element, no satisfaction for this expression requires the top input stack element to be zero.\n+* \"**d**\" Dissatisfiable: a dissatisfaction for this expression can unconditionally be constructed. This implies the dissatisfaction cannot include any signature or hash preimage, and cannot rely on timelocks being satisfied.\n+* \"**u**\" Unit: when satisfied, this expression will put an exact 1 on the stack (as opposed to any nonzero value).\n+* \"**k**\" No timelock mixing. This expression does not contain a mix of heightlock and timelock of the same type. If the miniscript does not have the \"k\" property, the miniscript template will not match the user expectation of the corresponding spending policy.\n+\n+Finally to analyze malleability guarantees we introduce 3 new type modifiers:\n+* \"**s**\" Signed: satisfying this expression always requires a signature (predicting whether all satisfactions will be HASSIG).\n+* \"**f**\" Forced: dissatisfying this expression always requires a signature (predicting whether all dissatisfactions will be HASSIG).\n+* \"**e**\" Expressive: this requires a unique unconditional dissatisfaction to exist, and forces all conditional dissatisfactions (if any) to require a signature.\n+\n+\n+### Malleability\n+\n+Since Segwit, malleating a transaction no longer breaks the validity of unconfirmed descendant\n+transactions. However, unintentional malleability may still have a number of much weaker undesirable\n+effects. If a witness can be stuffed with additional data, the transaction's feerate will go down,\n+potentially to the point where its ability to propagate and get confirmed is impacted. Additionally,\n+malleability can be exploited to add roundtrips to BIP152 block propagation, by trying to get\n+different miners to mine different versions of the same transaction. Finally, malleability may\n+interfere with the usage of hash locks as a mechanism for publishing preimages.\n+\n+Using the malleability type properties it is possible to determine statically whether a script can\n+be nonmalleably satisfied under all circumstances. In many cases it is reasonable to only accept\n+such guaranteed-nonmalleable scripts, as unexpected behavior can occur when using other scripts.\n+\n+For example, when running the non-malleable satisfaction algorithm above, adding available\n+preimages, or increasing the nLockTime/nSequence values actually may make it fail where it succeeded\n+before. This is because a larger set of met conditions may mean an existing satisfaction goes from\n+nonmalleable to malleable. Restricting things to scripts that are guaranteed to be satisfiable in a\n+non-malleable way avoids this problem.\n+\n+When analysing Miniscripts for resource limits, restricting yourself to just non-malleable solutions\n+(or even non-malleable scripts) also leads to tighter bounds, as all non-canonical satisfactions and\n+dissatisfactions can be left out of consideration.\n+\n+The malleability analysis makes the following assumptions:",
      "path": "bip-miniscript.md",
      "position": 362,
      "original_position": 338,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's worth mentioning one assumption made by the malleability analysis is that an attacker is constrained by common standardness rules, as per https://github.com/sipa/miniscript/pull/129/files.",
      "created_at": "2024-06-13T08:45:43Z",
      "updated_at": "2024-06-13T08:45:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1637831613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1637831613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 362,
      "original_line": 362,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1638795764",
      "pull_request_review_id": 2116777572,
      "id": 1638795764,
      "node_id": "PRRC_kwDOAN28mc5hrgn0",
      "diff_hunk": "@@ -0,0 +1,410 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP141) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1,arg2,...)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts. From a user's perspective,\n+Miniscript is not a separate language, but rather a significant expansion of the descriptor language.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero-arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u\n+| `multi_a(k,key_1,...,key_n)` | 1 &le; k &le; n                                       | B           | d; u\n+| `a:X`                        | X is B                                                | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `s:X`                        | X is Bo                                               | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `c:X`                        | X is K                                                | B           | o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+| `d:X`                        | X is Vz                                               | B           | o; n; d; *(Tapscript only)* u\n+| `v:X`                        | X is B                                                | V           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>\n+| `j:X`                        | X is Bn                                               | B           | o=o<sub>X</sub>; n; d; u=u<sub>X</sub>\n+| `n:X`                        | X is B                                                | B           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+\n+\n+#### Malleability\n+\n+Malleability is the ability for a third party (someone who does *not* hold a participating private\n+key) to modify an existing satisfaction into another valid satisfaction. To analyze the\n+malleability guarantees of a script we define three additional type properties: \"**s**\" (signed),\n+\"**f**\" (forced) and \"**e**\" (expressive).\n+\n+The following table lists the malleability properties and requirement of each fragment.\n+\n+| Miniscript                   | Requires                                                            | Properties\n+|------------------------------|---------------------------------------------------------------------|-----------\n+| `0`                          |                                                                     | s, e\n+| `1`                          |                                                                     | f\n+| `pk_k(key)`                  |                                                                     | s, e\n+| `pk_h(key)`                  |                                                                     | s, e\n+| `older(n)`                   |                                                                     | f\n+| `after(n)`                   |                                                                     | f\n+| `sha256(h)`                  |                                                                     |\n+| `ripemd160(h)`               |                                                                     |\n+| `hash256(h)`                 |                                                                     |\n+| `hash160(h)`                 |                                                                     |\n+| `andor(X,Y,Z)`               | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Y</sub> or s<sub>Z</sub>) | s=s<sub>Z</sub> and (s<sub>X</sub> or s<sub>Y</sub>); f=f<sub>Z</sub> and (s<sub>X</sub> or f<sub>Y</sub>); e=e<sub>Z</sub> and (s<sub>X</sub> or f<sub>Y</sub>)\n+| `and_v(X,Y)`                 |                                                                     | s=s<sub>X</sub> or s<sub>Y</sub>; f=s<sub>X</sub> or f<sub>Y</sub>\n+| `and_b(X,Y)`                 |                                                                     | s=s<sub>X </sub>or s<sub>Y;</sub> f=f<sub>Xf</sub><sub>Y</sub> or s<sub>X</sub>f<sub>X</sub> or s<sub>Y</sub>f<sub>Y</sub>; e=e<sub>X</sub>e<sub>Y</sub>s<sub>X</sub>s<sub>Y</sub>\n+| `or_b(X,Z)`                  | e<sub>Xe</sub><sub>Z </sub>and (s<sub>X</sub> or s<sub>Z</sub>)     | s=s<sub>X</sub>s<sub>Z</sub>; e\n+| `or_c(X,Z)`                  | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Z</sub>)                  | s=s<sub>X</sub>s<sub>Z</sub>; f\n+| `or_d(X,Z)`                  | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Z</sub>)                  | s=s<sub>X</sub>s<sub>Z</sub>; f=f<sub>Z</sub>; e=e<sub>Z</sub>\n+| `or_i(X,Z)`                  | s<sub>X</sub> or s<sub>Z</sub>                                      | s=s<sub>X</sub>s<sub>Z</sub>; f=f<sub>X</sub>f<sub>Z</sub>; e=e<sub>X</sub>f<sub>Z</sub> or e<sub>Z</sub>f<sub>X</sub>\n+| `thresh(k,X_1,...,X_n)`      | all are e; at most k are non-s                                      | s=at most k-1 are non-s; e=all are s\n+| `multi(k,key_1,...,key_n)`   |                                                                     | s; e\n+| `multi_a(k,key_1,...,key_n)` |                                                                     | s; e\n+| `a:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `s:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `c:X`                        |                                                                     | s; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `d:X`                        |                                                                     | s=s<sub>X</sub>; e\n+| `v:X`                        |                                                                     | s=s<sub>X</sub>; f\n+| `j:X`                        |                                                                     | s=s<sub>X</sub>; e=f<sub>X\n+| `n:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+\n+### Satisfaction\n+\n+The following table shows all valid satisfactions and dissatisfactions for every Miniscript, using\n+satisfactions and dissatisfactions of its subexpressions. Multiple possibilities are separated by\n+semicolons. Some options are inefficient and provably unnecessary to the satisfaction algorithm\n+described below, but are valid according to script rules and could be used by a malleator or other\n+non-standard actor. These are called *non-canonical* options, and are listed for completeness, but\n+~~[struckthrough]~~. The fragments where a satisfaction or dissatisfaction does not exist will\n+contain *(none)*. The fragments where the satisfaction or dissatisfaction is to provide no data\n+will contain *(empty)*.\n+\n+| Miniscript                   | Dissatisfactions (dsat)                                 | Satisfactions (sat)\n+|------------------------------|---------------------------------------------------------|--------------------\n+| `0`                          | *(empty)*                                               | *(none)*\n+| `1`                          | *(none)*                                                | *(empty)*\n+| `pk_k(key)`                  | 0                                                       | sig\n+| `pk_h(key)`                  | 0 key                                                   | sig key\n+| `older(n)`                   | *(none)*                                                | *(empty)*\n+| `after(n)`                   | *(none)*                                                | *(empty)*\n+| `sha256(h)`                  | any 32-byte vector except the preimage                  | preimage\n+| `ripemd160(h)`               | any 32-byte vector except the preimage                  | preimage\n+| `hash256(h)`                 | any 32-byte vector except the preimage                  | preimage\n+| `hash160(h)`                 | any 32-byte vector except the preimage                  | preimage\n+| `andor(X,Y,Z)`               | dsat(Z) dsat(X); ~~[dsat(Y) sat(X)]~~                   | sat(Y) sat(X); sat(Z) dsat(X)\n+| `and_v(X,Y)`                 | *(none)*; ~~[dsat(Y) sat(X)]~~                          | sat(Y) sat(X)\n+| `and_b(X,Y)`                 | dsat(Y) dsat(X); ~~[sat(Y) dsat(X)]; [dsat(Y) sat(X)]~~ | sat(Y) sat(X)\n+| `or_b(X,Z)`                  | dsat(Z) dsat(X)                                         | dsat(Z) sat(X); sat(Z) dsat(X); ~~[sat(Z) sat(X)]~~\n+| `or_c(X,Z)`                  | *(none)*                                                | sat(X); sat(Z) dsat(X)\n+| `or_d(X,Z)`                  | dsat(Z) dsat(X)                                         | sat(X); sat(Z) dsat(X)\n+| `or_i(X,Z)`                  | dsat(X) 1; dsat(Z) 0                                    | sat(X) 1; sat(Z) 0\n+| `thresh(k,X_1,...,X_n)`      | All dsats; ~~[Sats/dsats with 1 &le; #(sats) &ne; k]~~  | Sats/dsats with #(sats) = k\n+| `multi(k,key_1,...,key_n)`   | 0 0 ... 0 (k+1 times)                                   | 0 sig ... sig\n+| `multi_a(k,key_1,...,key_n)` | 0 ... 0 (n times)                                       | sig/0 with #(sig) = k and #(sigs/0) = n",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 231,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "in_reply_to_id": 1637825017,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-06-13T19:48:00Z",
      "updated_at": "2024-06-13T19:48:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1638795764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1638795764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1638795811",
      "pull_request_review_id": 2116777651,
      "id": 1638795811,
      "node_id": "PRRC_kwDOAN28mc5hrgoj",
      "diff_hunk": "@@ -0,0 +1,410 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP141) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1,arg2,...)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts. From a user's perspective,\n+Miniscript is not a separate language, but rather a significant expansion of the descriptor language.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero-arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 149,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "in_reply_to_id": 1637829089,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-06-13T19:48:04Z",
      "updated_at": "2024-06-13T19:48:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1638795811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1638795811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1638795874",
      "pull_request_review_id": 2116777746,
      "id": 1638795874,
      "node_id": "PRRC_kwDOAN28mc5hrgpi",
      "diff_hunk": "@@ -0,0 +1,410 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP141) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1,arg2,...)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts. From a user's perspective,\n+Miniscript is not a separate language, but rather a significant expansion of the descriptor language.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero-arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u\n+| `multi_a(k,key_1,...,key_n)` | 1 &le; k &le; n                                       | B           | d; u\n+| `a:X`                        | X is B                                                | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `s:X`                        | X is Bo                                               | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `c:X`                        | X is K                                                | B           | o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+| `d:X`                        | X is Vz                                               | B           | o; n; d; *(Tapscript only)* u\n+| `v:X`                        | X is B                                                | V           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>\n+| `j:X`                        | X is Bn                                               | B           | o=o<sub>X</sub>; n; d; u=u<sub>X</sub>\n+| `n:X`                        | X is B                                                | B           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+\n+\n+#### Malleability\n+\n+Malleability is the ability for a third party (someone who does *not* hold a participating private\n+key) to modify an existing satisfaction into another valid satisfaction. To analyze the\n+malleability guarantees of a script we define three additional type properties: \"**s**\" (signed),\n+\"**f**\" (forced) and \"**e**\" (expressive).\n+\n+The following table lists the malleability properties and requirement of each fragment.\n+\n+| Miniscript                   | Requires                                                            | Properties\n+|------------------------------|---------------------------------------------------------------------|-----------\n+| `0`                          |                                                                     | s, e\n+| `1`                          |                                                                     | f\n+| `pk_k(key)`                  |                                                                     | s, e\n+| `pk_h(key)`                  |                                                                     | s, e\n+| `older(n)`                   |                                                                     | f\n+| `after(n)`                   |                                                                     | f\n+| `sha256(h)`                  |                                                                     |\n+| `ripemd160(h)`               |                                                                     |\n+| `hash256(h)`                 |                                                                     |\n+| `hash160(h)`                 |                                                                     |\n+| `andor(X,Y,Z)`               | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Y</sub> or s<sub>Z</sub>) | s=s<sub>Z</sub> and (s<sub>X</sub> or s<sub>Y</sub>); f=f<sub>Z</sub> and (s<sub>X</sub> or f<sub>Y</sub>); e=e<sub>Z</sub> and (s<sub>X</sub> or f<sub>Y</sub>)\n+| `and_v(X,Y)`                 |                                                                     | s=s<sub>X</sub> or s<sub>Y</sub>; f=s<sub>X</sub> or f<sub>Y</sub>\n+| `and_b(X,Y)`                 |                                                                     | s=s<sub>X </sub>or s<sub>Y;</sub> f=f<sub>Xf</sub><sub>Y</sub> or s<sub>X</sub>f<sub>X</sub> or s<sub>Y</sub>f<sub>Y</sub>; e=e<sub>X</sub>e<sub>Y</sub>s<sub>X</sub>s<sub>Y</sub>\n+| `or_b(X,Z)`                  | e<sub>Xe</sub><sub>Z </sub>and (s<sub>X</sub> or s<sub>Z</sub>)     | s=s<sub>X</sub>s<sub>Z</sub>; e\n+| `or_c(X,Z)`                  | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Z</sub>)                  | s=s<sub>X</sub>s<sub>Z</sub>; f\n+| `or_d(X,Z)`                  | e<sub>X</sub> and (s<sub>X</sub> or s<sub>Z</sub>)                  | s=s<sub>X</sub>s<sub>Z</sub>; f=f<sub>Z</sub>; e=e<sub>Z</sub>\n+| `or_i(X,Z)`                  | s<sub>X</sub> or s<sub>Z</sub>                                      | s=s<sub>X</sub>s<sub>Z</sub>; f=f<sub>X</sub>f<sub>Z</sub>; e=e<sub>X</sub>f<sub>Z</sub> or e<sub>Z</sub>f<sub>X</sub>\n+| `thresh(k,X_1,...,X_n)`      | all are e; at most k are non-s                                      | s=at most k-1 are non-s; e=all are s\n+| `multi(k,key_1,...,key_n)`   |                                                                     | s; e\n+| `multi_a(k,key_1,...,key_n)` |                                                                     | s; e\n+| `a:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `s:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `c:X`                        |                                                                     | s; f=f<sub>X</sub>; e=e<sub>X</sub>\n+| `d:X`                        |                                                                     | s=s<sub>X</sub>; e\n+| `v:X`                        |                                                                     | s=s<sub>X</sub>; f\n+| `j:X`                        |                                                                     | s=s<sub>X</sub>; e=f<sub>X\n+| `n:X`                        |                                                                     | s=s<sub>X</sub>; f=f<sub>X</sub>; e=e<sub>X</sub>\n+\n+### Satisfaction\n+\n+The following table shows all valid satisfactions and dissatisfactions for every Miniscript, using\n+satisfactions and dissatisfactions of its subexpressions. Multiple possibilities are separated by\n+semicolons. Some options are inefficient and provably unnecessary to the satisfaction algorithm\n+described below, but are valid according to script rules and could be used by a malleator or other\n+non-standard actor. These are called *non-canonical* options, and are listed for completeness, but\n+~~[struckthrough]~~. The fragments where a satisfaction or dissatisfaction does not exist will\n+contain *(none)*. The fragments where the satisfaction or dissatisfaction is to provide no data\n+will contain *(empty)*.\n+\n+| Miniscript                   | Dissatisfactions (dsat)                                 | Satisfactions (sat)\n+|------------------------------|---------------------------------------------------------|--------------------\n+| `0`                          | *(empty)*                                               | *(none)*\n+| `1`                          | *(none)*                                                | *(empty)*\n+| `pk_k(key)`                  | 0                                                       | sig\n+| `pk_h(key)`                  | 0 key                                                   | sig key\n+| `older(n)`                   | *(none)*                                                | *(empty)*\n+| `after(n)`                   | *(none)*                                                | *(empty)*\n+| `sha256(h)`                  | any 32-byte vector except the preimage                  | preimage\n+| `ripemd160(h)`               | any 32-byte vector except the preimage                  | preimage\n+| `hash256(h)`                 | any 32-byte vector except the preimage                  | preimage\n+| `hash160(h)`                 | any 32-byte vector except the preimage                  | preimage\n+| `andor(X,Y,Z)`               | dsat(Z) dsat(X); ~~[dsat(Y) sat(X)]~~                   | sat(Y) sat(X); sat(Z) dsat(X)\n+| `and_v(X,Y)`                 | *(none)*; ~~[dsat(Y) sat(X)]~~                          | sat(Y) sat(X)\n+| `and_b(X,Y)`                 | dsat(Y) dsat(X); ~~[sat(Y) dsat(X)]; [dsat(Y) sat(X)]~~ | sat(Y) sat(X)\n+| `or_b(X,Z)`                  | dsat(Z) dsat(X)                                         | dsat(Z) sat(X); sat(Z) dsat(X); ~~[sat(Z) sat(X)]~~\n+| `or_c(X,Z)`                  | *(none)*                                                | sat(X); sat(Z) dsat(X)\n+| `or_d(X,Z)`                  | dsat(Z) dsat(X)                                         | sat(X); sat(Z) dsat(X)\n+| `or_i(X,Z)`                  | dsat(X) 1; dsat(Z) 0                                    | sat(X) 1; sat(Z) 0\n+| `thresh(k,X_1,...,X_n)`      | All dsats; ~~[Sats/dsats with 1 &le; #(sats) &ne; k]~~  | Sats/dsats with #(sats) = k\n+| `multi(k,key_1,...,key_n)`   | 0 0 ... 0 (k+1 times)                                   | 0 sig ... sig\n+| `multi_a(k,key_1,...,key_n)` | 0 ... 0 (n times)                                       | sig/0 with #(sig) = k and #(sigs/0) = n\n+| `a:X`                        | dsat(X)                                                 | sat(X)\n+| `s:X`                        | dsat(X)                                                 | sat(X)\n+| `c:X`                        | dsat(X)                                                 | sat(X)\n+| `d:X`                        | 0                                                       | sat(X) 1\n+| `v:X`                        | *(none)*                                                | sat(X)\n+| `j:X`                        | 0; ~~[dsat(X) (if nonzero top stack)]~~                 | sat(X)\n+| `n:X`                        | dsat(X)                                                 | sat(X)\n+\n+#### Non-malleable Satisfaction Algorithm\n+\n+In order to produce non-malleable satisfactions we make use of a function that returns the optimal\n+satisfaction and dissatisfaction for a given expression (if any exist), or a special DONTUSE value,\n+together with an optional HASSIG marker that tracks whether the solution contains at least one\n+signature. To implement the function:\n+* Invoke the function recursively for all subexpressions, obtaining all their satisfactions/dissatisfactions.\n+* Iterate over all the valid satisfactions/dissatisfactions in the table above (including the non-canonical ones), taking into account:\n+ * The dissatisfactions for `sha256`, `ripemd160`, `hash256`, and `hash160` are always malleable, so instead use DONTUSE there.\n+ * The non-canonical options for `and_b`, `or_b`, and `thresh` are always overcomplete, so instead use DONTUSE there as well (with HASSIG flag if the original non-canonical solution had one).\n+ * The satisfactions for `pk_k`, `pk_h`, and `multi` can be marked HASSIG.\n+ * When constructing solutions by combining results for subexpressions, the result is DONTUSE if any of the constituent results is DONTUSE. Furthermore, the result gets the HASSIG tag if any of the constituents does.\n+* If among all valid solutions (including DONTUSE ones) more than one does not have the HASSIG marker, return DONTUSE.\n+* If instead exactly one does not have the HASSIG marker, return that solution.\n+* If all valid solutions have the HASSIG marker, but all of them are DONTUSE, return DONTUSE-HASSIG. The HASSIG marker is important because while this represents a choice between multiple options that would cause malleability if used, they are not available to the attacker, and we may be able to avoid them entirely still.\n+* Otherwise, all not-DONTUSE options are valid, so return the smallest one (in terms of witness size).\n+\n+To produce an overall satisfaction, invoke the function on the toplevel expression. If no valid\n+satisfaction is returned, or it is DONTUSE, fail. Otherwise, if any timelocking is used in the\n+script but the result does not have the HASSIG flag, also fail. If the satisfaction is both not\n+DONTUSE and HASSIG, return it.\n+\n+\n+## Discussion\n+\n+## Security\n+\n+Miniscript primarily aims to provide guarantees on the correctness of a Bitcoin Script. That is, to\n+guarantee **consensus soundness** and **standardness completeness**. Consensus soundness means\n+it is not possible to construct a consensus-valid witness for a Bitcoin Script unless the Miniscript\n+spending conditions are met. Standardness completeness means a standardness-valid witness can be\n+created for all spending paths of a Miniscript, assuming the resource limits are respected and there\n+is no timelock mixing.\n+\n+Additionally, Miniscript can guarantee the non-malleability and maximum size of a witness. These can\n+assist in assessing the soundness of protocols where transaction fees (and therefore transaction\n+size) are security-critical parameters.\n+\n+Hash preimages are constrained to 32 bytes to disallow various forms of griefing, including making\n+non-standard (un-relayable) transactions, consensus-invalid swaps across blockchains, as well as\n+ensure that satisfaction cost can be accurately calculated.\n+\n+In order for these properties to not just apply to script, but to an entire transaction, it's\n+important that the witness commits to all data relevant for verification. In practice this means\n+that scripts whose conditions can be met without any digital signature are insecure. Besides being\n+trivially insecure, note how a transaction lacking a signature check allows an attacker to change\n+its nLockTime and nSequence fields to meet additional timelock conditions.\n+\n+### Type System\n+\n+To statically verify the correctness and malleability guarantees discussed in the previous section,\n+we define a type system. See the specifications above for a reference of each fragment's\n+requirements and properties. Here we give more information about each type.\n+\n+Every expression has one of four basic types:\n+* \"**B**\" Base expressions. These take their inputs from the top of the stack. When satisfied, they push a nonzero value of up to 4 bytes onto the stack. When dissatisfied, they push an exact 0 onto the stack (if dissatisfaction without aborting is possible at all). This type is used for most expressions, and required for the top level expression. An example is `older(n)` = `<n> CHECKSEQUENCEVERIFY`.\n+* \"**V**\" Verify expressions. Like \"B\", these take their inputs from the top of the stack. Upon satisfaction however, they continue without pushing anything. They cannot be dissatisfied (will abort instead). A \"V\" can be obtained using the `v:` wrapper on a \"B\" expression, or by combining other \"V\" expressions using `and_v`, `or_i`, `or_c`, or `andor`. An example is `v:pk(key)` = `<key> CHECKSIGVERIFY`.\n+* \"**K**\" Key expressions. They again take their inputs from the top of the stack, but instead of verifying a condition directly they always push a public key onto the stack, for which a signature is still required to satisfy the expression. A \"K\" can be converted into a \"B\" using the `c:` wrapper. An example is `pk_h(key)` = `DUP HASH160 <Hash160(key)> EQUALVERIFY`.\n+* \"**W**\" Wrapped expressions. They take their inputs from one below the top of the stack, and push a nonzero (in case of satisfaction) or zero (in case of dissatisfaction) either on top of the stack, or one below. So for example a 3-input \"W\" would take the stack \"A B C D E F\" and turn it into \"A B F 0\" or \"A B 0 F\" in case of dissatisfaction, and \"A B F n\" or \"A B n F\" in case of satisfaction (with n a nonzero value). Every \"W\" is either `s:B` (SWAP B) or `a:B` (TOALTSTACK B FROMALTSTACK). An example is `s:pk(key)` = `SWAP <key> CHECKSIG`.\n+\n+Then there are 6 type modifiers, which guarantee additional properties:\n+* \"**z**\" Zero-arg: this expression always consumes exactly 0 stack elements.\n+* \"**o**\" One-arg: this expression always consumes exactly 1 stack element.\n+* \"**n**\" Nonzero: this expression always consumes at least 1 stack element, no satisfaction for this expression requires the top input stack element to be zero.\n+* \"**d**\" Dissatisfiable: a dissatisfaction for this expression can unconditionally be constructed. This implies the dissatisfaction cannot include any signature or hash preimage, and cannot rely on timelocks being satisfied.\n+* \"**u**\" Unit: when satisfied, this expression will put an exact 1 on the stack (as opposed to any nonzero value).\n+* \"**k**\" No timelock mixing. This expression does not contain a mix of heightlock and timelock of the same type. If the miniscript does not have the \"k\" property, the miniscript template will not match the user expectation of the corresponding spending policy.\n+\n+Finally to analyze malleability guarantees we introduce 3 new type modifiers:\n+* \"**s**\" Signed: satisfying this expression always requires a signature (predicting whether all satisfactions will be HASSIG).\n+* \"**f**\" Forced: dissatisfying this expression always requires a signature (predicting whether all dissatisfactions will be HASSIG).\n+* \"**e**\" Expressive: this requires a unique unconditional dissatisfaction to exist, and forces all conditional dissatisfactions (if any) to require a signature.\n+\n+\n+### Malleability\n+\n+Since Segwit, malleating a transaction no longer breaks the validity of unconfirmed descendant\n+transactions. However, unintentional malleability may still have a number of much weaker undesirable\n+effects. If a witness can be stuffed with additional data, the transaction's feerate will go down,\n+potentially to the point where its ability to propagate and get confirmed is impacted. Additionally,\n+malleability can be exploited to add roundtrips to BIP152 block propagation, by trying to get\n+different miners to mine different versions of the same transaction. Finally, malleability may\n+interfere with the usage of hash locks as a mechanism for publishing preimages.\n+\n+Using the malleability type properties it is possible to determine statically whether a script can\n+be nonmalleably satisfied under all circumstances. In many cases it is reasonable to only accept\n+such guaranteed-nonmalleable scripts, as unexpected behavior can occur when using other scripts.\n+\n+For example, when running the non-malleable satisfaction algorithm above, adding available\n+preimages, or increasing the nLockTime/nSequence values actually may make it fail where it succeeded\n+before. This is because a larger set of met conditions may mean an existing satisfaction goes from\n+nonmalleable to malleable. Restricting things to scripts that are guaranteed to be satisfiable in a\n+non-malleable way avoids this problem.\n+\n+When analysing Miniscripts for resource limits, restricting yourself to just non-malleable solutions\n+(or even non-malleable scripts) also leads to tighter bounds, as all non-canonical satisfactions and\n+dissatisfactions can be left out of consideration.\n+\n+The malleability analysis makes the following assumptions:",
      "path": "bip-miniscript.md",
      "position": 362,
      "original_position": 338,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "in_reply_to_id": 1637831613,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-06-13T19:48:07Z",
      "updated_at": "2024-06-13T19:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1638795874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1638795874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 362,
      "original_line": 362,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1638811809",
      "pull_request_review_id": 2116804656,
      "id": 1638811809,
      "node_id": "PRRC_kwDOAN28mc5hrkih",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 124,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635472732,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, it seems like representing them in the table might be complicated since it depends on the arguments to the `older` and `after` fragments.",
      "created_at": "2024-06-13T20:04:43Z",
      "updated_at": "2024-06-13T20:04:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1638811809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1638811809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1641999195",
      "pull_request_review_id": 2121618886,
      "id": 1641999195,
      "node_id": "PRRC_kwDOAN28mc5h3utb",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 124,
      "commit_id": "0401d248c1e4a98a39df2bce4d40a1562a36bbd7",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635472732,
      "user": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How about adding as a small description as suggested [here](https://github.com/bitcoin/bips/pull/1610#issuecomment-2171913790)? ",
      "created_at": "2024-06-16T22:34:15Z",
      "updated_at": "2024-06-16T22:34:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1641999195",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1641999195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    }
  ]
}