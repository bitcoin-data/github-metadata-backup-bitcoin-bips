{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1699",
    "id": 2173746014,
    "node_id": "PR_kwDOAN28mc6BkLte",
    "html_url": "https://github.com/bitcoin/bips/pull/1699",
    "diff_url": "https://github.com/bitcoin/bips/pull/1699.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1699.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1699/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/da2b69cc761c5b1acec594b8e9e34d730b8b2692",
    "number": 1699,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "BIP442: OP_PAIRCOMMIT",
    "user": {
      "login": "moonsettler",
      "id": 90689674,
      "node_id": "MDQ6VXNlcjkwNjg5Njc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moonsettler",
      "html_url": "https://github.com/moonsettler",
      "followers_url": "https://api.github.com/users/moonsettler/followers",
      "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
      "organizations_url": "https://api.github.com/users/moonsettler/orgs",
      "repos_url": "https://api.github.com/users/moonsettler/repos",
      "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/moonsettler/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "`OP_PAIRCOMMIT` is the newest member of the LNhance family of opcodes. It provides limited vector commitment functionality in tapscript.\r\n\r\nWhen evaluated, the `OP_PAIRCOMMIT` instruction:\r\n* pops the top two values off the stack,\r\n* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\r\n* pushes the resulting commitment on the top of the stack.\r\n\r\nDiscussion: https://delvingbitcoin.org/t/op-paircommit-as-a-candidate-for-addition-to-lnhance/1216/12",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 6924377447,
        "node_id": "LA_kwDOAN28mc8AAAABnLmdZw",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/PR%20Author%20action%20required",
        "name": "PR Author action required",
        "description": "Needs updates, has unaddressed review comments, or is otherwise waiting for PR author",
        "color": "e99695",
        "default": false
      }
    ],
    "created_at": "2024-11-11T23:07:43Z",
    "updated_at": "2025-07-13T15:25:53Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "lnhance:paircommit",
      "ref": "paircommit",
      "sha": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "user": {
        "login": "lnhance",
        "id": 168908472,
        "node_id": "O_kgDOChFWuA",
        "avatar_url": "https://avatars.githubusercontent.com/u/168908472?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lnhance",
        "html_url": "https://github.com/lnhance",
        "followers_url": "https://api.github.com/users/lnhance/followers",
        "following_url": "https://api.github.com/users/lnhance/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lnhance/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lnhance/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lnhance/subscriptions",
        "organizations_url": "https://api.github.com/users/lnhance/orgs",
        "repos_url": "https://api.github.com/users/lnhance/repos",
        "events_url": "https://api.github.com/users/lnhance/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lnhance/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 886943227,
        "node_id": "R_kgDONN2t-w",
        "name": "bips",
        "full_name": "lnhance/bips",
        "owner": {
          "login": "lnhance",
          "id": 168908472,
          "node_id": "O_kgDOChFWuA",
          "avatar_url": "https://avatars.githubusercontent.com/u/168908472?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lnhance",
          "html_url": "https://github.com/lnhance",
          "followers_url": "https://api.github.com/users/lnhance/followers",
          "following_url": "https://api.github.com/users/lnhance/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/lnhance/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/lnhance/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/lnhance/subscriptions",
          "organizations_url": "https://api.github.com/users/lnhance/orgs",
          "repos_url": "https://api.github.com/users/lnhance/repos",
          "events_url": "https://api.github.com/users/lnhance/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/lnhance/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/lnhance/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/lnhance/bips",
        "archive_url": "https://api.github.com/repos/lnhance/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/lnhance/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/lnhance/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/lnhance/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/lnhance/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/lnhance/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/lnhance/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/lnhance/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/lnhance/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/lnhance/bips/contributors",
        "deployments_url": "https://api.github.com/repos/lnhance/bips/deployments",
        "downloads_url": "https://api.github.com/repos/lnhance/bips/downloads",
        "events_url": "https://api.github.com/repos/lnhance/bips/events",
        "forks_url": "https://api.github.com/repos/lnhance/bips/forks",
        "git_commits_url": "https://api.github.com/repos/lnhance/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/lnhance/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/lnhance/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/lnhance/bips.git",
        "issue_comment_url": "https://api.github.com/repos/lnhance/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/lnhance/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/lnhance/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/lnhance/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/lnhance/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/lnhance/bips/languages",
        "merges_url": "https://api.github.com/repos/lnhance/bips/merges",
        "milestones_url": "https://api.github.com/repos/lnhance/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/lnhance/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/lnhance/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/lnhance/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:lnhance/bips.git",
        "stargazers_url": "https://api.github.com/repos/lnhance/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/lnhance/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/lnhance/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/lnhance/bips/subscription",
        "tags_url": "https://api.github.com/repos/lnhance/bips/tags",
        "teams_url": "https://api.github.com/repos/lnhance/bips/teams",
        "trees_url": "https://api.github.com/repos/lnhance/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/lnhance/bips.git",
        "hooks_url": "https://api.github.com/repos/lnhance/bips/hooks",
        "svn_url": "https://github.com/lnhance/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 15431,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-26T23:23:33Z",
        "created_at": "2024-11-11T22:21:49Z",
        "updated_at": "2025-03-26T23:23:49Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "3c7b0d649821a0961de6ea5df6ddbefe4d6f716b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5657,
        "stargazers_count": 10037,
        "watchers_count": 10037,
        "size": 16489,
        "default_branch": "master",
        "open_issues_count": 31,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-10T22:04:58Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-07-13T13:12:01Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 327,
    "deletions": 0,
    "changed_files": 2,
    "commits": 4,
    "review_comments": 109,
    "comments": 32
  },
  "events": [
    {
      "event": "reviewed",
      "id": 2433787511,
      "node_id": "PRR_kwDOAN28mc6REKZ3",
      "url": null,
      "actor": null,
      "commit_id": "72551f2a69ec2eba4735bb712619877a9d10a124",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This document has a few formatting issues, please make sure that the preamble matches the BIP 2 requirements and take a look at the rich diff to see whether it looks the way you intend.\r\n\r\nPlease note that the BIPs repository also accepts markdown files.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2433787511",
      "submitted_at": "2024-11-13T16:32:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "commented",
      "id": 2474699564,
      "node_id": "IC_kwDOAN28mc6TgOss",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2474699564",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T20:16:18Z",
      "updated_at": "2024-11-13T21:35:59Z",
      "author_association": "NONE",
      "body": "Switched back to markdown. Header now in BIP-2 format.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2474699564",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15289614268,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOPVP-8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15289614268",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8f11758058c3630a804fcabe6582345698208ce0",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/8f11758058c3630a804fcabe6582345698208ce0",
      "created_at": "2024-11-13T21:33:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15289629234,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOPVToy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15289629234",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f3f7f91d261433c315ee153a09b4388160ef13e1",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/f3f7f91d261433c315ee153a09b4388160ef13e1",
      "created_at": "2024-11-13T21:35:07Z"
    },
    {
      "event": "commented",
      "id": 2474890275,
      "node_id": "IC_kwDOAN28mc6Tg9Qj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2474890275",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T21:49:30Z",
      "updated_at": "2024-11-13T21:49:30Z",
      "author_association": "NONE",
      "body": "The original create date of OP_PAIRCOMMIT is 2024-03-15 this is the latest revision based on feedback from Anthony Towns.\r\nhttps://gist.github.com/moonsettler/d7f1fb88e3e54ee7ecb6d69ff126433b/revisions\r\nWhat date should go to the header?",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2474890275",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2475294212,
      "node_id": "IC_kwDOAN28mc6Tif4E",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2475294212",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T02:39:23Z",
      "updated_at": "2024-11-14T02:39:23Z",
      "author_association": "MEMBER",
      "body": "Added a discussion link to the PR description.\r\n\r\n> The original create date of OP_PAIRCOMMIT is 2024-03-15 this is the latest revision based on feedback from Anthony Towns.\r\n[gist.github.com/moonsettler/d7f1fb88e3e54ee7ecb6d69ff126433b/revisions](https://gist.github.com/moonsettler/d7f1fb88e3e54ee7ecb6d69ff126433b/revisions)\r\nWhat date should go to the header?\r\n\r\nPerhaps add a changelog with the revision based on Anthony Towns' feedback followed by the initial version. Or use the date of the current draft revision as your starting point.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2475294212",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "labeled",
      "id": 15292349436,
      "node_id": "LE_lADOAN28mc6d_QLszwAAAAOPfrv8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15292349436",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T03:16:46Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2476768390,
      "node_id": "IC_kwDOAN28mc6ToHyG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2476768390",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T15:51:53Z",
      "updated_at": "2024-11-14T15:51:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "According to BIP 2:\r\n\r\n> The Created header records the date that the BIP was assigned a number, […]",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2476768390",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "ready_for_review",
      "id": 15300618834,
      "node_id": "RFRE_lADOAN28mc6d_QLszwAAAAOP_OpS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15300618834",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T15:56:44Z"
    },
    {
      "event": "commented",
      "id": 2477506884,
      "node_id": "IC_kwDOAN28mc6Tq8FE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2477506884",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T22:10:02Z",
      "updated_at": "2024-11-14T22:10:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Has this proposal been sent to the mailing list?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2477506884",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2477515987,
      "node_id": "IC_kwDOAN28mc6Tq-TT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2477515987",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T22:16:33Z",
      "updated_at": "2024-11-15T13:26:48Z",
      "author_association": "NONE",
      "body": "> Has this proposal been sent to the mailing list?\r\n\r\n~~Not yet. Wanted to get it into an acceptable shape before I post it there.~~\r\n\r\nProposed to the mailing list, waiting for feedback.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2477515987",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "reviewed",
      "id": 2438876944,
      "node_id": "PRR_kwDOAN28mc6RXk8Q",
      "url": null,
      "actor": null,
      "commit_id": "08ffb0303d9aa73e622ee98ed941cae0c63e906a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2438876944",
      "submitted_at": "2024-11-15T15:18:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "reviewed",
      "id": 2439109724,
      "node_id": "PRR_kwDOAN28mc6RYdxc",
      "url": null,
      "actor": null,
      "commit_id": "40f0b0f3e461d2664d9a89cee5dd9103fa94552e",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2439109724",
      "submitted_at": "2024-11-15T16:30:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15316120358,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOQ6XMm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15316120358",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3cbad3247385d284227b78d24654aa53af0c0832",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/3cbad3247385d284227b78d24654aa53af0c0832",
      "created_at": "2024-11-15T18:19:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15316159609,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOQ6gx5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15316159609",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "59249d9f4dfc31b9cf283b86670afaed9f24b03b",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/59249d9f4dfc31b9cf283b86670afaed9f24b03b",
      "created_at": "2024-11-15T18:23:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15316173086,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOQ6kEe",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15316173086",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dfb0670660eb7921f3d9c084129b4b4e276451bf",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/dfb0670660eb7921f3d9c084129b4b4e276451bf",
      "created_at": "2024-11-15T18:24:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15407912372,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOWYhW0",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15407912372",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "created_at": "2024-11-23T14:51:00Z"
    },
    {
      "event": "reviewed",
      "id": 2458868161,
      "node_id": "PRR_kwDOAN28mc6Sj1nB",
      "url": null,
      "actor": null,
      "commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I would like to see this proposal to get more review from other covenant researchers before it moves forward.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2458868161",
      "submitted_at": "2024-11-25T16:08:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "reviewed",
      "id": 2459218505,
      "node_id": "PRR_kwDOAN28mc6SlLJJ",
      "url": null,
      "actor": null,
      "commit_id": "a214597e9f31d93bbe24773ba3b467302a5ddcbc",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "rot13maxi",
        "id": 115941166,
        "node_id": "U_kgDOBukfLg",
        "avatar_url": "https://avatars.githubusercontent.com/u/115941166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rot13maxi",
        "html_url": "https://github.com/rot13maxi",
        "followers_url": "https://api.github.com/users/rot13maxi/followers",
        "following_url": "https://api.github.com/users/rot13maxi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rot13maxi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rot13maxi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rot13maxi/subscriptions",
        "organizations_url": "https://api.github.com/users/rot13maxi/orgs",
        "repos_url": "https://api.github.com/users/rot13maxi/repos",
        "events_url": "https://api.github.com/users/rot13maxi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rot13maxi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2459218505",
      "submitted_at": "2024-11-25T17:56:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15427768237,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOXkQ-t",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15427768237",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bbf8c49a7dc3ce999c2d7fee292e58593b5cf8b3",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/bbf8c49a7dc3ce999c2d7fee292e58593b5cf8b3",
      "created_at": "2024-11-25T23:01:22Z"
    },
    {
      "event": "commented",
      "id": 2501824964,
      "node_id": "IC_kwDOAN28mc6VHtHE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2501824964",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T20:09:19Z",
      "updated_at": "2024-11-26T20:15:08Z",
      "author_association": "NONE",
      "body": "It looks like we gonna have to amend the `PAIRCOMMIT` BIP with some new use cases.\r\nTurns out within certain practical limitations any computational function can be proven out in the form of a merkle tree.\r\nThe root hash of the merkle tree represents the function the leaves represent the inputs and output.\r\nAny 32 bit arithmetic function can certainly be proven out with this method.\r\nCAT itself with a limited set of inputs or limited input sizes can be proven out.\r\nAt this point it's an open question if this enables new behaviors not enabled by taproot MAST itself?\r\n\r\nSpecial thanks to: @JeremyRubin @Ademan @bigspider\r\n\r\nedit:\r\nAlternatively could consider imposing specific script limits that make `PAIRCOMMIT` explicitly less capable than MAST itself.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2501824964",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "mentioned",
      "id": 15441642568,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAOYZMRI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441642568",
      "actor": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T20:09:20Z"
    },
    {
      "event": "subscribed",
      "id": 15441642591,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAOYZMRf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441642591",
      "actor": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T20:09:20Z"
    },
    {
      "event": "mentioned",
      "id": 15441642598,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAOYZMRm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441642598",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T20:09:20Z"
    },
    {
      "event": "subscribed",
      "id": 15441642608,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAOYZMRw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441642608",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T20:09:20Z"
    },
    {
      "event": "mentioned",
      "id": 15441642620,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAOYZMR8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441642620",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T20:09:21Z"
    },
    {
      "event": "subscribed",
      "id": 15441642635,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAOYZMSL",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441642635",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T20:09:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15441741448,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOYZkaI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441741448",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "43259a7a3c5f7d6cd709550c2f545426bf5b7bc7",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/43259a7a3c5f7d6cd709550c2f545426bf5b7bc7",
      "created_at": "2024-11-26T20:20:11Z"
    },
    {
      "event": "reviewed",
      "id": 2462714149,
      "node_id": "PRR_kwDOAN28mc6Sygkl",
      "url": null,
      "actor": null,
      "commit_id": "43259a7a3c5f7d6cd709550c2f545426bf5b7bc7",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "ACK on the current content.\r\n\r\nMight want to consider mentioning the deleted key function verification scheme we learned from @bigspider?",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2462714149",
      "submitted_at": "2024-11-26T21:31:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15444128458,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOYirLK",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15444128458",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c49bc72deeba6a60184e4be1724d9d3382eac59a",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/c49bc72deeba6a60184e4be1724d9d3382eac59a",
      "created_at": "2024-11-27T00:43:02Z"
    },
    {
      "event": "commented",
      "id": 2502899368,
      "node_id": "IC_kwDOAN28mc6VLzao",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2502899368",
      "actor": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T05:40:45Z",
      "updated_at": "2024-11-27T05:40:45Z",
      "author_association": "NONE",
      "body": "I think I've changed my mind a bit. We were talking about computing a merkle tree for `f(u32,u32)` as if it was trivial but after a quick experiment it seems like that would take hundreds of years to compute (am I being dumb here?) Instead, you can compute `mul(u32,u32) -> u32` using 3 `mul(u16,u16)`s which *is* feasible to compute. The witness size is worse, ~`32 * 32 * 3 = 3072` instead of `32 * 64 * 1 = 2048`, but computing the tree for `mul(u16,u16)` is feasible using a naive algorithm on commodity hardware.\r\n\r\nThe implication of this is that where a function can be decomposed into operations on smaller inputs, PAIRCOMMIT is massively more feasible to use than encoding things into a tap tree.",
      "user": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2502899368",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2503388967,
      "node_id": "IC_kwDOAN28mc6VNq8n",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2503388967",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T09:39:06Z",
      "updated_at": "2024-11-27T09:39:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think I've changed my mind a bit. We were talking about computing a merkle tree for `f(u32,u32)` as if it was trivial but after a quick experiment it seems like that would take hundreds of years to compute (am I being dumb here?) Instead, you can compute `mul(u32,u32) -> u32` using 3 `mul(u16,u16)`s which _is_ feasible to compute. The witness size is worse, ~`32 * 32 * 3 = 3072` instead of `32 * 64 * 1 = 2048`, but computing the tree for `mul(u16,u16)` is feasible using a naive algorithm on commodity hardware.\r\n\r\nArithmetic and bitwise operations where inputs & outputs are small enough, can already be done in Script in cheaper ways. Merkle trees as lookup tables are only interesting for functions that are either extremely complex, or where preimages/images are larger than what Script can work with.\r\nNote that you can already do small indexed lookup tables more efficiently by just hard-coding them in Script (that is: push the table on the stack and use OP_PICK to read its entries), and these techniques are widely used (e.g. in BitVM).\r\n\r\n> The implication of this is that where a function can be decomposed into operations on smaller inputs, PAIRCOMMIT is massively more feasible to use than encoding things into a tap tree.\r\n\r\nI think the only substantial difference is that in a Script where you need several lookups, you can do it with Merkle trees, while you can only do a single lookup with a precomputed taptree.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2503388967",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2504031660,
      "node_id": "IC_kwDOAN28mc6VQH2s",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2504031660",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T14:32:54Z",
      "updated_at": "2024-11-27T14:32:54Z",
      "author_association": "NONE",
      "body": "> ### Proving general computation\r\n> \r\n> Merkle trees can be used to prove out computation where the root of the tree\r\n> represents the *function* and the leaves represent the *inputs* and *output*.\r\n> There are practical limits to the entropy space for the *inputs* as it needs\r\n> to be iterated over and hashed up.\r\n> \r\n> Currently MAST trees can cover 128 bits of entropy space, which is well over\r\n> the practical limits to iterate over and merklize. Therefore we assume this\r\n> capability does not materially extend what computations are possible to prove\r\n> out in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\r\n> that should not be practically feasible to utilize.\r\n> \r\n> There is a way to reduce the size of the witness for proving out computation,\r\n> by eliminating the merkle path inclusion proofs, using `OP_CHECKSIGFROMSTACK`\r\n> together with `OP_PAIRCOMMIT`. This method involves deleted key assumptions,\r\n> most likely using MPC to create an enormous amount of signatures for the stack\r\n> elements representing the *inputs* and the *output* of the *function*.\r\n\r\nIs this correct? Any suggestions? @Ademan @bigspider ",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2504031660",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "mentioned",
      "id": 15453599750,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAOZGzgG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15453599750",
      "actor": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T14:32:56Z"
    },
    {
      "event": "subscribed",
      "id": 15453599765,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAOZGzgV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15453599765",
      "actor": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T14:32:56Z"
    },
    {
      "event": "mentioned",
      "id": 15453599779,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAOZGzgj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15453599779",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T14:32:56Z"
    },
    {
      "event": "subscribed",
      "id": 15453599794,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAOZGzgy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15453599794",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T14:32:56Z"
    },
    {
      "event": "commented",
      "id": 2504043203,
      "node_id": "IC_kwDOAN28mc6VQKrD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2504043203",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T14:37:53Z",
      "updated_at": "2024-11-27T15:16:16Z",
      "author_association": "NONE",
      "body": "> The implication of this is that where a function can be decomposed into operations on smaller inputs, PAIRCOMMIT is massively more feasible to use than encoding things into a tap tree.\r\n\r\nThis is the main open question I believe. does it or does it not practically expand what we can already do?\r\nFor example using PC to emulate smolCAT and using traditional methods with lookup tables could make 32 bit or even 64 bit arithmetics more feasible?\r\n\r\n**edit:**\r\nWithin the 32 bit realm we can already use OP_ADD, I see little practical diff between `<0x1234> <0x5678> CAT` and `<0x12340000> <0x5678> ADD`.\r\nAnd it sounds like 64 bit smolCAT would be way too expensive to generate (and also to interact with trustlessly).\r\n\r\n(actually the above examples are wrong, because internally bitcoin script uses little endian, but should convey the point)",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2504043203",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2504114015,
      "node_id": "IC_kwDOAN28mc6VQb9f",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2504114015",
      "actor": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T15:07:42Z",
      "updated_at": "2024-11-27T15:30:55Z",
      "author_association": "NONE",
      "body": "> > ...\r\n> \r\n> Arithmetic and bitwise operations where inputs & outputs are small enough, can already be done in Script in cheaper ways. Merkle trees as lookup tables are only interesting for functions that are either extremely complex, or where preimages/images are larger than what Script can work with. Note that you can already do small indexed lookup tables more efficiently by just hard-coding them in Script (that is: push the table on the stack and use OP_PICK to read its entries), and these techniques are widely used (e.g. in BitVM).\r\n\r\nEven u16,u16 is quite a bit larger than I think is practical as a lookup table, but the efficiency for repeated operations is constant, obviously. The lookup table is less efficient for small numbers of operations (a u8,u8 table is 16k vs 1 u8,u8 proof is 0.4k) but the merkle tree loses quickly when those operations are repeated.\r\n\r\n> \r\n> > The implication of this is that where a function can be decomposed into operations on smaller inputs, PAIRCOMMIT is massively more feasible to use than encoding things into a tap tree.\r\n> \r\n> I think the only substantial difference is that in a Script where you need several lookups, you can do it with Merkle trees, while you can only do a single lookup with a precomputed taptree.\r\n\r\nRight, and the key point is these merkle trees and lookup tables rapidly become infeasible to compute as the input size grows, so multiple smaller lookups is significantly more useful.\r\n\r\nEDIT: But your point is well taken that for smaller operations they can already be better accomplished by lookup tables.",
      "user": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2504114015",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2504410833,
      "node_id": "IC_kwDOAN28mc6VRkbR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2504410833",
      "actor": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T17:20:40Z",
      "updated_at": "2024-11-27T17:21:44Z",
      "author_association": "NONE",
      "body": "> ...\r\n> **edit:** Within the 32 bit realm we can already use OP_ADD, I see little practical diff between `<0x1234> <0x5678> CAT` and `<0x12340000> <0x5678> ADD`. And it sounds like 64 bit smolCAT would be way too expensive to generate (and also to interact with trustlessly).\r\n> \r\n> (actually the above examples are wrong, because internally bitcoin script uses little endian, but should convey the point)\r\n\r\nYeah for arbitrary 8 byte strings smolCAT seems infeasible to compute the table or merkle tree for. After a bit of conversation on IRC it could probably be feasible for arbitrary `f(b[4],b[4]) -> b[8]` with a custom ASIC¹ or maybe a cluster of FPGAs in a span of ~a few years but that would not be very useful for the average person.\r\n\r\nBit shifts over 32 bit integers seems pretty feasible though, that's `f(u32,u6)->u32` (maybe save some space by special casing shift = 0). it seems like my incredibly naive, unoptimized, single-core experiment could calculate that merkle tree in ~96 hours. Of course the proof is ~1.2k and users would likely need multiple, but the lookup table for that wouldn't fit in a block anyway so maybe something new is possible?\r\n\r\nYou can also separate positive and negative shifts, and maybe break it down into multiple rounds of shifts 1-3 or something (or 1k for a proof for a constant shift)\r\n\r\n[1]: afaik existing ASICs operate on block headers so couldn't help",
      "user": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2504410833",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15456623461,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOZSVtl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15456623461",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4838e6517552f5c3de9823afe57a550aa14aab5b",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/4838e6517552f5c3de9823afe57a550aa14aab5b",
      "created_at": "2024-11-27T18:55:57Z"
    },
    {
      "event": "commented",
      "id": 2504816434,
      "node_id": "IC_kwDOAN28mc6VTHcy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2504816434",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T21:42:40Z",
      "updated_at": "2024-11-27T21:42:40Z",
      "author_association": "NONE",
      "body": "I think this BIP is already way more verbose than it was supposed to be.\r\n\r\nIt would be useful if we could reference it by a number.\r\nCan we get a BIP number assigned? Not asking for a merge yet.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2504816434",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "review_requested",
      "id": 15532587992,
      "node_id": "RRE_lADOAN28mc6d_QLszwAAAAOd0HvY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15532587992",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T21:14:33Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2520652681,
      "node_id": "IC_kwDOAN28mc6WPhuJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2520652681",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-05T15:37:19Z",
      "updated_at": "2024-12-06T10:03:20Z",
      "author_association": "NONE",
      "body": "Should we add this table to this BIP? And it's not just vBytes but also the number of sigops to consider, which is a cost all nodes on the p2p network have to bear.\r\n\r\n**edit:** I think it looks like this:\r\n\r\n| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |\r\n| :------------ | -------: | -------: | -------: | --------: | --------: |\r\n| APO-annex     |  2.25 vB | 28.25 vB |    25 vB |    305 vB |  461.5 vB |\r\n| APO-return    |  2.25 vB | 28.25 vB |  16.5 vB |  338.5 vB |  528.5 vB |\r\n| CTV+CSFS+IKEY |  2.75 vB | 12.25 vB |  24.5 vB |    331 vB |    513 vB |\r\n| CTV+CSFS      |    11 vB |  20.5 vB |  24.5 vB |  347.5 vB | 537.75 vB |\r\n| LNhance       |     3 vB |  12.5 vB | 32.75 vB | 297.75 vB | 446.25 vB |\r\n| CTV+CSFS+VAULT |  18.75 vB | 30 vB | 35 vB | 333.75 vB | 502.25 vB |\r\n| rekey         |  7.25 vB | 16.75 vB | 73.75 vB | 347.25 vB |    541 vB |\r\n\r\n| Method | ForceC | Update | Settle | OP_RETURN\r\n| :--- | :---: | :---: | :---: | :---: | \r\n| APO-annex | 1 SigOp | 1 SigOp | 1 SigOp | |\r\n| APO-return | 1 SigOp | 1 SigOp | 1 SigOp | X |\r\n| CTV+CSFS+IKEY | 1 SigOp | 1 SigOp | CTV | X |\r\n| CTV+CSFS | 1 SigOp | 1 SigOp | CTV | X |\r\n| LNhance | 1 SigOp | 1 SigOp | CTV | |\r\n| CTV+CSFS+VAULT | 2* SigOp | 2* SigOp | CTV | |\r\n| rekey | 3 SigOp | 3 SigOp | CTV | |\r\n\r\n\\* VAULT is not exactly a SigOp, but close enough. Has a budget cost of 1.2 SigOps.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2520652681",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2522077852,
      "node_id": "IC_kwDOAN28mc6WU9qc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2522077852",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T04:06:44Z",
      "updated_at": "2024-12-06T04:06:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "tbh i have no idea how to read that table, so might be good to have clearer labeling somehow / break down where the accounting came from?",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2522077852",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2522652697,
      "node_id": "IC_kwDOAN28mc6WXKAZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2522652697",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T09:37:37Z",
      "updated_at": "2024-12-06T09:37:37Z",
      "author_association": "NONE",
      "body": "This is based on @reardencode's spreadsheet:\r\nhttps://docs.google.com/spreadsheets/d/1UNW1AV7F8Srf-vHL5F3bKnkezbHIMabQqhU21tV915o/edit?gid=0#gid=0",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2522652697",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "mentioned",
      "id": 15557357201,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAOfSm6R",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15557357201",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T09:37:39Z"
    },
    {
      "event": "subscribed",
      "id": 15557357217,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAOfSm6h",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15557357217",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T09:37:39Z"
    },
    {
      "event": "commented",
      "id": 2523978039,
      "node_id": "IC_kwDOAN28mc6WcNk3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2523978039",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T19:08:30Z",
      "updated_at": "2024-12-06T19:08:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "> It would be useful if we could reference it by a number. Can we get a BIP number assigned? Not asking for a merge yet.\r\n\r\nLooking at the Motivation section, it seems to me that the main application for this proposal would be a construction that depends on three other undeployed proposals some of which are themselves draft stage or pre-draft. This proposal feels a bit hypothetical at this point. I’ll get back to you next week.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2523978039",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2524000752,
      "node_id": "IC_kwDOAN28mc6WcTHw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2524000752",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T19:23:15Z",
      "updated_at": "2024-12-06T19:23:44Z",
      "author_association": "NONE",
      "body": "> This proposal feels a bit hypothetical at this point.\r\n\r\nWhile PAIRCOMMIT would only be truly useful with certain other future upgrades, it is proposed to activate in a bundle with said updates. We are in the process of trying to reach consensus on said package.\r\n\r\nIt's unlikely I would withdraw OP_PAIRCOMMIT, unless OP_CAT got activated first.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2524000752",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2525240379,
      "node_id": "IC_kwDOAN28mc6WhBw7",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2525240379",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-07T16:41:42Z",
      "updated_at": "2024-12-07T16:42:26Z",
      "author_association": "MEMBER",
      "body": "> What date should go to the header?\r\n\r\nThe Created header records the date that the BIP was assigned a number (see BIP-2).",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2525240379",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "reviewed",
      "id": 2486640298,
      "node_id": "PRR_kwDOAN28mc6UNx6q",
      "url": null,
      "actor": null,
      "commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "A few edit suggestions on first read.\r\n\r\nI think this can potentially be assigned a number once the BIP-2 criteria are met. A non-exhaustive list:\r\n\r\n\r\n\"When the BIP draft is complete, a BIP editor will assign the BIP a number, label it as Standards Track, Informational, or Process, and merge the pull request to the BIPs git repository.\r\n\"The BIP editors will not unreasonably reject a BIP.\r\n\"Reasons for rejecting BIPs include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Bitcoin philosophy.\r\n\"For a BIP to be accepted it must meet certain minimum criteria.\r\n\"It must be a clear and complete description of the proposed enhancement.\r\n\"The enhancement must represent a net improvement.\r\n\"The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.\"",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2486640298",
      "submitted_at": "2024-12-07T16:53:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "review_requested",
      "id": 15570377688,
      "node_id": "RRE_lADOAN28mc6d_QLszwAAAAOgERvY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15570377688",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-07T17:52:18Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2490020927,
      "node_id": "PRR_kwDOAN28mc6UarQ_",
      "url": null,
      "actor": null,
      "commit_id": "bad6dba4b2c9dda463b2a79e4770ac766e999b37",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Let’s call this **BIP 442**.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2490020927",
      "submitted_at": "2024-12-09T20:43:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15590728535,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOhR6NX",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15590728535",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "baf6c7ab63a4de1aeeb940ef6063473042375b9c",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/baf6c7ab63a4de1aeeb940ef6063473042375b9c",
      "created_at": "2024-12-09T21:19:40Z"
    },
    {
      "event": "renamed",
      "id": 15693910302,
      "node_id": "RTE_lADOAN28mc6d_QLszwAAAAOnbhEe",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15693910302",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:13:25Z",
      "rename": {
        "from": "OP_PAIRCOMMIT",
        "to": "BIP442: OP_PAIRCOMMIT"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15750055072,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOqxsSg",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15750055072",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/02538385ef0a5f8b1be1368e803b9043418f2f40",
      "created_at": "2024-12-23T16:46:26Z"
    },
    {
      "event": "reviewed",
      "id": 2522102222,
      "node_id": "PRR_kwDOAN28mc6WVDnO",
      "url": null,
      "actor": null,
      "commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "PAIRCOMMIT continues to grow on me.\r\n\r\nGetting the primary benefits of OP_CAT without introducing ugly introspection seems like a clear win for bitcoin.\r\n\r\nBetter introspection should also be added in follow-up forks. Thanks for your work on this!",
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2522102222",
      "submitted_at": "2024-12-24T16:57:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "commented",
      "id": 2561311768,
      "node_id": "IC_kwDOAN28mc6YqoQY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2561311768",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-24T17:37:44Z",
      "updated_at": "2024-12-24T17:37:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "I get that there is a goal here to avoid introspection...\r\n\r\nbut it seems that it'd be more generically useful if the function were e.g., a TapBranch function, so then it could be used in the future with some other taproot editing opcodes.\r\n\r\ne.g., if `OP_TAPBRANCHCOMMIT` were to lexicographic sort, then cat, then commit, you could do paircommit like functionality by doing:\r\n\r\n`<a> <b> TUCK OP_TAPBRANCHCOMMIT OP_TAPBRANCHCOMMIT`\r\n\r\nthis works because while the first commit commits to  either `a||b` or `b||a`, and also has sliceable errors (e.g., `(a||b)[:i]` and `(a||b)[i:])`, the second commit re-commits to `<b>` and it's length which uniquely determines order and prevents sliceable errors.\r\n\r\nOne concern: OP_TAPBRANCHCOMMIT is witness \"malleable\", in that items could show up in the witness stack in either order and get the same result. It'd still be possible to make non-malleable witnesses by requiring the stack elements to be in order with a OP_LEXSORT or equivalent functionality.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2561311768",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2561380326,
      "node_id": "IC_kwDOAN28mc6Yq4_m",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2561380326",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-24T20:13:10Z",
      "updated_at": "2024-12-24T20:13:10Z",
      "author_association": "NONE",
      "body": "If we did `OP_TAPBRANCHCOMMIT` then with `OP_CHECKCONTRACTVERIFY` I believe you get `TLUV` behavior?\r\nYou can verify a tapleaf on the input and can also replace it with an other on the output?\r\n\r\nTo be honest the `OP_PAIRCOMMIT` domain separation was aimed to prevent the possibility of such uses as potentially being more controversial.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2561380326",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2561518293,
      "node_id": "IC_kwDOAN28mc6YrarV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2561518293",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-25T00:59:18Z",
      "updated_at": "2024-12-25T00:59:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think it's actually *less* controversial, because if you do `OP_TAPBRANCHCOMMIT` you're doing something that even once you have OP_CAT, is really handy to have (because sorting two strings is actually still pretty hard with CAT).\r\n\r\nWhereas now you're getting a lot of people thinking that paircommit is not so useful if CAT gets in eventually.\r\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2561518293",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2561523692,
      "node_id": "IC_kwDOAN28mc6Yrb_s",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2561523692",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-25T01:13:58Z",
      "updated_at": "2024-12-25T01:15:33Z",
      "author_association": "NONE",
      "body": "Right. I did consider something like a sorting merkle operator for lamport stuff for example, however when you need order dependent commitments (which is pretty much everything we are doing with it rn) then you would have to use a dummy value like:\r\n`<a> <1> <b> OP_TAPBRANCHCOMMIT OP_TAPBRANCHCOMMIT`\r\nor maybe:\r\n`<a> <b> OP_SHA256 OP_TAPBRANCHCOMMIT`\r\ninstead of:\r\n`<a> <b> OP_PAIRCOMMIT`\r\nSo if I wanted to support both of these functionalities I would probably end up with 2 separate opcodes for them.\r\n",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2561523692",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15777910834,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOsb9Ay",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15777910834",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9d86addd69cd5736d1642e730a8494aa3e0efb09",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/9d86addd69cd5736d1642e730a8494aa3e0efb09",
      "created_at": "2024-12-28T16:41:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15777988699,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOscQBb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15777988699",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "69d8d97809b666eb98cc04b8e0e8a8dc4f4ba24d",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/69d8d97809b666eb98cc04b8e0e8a8dc4f4ba24d",
      "created_at": "2024-12-28T17:44:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15777995886,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAOscRxu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15777995886",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "created_at": "2024-12-28T17:50:49Z"
    },
    {
      "event": "commented",
      "id": 2564390379,
      "node_id": "IC_kwDOAN28mc6Y2X3r",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2564390379",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-28T17:52:26Z",
      "updated_at": "2024-12-28T17:52:26Z",
      "author_association": "NONE",
      "body": "I think this is ready for a merge from my point of view.\r\nRebased to latest master and squashed all the changes to 1 commit.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2564390379",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2564400792,
      "node_id": "IC_kwDOAN28mc6Y2aaY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2564400792",
      "actor": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-28T18:44:26Z",
      "updated_at": "2024-12-30T03:27:53Z",
      "author_association": "NONE",
      "body": "Maybe this is obvious to everyone else and I'm a slowpoke here, but PC+CSFS+CTV enables a kind of \"multi-transaction-signature\". You sign a merkle root that commits to a bunch of CTV transaction templates, and you can provide an inclusion proof with PC with the signature.\r\n\r\nI've been spitballing with someone about a multiparty eltoo scheme and came up with a way to bound the state resolution but without state carrying covenants it requires a possible field of ~2^N transactions (of which, at most N will end up on-chain), and every party shares N*(N+1)/2 signatures.\r\n\r\nWith PC+CSFS+CTV it still requires ~2^N transactions, but each party only needs to share their 1 signature over the merkle root.\r\n\r\nEDIT: Not 100% sure it works for my mutliparty eltoo scheme just yet, but I'm still >50% confident it does...\r\nEDIT EDIT: More confident it works, but it looks like the number of transactions is exponential rather than polynomial... and so my estimate for how many signatures would need to be shared without the \"multi-transaction-signature\" commitment is probably way low.\r\nEDIT EDIT EDIT: I genuinely have no idea how I decided \"multi-signature\" was an acceptable term considering it already has a different meaning in Bitcoin... s/\"multi-signature\"/\"multi-transaction-signature\"/g",
      "user": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2564400792",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "reviewed",
      "id": 2525858478,
      "node_id": "PRR_kwDOAN28mc6WjYqu",
      "url": null,
      "actor": null,
      "commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I find this BIP still somewhat hard to read. Many sections seem to expect a lot of prior knowledge from the reader. Overall, it seems to me that several sections could do with a bit more context. Maybe I’m not in the target audience for the BIP, but I would suggest that people who are more invested in this topic proofread this BIP and provide feedback with approachability in mind.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2525858478",
      "submitted_at": "2024-12-30T18:52:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "reviewed",
      "id": 2526089473,
      "node_id": "PRR_kwDOAN28mc6WkREB",
      "url": null,
      "actor": null,
      "commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'm gonna spend some time with this BIP today and will either make comments or offer a revision to put the sections of this into a more cohesive sequence.",
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2526089473",
      "submitted_at": "2024-12-31T16:13:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "reviewed",
      "id": 2529874402,
      "node_id": "PRR_kwDOAN28mc6WytHi",
      "url": null,
      "actor": null,
      "commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "WIP review.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2529874402",
      "submitted_at": "2025-01-04T03:25:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "reviewed",
      "id": 2529883644,
      "node_id": "PRR_kwDOAN28mc6WyvX8",
      "url": null,
      "actor": null,
      "commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2529883644",
      "submitted_at": "2025-01-04T03:47:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "commented",
      "id": 2570042184,
      "node_id": "IC_kwDOAN28mc6ZL7tI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2570042184",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T04:15:47Z",
      "updated_at": "2025-01-04T04:15:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks so much Jon. we have a significant revision coming that does include defining abbreviations. @moonsettler should we move this to draft until we finish workshopping the revisions we're working on?",
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2570042184",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "mentioned",
      "id": 15812229013,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAOue3eV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15812229013",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T04:15:48Z"
    },
    {
      "event": "subscribed",
      "id": 15812229016,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAOue3eY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15812229016",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T04:15:48Z"
    },
    {
      "event": "convert_to_draft",
      "id": 15815557862,
      "node_id": "CTDE_lADOAN28mc6d_QLszwAAAAOurkLm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15815557862",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T13:55:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16236302253,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAPHwk-t",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16236302253",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "created_at": "2025-02-08T18:38:28Z"
    },
    {
      "event": "commented",
      "id": 2645897301,
      "node_id": "IC_kwDOAN28mc6dtTBV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2645897301",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-08T18:39:24Z",
      "updated_at": "2025-02-08T18:39:24Z",
      "author_association": "NONE",
      "body": "We have a rework of the BIP, the original can be viewed [here ](https://gist.github.com/moonsettler/d7f1fb88e3e54ee7ecb6d69ff126433b)\r\n\r\nPlease provide feedback on which approach you think is better! @murchandamus @jonatack ",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2645897301",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "mentioned",
      "id": 16236303927,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAPHwlY3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16236303927",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-08T18:39:25Z"
    },
    {
      "event": "subscribed",
      "id": 16236303928,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAPHwlY4",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16236303928",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-08T18:39:25Z"
    },
    {
      "event": "mentioned",
      "id": 16236303930,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAPHwlY6",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16236303930",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-08T18:39:26Z"
    },
    {
      "event": "subscribed",
      "id": 16236303932,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAPHwlY8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16236303932",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-08T18:39:26Z"
    },
    {
      "event": "reviewed",
      "id": 2606711670,
      "node_id": "PRR_kwDOAN28mc6bX0N2",
      "url": null,
      "actor": null,
      "commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, I found the new version easier to follow.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2606711670",
      "submitted_at": "2025-02-10T18:55:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "labeled",
      "id": 16284009346,
      "node_id": "LE_lADOAN28mc6d_QLszwAAAAPKmkOC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16284009346",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T16:38:12Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "reviewed",
      "id": 2612572223,
      "node_id": "PRR_kwDOAN28mc6buLA_",
      "url": null,
      "actor": null,
      "commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#pullrequestreview-2612572223",
      "submitted_at": "2025-02-12T16:41:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDYzMjk2YmZhYWI3ZWE0OWU5NDI0MTNkM2ZjNmY0NWJiNTYzYmRjOWU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/63296bfaab7ea49e942413d3fc6f45bb563bdc9e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/63296bfaab7ea49e942413d3fc6f45bb563bdc9e",
      "tree": {
        "sha": "a84e1e9e249304d501690da71648b9ce6ea4b986",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a84e1e9e249304d501690da71648b9ce6ea4b986"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3c7b0d649821a0961de6ea5df6ddbefe4d6f716b",
          "sha": "3c7b0d649821a0961de6ea5df6ddbefe4d6f716b",
          "html_url": "https://github.com/bitcoin/bips/commit/3c7b0d649821a0961de6ea5df6ddbefe4d6f716b"
        }
      ],
      "message": "Add: PAIRCOMMIT",
      "committer": {
        "name": "moonsettler",
        "email": "moonsettler@protonmail.com",
        "date": "2025-02-12T17:18:10Z"
      },
      "author": {
        "name": "moonsettler",
        "email": "moonsettler@protonmail.com",
        "date": "2024-12-28T17:50:22Z"
      },
      "sha": "63296bfaab7ea49e942413d3fc6f45bb563bdc9e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDU3ZGYxNDU2NDhhOGNlMjU1YjMxZGY5ZTY2NjZkOTVhN2E0MzU1MTY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/57df145648a8ce255b31df9e6666d95a7a435516",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/57df145648a8ce255b31df9e6666d95a7a435516",
      "tree": {
        "sha": "86b503ffb1bb2f222962777dd5b217d31fcac812",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/86b503ffb1bb2f222962777dd5b217d31fcac812"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/63296bfaab7ea49e942413d3fc6f45bb563bdc9e",
          "sha": "63296bfaab7ea49e942413d3fc6f45bb563bdc9e",
          "html_url": "https://github.com/bitcoin/bips/commit/63296bfaab7ea49e942413d3fc6f45bb563bdc9e"
        }
      ],
      "message": "New revision with Brandon Black",
      "committer": {
        "name": "moonsettler",
        "email": "moonsettler@protonmail.com",
        "date": "2025-02-12T17:18:10Z"
      },
      "author": {
        "name": "moonsettler",
        "email": "moonsettler@protonmail.com",
        "date": "2025-02-08T18:34:30Z"
      },
      "sha": "57df145648a8ce255b31df9e6666d95a7a435516"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDYzNzVlZTE5ODY5YzZkN2M0Mzc4YTk5ZmQxMTRlOTZjNzJkMGVjZGU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6375ee19869c6d7c4378a99fd114e96c72d0ecde",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6375ee19869c6d7c4378a99fd114e96c72d0ecde",
      "tree": {
        "sha": "24ca7ff0041a23dc790b3cca1283b5474db29209",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/24ca7ff0041a23dc790b3cca1283b5474db29209"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/57df145648a8ce255b31df9e6666d95a7a435516",
          "sha": "57df145648a8ce255b31df9e6666d95a7a435516",
          "html_url": "https://github.com/bitcoin/bips/commit/57df145648a8ce255b31df9e6666d95a7a435516"
        }
      ],
      "message": "Fix: Authors and spelling merklize",
      "committer": {
        "name": "moonsettler",
        "email": "moonsettler@protonmail.com",
        "date": "2025-02-12T17:18:10Z"
      },
      "author": {
        "name": "moonsettler",
        "email": "moonsettler@protonmail.com",
        "date": "2025-02-12T17:10:20Z"
      },
      "sha": "6375ee19869c6d7c4378a99fd114e96c72d0ecde"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16284568064,
      "node_id": "HRFPE_lADOAN28mc6d_QLszwAAAAPKosoA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16284568064",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6375ee19869c6d7c4378a99fd114e96c72d0ecde",
      "commit_url": "https://api.github.com/repos/lnhance/bips/commits/6375ee19869c6d7c4378a99fd114e96c72d0ecde",
      "created_at": "2025-02-12T17:18:27Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRhMmI2OWNjNzYxYzViMWFjZWM1OTRiOGU5ZTM0ZDczMGI4YjI2OTI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "tree": {
        "sha": "600af3a4ead1226f0148bffe13bcc34adcf62ea6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/600af3a4ead1226f0148bffe13bcc34adcf62ea6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6375ee19869c6d7c4378a99fd114e96c72d0ecde",
          "sha": "6375ee19869c6d7c4378a99fd114e96c72d0ecde",
          "html_url": "https://github.com/bitcoin/bips/commit/6375ee19869c6d7c4378a99fd114e96c72d0ecde"
        }
      ],
      "message": "Fix: header",
      "committer": {
        "name": "moonsettler",
        "email": "moonsettler@protonmail.com",
        "date": "2025-02-12T22:47:06Z"
      },
      "author": {
        "name": "moonsettler",
        "email": "moonsettler@protonmail.com",
        "date": "2025-02-12T22:47:06Z"
      },
      "sha": "da2b69cc761c5b1acec594b8e9e34d730b8b2692"
    },
    {
      "event": "commented",
      "id": 2743862151,
      "node_id": "IC_kwDOAN28mc6jjAOH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2743862151",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T16:23:29Z",
      "updated_at": "2025-03-21T16:23:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey, I see that there was a force push, but it is not clear to me whether the review comments have been addressed. Looking at a couple at least some of them seem to still apply. Could you please process the review comments, either reply on them if there is information to share or the conversation is still on-going, or resolve them if you have applied them or rejected them? Please mark this pull request as \"Ready for review\" when you would like another editor review.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2743862151",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "commented",
      "id": 2836927735,
      "node_id": "IC_kwDOAN28mc6pGBT3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2836927735",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-28T22:41:31Z",
      "updated_at": "2025-04-28T22:41:31Z",
      "author_association": "NONE",
      "body": "> Hey, I see that there was a force push, but it is not clear to me whether the review comments have been addressed. Looking at a couple at least some of them seem to still apply. Could you please process the review comments, either reply on them if there is information to share or the conversation is still on-going, or resolve them if you have applied them or rejected them? Please mark this pull request as \"Ready for review\" when you would like another editor review.\r\n\r\nSorry, I don't think we addressed everything. Should go through every suggestion one by one. Right now I can't prioritize this sadly. Not sure if @reardencode wishes to pick up the slack in the meantime.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2836927735",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "mentioned",
      "id": 17443892932,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAAQPvK7E",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17443892932",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-28T22:41:32Z"
    },
    {
      "event": "subscribed",
      "id": 17443892941,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAAQPvK7N",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17443892941",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-28T22:41:33Z"
    },
    {
      "event": "commented",
      "id": 2993021970,
      "node_id": "IC_kwDOAN28mc6yZeQS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2993021970",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T22:05:23Z",
      "updated_at": "2025-06-20T22:05:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey @moonsettler and @reardencode, do you have an update here?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-2993021970",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "mentioned",
      "id": 18254091510,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAARAB1T2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18254091510",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T22:05:24Z"
    },
    {
      "event": "subscribed",
      "id": 18254091528,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAARAB1UI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18254091528",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T22:05:24Z"
    },
    {
      "event": "mentioned",
      "id": 18254091544,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAARAB1UY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18254091544",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T22:05:24Z"
    },
    {
      "event": "subscribed",
      "id": 18254091559,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAARAB1Un",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18254091559",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T22:05:24Z"
    },
    {
      "event": "unsubscribed",
      "id": 18254878611,
      "node_id": "UE_lADOAN28mc6d_QLszwAAAARAE1eT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18254878611",
      "actor": {
        "login": "0xf0xx0",
        "id": 33764485,
        "node_id": "MDQ6VXNlcjMzNzY0NDg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/33764485?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xf0xx0",
        "html_url": "https://github.com/0xf0xx0",
        "followers_url": "https://api.github.com/users/0xf0xx0/followers",
        "following_url": "https://api.github.com/users/0xf0xx0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xf0xx0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xf0xx0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xf0xx0/subscriptions",
        "organizations_url": "https://api.github.com/users/0xf0xx0/orgs",
        "repos_url": "https://api.github.com/users/0xf0xx0/repos",
        "events_url": "https://api.github.com/users/0xf0xx0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xf0xx0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-21T00:41:19Z"
    },
    {
      "event": "commented",
      "id": 3067111612,
      "node_id": "IC_kwDOAN28mc620Gi8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3067111612",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-13T15:25:53Z",
      "updated_at": "2025-07-13T15:25:53Z",
      "author_association": "NONE",
      "body": "> Hey @moonsettler and @reardencode, do you have an update here?\r\n\r\nHi, I intend to get back at this sometimes in September, if that's okay? Do not wish to abandon the BIP, I'm just swamped at the moment.",
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1699#issuecomment-3067111612",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1699"
    },
    {
      "event": "mentioned",
      "id": 18605706294,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAARU_Iw2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18605706294",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-13T15:25:54Z"
    },
    {
      "event": "subscribed",
      "id": 18605706297,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAARU_Iw5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18605706297",
      "actor": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-13T15:25:54Z"
    },
    {
      "event": "mentioned",
      "id": 18605706301,
      "node_id": "MEE_lADOAN28mc6d_QLszwAAAARU_Iw9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18605706301",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-13T15:25:54Z"
    },
    {
      "event": "subscribed",
      "id": 18605706303,
      "node_id": "SE_lADOAN28mc6d_QLszwAAAARU_Iw_",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18605706303",
      "actor": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-13T15:25:54Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1843982296",
      "pull_request_review_id": 2438876944,
      "id": 1843982296,
      "node_id": "PRRC_kwDOAN28mc5t6O_Y",
      "diff_hunk": "@@ -1267,6 +1267,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Gloria Zhao\n | Informational\n | Draft\n+|- style=\"background-color: #cfffcf\"",
      "path": "README.mediawiki",
      "position": null,
      "original_position": 4,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "08ffb0303d9aa73e622ee98ed941cae0c63e906a",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For Draft status PRs the background color is not specified\r\n\r\n```suggestion\r\n|-\r\n```",
      "created_at": "2024-11-15T15:15:07Z",
      "updated_at": "2024-11-15T15:18:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1843982296",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1843982296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1843982809",
      "pull_request_review_id": 2438876944,
      "id": 1843982809,
      "node_id": "PRRC_kwDOAN28mc5t6PHZ",
      "diff_hunk": "@@ -1267,6 +1267,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Gloria Zhao\n | Informational\n | Draft\n+|- style=\"background-color: #cfffcf\"\n+| [[bip-PC.md|PC]]\n+| Consensus (soft fork)\n+| PAIRCOMMIT",
      "path": "README.mediawiki",
      "position": null,
      "original_position": 7,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "08ffb0303d9aa73e622ee98ed941cae0c63e906a",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This has to match the title header in the preamble:\r\n\r\n```suggestion\r\n| OP_PAIRCOMMIT\r\n```",
      "created_at": "2024-11-15T15:15:32Z",
      "updated_at": "2024-11-15T15:18:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1843982809",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1843982809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1843986559",
      "pull_request_review_id": 2438876944,
      "id": 1843986559,
      "node_id": "PRRC_kwDOAN28mc5t6QB_",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 39,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "08ffb0303d9aa73e622ee98ed941cae0c63e906a",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It sounds like OP_PAIRCOMMIT is closely related to CAT and CSFS. Could you perhaps expand on the related work and design decisions in a Rationale section?",
      "created_at": "2024-11-15T15:17:10Z",
      "updated_at": "2024-11-15T15:18:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1843986559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1843986559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844079494",
      "pull_request_review_id": 2439000064,
      "id": 1844079494,
      "node_id": "PRRC_kwDOAN28mc5t6muG",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 39,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "08ffb0303d9aa73e622ee98ed941cae0c63e906a",
      "in_reply_to_id": 1843986559,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Alternatives we discussed:\r\n* OP_CAT\r\n* Merkle operation opcodes\r\n* SHA256 streaming opcodes\r\n* 'Kitty' CAT (result or inputs limited in size to try disable introspection and arithmetic extension uses)\r\n* OP_CTV also commiting to the taproot annex in tapscript\r\n* OP_CHECKSIGFROMSTACK variant on n elements as message instead of 1\r\n* OP_VECTORCOMMIT (decoupling above behavior)\r\n\r\nFinally after weighing everything OP_PAIRCOMMIT was the simplest addition that got what we needed exactly in the most efficient way. It's a minimal code change, very easy to reason about. Therefore we expect it to be the least controversial option.\r\n\r\nSadly a lot of the discussion is all over the place and on unsearchable mediums.",
      "created_at": "2024-11-15T15:44:34Z",
      "updated_at": "2024-11-15T15:45:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1844079494",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844079494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844141612",
      "pull_request_review_id": 2439109724,
      "id": 1844141612,
      "node_id": "PRRC_kwDOAN28mc5t614s",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to BIP-340\n+tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and `cs(x)` means\n+`CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    popstack(stack);\n+    popstack(stack);\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 134,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "40f0b0f3e461d2664d9a89cee5dd9103fa94552e",
      "in_reply_to_id": null,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n## Rationale\r\n\r\nIf `OP_CAT` was available, it could be used to combine multiple stack elements,\r\nthat get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\r\n\r\n`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\r\nof potentially controversial new behaviors, such as novel 2-way peg mechanisms.\r\n\r\n### Alternatives discussed\r\n\r\n* OP_CAT\r\n\r\n`OP_CAT` allows for fine grained introspection possibly bigint operations and\r\nextending the arithmetic capabilities of bitcoin script using lookup tables.\r\n\r\n* SHA256 streaming opcodes\r\n\r\nThese would predictably allow for the same functionality as `OP_CAT` for\r\nintrospection purposes, since verification of a computation is largely\r\nequivalent with carrying it out. Bigint and new arithmetic operations would\r\nbe hard or even impossible.\r\n\r\n* Merkle operation opcodes\r\n\r\nThese would be of very limited general use and hard to rationalize without\r\nOP_CAT. Their complexity and resource cost is hard to justified for vector\r\ncommitments only. Compatibility considerations with taproot MAST were also\r\nhard to resolve without knowing what other opcodes may be activated in the\r\nfuture.\r\n\r\n* 'Kitty' CAT (result or inputs limited in size)\r\n\r\nThe original idea would have limited the maximum size of `OP_CAT` output to a\r\nsize that is smaller than the smallest sighash preimage, thus disabling the\r\nintrospection capabilities and trivial ways to extend the arithmetic repertoir\r\nof bitcoin script. This turned out to be an awkward, arbitrary and offering\r\nweak .\r\n\r\n* OP_CHECKTEMPLATEVERIFY commiting to the taproot annex in tapscript\r\n\r\nA CTV template can be considered a sighash, however relaxing the relay policy\r\nto take advantage of this change would make various endogenous asset protocols\r\nmore efficient, and therefore be controversial. There is also no consensus on\r\nhow to use or how to structure the annex.\r\n\r\n* OP_CHECKSIGFROMSTACK on n elements as message\r\n\r\nThis was previosuly discussed and also implemented, it complicates the code\r\nand is a pretty arbitrary coupling of behaviors.\r\n\r\n* OP_VECTORCOMMIT\r\n\r\nThe obvious generalized solution for committing to n stack elements, however\r\nit involves looping and hard to argue about setting the proper limits to it.\r\n",
      "created_at": "2024-11-15T16:30:14Z",
      "updated_at": "2024-11-15T18:04:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1844141612",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844141612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844547889",
      "pull_request_review_id": 2439751968,
      "id": 1844547889,
      "node_id": "PRRC_kwDOAN28mc5t8ZEx",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 39,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "08ffb0303d9aa73e622ee98ed941cae0c63e906a",
      "in_reply_to_id": 1843986559,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That’s why I am suggesting that this proposal should collect some of that information.",
      "created_at": "2024-11-15T21:45:59Z",
      "updated_at": "2024-11-15T21:45:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1844547889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844547889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844588314",
      "pull_request_review_id": 2439813780,
      "id": 1844588314,
      "node_id": "PRRC_kwDOAN28mc5t8i8a",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 39,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "08ffb0303d9aa73e622ee98ed941cae0c63e906a",
      "in_reply_to_id": 1843986559,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I would prefer to keep it simple and to the point. Added a more brief rationale section. Could do a more in depth recollection on what we learned and why certain alternatives fell out of favor on a delving thread we link from here, if people are actually curious.",
      "created_at": "2024-11-15T22:14:59Z",
      "updated_at": "2024-11-15T22:15:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1844588314",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844588314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1855215320",
      "pull_request_review_id": 2456425669,
      "id": 1855215320,
      "node_id": "PRRC_kwDOAN28mc5ulFbY",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 39,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "08ffb0303d9aa73e622ee98ed941cae0c63e906a",
      "in_reply_to_id": 1843986559,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Expanded on the rationale behind `OP_PAIRCOMMIT `on [delvingbitcoin](https://delvingbitcoin.org/t/op-paircommit-as-a-candidate-for-addition-to-lnhance/1216/13?u=moonsettler).",
      "created_at": "2024-11-23T15:46:29Z",
      "updated_at": "2024-11-23T15:48:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1855215320",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1855215320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1856872293",
      "pull_request_review_id": 2458868161,
      "id": 1856872293,
      "node_id": "PRRC_kwDOAN28mc5urZ9l",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 17,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nprovides limited vector commitment functionality in tapscript.\r\n```",
      "created_at": "2024-11-25T16:01:02Z",
      "updated_at": "2024-11-25T16:08:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1856872293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1856872293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1856874690",
      "pull_request_review_id": 2458868161,
      "id": 1856874690,
      "node_id": "PRRC_kwDOAN28mc5urajC",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This paragraph seems to indicate that the `OP_PAIRCOMMIT` proposal would be especially useful in combination with these other opcodes. Could you perhaps clarify whether and how `OP_PAIRCOMMIT` is useful by itself in absence of the other three opcodes you mention here?",
      "created_at": "2024-11-25T16:02:27Z",
      "updated_at": "2024-11-25T16:08:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1856874690",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1856874690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1856937991",
      "pull_request_review_id": 2458972847,
      "id": 1856937991,
      "node_id": "PRRC_kwDOAN28mc5urqAH",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "LNhance at it's core is `CTV` + `CSFS`. They together provide the core utility. `IKEY` is an optimization for not having to pay for the pubkey twice when the internal key can be used. `PC` is an optimization when `CSFS` has to commit to additional data required to recreate a spend script from an intermediate state, because `OP_RETURN` (to which `CTV` naturally commits to) is 4x more expensive in weight units for data availability.\r\n\r\n`PC` could also be used by `CHECKCONTRACTVERIFY` to carry a complex state in the absence of `CAT`.\r\n\r\nI don't think anyone would find `PC` useful enough to activate in isolation without the aforementioned other opcodes.\r\nIt can do general merkle tree style commitments that are not compatible with other merkle tree structures in bitcoin.\r\n\r\nWe probably will make a new BIP for LNhance that has these other BIPs as \"Relies on\".",
      "created_at": "2024-11-25T16:43:19Z",
      "updated_at": "2024-11-25T16:46:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1856937991",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1856937991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857069158",
      "pull_request_review_id": 2459218505,
      "id": 1857069158,
      "node_id": "PRRC_kwDOAN28mc5usKBm",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 21,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "a214597e9f31d93bbe24773ba3b467302a5ddcbc",
      "in_reply_to_id": null,
      "user": {
        "login": "rot13maxi",
        "id": 115941166,
        "node_id": "U_kgDOBukfLg",
        "avatar_url": "https://avatars.githubusercontent.com/u/115941166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rot13maxi",
        "html_url": "https://github.com/rot13maxi",
        "followers_url": "https://api.github.com/users/rot13maxi/followers",
        "following_url": "https://api.github.com/users/rot13maxi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rot13maxi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rot13maxi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rot13maxi/subscriptions",
        "organizations_url": "https://api.github.com/users/rot13maxi/orgs",
        "repos_url": "https://api.github.com/users/rot13maxi/repos",
        "events_url": "https://api.github.com/users/rot13maxi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rot13maxi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "consider linking to the section in bip340 about tagged hashes",
      "created_at": "2024-11-25T17:49:20Z",
      "updated_at": "2024-11-25T17:56:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1857069158",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857069158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857084852",
      "pull_request_review_id": 2459218505,
      "id": 1857084852,
      "node_id": "PRRC_kwDOAN28mc5usN20",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 29,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "a214597e9f31d93bbe24773ba3b467302a5ddcbc",
      "in_reply_to_id": null,
      "user": {
        "login": "rot13maxi",
        "id": 115941166,
        "node_id": "U_kgDOBukfLg",
        "avatar_url": "https://avatars.githubusercontent.com/u/115941166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rot13maxi",
        "html_url": "https://github.com/rot13maxi",
        "followers_url": "https://api.github.com/users/rot13maxi/followers",
        "following_url": "https://api.github.com/users/rot13maxi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rot13maxi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rot13maxi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rot13maxi/subscriptions",
        "organizations_url": "https://api.github.com/users/rot13maxi/orgs",
        "repos_url": "https://api.github.com/users/rot13maxi/repos",
        "events_url": "https://api.github.com/users/rot13maxi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rot13maxi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "what data needs to be available? how does PC solve that problem (does it stick the data in the witness and put a commitment somewhere covered by a signature? something else?)? Is this mechanism useful for things outside of LN-Symmetry?",
      "created_at": "2024-11-25T17:54:54Z",
      "updated_at": "2024-11-25T17:56:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1857084852",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857084852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857115341",
      "pull_request_review_id": 2459278866,
      "id": 1857115341,
      "node_id": "PRRC_kwDOAN28mc5usVTN",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 29,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "a214597e9f31d93bbe24773ba3b467302a5ddcbc",
      "in_reply_to_id": 1857084852,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The data that needs to be available for state n is:\r\n```text\r\nstate-n-recovery-data { settlement-n-hash or state-n-balance }\r\n```\r\nThis is needed to reconstruct the whole script for the nth state address that the funds move to by the channel peer that only holds the latest state, so he can spend to the latest state.\r\n\r\nedit:\r\nInstead of an IF statement we could use different tap leaves (less optimal actually) and then merkle inclusion proof with sibling hashes would have to be known.",
      "created_at": "2024-11-25T18:04:39Z",
      "updated_at": "2024-11-25T18:08:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1857115341",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857115341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857141410",
      "pull_request_review_id": 2459312887,
      "id": 1857141410,
      "node_id": "PRRC_kwDOAN28mc5usbqi",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 29,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "a214597e9f31d93bbe24773ba3b467302a5ddcbc",
      "in_reply_to_id": 1857084852,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Is this mechanism useful for things outside of LN-Symmetry?\r\n\r\nIt was obviously our primary motivation, but I would not be surprised if other applications that use CSFS find a similar use for it.",
      "created_at": "2024-11-25T18:16:12Z",
      "updated_at": "2024-11-25T18:16:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1857141410",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857141410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857149424",
      "pull_request_review_id": 2459321389,
      "id": 1857149424,
      "node_id": "PRRC_kwDOAN28mc5usdnw",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 29,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "a214597e9f31d93bbe24773ba3b467302a5ddcbc",
      "in_reply_to_id": 1857084852,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "One way to think about the 3 opcodes (CSFS, IKEY, PC) is we decompose a CSFS variant that can use 1 byte pubkey (internal key) and can commit to a vector of stack elements as message. They thus become more generally useful, but to a limited degree without additional opcodes.\r\n\r\nDetailed introspection opcodes would also need vector commitments with CSFS, and as mentioned it would also be useful for CCV.",
      "created_at": "2024-11-25T18:20:41Z",
      "updated_at": "2024-11-25T18:20:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1857149424",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857149424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857453445",
      "pull_request_review_id": 2459805794,
      "id": 1857453445,
      "node_id": "PRRC_kwDOAN28mc5utn2F",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 21,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "a214597e9f31d93bbe24773ba3b467302a5ddcbc",
      "in_reply_to_id": 1857069158,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is linked from Specification (line 53), not sure I would want to link from here.",
      "created_at": "2024-11-25T23:04:46Z",
      "updated_at": "2024-11-25T23:04:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1857453445",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1857453445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858540639",
      "pull_request_review_id": 2461537654,
      "id": 1858540639,
      "node_id": "PRRC_kwDOAN28mc5uxxRf",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I meant that these explanations should be part of the BIP, not just part of the conversation here in the pull request comments.",
      "created_at": "2024-11-26T13:25:48Z",
      "updated_at": "2024-11-26T13:25:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1858540639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858540639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858593158",
      "pull_request_review_id": 2461623607,
      "id": 1858593158,
      "node_id": "PRRC_kwDOAN28mc5ux-GG",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "So should I link the \"Use in LN-Symmetry\" section from there? Or it needs better explanation?",
      "created_at": "2024-11-26T13:58:30Z",
      "updated_at": "2024-11-26T13:58:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1858593158",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858593158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858600514",
      "pull_request_review_id": 2461635392,
      "id": 1858600514,
      "node_id": "PRRC_kwDOAN28mc5ux_5C",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Really leaning towards making a head BIP for LNhance and keeping the individual BIPs strictly limited to describing functionality without a lot of speculation on applications. (Which we would do after finalizing the individual ops.)\r\n\r\nIs there a problem with this approach?",
      "created_at": "2024-11-26T14:02:58Z",
      "updated_at": "2024-11-26T14:02:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1858600514",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858600514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858639000",
      "pull_request_review_id": 2461699157,
      "id": 1858639000,
      "node_id": "PRRC_kwDOAN28mc5uyJSY",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you are creating multiple BIPs that only make sense together, it would be better to propose them as a single pull request. Since this is being proposed standalone, it should also provide its own raison d’être.",
      "created_at": "2024-11-26T14:26:05Z",
      "updated_at": "2024-11-26T14:26:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1858639000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858639000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858683350",
      "pull_request_review_id": 2461774572,
      "id": 1858683350,
      "node_id": "PRRC_kwDOAN28mc5uyUHW",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe I should write that it was an explicit design goal that PAIRCOMMIT is pretty much completely useless on it's own with the current set of opcodes?",
      "created_at": "2024-11-26T14:51:07Z",
      "updated_at": "2024-11-26T14:51:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1858683350",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1858683350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1861270986",
      "pull_request_review_id": 2465987085,
      "id": 1861270986,
      "node_id": "PRRC_kwDOAN28mc5u8L3K",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 29,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "a214597e9f31d93bbe24773ba3b467302a5ddcbc",
      "in_reply_to_id": 1857084852,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated. I believe we can resolve these conversations? @rot13maxi @murchandamus",
      "created_at": "2024-11-27T21:39:26Z",
      "updated_at": "2024-11-27T21:39:26Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1861270986",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1861270986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874523017",
      "pull_request_review_id": 2486640298,
      "id": 1874523017,
      "node_id": "PRRC_kwDOAN28mc5vuvOJ",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 16,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Needs a comma before \"which\" here.\r\n\r\n```suggestion\r\nThis BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\r\n```",
      "created_at": "2024-12-07T16:21:39Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874523017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874523017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874527964",
      "pull_request_review_id": 2486640298,
      "id": 1874527964,
      "node_id": "PRRC_kwDOAN28mc5vuwbc",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 88,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nthat is not vulnerable to various forms of witness malleability. It is, however,\r\n```",
      "created_at": "2024-12-07T16:25:00Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874527964",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874527964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528122",
      "pull_request_review_id": 2486640298,
      "id": 1874528122,
      "node_id": "PRRC_kwDOAN28mc5vuwd6",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 100,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nconstruction that provides data availability to spend to the latest state from\r\n```",
      "created_at": "2024-12-07T16:26:02Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874528122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528378",
      "pull_request_review_id": 2486640298,
      "id": 1874528378,
      "node_id": "PRRC_kwDOAN28mc5vuwh6",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 109,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(If I understand what is meant here)\r\n\r\n```suggestion\r\nbefore funding, first sign the state template:\r\n```",
      "created_at": "2024-12-07T16:27:06Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874528378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528596",
      "pull_request_review_id": 2486640298,
      "id": 1874528596,
      "node_id": "PRRC_kwDOAN28mc5vuwlU",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 138,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIf `OP_CAT` was available, it could be used to combine multiple stack elements\r\n```",
      "created_at": "2024-12-07T16:28:32Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874528596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528733",
      "pull_request_review_id": 2486640298,
      "id": 1874528733,
      "node_id": "PRRC_kwDOAN28mc5vuwnd",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 144,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nAlternatively, `OP_RETURN` could be used to ensure the availability of the state\r\n```",
      "created_at": "2024-12-07T16:29:25Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874528733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528759",
      "pull_request_review_id": 2486640298,
      "id": 1874528759,
      "node_id": "PRRC_kwDOAN28mc5vuwn3",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 145,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nrecovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\r\n```",
      "created_at": "2024-12-07T16:29:36Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874528759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874528759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529066",
      "pull_request_review_id": 2486640298,
      "id": 1874529066,
      "node_id": "PRRC_kwDOAN28mc5vuwsq",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 146,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nHowever, its cost in weight units would be over 4 times higher than that of using OP_PAIRCOMMIT`.\r\n```",
      "created_at": "2024-12-07T16:30:56Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874529066",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529180",
      "pull_request_review_id": 2486640298,
      "id": 1874529180,
      "node_id": "PRRC_kwDOAN28mc5vuwuc",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 150,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\na 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and can\r\n```",
      "created_at": "2024-12-07T16:31:50Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874529180",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529650",
      "pull_request_review_id": 2486640298,
      "id": 1874529650,
      "node_id": "PRRC_kwDOAN28mc5vuw1y",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 151,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\ncommit to a number of stack elements as a message.\r\n```",
      "created_at": "2024-12-07T16:32:43Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874529650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529694",
      "pull_request_review_id": 2486640298,
      "id": 1874529694,
      "node_id": "PRRC_kwDOAN28mc5vuw2e",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 153,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Per your spelling of the word in the next sentence after.\r\n\r\n```suggestion\r\n### Behaviors LNhance tries to avoid introducing\r\n```",
      "created_at": "2024-12-07T16:33:12Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874529694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529725",
      "pull_request_review_id": 2486640298,
      "id": 1874529725,
      "node_id": "PRRC_kwDOAN28mc5vuw29",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 158,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Fine-grained introspection\r\n```",
      "created_at": "2024-12-07T16:33:30Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874529725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529742",
      "pull_request_review_id": 2486640298,
      "id": 1874529742,
      "node_id": "PRRC_kwDOAN28mc5vuw3O",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection\n+* State carrying covenants",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 159,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* State-carrying covenants\r\n```",
      "created_at": "2024-12-07T16:33:39Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874529742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529960",
      "pull_request_review_id": 2486640298,
      "id": 1874529960,
      "node_id": "PRRC_kwDOAN28mc5vuw6o",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection\n+* State carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |\n+| :------------ | -------: | -------: | -------: | --------: | --------: |\n+| APO-annex     |  2.25 vB | 28.25 vB |    25 vB |    305 vB |  461.5 vB |\n+| APO-return    |  2.25 vB | 28.25 vB |  16.5 vB |  338.5 vB |  528.5 vB |\n+| CTV+CSFS+IKEY |  2.75 vB | 12.25 vB |  24.5 vB |    331 vB |    513 vB |\n+| CTV+CSFS      |    11 vB |  20.5 vB |  24.5 vB |  347.5 vB | 537.75 vB |\n+| LNhance       |     3 vB |  12.5 vB | 32.75 vB | 297.75 vB | 446.25 vB |\n+| rekey         |  7.25 vB | 16.75 vB | 73.75 vB | 347.25 vB |    541 vB |\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove out computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as it needs",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 191,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThere are practical limits to the entropy space for the *inputs*, as they need\r\n```",
      "created_at": "2024-12-07T16:35:06Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874529960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529970",
      "pull_request_review_id": 2486640298,
      "id": 1874529970,
      "node_id": "PRRC_kwDOAN28mc5vuw6y",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection\n+* State carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |\n+| :------------ | -------: | -------: | -------: | --------: | --------: |\n+| APO-annex     |  2.25 vB | 28.25 vB |    25 vB |    305 vB |  461.5 vB |\n+| APO-return    |  2.25 vB | 28.25 vB |  16.5 vB |  338.5 vB |  528.5 vB |\n+| CTV+CSFS+IKEY |  2.75 vB | 12.25 vB |  24.5 vB |    331 vB |    513 vB |\n+| CTV+CSFS      |    11 vB |  20.5 vB |  24.5 vB |  347.5 vB | 537.75 vB |\n+| LNhance       |     3 vB |  12.5 vB | 32.75 vB | 297.75 vB | 446.25 vB |\n+| rekey         |  7.25 vB | 16.75 vB | 73.75 vB | 347.25 vB |    541 vB |\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove out computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as it needs\n+to be iterated over and hashed up.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 192,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nto be iterated over and hashed.\r\n```",
      "created_at": "2024-12-07T16:35:13Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874529970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874529970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874530054",
      "pull_request_review_id": 2486640298,
      "id": 1874530054,
      "node_id": "PRRC_kwDOAN28mc5vuw8G",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection\n+* State carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |\n+| :------------ | -------: | -------: | -------: | --------: | --------: |\n+| APO-annex     |  2.25 vB | 28.25 vB |    25 vB |    305 vB |  461.5 vB |\n+| APO-return    |  2.25 vB | 28.25 vB |  16.5 vB |  338.5 vB |  528.5 vB |\n+| CTV+CSFS+IKEY |  2.75 vB | 12.25 vB |  24.5 vB |    331 vB |    513 vB |\n+| CTV+CSFS      |    11 vB |  20.5 vB |  24.5 vB |  347.5 vB | 537.75 vB |\n+| LNhance       |     3 vB |  12.5 vB | 32.75 vB | 297.75 vB | 446.25 vB |\n+| rekey         |  7.25 vB | 16.75 vB | 73.75 vB | 347.25 vB |    541 vB |\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove out computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as it needs\n+to be iterated over and hashed up.\n+\n+Currently MAST trees can cover 128 bits of entropy space, which is well over",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 194,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nMAST trees can currently cover 128 bits of entropy space, which is well over\r\n```",
      "created_at": "2024-12-07T16:36:06Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874530054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874530054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874530070",
      "pull_request_review_id": 2486640298,
      "id": 1874530070,
      "node_id": "PRRC_kwDOAN28mc5vuw8W",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection\n+* State carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |\n+| :------------ | -------: | -------: | -------: | --------: | --------: |\n+| APO-annex     |  2.25 vB | 28.25 vB |    25 vB |    305 vB |  461.5 vB |\n+| APO-return    |  2.25 vB | 28.25 vB |  16.5 vB |  338.5 vB |  528.5 vB |\n+| CTV+CSFS+IKEY |  2.75 vB | 12.25 vB |  24.5 vB |    331 vB |    513 vB |\n+| CTV+CSFS      |    11 vB |  20.5 vB |  24.5 vB |  347.5 vB | 537.75 vB |\n+| LNhance       |     3 vB |  12.5 vB | 32.75 vB | 297.75 vB | 446.25 vB |\n+| rekey         |  7.25 vB | 16.75 vB | 73.75 vB | 347.25 vB |    541 vB |\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove out computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as it needs\n+to be iterated over and hashed up.\n+\n+Currently MAST trees can cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore we assume this",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 195,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nthe practical limits to iterate over and merklize. Therefore, we assume this\r\n```",
      "created_at": "2024-12-07T16:36:16Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874530070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874530070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874530266",
      "pull_request_review_id": 2486640298,
      "id": 1874530266,
      "node_id": "PRRC_kwDOAN28mc5vuw_a",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection\n+* State carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |\n+| :------------ | -------: | -------: | -------: | --------: | --------: |\n+| APO-annex     |  2.25 vB | 28.25 vB |    25 vB |    305 vB |  461.5 vB |\n+| APO-return    |  2.25 vB | 28.25 vB |  16.5 vB |  338.5 vB |  528.5 vB |\n+| CTV+CSFS+IKEY |  2.75 vB | 12.25 vB |  24.5 vB |    331 vB |    513 vB |\n+| CTV+CSFS      |    11 vB |  20.5 vB |  24.5 vB |  347.5 vB | 537.75 vB |\n+| LNhance       |     3 vB |  12.5 vB | 32.75 vB | 297.75 vB | 446.25 vB |\n+| rekey         |  7.25 vB | 16.75 vB | 73.75 vB | 347.25 vB |    541 vB |\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove out computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as it needs\n+to be iterated over and hashed up.\n+\n+Currently MAST trees can cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore we assume this\n+capability does not materially extend what computations are possible to prove\n+out in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 197,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nin bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\r\n```",
      "created_at": "2024-12-07T16:37:58Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874530266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874530266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874530329",
      "pull_request_review_id": 2486640298,
      "id": 1874530329,
      "node_id": "PRRC_kwDOAN28mc5vuxAZ",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection\n+* State carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |\n+| :------------ | -------: | -------: | -------: | --------: | --------: |\n+| APO-annex     |  2.25 vB | 28.25 vB |    25 vB |    305 vB |  461.5 vB |\n+| APO-return    |  2.25 vB | 28.25 vB |  16.5 vB |  338.5 vB |  528.5 vB |\n+| CTV+CSFS+IKEY |  2.75 vB | 12.25 vB |  24.5 vB |    331 vB |    513 vB |\n+| CTV+CSFS      |    11 vB |  20.5 vB |  24.5 vB |  347.5 vB | 537.75 vB |\n+| LNhance       |     3 vB |  12.5 vB | 32.75 vB | 297.75 vB | 446.25 vB |\n+| rekey         |  7.25 vB | 16.75 vB | 73.75 vB | 347.25 vB |    541 vB |\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove out computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as it needs\n+to be iterated over and hashed up.\n+\n+Currently MAST trees can cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore we assume this\n+capability does not materially extend what computations are possible to prove\n+out in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n+that should not be practically feasible to utilize.\n+\n+There is a way to reduce the size of the witness for proving out computation,",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 200,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThere is a way to reduce the size of the witness for proving computation\r\n```",
      "created_at": "2024-12-07T16:38:28Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874530329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874530329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874531788",
      "pull_request_review_id": 2486640298,
      "id": 1874531788,
      "node_id": "PRRC_kwDOAN28mc5vuxXM",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I meant that these explanations should be part of the BIP, not just part of the conversation here in the pull request comments.\r\n\r\nWhile BIP-2 recommends that `a single BIP contain a single key proposal or new idea. The more focused the BIP, the more successful it tends to be. If in doubt, split your BIP into several well-focused ones`, I agree that background context like https://github.com/bitcoin/bips/pull/1699#discussion_r1856937991 ought to be here in the open source BIP, and not only as GitHub meta-data (review comments) or an entry in Delving.",
      "created_at": "2024-12-07T16:47:52Z",
      "updated_at": "2024-12-07T16:53:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874531788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874531788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874536355",
      "pull_request_review_id": 2486657590,
      "id": 1874536355,
      "node_id": "PRRC_kwDOAN28mc5vuyej",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 109,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": 1874528378,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That is the first \"state template\", as in the first state settlement. I will write \"sign the first state\"!",
      "created_at": "2024-12-07T17:22:28Z",
      "updated_at": "2024-12-07T17:22:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874536355",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874536355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874537499",
      "pull_request_review_id": 2486658873,
      "id": 1874537499,
      "node_id": "PRRC_kwDOAN28mc5vuywb",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction, that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding sign first state template:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements,\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+`OP_RETURN` could also be used for ensuring the availability of the state\n+recovery data as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However the cost of that would be over 4 times higher in weight units.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+1 byte `OP_TRUE` public key (substitute for the *taproot internal key*) and can\n+commit to a number of stack elements as message.\n+\n+### Behaviours LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine grained introspection\n+* State carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |\n+| :------------ | -------: | -------: | -------: | --------: | --------: |\n+| APO-annex     |  2.25 vB | 28.25 vB |    25 vB |    305 vB |  461.5 vB |\n+| APO-return    |  2.25 vB | 28.25 vB |  16.5 vB |  338.5 vB |  528.5 vB |\n+| CTV+CSFS+IKEY |  2.75 vB | 12.25 vB |  24.5 vB |    331 vB |    513 vB |\n+| CTV+CSFS      |    11 vB |  20.5 vB |  24.5 vB |  347.5 vB | 537.75 vB |\n+| LNhance       |     3 vB |  12.5 vB | 32.75 vB | 297.75 vB | 446.25 vB |\n+| rekey         |  7.25 vB | 16.75 vB | 73.75 vB | 347.25 vB |    541 vB |\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove out computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as it needs\n+to be iterated over and hashed up.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 192,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "018d28c967b3f2b747ecb4e5a85d0b5f9f4ec79a",
      "in_reply_to_id": 1874529970,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"hashed into a merkle root\"?",
      "created_at": "2024-12-07T17:31:24Z",
      "updated_at": "2024-12-07T17:31:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1874537499",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1874537499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876532409",
      "pull_request_review_id": 2489731475,
      "id": 1876532409,
      "node_id": "PRRC_kwDOAN28mc5v2Zy5",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "PairCommit is generically useful as a concept, and I think that having things like this spec'd, implemented, and deployable is a positive good towards improving bitcoin.\r\n\r\nFurther, new things that synergize with exisiting older concepts having to go together into the same PR would create a disincentive for people to share and work on new ideas, since it would make them \"less mature\" as a package. For example, when I published the CTV V2 Hashing Spec WIP BIP, it would have made ZERO sense for that to go into the CTV BIP (or CTV PR, were it not merged), since it's a standalone concept. A concept that now, thanks to me writing it up, can be discussed against PairCommit as an alternative.\r\n\r\nwholeheartedly support this being a standalone BIP and PR.",
      "created_at": "2024-12-09T19:08:41Z",
      "updated_at": "2024-12-09T19:08:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1876532409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876532409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876711133",
      "pull_request_review_id": 2490006437,
      "id": 1876711133,
      "node_id": "PRRC_kwDOAN28mc5v3Fbd",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT` which\n+provide limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+optimal.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "92ffeb88fbb96ab4b24d3c0634b27922f20f028f",
      "in_reply_to_id": 1856874690,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for weighing in, @JeremyRubin.",
      "created_at": "2024-12-09T20:26:51Z",
      "updated_at": "2024-12-09T20:26:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1876711133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876711133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876718754",
      "pull_request_review_id": 2490020927,
      "id": 1876718754,
      "node_id": "PRRC_kwDOAN28mc5v3HSi",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and can\n+commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 179,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "bad6dba4b2c9dda463b2a79e4770ac766e999b37",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The terms \"ChannelS\", \"UpdateSc\", \"UpdateWi\", \"1-Update\", and \"2-Update\" seem to not be defined in this document. Perhaps they should be described here to provide context, or if this is in reference to another document, that document should be linked in this section for context.",
      "created_at": "2024-12-09T20:34:03Z",
      "updated_at": "2024-12-09T20:43:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1876718754",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876718754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876726134",
      "pull_request_review_id": 2490020927,
      "id": 1876726134,
      "node_id": "PRRC_kwDOAN28mc5v3JF2",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+<pre>\n+  BIP: ?",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 2,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "bad6dba4b2c9dda463b2a79e4770ac766e999b37",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  BIP: 442\r\n```",
      "created_at": "2024-12-09T20:41:20Z",
      "updated_at": "2024-12-09T20:43:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1876726134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876726134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876726291",
      "pull_request_review_id": 2490020927,
      "id": 1876726291,
      "node_id": "PRRC_kwDOAN28mc5v3JIT",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 10,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "bad6dba4b2c9dda463b2a79e4770ac766e999b37",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  Created: 2024-12-09\r\n```",
      "created_at": "2024-12-09T20:41:28Z",
      "updated_at": "2024-12-09T20:43:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1876726291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876726291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876726979",
      "pull_request_review_id": 2490020927,
      "id": 1876726979,
      "node_id": "PRRC_kwDOAN28mc5v3JTD",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 6,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "bad6dba4b2c9dda463b2a79e4770ac766e999b37",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The Comments-Summary header is optional, and the comment system has fallen out of use. (And will hopefully be sunset in the near future.)\r\n\r\n```suggestion\r\n```",
      "created_at": "2024-12-09T20:42:06Z",
      "updated_at": "2024-12-09T20:43:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1876726979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876726979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876728372",
      "pull_request_review_id": 2490020927,
      "id": 1876728372,
      "node_id": "PRRC_kwDOAN28mc5v3Jo0",
      "diff_hunk": "@@ -1274,6 +1274,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Gloria Zhao\n | Informational\n | Draft\n+|-\n+| [[bip-PC.md|PC]]",
      "path": "README.mediawiki",
      "position": null,
      "original_position": 5,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "bad6dba4b2c9dda463b2a79e4770ac766e999b37",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n| [[bip-0442.md|442]\r\n```\r\n\r\nPlease also move the `bip-PC.md` file to `bip-0442.md`.",
      "created_at": "2024-12-09T20:43:23Z",
      "updated_at": "2024-12-09T20:43:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1876728372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876728372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876751454",
      "pull_request_review_id": 2490074189,
      "id": 1876751454,
      "node_id": "PRRC_kwDOAN28mc5v3PRe",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: <links to wiki page for comments>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-11-08\n+  License: BSD-3-CLAUSE\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and can\n+commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelS | UpdateSc | UpdateWi | 1-Update  | 2-Update  |",
      "path": "bip-PC.md",
      "position": null,
      "original_position": 179,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "bad6dba4b2c9dda463b2a79e4770ac766e999b37",
      "in_reply_to_id": 1876718754,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will try to figure something out, it's Channel Script, Update Script, Update Witness, total cost with 1 or 2 updates.\r\n@reardencode?",
      "created_at": "2024-12-09T21:01:55Z",
      "updated_at": "2024-12-09T21:01:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1876751454",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876751454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896857441",
      "pull_request_review_id": 2522102222,
      "id": 1896857441,
      "node_id": "PRRC_kwDOAN28mc5xD79h",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 21,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* takes the \"PairCommit\" tagged SHA256 hash of the stack elements' lengths and values,\r\n* pushes the resulting 32-byte hash to the top of the stack.\r\n```",
      "created_at": "2024-12-24T16:21:07Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896857441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896857441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896862619",
      "pull_request_review_id": 2522102222,
      "id": 1896862619,
      "node_id": "PRRC_kwDOAN28mc5xD9Ob",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 26,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "While this was the original motivation for developing PAIRCOMMIT, I don't think it's the current motivation for introducing it standalone, or including it in LNHANCE.\r\n\r\nPerhaps something more like:\r\n\r\n> When building scripts using `OP_CHECKSIGFROMSTACK`, it is common to require a commitment to multiple items in a specific sequence and without malleability. `OP_PAIRCOMMIT` enables efficient commitments of this type. Alternative methods for achieving these multiple commitments require an additional signature checking operation for each additional unordered commitment or 2 additional signature checks for each additional ordered commitment.\r\n>\r\n> One example of such a construction is [LN-Symmetry] which requires a single signature to commit both to the update CTV hash and the settlement CTV hash to ensure O(1) data storage requirements for each channel partner. Another is a complex delegation (delegating to various pubkeys after matching locktimes). Either of these contracts can be achieved without `OP_PAIRCOMMIT` but they would require the use of a costly `OP_RETURN` or 2 additional signature checks respectively.\r\n\r\nThen (as we discussed) move the remaining symmetry discussion to its own section.",
      "created_at": "2024-12-24T16:31:52Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896862619",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896862619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896863419",
      "pull_request_review_id": 2522102222,
      "id": 1896863419,
      "node_id": "PRRC_kwDOAN28mc5xD9a7",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 53,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Where is `CompactSize` defined?",
      "created_at": "2024-12-24T16:33:16Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896863419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896863419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896865031",
      "pull_request_review_id": 2522102222,
      "id": 1896865031,
      "node_id": "PRRC_kwDOAN28mc5xD90H",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 138,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Add\r\n> Using `OP_CAT` for this purpose requires additional opcodes to prevent malleability (e.g. `0x0102 0x03 CAT` is identical to `0x01 0x0203 CAT`).\r\n\r\nor similar.",
      "created_at": "2024-12-24T16:36:25Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896865031",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896865031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896865638",
      "pull_request_review_id": 2522102222,
      "id": 1896865638,
      "node_id": "PRRC_kwDOAN28mc5xD99m",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 141,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n`OP_PAIRCOMMIT` solves this specific problem without introducing granular introspection\r\nvia Andrew Poelstra's CAT and Schnorr Tricks.\r\n```",
      "created_at": "2024-12-24T16:37:33Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896865638",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896865638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 140,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896872092",
      "pull_request_review_id": 2522102222,
      "id": 1896872092,
      "node_id": "PRRC_kwDOAN28mc5xD_ic",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+",
      "path": "bip-0442.md",
      "position": 216,
      "original_position": 147,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Multiple data commitments can also be achieved using ephemeral key delegation to bind the data items.\r\n```\r\nwitness: <asig> <a> <bsig> <b> <dsig> <dkey>\r\nscript: TUCK DUP TOALT TOALT <key> CHECKSIGFROMSTACK VERIFY \\\r\n    TUCK [check and consume b] FROMALT CHECKSIGFROMSTACK VERIFY \\\r\n    TUCK [check and consume a] FROMALT CHECKSIGFROMSTACK\r\n```",
      "created_at": "2024-12-24T16:50:19Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896872092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896872092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 216,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896872701",
      "pull_request_review_id": 2522102222,
      "id": 1896872701,
      "node_id": "PRRC_kwDOAN28mc5xD_r9",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 153,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does this section belong in the PC BIP?",
      "created_at": "2024-12-24T16:51:52Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896872701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896872701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896873415",
      "pull_request_review_id": 2522102222,
      "id": 1896873415,
      "node_id": "PRRC_kwDOAN28mc5xD_3H",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a merkle root.\n+\n+MAST trees can currently cover 128 bits of entropy space, which is well over",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 196,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "MAST -> Taproot?",
      "created_at": "2024-12-24T16:53:22Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896873415",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896873415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896873513",
      "pull_request_review_id": 2522102222,
      "id": 1896873513,
      "node_id": "PRRC_kwDOAN28mc5xD_4p",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a merkle root.\n+\n+MAST trees can currently cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore, we assume this",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 197,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "assume -> conclude",
      "created_at": "2024-12-24T16:53:37Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896873513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896873513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896873653",
      "pull_request_review_id": 2522102222,
      "id": 1896873653,
      "node_id": "PRRC_kwDOAN28mc5xD_61",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a merkle root.\n+\n+MAST trees can currently cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore, we assume this\n+capability does not materially extend what computations are possible to prove\n+in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n+that should not be practically feasible to utilize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 200,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should not be -> is",
      "created_at": "2024-12-24T16:53:55Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896873653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896873653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896874831",
      "pull_request_review_id": 2522102222,
      "id": 1896874831,
      "node_id": "PRRC_kwDOAN28mc5xEANP",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a merkle root.\n+\n+MAST trees can currently cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore, we assume this\n+capability does not materially extend what computations are possible to prove\n+in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n+that should not be practically feasible to utilize.\n+\n+There is a way to reduce the size of the witness for proving computation,",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 202,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find this paragraph confusing. I think a variant of it probably belongs in the CHECKSIGFROMSTACK BIP - as CSFS can be used generally to sign data into a script and that is not limited to use with PC (although PC extends that capability to merkelized data).",
      "created_at": "2024-12-24T16:56:13Z",
      "updated_at": "2024-12-24T16:57:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896874831",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896874831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896949099",
      "pull_request_review_id": 2522200446,
      "id": 1896949099,
      "node_id": "PRRC_kwDOAN28mc5xESVr",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 53,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": 1896863419,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's a function in bitcoin core and also used implicitly by the valtype serialization.",
      "created_at": "2024-12-24T20:17:12Z",
      "updated_at": "2024-12-24T20:17:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896949099",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896949099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896950181",
      "pull_request_review_id": 2522201401,
      "id": 1896950181,
      "node_id": "PRRC_kwDOAN28mc5xESml",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a merkle root.\n+\n+MAST trees can currently cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore, we assume this\n+capability does not materially extend what computations are possible to prove\n+in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n+that should not be practically feasible to utilize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 200,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": 1896873653,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My confidence in that was not a 100% at the time. It was more of an open question posed to the dev community to falsify.",
      "created_at": "2024-12-24T20:20:44Z",
      "updated_at": "2024-12-24T20:20:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896950181",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896950181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896950542",
      "pull_request_review_id": 2522201717,
      "id": 1896950542,
      "node_id": "PRRC_kwDOAN28mc5xESsO",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a merkle root.\n+\n+MAST trees can currently cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore, we assume this\n+capability does not materially extend what computations are possible to prove\n+in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n+that should not be practically feasible to utilize.\n+\n+There is a way to reduce the size of the witness for proving computation,",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 202,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": 1896874831,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for the feedback, will take my time to go over it and consider every suggestion!",
      "created_at": "2024-12-24T20:21:57Z",
      "updated_at": "2024-12-24T20:21:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896950542",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896950542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896959589",
      "pull_request_review_id": 2522209625,
      "id": 1896959589,
      "node_id": "PRRC_kwDOAN28mc5xEU5l",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a merkle root.\n+\n+MAST trees can currently cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore, we assume this\n+capability does not materially extend what computations are possible to prove\n+in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n+that should not be practically feasible to utilize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 200,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": 1896873653,
      "user": {
        "login": "Ademan",
        "id": 18740,
        "node_id": "MDQ6VXNlcjE4NzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ademan",
        "html_url": "https://github.com/Ademan",
        "followers_url": "https://api.github.com/users/Ademan/followers",
        "following_url": "https://api.github.com/users/Ademan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ademan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ademan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ademan/subscriptions",
        "organizations_url": "https://api.github.com/users/Ademan/orgs",
        "repos_url": "https://api.github.com/users/Ademan/repos",
        "events_url": "https://api.github.com/users/Ademan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ademan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> should not be -> is\n\nas in, it *is* practical to utilize deeper trees? (for this technique)\n\nDid I miss a discovery?\n\nI suppose a sparse tree could be deeper but that's logically equivalent to reducing the bit size of the inputs afaict.",
      "created_at": "2024-12-24T20:53:22Z",
      "updated_at": "2024-12-24T20:53:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896959589",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896959589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896998558",
      "pull_request_review_id": 2522237911,
      "id": 1896998558,
      "node_id": "PRRC_kwDOAN28mc5xEeae",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a merkle root.\n+\n+MAST trees can currently cover 128 bits of entropy space, which is well over\n+the practical limits to iterate over and merklize. Therefore, we assume this\n+capability does not materially extend what computations are possible to prove\n+in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n+that should not be practically feasible to utilize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 200,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": 1896873653,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, \"is not\"",
      "created_at": "2024-12-24T23:37:07Z",
      "updated_at": "2024-12-24T23:37:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1896998558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896998558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1898956304",
      "pull_request_review_id": 2524769058,
      "id": 1898956304,
      "node_id": "PRRC_kwDOAN28mc5xL8YQ",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 153,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": 1896872701,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe we should have an LNhance BIP that depends on the others and move some stuff over?",
      "created_at": "2024-12-28T17:30:03Z",
      "updated_at": "2024-12-28T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1898956304",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1898956304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899711133",
      "pull_request_review_id": 2525858478,
      "id": 1899711133,
      "node_id": "PRRC_kwDOAN28mc5xO0qd",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 93,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is a subsection of the Specification section, but does \"Use in LN-Symmetry\" actually belong to the Specification? Wouldn’t it make more sense for it to be in the Rationale or a section with example uses?",
      "created_at": "2024-12-30T18:08:12Z",
      "updated_at": "2024-12-30T18:52:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899711133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899711133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899711341",
      "pull_request_review_id": 2525858478,
      "id": 1899711341,
      "node_id": "PRRC_kwDOAN28mc5xO0tt",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 128,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same as above, \"Use with future updates\" doesn’t seem to belong to the Specification.",
      "created_at": "2024-12-30T18:08:38Z",
      "updated_at": "2024-12-30T18:52:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899711341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899711341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899714047",
      "pull_request_review_id": 2525858478,
      "id": 1899714047,
      "node_id": "PRRC_kwDOAN28mc5xO1X_",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 199,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some of these abbreviations are just a few characters shorter than the actual term. How about something along the lines of:\r\n\r\n```suggestion\r\n| Method        | Channel Script | Update Script | Update Witness¹ | Force Close²  | Contest | Settlement Mechanism |\r\n| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\r\n| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\r\n| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\r\n| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\r\n| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\r\n| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\r\n\r\n¹ *witness is the same weight for both Force Close and Contest in LN-Symmetry*  \r\n² *total cost of unilateral close transactions*\r\n```",
      "created_at": "2024-12-30T18:14:24Z",
      "updated_at": "2024-12-30T18:52:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899714047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899714047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 190,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899714473",
      "pull_request_review_id": 2525858478,
      "id": 1899714473,
      "node_id": "PRRC_kwDOAN28mc5xO1ep",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 188,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n### Weight comparison of LN-Symmetry constructions\r\n```",
      "created_at": "2024-12-30T18:14:31Z",
      "updated_at": "2024-12-30T18:52:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899714473",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899714473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899719264",
      "pull_request_review_id": 2525858478,
      "id": 1899719264,
      "node_id": "PRRC_kwDOAN28mc5xO2pg",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 166,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is the first mention of LNHANCE in this BIP, but is not further explained. LNHANCE is not introduced in this repository (except for a cursory mention in BIP 348 OP_CHECKSIGFROMSTACK). It would probably make sense to introduce the term, if this section is retained.",
      "created_at": "2024-12-30T18:22:42Z",
      "updated_at": "2024-12-30T18:52:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899719264",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899719264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 164,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899723011",
      "pull_request_review_id": 2525858478,
      "id": 1899723011,
      "node_id": "PRRC_kwDOAN28mc5xO3kD",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a Merkle root.\n+\n+Taproot MAST trees can currently cover 128 bits of entropy space, which is over",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 208,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What are \"Taproot MAST trees\"? The taproot BIPs speaks of \"Script Trees\" and MAST would be understood as \"Merklized _Alternative Script_ Trees\" in the context of Taproot. On the other hand, MAST as described in BIP 114 and BIP 117 speaks of Merklized _Abstract Syntax_ Trees where multiple leaves are used in combination.\r\n\r\nYou mention MAST here in the context taproot, where only a single leaf is ever used at once, but it seems to me that you might be thinking of Abstract Syntax Trees. Either way, it is not clear to me what you are referring to here, when you speak of the \"entropy space covered by Taproot MAST trees\" while treating leaves as \"inputs and outputs\".\r\n\r\nThis section is jumping right in the middle of something. I’m not sure that the scenario is described sufficiently to understand what the supposed concern is, let alone why the supposed concern is not a concern. If this section is relevant to this BIP, I reckon that more context is necessary for the reader to understand why and how, e.g., add aa link to a description of this scheme, or provide a bit more explanation what this section is talking about.",
      "created_at": "2024-12-30T18:30:27Z",
      "updated_at": "2024-12-30T18:52:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899723011",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899723011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899743883",
      "pull_request_review_id": 2525909612,
      "id": 1899743883,
      "node_id": "PRRC_kwDOAN28mc5xO8qL",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a Merkle root.\n+\n+Taproot MAST trees can currently cover 128 bits of entropy space, which is over",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 208,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": 1899723011,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IMO this is a problem in the taproot BIP series, where various individuals decided it pertinent to change a well understood acronym (MAST) to suit taproot, rather than resepcting an existing body of literature including other BIPs.\r\n\r\nI'd rather the taproot BIPs get updated to reflect the terminology Merklized Abstract Syntax Trees (or Tap Script Merkle Commitments, TSMC, if we're fond of confusing backronyming but should be less ambiguous in context) rather than Merklized Alternative Script Trees, which was a backronym.",
      "created_at": "2024-12-30T19:15:51Z",
      "updated_at": "2024-12-30T19:15:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899743883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899743883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899748313",
      "pull_request_review_id": 2525915944,
      "id": 1899748313,
      "node_id": "PRRC_kwDOAN28mc5xO9vZ",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a Merkle root.\n+\n+Taproot MAST trees can currently cover 128 bits of entropy space, which is over",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 208,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": 1899723011,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "correction: it seems there is no mention of alt script tree in the bips repos, just abstract syntax tree, including in the BIPs for Taproot itself. It's just a confusing rename people have made outside of this repo.",
      "created_at": "2024-12-30T19:24:57Z",
      "updated_at": "2024-12-30T19:24:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899748313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899748313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899754805",
      "pull_request_review_id": 2525926335,
      "id": 1899754805,
      "node_id": "PRRC_kwDOAN28mc5xO_U1",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 199,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": 1899714047,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This table is also provided barren of context. It would probably be useful to link to the compared schemas, or to the source of the table, and to add a couple sentence as to what we are looking at in the first place.",
      "created_at": "2024-12-30T19:39:43Z",
      "updated_at": "2024-12-30T19:39:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899754805",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899754805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 190,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899770234",
      "pull_request_review_id": 2525949468,
      "id": 1899770234,
      "node_id": "PRRC_kwDOAN28mc5xPDF6",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a Merkle root.\n+\n+Taproot MAST trees can currently cover 128 bits of entropy space, which is over",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 208,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": 1899723011,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "So should it be \"Taptrees\" instead of \"Taproot MAST trees\"? Or \"Tapscript trees\"?",
      "created_at": "2024-12-30T20:14:03Z",
      "updated_at": "2024-12-30T20:14:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899770234",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899770234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899861239",
      "pull_request_review_id": 2526089473,
      "id": 1899861239,
      "node_id": "PRRC_kwDOAN28mc5xPZT3",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 27,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nCurrently, bitcoin lacks a way to commit to multiple stack elements together. It is common practice to hash a single item as part of a bitcoin script, either in hash/time locked contracts, or in pay-to-pubkey-hash (P2PKH) scripts, but there is no way to commit to multiple items with a single hash. \r\n\r\nIn a contrived but demonstrative example, if PAIRCOMMIT existed in legacy script, P2PKH could be extended to pay-to-pubkey-time-hash with scriptPubKey `2DUP PAIRCOMMIT RIPEMD160 <hash> EQUALVERIFY CHECKLOCKTIMEVERIFY DROP CHECKSIG`. This script format for single signature, time-locked bitcoin could be transformed into an address format.\r\n\r\nWith the ability to commit to pairs of elements, PAIRCOMMIT can be generalized Merklized commitments to a tree of elements with a single hash. On its own, this could enable a hash lock contract where the holder of any pre-image in a Merkle tree can unlock the spend, for example.\r\n\r\nIf `OP_CHECKSIGFROMSTACK` is combined with PAIRCOMMIT, the ability to sign commitments to multiple items enables both of the above but as a form of delegation. In cases where any single item can be used to unlock an output, additional off chain signatures be simply can be used as an alternative to PAIRCOMMIT. However in cases where multiple items must be used for spending together, PAIRCOMMIT removes the need for complex laddering schemes to ensure that all items were authorized together.\r\n```",
      "created_at": "2024-12-31T00:30:03Z",
      "updated_at": "2024-12-31T16:13:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899861239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899861239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899861301",
      "pull_request_review_id": 2526089473,
      "id": 1899861301,
      "node_id": "PRRC_kwDOAN28mc5xPZU1",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 34,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems like something that belongs in a footnote not in the main text.",
      "created_at": "2024-12-31T00:30:22Z",
      "updated_at": "2024-12-31T16:13:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1899861301",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1899861301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1900176590",
      "pull_request_review_id": 2526089473,
      "id": 1900176590,
      "node_id": "PRRC_kwDOAN28mc5xQmTO",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions\n+\n+| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+\n+*ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n+same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+\n+### Proving general computation\n+\n+Merkle trees can be used to prove computation where the root of the tree\n+represents the *function* and the leaves represent the *inputs* and *output*.\n+There are practical limits to the entropy space for the *inputs* as they need\n+to be iterated over and hashed into a Merkle root.\n+\n+Taproot MAST trees can currently cover 128 bits of entropy space, which is over",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 208,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": 1899723011,
      "user": {
        "login": "reardencode",
        "id": 730881,
        "node_id": "MDQ6VXNlcjczMDg4MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reardencode",
        "html_url": "https://github.com/reardencode",
        "followers_url": "https://api.github.com/users/reardencode/followers",
        "following_url": "https://api.github.com/users/reardencode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/reardencode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/reardencode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/reardencode/subscriptions",
        "organizations_url": "https://api.github.com/users/reardencode/orgs",
        "repos_url": "https://api.github.com/users/reardencode/repos",
        "events_url": "https://api.github.com/users/reardencode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/reardencode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think \"Taproot script tree\" or \"Taproot Merkle tree\" would both be clear, I prefer the former.",
      "created_at": "2024-12-31T15:58:37Z",
      "updated_at": "2024-12-31T16:13:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1900176590",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1900176590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902270915",
      "pull_request_review_id": 2529874402,
      "id": 1902270915,
      "node_id": "PRRC_kwDOAN28mc5xYlnD",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 33,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does \"Tag\" here refer to this, as you are writing elsewhere in this draft?\r\n\r\n```suggestion\r\noptimize for. Since the tagged SHA256 hash can be pre-computed mid-state, it would only\r\n```\r\n\r\n- drop \"as\"?\r\n- s/in validation/to validate/ (line 34)?",
      "created_at": "2025-01-04T02:34:33Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902270915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902270915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902274174",
      "pull_request_review_id": 2529874402,
      "id": 1902274174,
      "node_id": "PRRC_kwDOAN28mc5xYmZ-",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 128,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": 1899711341,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Using `##` instead of `###` for this section and for \"Use in LN-Symmetry\" might suffice (e.g. moving them out of the Specification section).",
      "created_at": "2025-01-04T03:00:59Z",
      "updated_at": "2025-01-04T03:26:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902274174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902274174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902274387",
      "pull_request_review_id": 2529874402,
      "id": 1902274387,
      "node_id": "PRRC_kwDOAN28mc5xYmdT",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 131,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, could link to or mention BIP348 with CHECKSIGFROMSTACK here.",
      "created_at": "2025-01-04T03:02:37Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902274387",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902274387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902274683",
      "pull_request_review_id": 2529874402,
      "id": 1902274683,
      "node_id": "PRRC_kwDOAN28mc5xYmh7",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 133,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This isn't part of any BIP (number) yet, maybe add it later if that changes.",
      "created_at": "2025-01-04T03:05:33Z",
      "updated_at": "2025-01-04T03:29:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902274683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902274683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275259",
      "pull_request_review_id": 2529874402,
      "id": 1902275259,
      "node_id": "PRRC_kwDOAN28mc5xYmq7",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 141,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Suggest moving this Rationale section up to just after Motivation, before Specification.",
      "created_at": "2025-01-04T03:10:31Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902275259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275538",
      "pull_request_review_id": 2529874402,
      "id": 1902275538,
      "node_id": "PRRC_kwDOAN28mc5xYmvS",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 179,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could link to or mention BIP347",
      "created_at": "2025-01-04T03:12:39Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902275538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275601",
      "pull_request_review_id": 2529874402,
      "id": 1902275601,
      "node_id": "PRRC_kwDOAN28mc5xYmwR",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 143,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could link to or mention BIP347 with OP_CAT here.",
      "created_at": "2025-01-04T03:13:25Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902275601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275663",
      "pull_request_review_id": 2529874402,
      "id": 1902275663,
      "node_id": "PRRC_kwDOAN28mc5xYmxP",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 184,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could link to or mention BIP348",
      "created_at": "2025-01-04T03:14:16Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902275663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275727",
      "pull_request_review_id": 2529874402,
      "id": 1902275727,
      "node_id": "PRRC_kwDOAN28mc5xYmyP",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 183,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could link to or mention BIP119",
      "created_at": "2025-01-04T03:15:01Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902275727",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275893",
      "pull_request_review_id": 2529874402,
      "id": 1902275893,
      "node_id": "PRRC_kwDOAN28mc5xYm01",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 188,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It may make sense to put this section next to (or in) the \"Use in LN-Symmetry\" section.",
      "created_at": "2025-01-04T03:16:27Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902275893",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902275893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902276580",
      "pull_request_review_id": 2529874402,
      "id": 1902276580,
      "node_id": "PRRC_kwDOAN28mc5xYm_k",
      "diff_hunk": "@@ -0,0 +1,253 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements,\n+* pushes the resulting commitment on the top of the stack.\n+\n+## Motivation\n+\n+To do [LN-Symmetry] contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a [rebindable channel] that is also\n+[optimal].\n+\n+The number of SHA256 iterations is minimized in the primary use case we\n+can optimize for, which is LN-Symmetry. Since the Tag can be pre-computed as\n+mid-state, it would only take 1 or 2 hash cycles in validation for the\n+unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors, such as novel 2-way peg mechanisms.\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 153,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "02538385ef0a5f8b1be1368e803b9043418f2f40",
      "in_reply_to_id": 1896872701,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it may be fine here if this section is moved up next to the Motivation section and the term LNHANCE is introduced clearly, ideally with a link to [lnhance.org](https://lnhance.org/) if that url is viable long-term.",
      "created_at": "2025-01-04T03:23:46Z",
      "updated_at": "2025-01-04T03:25:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902276580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902276580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902279251",
      "pull_request_review_id": 2529883644,
      "id": 1902279251,
      "node_id": "PRRC_kwDOAN28mc5xYnpT",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 100,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The pseudocode below might be clearer if the acronyms are defined beforehand\r\n\r\n```suggestion\r\nUsing in sequence `OP_CHECKTEMPLATEVERIFY` (`CTV`), `OP_PAIRCOMMIT` (`PC`), `OP_INTERNALKEY` (`IK`)\r\n```\r\n(idem for CSFS on the next line)",
      "created_at": "2025-01-04T03:47:36Z",
      "updated_at": "2025-01-04T03:47:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1902279251",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1902279251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949635991",
      "pull_request_review_id": 2606711670,
      "id": 1949635991,
      "node_id": "PRRC_kwDOAN28mc50NRWX",
      "diff_hunk": "@@ -15,70 +16,70 @@\n This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n provides limited vector commitment functionality in tapscript.\n \n-When evaluated, the `OP_PAIRCOMMIT` instruction:\n-* Pops the top two values off the stack,\n-* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n-commitments,\n-* pushes the resulting 32-byte hash to the top of stack.\n-\n-## Motivation\n-\n-Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n-means building Merkle trees or verifying inclusion in a tree is not supported.\n+## Summary\n \n-`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n-in a way that makes length redistribution attacks infeasible.\n+When verifying taproot script spends having leaf version 0xc0 (as defined in\n+[BIP-342]), we propose `OP_PAIRCOMMIT` to replace `OP_SUCCESS205` (0xcd).\n \n-The number of SHA256 iterations is minimized in the typical use cases we can\n-optimize for. Since the Tag can be pre-computed as mid-state, it would only\n-take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+When evaluated, `OP_PAIRCOMMIT`:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n \n ## Specification\n \n-Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n-\n-`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n-with their size commitments and takes the tagged SHA256 hash of that\n-concatenated string, then pushes the resulting hash back on the stack.\n-\n-Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n-\n-`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n-\n-Where `|` denotes concatenation and `tagPC` is calculated according to\n-[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n-`cs(x)` means `CompactSize(x)`.\n+The notation below follows that of [BIP-340]. This includes the\n+$$hash_{tag}(x)$$ notation to refer to\n+$$SHA256(SHA256(tag) \\\\| SHA256(tag) \\\\| x)$$.\n \n-### Implementation\n+* If fewer than 2 elements are on the stack, the script MUST fail and\n+  terminate immediately.\n+* The top element ($$x2$$) and second to top element ($$x1$$) are read from the\n+  stack.\n+* Let $$pc$$ be $$hash_{PairCommit}(\n+  compact\\\\_size(size\\\\:of\\\\:x1) \\\\| x1 \\\\|\n+  compact\\\\_size(size\\\\:of\\\\:x2) \\\\| x2)$$[^1]\n+* The top two elements are popped from the stack.\n+* $$pc$$ is pushed to the stack.\n \n-```c++\n-case OP_PAIRCOMMIT: {\n-    // OP_PAIRCOMMIT is only available in Tapscript\n-    // ...\n-    // x1 x2 -- hash\n-    if (stack.size() < 2) {\n-        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n-    }\n-    const valtype& vch1 = stacktop(-2);\n-    const valtype& vch2 = stacktop(-1);\n+[^1]: The number of SHA256 blocks is minimized in typical use cases. Since the\n+    Tag can be pre-computed as a SHA256 mid-state, it takes only 2 hash cycles\n+    for a commitment to 2 32-byte items or 1 for 2 smaller items.\n \n-    uint256 hash = PairCommitHash(vch1, vch2);\n+## Motivation\n \n-    stack.pop_back();\n-    stack.pop_back();\n-    stack.emplace_back(hash.begin(), hash.end());\n-    break;\n-}\n-```\n-```c++\n-const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n-\n-uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n-{\n-    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n-}\n-```\n-### Use in script\n+Currently, bitcoin lacks a way to commit to multiple data items together. It\n+is common practice to hash a single item as part of a bitcoin script. Either\n+in hash/time locked contracts, or in pay-to-pubkey-hash (P2PKH) scripts, but\n+there is no way to commit to multiple items with a single hash. ",
      "path": "bip-0442.md",
      "position": 54,
      "original_position": 102,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The sentence starting with \"Either\" seems to be missing one or more words.",
      "created_at": "2025-02-10T18:02:59Z",
      "updated_at": "2025-02-10T18:55:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949635991",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949635991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": 52,
      "original_start_line": 52,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949646778",
      "pull_request_review_id": 2606711670,
      "id": 1949646778,
      "node_id": "PRRC_kwDOAN28mc50NT-6",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry",
      "path": "bip-0442.md",
      "position": 94,
      "original_position": 153,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think \"LN-Symmetry\" is more commonly used to refer to the concept than \"Lightning Symmetry\". Is there a specific reason why you prefer the latter?",
      "created_at": "2025-02-10T18:08:44Z",
      "updated_at": "2025-02-10T18:55:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949646778",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949646778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949663431",
      "pull_request_review_id": 2606711670,
      "id": 1949663431,
      "node_id": "PRRC_kwDOAN28mc50NYDH",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry\n+\n+To create Lightning Symmetry contracts that neither require the nodes to keep\n+old states nor require additional signing round trips (and corresponding\n+signature validations), we need to solve a data availability problem presented\n+by contested closes. Specifically, the second to act channel partner must be\n+able to reconstruct the script that spends the first update transaction\n+published. This script includes the hash of the corresponding settlement",
      "path": "bip-0442.md",
      "position": 101,
      "original_position": 160,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe this is easier to parse:\r\n\r\n```suggestion\r\nby contested closes. Specifically, either channel partner must be\r\nable to spend the output of any prior update transaction.\r\nThose input scripts include the hash of the corresponding settlement\r\n```",
      "created_at": "2025-02-10T18:21:58Z",
      "updated_at": "2025-02-10T19:34:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949663431",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949663431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": 99,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949665023",
      "pull_request_review_id": 2606711670,
      "id": 1949665023,
      "node_id": "PRRC_kwDOAN28mc50NYb_",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry\n+\n+To create Lightning Symmetry contracts that neither require the nodes to keep\n+old states nor require additional signing round trips (and corresponding\n+signature validations), we need to solve a data availability problem presented\n+by contested closes. Specifically, the second to act channel partner must be\n+able to reconstruct the script that spends the first update transaction\n+published. This script includes the hash of the corresponding settlement\n+transaction which we do not wish to store for all prior states. By having the\n+channel and update state scripts force the parties to include the settlement\n+transaction's hash in the witness to in order to publish the corresponding\n+update transaction, then a later update can use the settlement hash from the",
      "path": "bip-0442.md",
      "position": 105,
      "original_position": 164,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I’m stumbling over this \"in the witness to in order\". Could you please revisit this sentence?",
      "created_at": "2025-02-10T18:23:17Z",
      "updated_at": "2025-02-10T18:55:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949665023",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949665023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949680966",
      "pull_request_review_id": 2606711670,
      "id": 1949680966,
      "node_id": "PRRC_kwDOAN28mc50NcVG",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry\n+\n+To create Lightning Symmetry contracts that neither require the nodes to keep\n+old states nor require additional signing round trips (and corresponding\n+signature validations), we need to solve a data availability problem presented\n+by contested closes. Specifically, the second to act channel partner must be\n+able to reconstruct the script that spends the first update transaction\n+published. This script includes the hash of the corresponding settlement\n+transaction which we do not wish to store for all prior states. By having the\n+channel and update state scripts force the parties to include the settlement\n+transaction's hash in the witness to in order to publish the corresponding\n+update transaction, then a later update can use the settlement hash from the\n+first update transaction's witness to recreate the corresponding spend script.\n+\n+The following assembly-like pseudo-code shows a possible Lightning Symmetry\n+channel construction that ensures sufficient data is available on chain in a\n+force close to reconstruct the corresponding script and update it with a later\n+state while only knowing the later state.[^3] The opcodes `OP_CHECKTEMPLATEVERIFY`,\n+`OP_PAIRCOMMIT`, `OP_INTERNALKEY`, and `OP_CHECKSIGFROMSTACK` are abbreviated\n+as `CTV`, `PC`, `IK`, and `CSFS` respectively.\n+\n+[^3]: Concretely the required data is a full CTV hash of the settlement\n+    transaction when there are open HTLCs, or merely the difference in balance\n+    between the channel partners in other cases. Whether the latter\n+    optimization would be used is an implementation detail not further\n+    discussed here.\n \n ```text\n # S = 500000000\n-# IK -> A+B\n+# internal key = [BIP-327] aggregate key of channel participants\n+# channel script:\n <sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n ```\n-before funding, sign the first state:\n+\n+Before funding, sign the first state.\n+\n ```text\n # state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n # settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n # state-n-recovery-data { settlement-n-hash or state-n-balance }\n-\n-# contract for state n < m\n+# update script:\n IF\n   <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n ELSE\n   <settlement-n-hash> CTV\n ENDIF\n ```\n \n-### Use with future updates\n+These scripts ensure the necessary data availability as follows: `CTV` commits\n+to the update transaction's hash, `PC` combines this hash with the next stack\n+item, and `CSFS` checks a MuSig 2-party signature against the resulting pair\n+hash. Both parties must sign the same pair hash to produce a channel update,\n+and they can therefore require each other to include both the update hash and\n+settlement hash in the witness stack when initiating a force close. This\n+Lightning Symmetry channel construction is close to [optimal].\n \n-Detailed introspection opcodes would also need vector commitments when used\n-with `OP_CHECKSIGFROMSTACK`.\n+### In MATT\n \n-`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+The Merkelize All The Things ([MATT]) framework proposes to use `OP_CAT` to\n+combine multiple items into a single commitment for use with\n+`OP_CHECKCONTRACTVERIFY`. `OP_PAIRCOMMIT` provides a more ergonomic way to\n+accomplish this[^4].\n \n-## Reference Implementation\n+[^4]: `OP_CAT` can be used to commit to multiple items, but it is subject to\n+    byte shifting attacks if used naively.\n+    E.g. `0x0102 || 0x03` equals `0x01 || 0x0203`. Mitigating this correctly\n+    requires either length checking, hashing, or both.\n \n-A reference implementation is provided here:\n+## Alternative approaches\n \n-https://github.com/lnhance/bitcoin/pull/6/files\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n \n-## Rationale\n+* `OP_CAT`[^4][^7]\n+* SHA256 streaming opcodes[^7]\n+* Merkle operation opcodes\n+* 'Kitty' CAT: `OP_CAT` with result or inputs arbitrarily limited in size\n+* `OP_CHECKTEMPLATEVERIFY` committing to the taproot annex in tapscript[^5]\n+* `OP_CHECKSIGFROMSTACK` on n elements as message\n+* `OP_VECTORCOMMIT`: generalized form for n > 2 elements\n+* ReKey/Laddering[^2]\n+* `OP_RETURN`[^6]\n+\n+[^5]: As seen in Greg Sanders' [Lightning Symmetry write-up], one additional\n+    item can be committed to by a transaction signature by placing that item\n+    in the Taproot annex. This mechanism is limited to a single additional\n+    item and that item is not made accessible to script making it less useful.\n+[^6]: `OP_RETURN` can also be used to cause a transaction signature or CTV\n+    hash to commit to additional data items. This is both costly for the user,\n+    as this inexpensive to validate data is pushed into transaction data\n+    instead of witness data and not accessible to script making it less useful\n+    like the annex.\n+[^7]: `OP_PAIRCOMMIT` is intended to enable more useful bitcoin scripts, in\n+    some cases similar to those enabled by `OP_CAT` but without also enabling\n+    unexpected script behaviors such as those described by Andrew Poelstra in \n+    [CAT-tricks-I] and [CAT-tricks-II] or larger numeric operations.\n \n-If `OP_CAT` was available, it could be used to combine multiple stack elements\n-that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+## Reference Implementation\n \n-Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n-malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+### Code\n \n-`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n-of potentially controversial new behaviors like fully detailed introspection,\n-which includes the ability to inspect parent transactions and novel 2-way peg\n-mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n \n-Alternatively `OP_RETURN` could be used to ensure the availability of the state\n-recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n-However, its cost in weight units would be over 4 times higher than that of\n-using `OP_PAIRCOMMIT`.\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n \n-One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n-`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n-a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n-can commit to a number of stack elements as a message.\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n \n-### Behaviors LNhance tries to avoid introducing\n+### PR\n \n-The following behaviors are out of scope for LNhance and should not be enabled\n-as a side effect without explicit consensus:\n+https://github.com/lnhance/bitcoin/pull/6/files\n \n-* Fine-grained introspection\n-* State-carrying covenants\n-* Bigint operations\n-* New arithmetic capabilities using lookup tables\n+## Rationale\n \n-### Alternative approaches\n+### Cost comparison of Lightning Symmetry constructions\n \n-The following list of alternative approaches were discussed and rejected for\n-various reasons, either for expanding the scope or for unnecessary complexity:\n+The following table briefly summarizes the costs associated with force closing\n+Lightning Symmetry channels enabled by various combinations of proposed script\n+upgrades.\n \n-* OP_CAT\n-* SHA256 streaming opcodes\n-* Merkle operation opcodes\n-* 'Kitty' CAT: result or inputs arbitrarily limited in size\n-* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n-* OP_CHECKSIGFROMSTACK on n elements as message\n-* OP_VECTORCOMMIT: generalized form for n > 2 elements\n-* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n-\n-### Cost comparison of LN-Symmetry constructions\n-\n-| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n-| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n-| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n-| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n-| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n-| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n-| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+| Method           | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :--------------- | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex        |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return       |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS         |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| CTV+CSFS+IKEY    |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS+IKEY+PC |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n \n *ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n-same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+same size for both Force Close and Contest in Lightning Symmetry, ForceC: total\n+cost of unilateral close transactions, Contest: The additional cost to contest\n+a force closure, Settle: Whether a signature operation or CTV operation is\n+required to validate the settlement transaction*\n+\n+### Proving general computation using trees\n+\n+One potential risk of PAIRCOMMIT is that it may enable verification of general\n+computations on bitcoin.\n \n-### Proving general computation\n+Any script change which enables commitment to pairs of items necessarily\n+enables commitments to Merkle trees.\n \n Merkle trees can be used to prove computation where the root of the tree\n represents the *function* and the leaves represent the *inputs* and *output*.\n-There are practical limits to the entropy space for the *inputs* as they need\n-to be iterated over and hashed into a Merkle root.\n+There are practical limits to the total number of discrete output values that\n+can be reached by all possible input values (i.e. the input entropy space) as\n+they must be enumerated and hashed into a Merkle root.\n \n-Taproot MAST trees can currently cover 128 bits of entropy space, which is over\n-the practical limits to iterate over and merklize. Therefore, we conclude this\n-capability does not materially extend what computations are possible to prove\n-in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n-that should not be practically feasible to utilize.\n-\n-There is a way to reduce the size of the witness for proving computation,\n-by eliminating the Merkle path inclusion proofs, using `OP_CHECKSIGFROMSTACK`\n-together with `OP_PAIRCOMMIT`. This method involves deleted key assumptions,\n-most likely using MPC to create an enormous amount of signatures for the stack\n-elements representing the *inputs* and the *output* of the *function*.\n+Taproot trees can be 128 levels deep, therefore including up to 2^128 possible\n+output values. This is over the practical limits to enumerate and merkelize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 394,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consistency nit:\r\n\r\n```suggestion\r\noutput values. This is over the practical limits to enumerate and Merklize.\r\n```",
      "created_at": "2025-02-10T18:35:43Z",
      "updated_at": "2025-02-10T18:55:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949680966",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949680966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949692021",
      "pull_request_review_id": 2606711670,
      "id": 1949692021,
      "node_id": "PRRC_kwDOAN28mc50NfB1",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry\n+\n+To create Lightning Symmetry contracts that neither require the nodes to keep\n+old states nor require additional signing round trips (and corresponding\n+signature validations), we need to solve a data availability problem presented\n+by contested closes. Specifically, the second to act channel partner must be\n+able to reconstruct the script that spends the first update transaction\n+published. This script includes the hash of the corresponding settlement\n+transaction which we do not wish to store for all prior states. By having the\n+channel and update state scripts force the parties to include the settlement\n+transaction's hash in the witness to in order to publish the corresponding\n+update transaction, then a later update can use the settlement hash from the\n+first update transaction's witness to recreate the corresponding spend script.\n+\n+The following assembly-like pseudo-code shows a possible Lightning Symmetry\n+channel construction that ensures sufficient data is available on chain in a\n+force close to reconstruct the corresponding script and update it with a later\n+state while only knowing the later state.[^3] The opcodes `OP_CHECKTEMPLATEVERIFY`,\n+`OP_PAIRCOMMIT`, `OP_INTERNALKEY`, and `OP_CHECKSIGFROMSTACK` are abbreviated\n+as `CTV`, `PC`, `IK`, and `CSFS` respectively.\n+\n+[^3]: Concretely the required data is a full CTV hash of the settlement\n+    transaction when there are open HTLCs, or merely the difference in balance\n+    between the channel partners in other cases. Whether the latter\n+    optimization would be used is an implementation detail not further\n+    discussed here.\n \n ```text\n # S = 500000000\n-# IK -> A+B\n+# internal key = [BIP-327] aggregate key of channel participants\n+# channel script:\n <sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n ```\n-before funding, sign the first state:\n+\n+Before funding, sign the first state.\n+\n ```text\n # state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n # settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n # state-n-recovery-data { settlement-n-hash or state-n-balance }\n-\n-# contract for state n < m\n+# update script:\n IF\n   <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n ELSE\n   <settlement-n-hash> CTV\n ENDIF\n ```\n \n-### Use with future updates\n+These scripts ensure the necessary data availability as follows: `CTV` commits\n+to the update transaction's hash, `PC` combines this hash with the next stack\n+item, and `CSFS` checks a MuSig 2-party signature against the resulting pair\n+hash. Both parties must sign the same pair hash to produce a channel update,\n+and they can therefore require each other to include both the update hash and\n+settlement hash in the witness stack when initiating a force close. This\n+Lightning Symmetry channel construction is close to [optimal].\n \n-Detailed introspection opcodes would also need vector commitments when used\n-with `OP_CHECKSIGFROMSTACK`.\n+### In MATT\n \n-`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+The Merkelize All The Things ([MATT]) framework proposes to use `OP_CAT` to\n+combine multiple items into a single commitment for use with\n+`OP_CHECKCONTRACTVERIFY`. `OP_PAIRCOMMIT` provides a more ergonomic way to\n+accomplish this[^4].\n \n-## Reference Implementation\n+[^4]: `OP_CAT` can be used to commit to multiple items, but it is subject to\n+    byte shifting attacks if used naively.\n+    E.g. `0x0102 || 0x03` equals `0x01 || 0x0203`. Mitigating this correctly\n+    requires either length checking, hashing, or both.\n \n-A reference implementation is provided here:\n+## Alternative approaches\n \n-https://github.com/lnhance/bitcoin/pull/6/files\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n \n-## Rationale\n+* `OP_CAT`[^4][^7]\n+* SHA256 streaming opcodes[^7]\n+* Merkle operation opcodes\n+* 'Kitty' CAT: `OP_CAT` with result or inputs arbitrarily limited in size\n+* `OP_CHECKTEMPLATEVERIFY` committing to the taproot annex in tapscript[^5]\n+* `OP_CHECKSIGFROMSTACK` on n elements as message\n+* `OP_VECTORCOMMIT`: generalized form for n > 2 elements\n+* ReKey/Laddering[^2]\n+* `OP_RETURN`[^6]\n+\n+[^5]: As seen in Greg Sanders' [Lightning Symmetry write-up], one additional\n+    item can be committed to by a transaction signature by placing that item\n+    in the Taproot annex. This mechanism is limited to a single additional\n+    item and that item is not made accessible to script making it less useful.\n+[^6]: `OP_RETURN` can also be used to cause a transaction signature or CTV\n+    hash to commit to additional data items. This is both costly for the user,\n+    as this inexpensive to validate data is pushed into transaction data\n+    instead of witness data and not accessible to script making it less useful\n+    like the annex.\n+[^7]: `OP_PAIRCOMMIT` is intended to enable more useful bitcoin scripts, in\n+    some cases similar to those enabled by `OP_CAT` but without also enabling\n+    unexpected script behaviors such as those described by Andrew Poelstra in \n+    [CAT-tricks-I] and [CAT-tricks-II] or larger numeric operations.\n \n-If `OP_CAT` was available, it could be used to combine multiple stack elements\n-that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+## Reference Implementation\n \n-Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n-malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+### Code\n \n-`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n-of potentially controversial new behaviors like fully detailed introspection,\n-which includes the ability to inspect parent transactions and novel 2-way peg\n-mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n \n-Alternatively `OP_RETURN` could be used to ensure the availability of the state\n-recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n-However, its cost in weight units would be over 4 times higher than that of\n-using `OP_PAIRCOMMIT`.\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n \n-One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n-`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n-a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n-can commit to a number of stack elements as a message.\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n \n-### Behaviors LNhance tries to avoid introducing\n+### PR\n \n-The following behaviors are out of scope for LNhance and should not be enabled\n-as a side effect without explicit consensus:\n+https://github.com/lnhance/bitcoin/pull/6/files\n \n-* Fine-grained introspection\n-* State-carrying covenants\n-* Bigint operations\n-* New arithmetic capabilities using lookup tables\n+## Rationale\n \n-### Alternative approaches\n+### Cost comparison of Lightning Symmetry constructions\n \n-The following list of alternative approaches were discussed and rejected for\n-various reasons, either for expanding the scope or for unnecessary complexity:\n+The following table briefly summarizes the costs associated with force closing\n+Lightning Symmetry channels enabled by various combinations of proposed script\n+upgrades.\n \n-* OP_CAT\n-* SHA256 streaming opcodes\n-* Merkle operation opcodes\n-* 'Kitty' CAT: result or inputs arbitrarily limited in size\n-* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n-* OP_CHECKSIGFROMSTACK on n elements as message\n-* OP_VECTORCOMMIT: generalized form for n > 2 elements\n-* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n-\n-### Cost comparison of LN-Symmetry constructions\n-\n-| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n-| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n-| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n-| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n-| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n-| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n-| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+| Method           | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :--------------- | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex        |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return       |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS         |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| CTV+CSFS+IKEY    |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS+IKEY+PC |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n \n *ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n-same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+same size for both Force Close and Contest in Lightning Symmetry, ForceC: total\n+cost of unilateral close transactions, Contest: The additional cost to contest\n+a force closure, Settle: Whether a signature operation or CTV operation is\n+required to validate the settlement transaction*",
      "path": "bip-0442.md",
      "position": 247,
      "original_position": 363,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for expanding on the column titles. As I wrote above, it would be good to provide more context for this table. It would especially help if the compared schemata were at least briefly described and/or sources for details were provided.",
      "created_at": "2025-02-10T18:43:38Z",
      "updated_at": "2025-02-10T18:55:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949692021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949692021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 247,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949692332",
      "pull_request_review_id": 2606711670,
      "id": 1949692332,
      "node_id": "PRRC_kwDOAN28mc50NfGs",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+<pre>\n+  BIP: 442\n+  Layer: Consensus (soft fork)\n+  Title: OP_PAIRCOMMIT\n+  Author: moonsettler <moonsettler@protonmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0442\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-09\n+  License: BSD-3-Clause\n+</pre>\n+\n+## Abstract\n+\n+This BIP describes a new tapscript opcode `OP_PAIRCOMMIT`, which\n+provides limited vector commitment functionality in tapscript.\n+\n+When evaluated, the `OP_PAIRCOMMIT` instruction:\n+* Pops the top two values off the stack,\n+* takes the \"PairCommit\" tagged SHA256 hash of the stack elements with size\n+commitments,\n+* pushes the resulting 32-byte hash to the top of stack.\n+\n+## Motivation\n+\n+Currently, bitcoin lacks a way to hash multiple stack elements together. Which\n+means building Merkle trees or verifying inclusion in a tree is not supported.\n+\n+`OP_PAIRCOMMIT` is a simple and efficient tool to commit to two stack elements,\n+in a way that makes length redistribution attacks infeasible.\n+\n+The number of SHA256 iterations is minimized in the typical use cases we can\n+optimize for. Since the Tag can be pre-computed as mid-state, it would only\n+take 1 or 2 hash cycles in validation for the unilateral close scenario.\n+\n+## Specification\n+\n+Repurpose opcode 205 (currently `OP_SUCCESS`) as follows:\n+\n+`OP_PAIRCOMMIT` pops two elements off the stack, then concatenates them along\n+with their size commitments and takes the tagged SHA256 hash of that\n+concatenated string, then pushes the resulting hash back on the stack.\n+\n+Given the stack `[x1, x2]`, where `x2` is at the top of the stack:\n+\n+`OP_PAIRCOMMIT` will push `SHA256(tagPC|cs(x1)|x1|cs(x2)|x2)` onto the stack.\n+\n+Where `|` denotes concatenation and `tagPC` is calculated according to\n+[BIP-340] tagged hash as `SHA256(\"PairCommit\")|SHA256(\"PairCommit\")` and\n+`cs(x)` means `CompactSize(x)`.\n+\n+### Implementation\n+\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n+\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n+\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n+### Use in script\n+\n+`OP_PAIRCOMMIT` can be used to commit to a vector of stack elements in a way\n+that is not vulnerable to various forms of witness malleability. It is, however,\n+highly optimized for just 2 stack elements.\n+\n+```text\n+# pc-hash = PC(a, PC(b, c))\n+\n+<a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n+```\n+\n+### Use in LN-Symmetry\n+\n+To do LN-Symmetry contracts that don't require the nodes to keep old states,\n+we need to solve the data availability problem presented by unilateral closes.\n+Channel peers must be able to reconstruct the script that spends an\n+intermediate state.\n+\n+Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n+and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n+[optimal].\n+\n+The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n+construction that provides data availability to spend to the latest state from\n+an earlier state pushed on-chain with a forced close by channel partner.\n+\n+\n+```text\n+# S = 500000000\n+# IK -> A+B\n+<sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n+```\n+before funding, sign the first state:\n+```text\n+# state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n+# settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n+# state-n-recovery-data { settlement-n-hash or state-n-balance }\n+\n+# contract for state n < m\n+IF\n+  <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n+ELSE\n+  <settlement-n-hash> CTV\n+ENDIF\n+```\n+\n+### Use with future updates\n+\n+Detailed introspection opcodes would also need vector commitments when used\n+with `OP_CHECKSIGFROMSTACK`.\n+\n+`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+\n+## Reference Implementation\n+\n+A reference implementation is provided here:\n+\n+https://github.com/lnhance/bitcoin/pull/6/files\n+\n+## Rationale\n+\n+If `OP_CAT` was available, it could be used to combine multiple stack elements\n+that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+\n+Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n+malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+\n+`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n+of potentially controversial new behaviors like fully detailed introspection,\n+which includes the ability to inspect parent transactions and novel 2-way peg\n+mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+\n+Alternatively `OP_RETURN` could be used to ensure the availability of the state\n+recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n+However, its cost in weight units would be over 4 times higher than that of\n+using `OP_PAIRCOMMIT`.\n+\n+One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n+`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n+a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n+can commit to a number of stack elements as a message.\n+\n+### Behaviors LNhance tries to avoid introducing\n+\n+The following behaviors are out of scope for LNhance and should not be enabled\n+as a side effect without explicit consensus:\n+\n+* Fine-grained introspection\n+* State-carrying covenants\n+* Bigint operations\n+* New arithmetic capabilities using lookup tables\n+\n+### Alternative approaches\n+\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n+\n+* OP_CAT\n+* SHA256 streaming opcodes\n+* Merkle operation opcodes\n+* 'Kitty' CAT: result or inputs arbitrarily limited in size\n+* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n+* OP_CHECKSIGFROMSTACK on n elements as message\n+* OP_VECTORCOMMIT: generalized form for n > 2 elements\n+* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n+\n+### Cost comparison of LN-Symmetry constructions",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 188,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "0ad3d24aa434487873e94f1fb28e0fce08c8c33e",
      "in_reply_to_id": 1899714473,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This comment was not addressed in the recent update.",
      "created_at": "2025-02-10T18:43:53Z",
      "updated_at": "2025-02-10T18:55:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949692332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949692332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949696059",
      "pull_request_review_id": 2606711670,
      "id": 1949696059,
      "node_id": "PRRC_kwDOAN28mc50NgA7",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry\n+\n+To create Lightning Symmetry contracts that neither require the nodes to keep\n+old states nor require additional signing round trips (and corresponding\n+signature validations), we need to solve a data availability problem presented\n+by contested closes. Specifically, the second to act channel partner must be\n+able to reconstruct the script that spends the first update transaction\n+published. This script includes the hash of the corresponding settlement\n+transaction which we do not wish to store for all prior states. By having the\n+channel and update state scripts force the parties to include the settlement\n+transaction's hash in the witness to in order to publish the corresponding\n+update transaction, then a later update can use the settlement hash from the\n+first update transaction's witness to recreate the corresponding spend script.\n+\n+The following assembly-like pseudo-code shows a possible Lightning Symmetry\n+channel construction that ensures sufficient data is available on chain in a\n+force close to reconstruct the corresponding script and update it with a later\n+state while only knowing the later state.[^3] The opcodes `OP_CHECKTEMPLATEVERIFY`,\n+`OP_PAIRCOMMIT`, `OP_INTERNALKEY`, and `OP_CHECKSIGFROMSTACK` are abbreviated\n+as `CTV`, `PC`, `IK`, and `CSFS` respectively.\n+\n+[^3]: Concretely the required data is a full CTV hash of the settlement\n+    transaction when there are open HTLCs, or merely the difference in balance\n+    between the channel partners in other cases. Whether the latter\n+    optimization would be used is an implementation detail not further\n+    discussed here.\n \n ```text\n # S = 500000000\n-# IK -> A+B\n+# internal key = [BIP-327] aggregate key of channel participants\n+# channel script:\n <sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n ```\n-before funding, sign the first state:\n+\n+Before funding, sign the first state.\n+\n ```text\n # state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n # settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n # state-n-recovery-data { settlement-n-hash or state-n-balance }\n-\n-# contract for state n < m\n+# update script:\n IF\n   <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n ELSE\n   <settlement-n-hash> CTV\n ENDIF\n ```\n \n-### Use with future updates\n+These scripts ensure the necessary data availability as follows: `CTV` commits\n+to the update transaction's hash, `PC` combines this hash with the next stack\n+item, and `CSFS` checks a MuSig 2-party signature against the resulting pair\n+hash. Both parties must sign the same pair hash to produce a channel update,\n+and they can therefore require each other to include both the update hash and\n+settlement hash in the witness stack when initiating a force close. This\n+Lightning Symmetry channel construction is close to [optimal].\n \n-Detailed introspection opcodes would also need vector commitments when used\n-with `OP_CHECKSIGFROMSTACK`.\n+### In MATT\n \n-`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+The Merkelize All The Things ([MATT]) framework proposes to use `OP_CAT` to\n+combine multiple items into a single commitment for use with\n+`OP_CHECKCONTRACTVERIFY`. `OP_PAIRCOMMIT` provides a more ergonomic way to\n+accomplish this[^4].\n \n-## Reference Implementation\n+[^4]: `OP_CAT` can be used to commit to multiple items, but it is subject to\n+    byte shifting attacks if used naively.\n+    E.g. `0x0102 || 0x03` equals `0x01 || 0x0203`. Mitigating this correctly\n+    requires either length checking, hashing, or both.\n \n-A reference implementation is provided here:\n+## Alternative approaches\n \n-https://github.com/lnhance/bitcoin/pull/6/files\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n \n-## Rationale\n+* `OP_CAT`[^4][^7]\n+* SHA256 streaming opcodes[^7]\n+* Merkle operation opcodes\n+* 'Kitty' CAT: `OP_CAT` with result or inputs arbitrarily limited in size\n+* `OP_CHECKTEMPLATEVERIFY` committing to the taproot annex in tapscript[^5]\n+* `OP_CHECKSIGFROMSTACK` on n elements as message\n+* `OP_VECTORCOMMIT`: generalized form for n > 2 elements\n+* ReKey/Laddering[^2]\n+* `OP_RETURN`[^6]\n+\n+[^5]: As seen in Greg Sanders' [Lightning Symmetry write-up], one additional\n+    item can be committed to by a transaction signature by placing that item\n+    in the Taproot annex. This mechanism is limited to a single additional\n+    item and that item is not made accessible to script making it less useful.\n+[^6]: `OP_RETURN` can also be used to cause a transaction signature or CTV\n+    hash to commit to additional data items. This is both costly for the user,\n+    as this inexpensive to validate data is pushed into transaction data\n+    instead of witness data and not accessible to script making it less useful\n+    like the annex.\n+[^7]: `OP_PAIRCOMMIT` is intended to enable more useful bitcoin scripts, in\n+    some cases similar to those enabled by `OP_CAT` but without also enabling\n+    unexpected script behaviors such as those described by Andrew Poelstra in \n+    [CAT-tricks-I] and [CAT-tricks-II] or larger numeric operations.\n \n-If `OP_CAT` was available, it could be used to combine multiple stack elements\n-that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+## Reference Implementation\n \n-Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n-malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+### Code\n \n-`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n-of potentially controversial new behaviors like fully detailed introspection,\n-which includes the ability to inspect parent transactions and novel 2-way peg\n-mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n \n-Alternatively `OP_RETURN` could be used to ensure the availability of the state\n-recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n-However, its cost in weight units would be over 4 times higher than that of\n-using `OP_PAIRCOMMIT`.\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n \n-One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n-`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n-a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n-can commit to a number of stack elements as a message.\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n \n-### Behaviors LNhance tries to avoid introducing\n+### PR\n \n-The following behaviors are out of scope for LNhance and should not be enabled\n-as a side effect without explicit consensus:\n+https://github.com/lnhance/bitcoin/pull/6/files\n \n-* Fine-grained introspection\n-* State-carrying covenants\n-* Bigint operations\n-* New arithmetic capabilities using lookup tables\n+## Rationale\n \n-### Alternative approaches\n+### Cost comparison of Lightning Symmetry constructions\n \n-The following list of alternative approaches were discussed and rejected for\n-various reasons, either for expanding the scope or for unnecessary complexity:\n+The following table briefly summarizes the costs associated with force closing\n+Lightning Symmetry channels enabled by various combinations of proposed script\n+upgrades.\n \n-* OP_CAT\n-* SHA256 streaming opcodes\n-* Merkle operation opcodes\n-* 'Kitty' CAT: result or inputs arbitrarily limited in size\n-* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n-* OP_CHECKSIGFROMSTACK on n elements as message\n-* OP_VECTORCOMMIT: generalized form for n > 2 elements\n-* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n-\n-### Cost comparison of LN-Symmetry constructions\n-\n-| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n-| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n-| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n-| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n-| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n-| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n-| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+| Method           | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :--------------- | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex        |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return       |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS         |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| CTV+CSFS+IKEY    |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS+IKEY+PC |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n \n *ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n-same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+same size for both Force Close and Contest in Lightning Symmetry, ForceC: total\n+cost of unilateral close transactions, Contest: The additional cost to contest\n+a force closure, Settle: Whether a signature operation or CTV operation is\n+required to validate the settlement transaction*\n+\n+### Proving general computation using trees\n+\n+One potential risk of PAIRCOMMIT is that it may enable verification of general\n+computations on bitcoin.\n \n-### Proving general computation\n+Any script change which enables commitment to pairs of items necessarily\n+enables commitments to Merkle trees.\n \n Merkle trees can be used to prove computation where the root of the tree\n represents the *function* and the leaves represent the *inputs* and *output*.\n-There are practical limits to the entropy space for the *inputs* as they need\n-to be iterated over and hashed into a Merkle root.\n+There are practical limits to the total number of discrete output values that\n+can be reached by all possible input values (i.e. the input entropy space) as\n+they must be enumerated and hashed into a Merkle root.\n \n-Taproot MAST trees can currently cover 128 bits of entropy space, which is over\n-the practical limits to iterate over and merklize. Therefore, we conclude this\n-capability does not materially extend what computations are possible to prove\n-in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n-that should not be practically feasible to utilize.\n-\n-There is a way to reduce the size of the witness for proving computation,\n-by eliminating the Merkle path inclusion proofs, using `OP_CHECKSIGFROMSTACK`\n-together with `OP_PAIRCOMMIT`. This method involves deleted key assumptions,\n-most likely using MPC to create an enormous amount of signatures for the stack\n-elements representing the *inputs* and the *output* of the *function*.\n+Taproot trees can be 128 levels deep, therefore including up to 2^128 possible\n+output values. This is over the practical limits to enumerate and merkelize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 394,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The first time I read this paragraph, I was confused and didn’t realize that you were comparing the expressional power of OP_PAIRCOMMIT and P2TR.\r\nPerhaps it would help if you write \"leaf scripts\" instead of \"output values\" here:\r\n\r\n```suggestion\r\nleaf scripts. This is over the practical limits to enumerate and merkelize.\r\n```\r\n",
      "created_at": "2025-02-10T18:46:49Z",
      "updated_at": "2025-02-10T18:55:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949696059",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949696059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949697230",
      "pull_request_review_id": 2606711670,
      "id": 1949697230,
      "node_id": "PRRC_kwDOAN28mc50NgTO",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry\n+\n+To create Lightning Symmetry contracts that neither require the nodes to keep\n+old states nor require additional signing round trips (and corresponding\n+signature validations), we need to solve a data availability problem presented\n+by contested closes. Specifically, the second to act channel partner must be\n+able to reconstruct the script that spends the first update transaction\n+published. This script includes the hash of the corresponding settlement\n+transaction which we do not wish to store for all prior states. By having the\n+channel and update state scripts force the parties to include the settlement\n+transaction's hash in the witness to in order to publish the corresponding\n+update transaction, then a later update can use the settlement hash from the\n+first update transaction's witness to recreate the corresponding spend script.\n+\n+The following assembly-like pseudo-code shows a possible Lightning Symmetry\n+channel construction that ensures sufficient data is available on chain in a\n+force close to reconstruct the corresponding script and update it with a later\n+state while only knowing the later state.[^3] The opcodes `OP_CHECKTEMPLATEVERIFY`,\n+`OP_PAIRCOMMIT`, `OP_INTERNALKEY`, and `OP_CHECKSIGFROMSTACK` are abbreviated\n+as `CTV`, `PC`, `IK`, and `CSFS` respectively.\n+\n+[^3]: Concretely the required data is a full CTV hash of the settlement\n+    transaction when there are open HTLCs, or merely the difference in balance\n+    between the channel partners in other cases. Whether the latter\n+    optimization would be used is an implementation detail not further\n+    discussed here.\n \n ```text\n # S = 500000000\n-# IK -> A+B\n+# internal key = [BIP-327] aggregate key of channel participants\n+# channel script:\n <sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n ```\n-before funding, sign the first state:\n+\n+Before funding, sign the first state.\n+\n ```text\n # state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n # settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n # state-n-recovery-data { settlement-n-hash or state-n-balance }\n-\n-# contract for state n < m\n+# update script:\n IF\n   <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n ELSE\n   <settlement-n-hash> CTV\n ENDIF\n ```\n \n-### Use with future updates\n+These scripts ensure the necessary data availability as follows: `CTV` commits\n+to the update transaction's hash, `PC` combines this hash with the next stack\n+item, and `CSFS` checks a MuSig 2-party signature against the resulting pair\n+hash. Both parties must sign the same pair hash to produce a channel update,\n+and they can therefore require each other to include both the update hash and\n+settlement hash in the witness stack when initiating a force close. This\n+Lightning Symmetry channel construction is close to [optimal].\n \n-Detailed introspection opcodes would also need vector commitments when used\n-with `OP_CHECKSIGFROMSTACK`.\n+### In MATT\n \n-`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+The Merkelize All The Things ([MATT]) framework proposes to use `OP_CAT` to\n+combine multiple items into a single commitment for use with\n+`OP_CHECKCONTRACTVERIFY`. `OP_PAIRCOMMIT` provides a more ergonomic way to\n+accomplish this[^4].\n \n-## Reference Implementation\n+[^4]: `OP_CAT` can be used to commit to multiple items, but it is subject to\n+    byte shifting attacks if used naively.\n+    E.g. `0x0102 || 0x03` equals `0x01 || 0x0203`. Mitigating this correctly\n+    requires either length checking, hashing, or both.\n \n-A reference implementation is provided here:\n+## Alternative approaches\n \n-https://github.com/lnhance/bitcoin/pull/6/files\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n \n-## Rationale\n+* `OP_CAT`[^4][^7]\n+* SHA256 streaming opcodes[^7]\n+* Merkle operation opcodes\n+* 'Kitty' CAT: `OP_CAT` with result or inputs arbitrarily limited in size\n+* `OP_CHECKTEMPLATEVERIFY` committing to the taproot annex in tapscript[^5]\n+* `OP_CHECKSIGFROMSTACK` on n elements as message\n+* `OP_VECTORCOMMIT`: generalized form for n > 2 elements\n+* ReKey/Laddering[^2]\n+* `OP_RETURN`[^6]\n+\n+[^5]: As seen in Greg Sanders' [Lightning Symmetry write-up], one additional\n+    item can be committed to by a transaction signature by placing that item\n+    in the Taproot annex. This mechanism is limited to a single additional\n+    item and that item is not made accessible to script making it less useful.\n+[^6]: `OP_RETURN` can also be used to cause a transaction signature or CTV\n+    hash to commit to additional data items. This is both costly for the user,\n+    as this inexpensive to validate data is pushed into transaction data\n+    instead of witness data and not accessible to script making it less useful\n+    like the annex.\n+[^7]: `OP_PAIRCOMMIT` is intended to enable more useful bitcoin scripts, in\n+    some cases similar to those enabled by `OP_CAT` but without also enabling\n+    unexpected script behaviors such as those described by Andrew Poelstra in \n+    [CAT-tricks-I] and [CAT-tricks-II] or larger numeric operations.\n \n-If `OP_CAT` was available, it could be used to combine multiple stack elements\n-that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+## Reference Implementation\n \n-Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n-malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+### Code\n \n-`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n-of potentially controversial new behaviors like fully detailed introspection,\n-which includes the ability to inspect parent transactions and novel 2-way peg\n-mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n \n-Alternatively `OP_RETURN` could be used to ensure the availability of the state\n-recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n-However, its cost in weight units would be over 4 times higher than that of\n-using `OP_PAIRCOMMIT`.\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n \n-One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n-`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n-a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n-can commit to a number of stack elements as a message.\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n \n-### Behaviors LNhance tries to avoid introducing\n+### PR\n \n-The following behaviors are out of scope for LNhance and should not be enabled\n-as a side effect without explicit consensus:\n+https://github.com/lnhance/bitcoin/pull/6/files\n \n-* Fine-grained introspection\n-* State-carrying covenants\n-* Bigint operations\n-* New arithmetic capabilities using lookup tables\n+## Rationale\n \n-### Alternative approaches\n+### Cost comparison of Lightning Symmetry constructions\n \n-The following list of alternative approaches were discussed and rejected for\n-various reasons, either for expanding the scope or for unnecessary complexity:\n+The following table briefly summarizes the costs associated with force closing\n+Lightning Symmetry channels enabled by various combinations of proposed script\n+upgrades.\n \n-* OP_CAT\n-* SHA256 streaming opcodes\n-* Merkle operation opcodes\n-* 'Kitty' CAT: result or inputs arbitrarily limited in size\n-* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n-* OP_CHECKSIGFROMSTACK on n elements as message\n-* OP_VECTORCOMMIT: generalized form for n > 2 elements\n-* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n-\n-### Cost comparison of LN-Symmetry constructions\n-\n-| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n-| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n-| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n-| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n-| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n-| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n-| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+| Method           | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :--------------- | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex        |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return       |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS         |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| CTV+CSFS+IKEY    |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS+IKEY+PC |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n \n *ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n-same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+same size for both Force Close and Contest in Lightning Symmetry, ForceC: total\n+cost of unilateral close transactions, Contest: The additional cost to contest\n+a force closure, Settle: Whether a signature operation or CTV operation is\n+required to validate the settlement transaction*\n+\n+### Proving general computation using trees\n+\n+One potential risk of PAIRCOMMIT is that it may enable verification of general\n+computations on bitcoin.\n \n-### Proving general computation\n+Any script change which enables commitment to pairs of items necessarily\n+enables commitments to Merkle trees.\n \n Merkle trees can be used to prove computation where the root of the tree\n represents the *function* and the leaves represent the *inputs* and *output*.\n-There are practical limits to the entropy space for the *inputs* as they need\n-to be iterated over and hashed into a Merkle root.\n+There are practical limits to the total number of discrete output values that\n+can be reached by all possible input values (i.e. the input entropy space) as\n+they must be enumerated and hashed into a Merkle root.\n \n-Taproot MAST trees can currently cover 128 bits of entropy space, which is over\n-the practical limits to iterate over and merklize. Therefore, we conclude this\n-capability does not materially extend what computations are possible to prove\n-in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n-that should not be practically feasible to utilize.\n-\n-There is a way to reduce the size of the witness for proving computation,\n-by eliminating the Merkle path inclusion proofs, using `OP_CHECKSIGFROMSTACK`\n-together with `OP_PAIRCOMMIT`. This method involves deleted key assumptions,\n-most likely using MPC to create an enormous amount of signatures for the stack\n-elements representing the *inputs* and the *output* of the *function*.\n+Taproot trees can be 128 levels deep, therefore including up to 2^128 possible\n+output values. This is over the practical limits to enumerate and merkelize.\n+Therefore, we conclude that enabling Merkle commitments in script does not\n+materially extend what computations are possible to validate in bitcoin\n+script. While `OP_PAIRCOMMIT` is not explicitly limited to a height of 128, greater\n+heights are not practical to Merkelize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 398,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now you have found three different ways to spell it. ;)\r\nThe researcher’s name is Ralph Merkle, so either \"merklized\" or \"Merklized\" seems right.\r\n\r\n```suggestion\r\nheights are not practical to Merklize.\r\n```",
      "created_at": "2025-02-10T18:47:41Z",
      "updated_at": "2025-02-10T18:55:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949697230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949697230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949867997",
      "pull_request_review_id": 2607135050,
      "id": 1949867997,
      "node_id": "PRRC_kwDOAN28mc50OJ_d",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry\n+\n+To create Lightning Symmetry contracts that neither require the nodes to keep\n+old states nor require additional signing round trips (and corresponding\n+signature validations), we need to solve a data availability problem presented\n+by contested closes. Specifically, the second to act channel partner must be\n+able to reconstruct the script that spends the first update transaction\n+published. This script includes the hash of the corresponding settlement\n+transaction which we do not wish to store for all prior states. By having the\n+channel and update state scripts force the parties to include the settlement\n+transaction's hash in the witness to in order to publish the corresponding\n+update transaction, then a later update can use the settlement hash from the\n+first update transaction's witness to recreate the corresponding spend script.\n+\n+The following assembly-like pseudo-code shows a possible Lightning Symmetry\n+channel construction that ensures sufficient data is available on chain in a\n+force close to reconstruct the corresponding script and update it with a later\n+state while only knowing the later state.[^3] The opcodes `OP_CHECKTEMPLATEVERIFY`,\n+`OP_PAIRCOMMIT`, `OP_INTERNALKEY`, and `OP_CHECKSIGFROMSTACK` are abbreviated\n+as `CTV`, `PC`, `IK`, and `CSFS` respectively.\n+\n+[^3]: Concretely the required data is a full CTV hash of the settlement\n+    transaction when there are open HTLCs, or merely the difference in balance\n+    between the channel partners in other cases. Whether the latter\n+    optimization would be used is an implementation detail not further\n+    discussed here.\n \n ```text\n # S = 500000000\n-# IK -> A+B\n+# internal key = [BIP-327] aggregate key of channel participants\n+# channel script:\n <sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n ```\n-before funding, sign the first state:\n+\n+Before funding, sign the first state.\n+\n ```text\n # state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n # settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n # state-n-recovery-data { settlement-n-hash or state-n-balance }\n-\n-# contract for state n < m\n+# update script:\n IF\n   <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n ELSE\n   <settlement-n-hash> CTV\n ENDIF\n ```\n \n-### Use with future updates\n+These scripts ensure the necessary data availability as follows: `CTV` commits\n+to the update transaction's hash, `PC` combines this hash with the next stack\n+item, and `CSFS` checks a MuSig 2-party signature against the resulting pair\n+hash. Both parties must sign the same pair hash to produce a channel update,\n+and they can therefore require each other to include both the update hash and\n+settlement hash in the witness stack when initiating a force close. This\n+Lightning Symmetry channel construction is close to [optimal].\n \n-Detailed introspection opcodes would also need vector commitments when used\n-with `OP_CHECKSIGFROMSTACK`.\n+### In MATT\n \n-`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+The Merkelize All The Things ([MATT]) framework proposes to use `OP_CAT` to\n+combine multiple items into a single commitment for use with\n+`OP_CHECKCONTRACTVERIFY`. `OP_PAIRCOMMIT` provides a more ergonomic way to\n+accomplish this[^4].\n \n-## Reference Implementation\n+[^4]: `OP_CAT` can be used to commit to multiple items, but it is subject to\n+    byte shifting attacks if used naively.\n+    E.g. `0x0102 || 0x03` equals `0x01 || 0x0203`. Mitigating this correctly\n+    requires either length checking, hashing, or both.\n \n-A reference implementation is provided here:\n+## Alternative approaches\n \n-https://github.com/lnhance/bitcoin/pull/6/files\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n \n-## Rationale\n+* `OP_CAT`[^4][^7]\n+* SHA256 streaming opcodes[^7]\n+* Merkle operation opcodes\n+* 'Kitty' CAT: `OP_CAT` with result or inputs arbitrarily limited in size\n+* `OP_CHECKTEMPLATEVERIFY` committing to the taproot annex in tapscript[^5]\n+* `OP_CHECKSIGFROMSTACK` on n elements as message\n+* `OP_VECTORCOMMIT`: generalized form for n > 2 elements\n+* ReKey/Laddering[^2]\n+* `OP_RETURN`[^6]\n+\n+[^5]: As seen in Greg Sanders' [Lightning Symmetry write-up], one additional\n+    item can be committed to by a transaction signature by placing that item\n+    in the Taproot annex. This mechanism is limited to a single additional\n+    item and that item is not made accessible to script making it less useful.\n+[^6]: `OP_RETURN` can also be used to cause a transaction signature or CTV\n+    hash to commit to additional data items. This is both costly for the user,\n+    as this inexpensive to validate data is pushed into transaction data\n+    instead of witness data and not accessible to script making it less useful\n+    like the annex.\n+[^7]: `OP_PAIRCOMMIT` is intended to enable more useful bitcoin scripts, in\n+    some cases similar to those enabled by `OP_CAT` but without also enabling\n+    unexpected script behaviors such as those described by Andrew Poelstra in \n+    [CAT-tricks-I] and [CAT-tricks-II] or larger numeric operations.\n \n-If `OP_CAT` was available, it could be used to combine multiple stack elements\n-that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+## Reference Implementation\n \n-Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n-malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+### Code\n \n-`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n-of potentially controversial new behaviors like fully detailed introspection,\n-which includes the ability to inspect parent transactions and novel 2-way peg\n-mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n \n-Alternatively `OP_RETURN` could be used to ensure the availability of the state\n-recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n-However, its cost in weight units would be over 4 times higher than that of\n-using `OP_PAIRCOMMIT`.\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n \n-One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n-`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n-a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n-can commit to a number of stack elements as a message.\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n \n-### Behaviors LNhance tries to avoid introducing\n+### PR\n \n-The following behaviors are out of scope for LNhance and should not be enabled\n-as a side effect without explicit consensus:\n+https://github.com/lnhance/bitcoin/pull/6/files\n \n-* Fine-grained introspection\n-* State-carrying covenants\n-* Bigint operations\n-* New arithmetic capabilities using lookup tables\n+## Rationale\n \n-### Alternative approaches\n+### Cost comparison of Lightning Symmetry constructions\n \n-The following list of alternative approaches were discussed and rejected for\n-various reasons, either for expanding the scope or for unnecessary complexity:\n+The following table briefly summarizes the costs associated with force closing\n+Lightning Symmetry channels enabled by various combinations of proposed script\n+upgrades.\n \n-* OP_CAT\n-* SHA256 streaming opcodes\n-* Merkle operation opcodes\n-* 'Kitty' CAT: result or inputs arbitrarily limited in size\n-* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n-* OP_CHECKSIGFROMSTACK on n elements as message\n-* OP_VECTORCOMMIT: generalized form for n > 2 elements\n-* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n-\n-### Cost comparison of LN-Symmetry constructions\n-\n-| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n-| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n-| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n-| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n-| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n-| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n-| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+| Method           | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :--------------- | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex        |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return       |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS         |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| CTV+CSFS+IKEY    |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS+IKEY+PC |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n \n *ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n-same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+same size for both Force Close and Contest in Lightning Symmetry, ForceC: total\n+cost of unilateral close transactions, Contest: The additional cost to contest\n+a force closure, Settle: Whether a signature operation or CTV operation is\n+required to validate the settlement transaction*\n+\n+### Proving general computation using trees\n+\n+One potential risk of PAIRCOMMIT is that it may enable verification of general\n+computations on bitcoin.\n \n-### Proving general computation\n+Any script change which enables commitment to pairs of items necessarily\n+enables commitments to Merkle trees.\n \n Merkle trees can be used to prove computation where the root of the tree\n represents the *function* and the leaves represent the *inputs* and *output*.\n-There are practical limits to the entropy space for the *inputs* as they need\n-to be iterated over and hashed into a Merkle root.\n+There are practical limits to the total number of discrete output values that\n+can be reached by all possible input values (i.e. the input entropy space) as\n+they must be enumerated and hashed into a Merkle root.\n \n-Taproot MAST trees can currently cover 128 bits of entropy space, which is over\n-the practical limits to iterate over and merklize. Therefore, we conclude this\n-capability does not materially extend what computations are possible to prove\n-in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n-that should not be practically feasible to utilize.\n-\n-There is a way to reduce the size of the witness for proving computation,\n-by eliminating the Merkle path inclusion proofs, using `OP_CHECKSIGFROMSTACK`\n-together with `OP_PAIRCOMMIT`. This method involves deleted key assumptions,\n-most likely using MPC to create an enormous amount of signatures for the stack\n-elements representing the *inputs* and the *output* of the *function*.\n+Taproot trees can be 128 levels deep, therefore including up to 2^128 possible\n+output values. This is over the practical limits to enumerate and merkelize.\n+Therefore, we conclude that enabling Merkle commitments in script does not\n+materially extend what computations are possible to validate in bitcoin\n+script. While `OP_PAIRCOMMIT` is not explicitly limited to a height of 128, greater\n+heights are not practical to Merkelize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 398,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": 1949697230,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We had a discussion about this a few years ago on the optech repo and IIRC Ralph Merkle himself replied in favor of \"merklize\"...\r\n\r\nhttps://github.com/bitcoinops/bitcoinops.github.io/blob/master/STYLE.md#spelling",
      "created_at": "2025-02-10T20:49:09Z",
      "updated_at": "2025-02-10T20:49:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949867997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949867997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949875322",
      "pull_request_review_id": 2607146720,
      "id": 1949875322,
      "node_id": "PRRC_kwDOAN28mc50OLx6",
      "diff_hunk": "@@ -90,138 +91,187 @@ highly optimized for just 2 stack elements.\n <a> <b> <c> | PC PC <pc-hash> OP_EQUALVERIFY\n ```\n \n-### Use in LN-Symmetry\n-\n-To do LN-Symmetry contracts that don't require the nodes to keep old states,\n-we need to solve the data availability problem presented by unilateral closes.\n-Channel peers must be able to reconstruct the script that spends an\n-intermediate state.\n-\n-Using in sequence `OP_CHECKTEMPLATEVERIFY`, `OP_PAIRCOMMIT`, `OP_INTERNALKEY`\n-and `OP_CHECKSIGFROMSTACK` we can construct a rebindable channel that is also\n-[optimal].\n-\n-The following assembly-like pseudo-code shows a possible LN-Symmetry channel\n-construction that provides data availability to spend to the latest state from\n-an earlier state pushed on-chain with a forced close by channel partner.\n-\n+### Use in Lightning Symmetry\n+\n+To create Lightning Symmetry contracts that neither require the nodes to keep\n+old states nor require additional signing round trips (and corresponding\n+signature validations), we need to solve a data availability problem presented\n+by contested closes. Specifically, the second to act channel partner must be\n+able to reconstruct the script that spends the first update transaction\n+published. This script includes the hash of the corresponding settlement\n+transaction which we do not wish to store for all prior states. By having the\n+channel and update state scripts force the parties to include the settlement\n+transaction's hash in the witness to in order to publish the corresponding\n+update transaction, then a later update can use the settlement hash from the\n+first update transaction's witness to recreate the corresponding spend script.\n+\n+The following assembly-like pseudo-code shows a possible Lightning Symmetry\n+channel construction that ensures sufficient data is available on chain in a\n+force close to reconstruct the corresponding script and update it with a later\n+state while only knowing the later state.[^3] The opcodes `OP_CHECKTEMPLATEVERIFY`,\n+`OP_PAIRCOMMIT`, `OP_INTERNALKEY`, and `OP_CHECKSIGFROMSTACK` are abbreviated\n+as `CTV`, `PC`, `IK`, and `CSFS` respectively.\n+\n+[^3]: Concretely the required data is a full CTV hash of the settlement\n+    transaction when there are open HTLCs, or merely the difference in balance\n+    between the channel partners in other cases. Whether the latter\n+    optimization would be used is an implementation detail not further\n+    discussed here.\n \n ```text\n # S = 500000000\n-# IK -> A+B\n+# internal key = [BIP-327] aggregate key of channel participants\n+# channel script:\n <sig> <state-n-recovery-data> <state-n-hash> | CTV PC IK CSFS <S+1> CLTV DROP\n ```\n-before funding, sign the first state:\n+\n+Before funding, sign the first state.\n+\n ```text\n # state-n-hash { nLockTime(S+n), out(contract, amount(A)+amount(B)) }\n # settlement-n-hash { nSequence(2w), out(A, amount(A)), out(B, amount(B)) }\n # state-n-recovery-data { settlement-n-hash or state-n-balance }\n-\n-# contract for state n < m\n+# update script:\n IF\n   <sig> <state-m-recovery-data> <state-m-hash> | CTV PC IK CSFS <S+n+1> CLTV DROP\n ELSE\n   <settlement-n-hash> CTV\n ENDIF\n ```\n \n-### Use with future updates\n+These scripts ensure the necessary data availability as follows: `CTV` commits\n+to the update transaction's hash, `PC` combines this hash with the next stack\n+item, and `CSFS` checks a MuSig 2-party signature against the resulting pair\n+hash. Both parties must sign the same pair hash to produce a channel update,\n+and they can therefore require each other to include both the update hash and\n+settlement hash in the witness stack when initiating a force close. This\n+Lightning Symmetry channel construction is close to [optimal].\n \n-Detailed introspection opcodes would also need vector commitments when used\n-with `OP_CHECKSIGFROMSTACK`.\n+### In MATT\n \n-`OP_CHECKCONTRACTVERIFY` would also need a way to carry complex data.\n+The Merkelize All The Things ([MATT]) framework proposes to use `OP_CAT` to\n+combine multiple items into a single commitment for use with\n+`OP_CHECKCONTRACTVERIFY`. `OP_PAIRCOMMIT` provides a more ergonomic way to\n+accomplish this[^4].\n \n-## Reference Implementation\n+[^4]: `OP_CAT` can be used to commit to multiple items, but it is subject to\n+    byte shifting attacks if used naively.\n+    E.g. `0x0102 || 0x03` equals `0x01 || 0x0203`. Mitigating this correctly\n+    requires either length checking, hashing, or both.\n \n-A reference implementation is provided here:\n+## Alternative approaches\n \n-https://github.com/lnhance/bitcoin/pull/6/files\n+The following list of alternative approaches were discussed and rejected for\n+various reasons, either for expanding the scope or for unnecessary complexity:\n \n-## Rationale\n+* `OP_CAT`[^4][^7]\n+* SHA256 streaming opcodes[^7]\n+* Merkle operation opcodes\n+* 'Kitty' CAT: `OP_CAT` with result or inputs arbitrarily limited in size\n+* `OP_CHECKTEMPLATEVERIFY` committing to the taproot annex in tapscript[^5]\n+* `OP_CHECKSIGFROMSTACK` on n elements as message\n+* `OP_VECTORCOMMIT`: generalized form for n > 2 elements\n+* ReKey/Laddering[^2]\n+* `OP_RETURN`[^6]\n+\n+[^5]: As seen in Greg Sanders' [Lightning Symmetry write-up], one additional\n+    item can be committed to by a transaction signature by placing that item\n+    in the Taproot annex. This mechanism is limited to a single additional\n+    item and that item is not made accessible to script making it less useful.\n+[^6]: `OP_RETURN` can also be used to cause a transaction signature or CTV\n+    hash to commit to additional data items. This is both costly for the user,\n+    as this inexpensive to validate data is pushed into transaction data\n+    instead of witness data and not accessible to script making it less useful\n+    like the annex.\n+[^7]: `OP_PAIRCOMMIT` is intended to enable more useful bitcoin scripts, in\n+    some cases similar to those enabled by `OP_CAT` but without also enabling\n+    unexpected script behaviors such as those described by Andrew Poelstra in \n+    [CAT-tricks-I] and [CAT-tricks-II] or larger numeric operations.\n \n-If `OP_CAT` was available, it could be used to combine multiple stack elements\n-that get verified with `OP_CHECKSIGFROMSTACK` as a valid state update.\n+## Reference Implementation\n \n-Using `OP_CAT` for this purpose requires additional opcodes to prevent witness\n-malleability (e.g. `0x0102 0x03 OP_CAT` is identical to `0x01 0x0203 OP_CAT`).\n+### Code\n \n-`OP_PAIRCOMMIT` solves this specific problem without introducing a wide range\n-of potentially controversial new behaviors like fully detailed introspection,\n-which includes the ability to inspect parent transactions and novel 2-way peg\n-mechanisms. ([CAT-tricks-I] and [CAT-tricks-II] by Andrew Poelstra)\n+```c++\n+case OP_PAIRCOMMIT: {\n+    // OP_PAIRCOMMIT is only available in Tapscript\n+    // ...\n+    // x1 x2 -- hash\n+    if (stack.size() < 2) {\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    }\n+    const valtype& vch1 = stacktop(-2);\n+    const valtype& vch2 = stacktop(-1);\n \n-Alternatively `OP_RETURN` could be used to ensure the availability of the state\n-recovery data, as `OP_CHECKTEMPLATEVERIFY` naturally commits to all outputs.\n-However, its cost in weight units would be over 4 times higher than that of\n-using `OP_PAIRCOMMIT`.\n+    uint256 hash = PairCommitHash(vch1, vch2);\n+\n+    stack.pop_back();\n+    stack.pop_back();\n+    stack.emplace_back(hash.begin(), hash.end());\n+    break;\n+}\n+```\n+```c++\n+const HashWriter HASHER_PAIRCOMMIT{TaggedHash(\"PairCommit\")};\n \n-One way to think about the 3 opcodes (`OP_CHECKSIGFROMSTACK`, `OP_INTERNALKEY`,\n-`OP_PAIRCOMMIT`) is we decompose a `OP_CHECKSIGFROMSTACK` variant that can use\n-a 1-byte `OP_TRUE` public key (substituting for the *taproot internal key*) and\n-can commit to a number of stack elements as a message.\n+uint256 PairCommitHash(const std::vector<unsigned char>& x1, const std::vector<unsigned char>& x2)\n+{\n+    return (HashWriter{HASHER_PAIRCOMMIT} << x1 << x2).GetSHA256();\n+}\n+```\n \n-### Behaviors LNhance tries to avoid introducing\n+### PR\n \n-The following behaviors are out of scope for LNhance and should not be enabled\n-as a side effect without explicit consensus:\n+https://github.com/lnhance/bitcoin/pull/6/files\n \n-* Fine-grained introspection\n-* State-carrying covenants\n-* Bigint operations\n-* New arithmetic capabilities using lookup tables\n+## Rationale\n \n-### Alternative approaches\n+### Cost comparison of Lightning Symmetry constructions\n \n-The following list of alternative approaches were discussed and rejected for\n-various reasons, either for expanding the scope or for unnecessary complexity:\n+The following table briefly summarizes the costs associated with force closing\n+Lightning Symmetry channels enabled by various combinations of proposed script\n+upgrades.\n \n-* OP_CAT\n-* SHA256 streaming opcodes\n-* Merkle operation opcodes\n-* 'Kitty' CAT: result or inputs arbitrarily limited in size\n-* OP_CHECKTEMPLATEVERIFY committing to the taproot annex in tapscript\n-* OP_CHECKSIGFROMSTACK on n elements as message\n-* OP_VECTORCOMMIT: generalized form for n > 2 elements\n-* ReKey: key delegation and multiple use of OP_CHECKSIGFROMSTACK\n-\n-### Cost comparison of LN-Symmetry constructions\n-\n-| Method        | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n-| :------------ | --------: | -------: | ------: | ------: | ------: | :----: |\n-| APO-Annex     |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n-| APO-Return    |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n-| CTV+CSFS+IKEY |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n-| CTV+CSFS      |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n-| LNhance       |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n+| Method           | ChannelSc | UpdateSc | UpdateW | ForceC  | Contest | Settle |\n+| :--------------- | --------: | -------: | ------: | ------: | ------: | :----: |\n+| APO-Annex        |      8 WU |   113 WU |  100 WU | 1221 WU |  627 WU | SigOp  |\n+| APO-Return       |      8 WU |   113 WU |   66 WU | 1359 WU |  765 WU | SigOp  |\n+| CTV+CSFS         |     43 WU |    81 WU |   98 WU | 1394 WU |  765 WU |  CTV   |\n+| CTV+CSFS+IKEY    |     10 WU |    48 WU |   98 WU | 1328 WU |  732 WU |  CTV   |\n+| CTV+CSFS+IKEY+PC |     11 WU |    49 WU |  131 WU | 1191 WU |  594 WU |  CTV   |\n \n *ChannelSc: channel script, UpdateSc: update script, UpdateW: witness is the\n-same size for both Force Close and Contest in LN-Symmetry, ForceC: total cost of unilateral close transactions*\n+same size for both Force Close and Contest in Lightning Symmetry, ForceC: total\n+cost of unilateral close transactions, Contest: The additional cost to contest\n+a force closure, Settle: Whether a signature operation or CTV operation is\n+required to validate the settlement transaction*\n+\n+### Proving general computation using trees\n+\n+One potential risk of PAIRCOMMIT is that it may enable verification of general\n+computations on bitcoin.\n \n-### Proving general computation\n+Any script change which enables commitment to pairs of items necessarily\n+enables commitments to Merkle trees.\n \n Merkle trees can be used to prove computation where the root of the tree\n represents the *function* and the leaves represent the *inputs* and *output*.\n-There are practical limits to the entropy space for the *inputs* as they need\n-to be iterated over and hashed into a Merkle root.\n+There are practical limits to the total number of discrete output values that\n+can be reached by all possible input values (i.e. the input entropy space) as\n+they must be enumerated and hashed into a Merkle root.\n \n-Taproot MAST trees can currently cover 128 bits of entropy space, which is over\n-the practical limits to iterate over and merklize. Therefore, we conclude this\n-capability does not materially extend what computations are possible to prove\n-in bitcoin script. While `OP_PAIRCOMMIT` is not limited to a height of 128,\n-that should not be practically feasible to utilize.\n-\n-There is a way to reduce the size of the witness for proving computation,\n-by eliminating the Merkle path inclusion proofs, using `OP_CHECKSIGFROMSTACK`\n-together with `OP_PAIRCOMMIT`. This method involves deleted key assumptions,\n-most likely using MPC to create an enormous amount of signatures for the stack\n-elements representing the *inputs* and the *output* of the *function*.\n+Taproot trees can be 128 levels deep, therefore including up to 2^128 possible\n+output values. This is over the practical limits to enumerate and merkelize.\n+Therefore, we conclude that enabling Merkle commitments in script does not\n+materially extend what computations are possible to validate in bitcoin\n+script. While `OP_PAIRCOMMIT` is not explicitly limited to a height of 128, greater\n+heights are not practical to Merkelize.",
      "path": "bip-0442.md",
      "position": null,
      "original_position": 398,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": 1949697230,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ah, here it is: https://github.com/bitcoinops/bitcoinops.github.io/issues/171#issuecomment-529167731",
      "created_at": "2025-02-10T20:54:46Z",
      "updated_at": "2025-02-10T20:54:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1949875322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1949875322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1953033010",
      "pull_request_review_id": 2612572223,
      "id": 1953033010,
      "node_id": "PRRC_kwDOAN28mc50aOsy",
      "diff_hunk": "@@ -1295,6 +1295,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Gloria Zhao\n | Informational\n | Draft\n+|-\n+| [[bip-0442.md|442]]\n+| Consensus (soft fork)\n+| OP_PAIRCOMMIT\n+| moonsettler",
      "path": "README.mediawiki",
      "position": null,
      "original_position": 8,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The CI issue is caused by Brandon missing here, because now the authors don’t match up between the BIP and the table.\r\n\r\n```suggestion\r\n| moonsettler, Brandon Black\r\n```",
      "created_at": "2025-02-12T16:40:33Z",
      "updated_at": "2025-02-12T16:41:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1953033010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1953033010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1953121435",
      "pull_request_review_id": 2612728744,
      "id": 1953121435,
      "node_id": "PRRC_kwDOAN28mc50akSb",
      "diff_hunk": "@@ -1295,6 +1295,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Gloria Zhao\n | Informational\n | Draft\n+|-\n+| [[bip-0442.md|442]]\n+| Consensus (soft fork)\n+| OP_PAIRCOMMIT\n+| moonsettler",
      "path": "README.mediawiki",
      "position": null,
      "original_position": 8,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": 1953033010,
      "user": {
        "login": "moonsettler",
        "id": 90689674,
        "node_id": "MDQ6VXNlcjkwNjg5Njc0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90689674?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moonsettler",
        "html_url": "https://github.com/moonsettler",
        "followers_url": "https://api.github.com/users/moonsettler/followers",
        "following_url": "https://api.github.com/users/moonsettler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/moonsettler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/moonsettler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/moonsettler/subscriptions",
        "organizations_url": "https://api.github.com/users/moonsettler/orgs",
        "repos_url": "https://api.github.com/users/moonsettler/repos",
        "events_url": "https://api.github.com/users/moonsettler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/moonsettler/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "looking at that `buildtable.pl` script... should we even use `<pre>` in markdown?",
      "created_at": "2025-02-12T17:35:04Z",
      "updated_at": "2025-02-12T17:35:05Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1953121435",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1953121435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1953498454",
      "pull_request_review_id": 2613373836,
      "id": 1953498454,
      "node_id": "PRRC_kwDOAN28mc50cAVW",
      "diff_hunk": "@@ -1295,6 +1295,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Gloria Zhao\n | Informational\n | Draft\n+|-\n+| [[bip-0442.md|442]]\n+| Consensus (soft fork)\n+| OP_PAIRCOMMIT\n+| moonsettler",
      "path": "README.mediawiki",
      "position": null,
      "original_position": 8,
      "commit_id": "da2b69cc761c5b1acec594b8e9e34d730b8b2692",
      "original_commit_id": "1a0c663465f714e2d15be2c1e96de69b88ed43b3",
      "in_reply_to_id": 1953033010,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, yes, we fixed the formatting checker for Markdown files, because in Markdown BIPs the email addresses of the authors didn’t render: https://github.com/bitcoin/bips/pull/1759\r\n\r\nPlease use <code>```</code> before and after the preamble now!",
      "created_at": "2025-02-12T22:33:20Z",
      "updated_at": "2025-02-12T22:34:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1699#discussion_r1953498454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1953498454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1699"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1302,
      "side": "RIGHT"
    }
  ]
}