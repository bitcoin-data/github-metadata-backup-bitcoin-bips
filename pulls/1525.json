{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1525",
    "id": 1639757880,
    "node_id": "PR_kwDOAN28mc5hvLg4",
    "html_url": "https://github.com/bitcoin/bips/pull/1525",
    "diff_url": "https://github.com/bitcoin/bips/pull/1525.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1525.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1525",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1525/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1525/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1525/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
    "number": 1525,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP for reenabling OP_CAT",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\r\n\r\nSee our implementation PR in bitcoin-inquisition: https://github.com/bitcoin-inquisition/bitcoin/pull/39 ",
    "labels": [],
    "created_at": "2023-12-11T23:16:22Z",
    "updated_at": "2023-12-15T02:54:40Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merge_commit_sha": "3750fd45995ff38e6d8be8fb77ad1da0efab46a4",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "EthanHeilman:cat",
      "ref": "cat",
      "sha": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 492572806,
        "node_id": "R_kgDOHVwQhg",
        "name": "bips",
        "full_name": "EthanHeilman/bips",
        "owner": {
          "login": "EthanHeilman",
          "id": 274814,
          "node_id": "MDQ6VXNlcjI3NDgxNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/EthanHeilman",
          "html_url": "https://github.com/EthanHeilman",
          "followers_url": "https://api.github.com/users/EthanHeilman/followers",
          "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
          "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
          "repos_url": "https://api.github.com/users/EthanHeilman/repos",
          "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/EthanHeilman/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/EthanHeilman/bips",
        "archive_url": "https://api.github.com/repos/EthanHeilman/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/EthanHeilman/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/EthanHeilman/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/EthanHeilman/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/EthanHeilman/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/EthanHeilman/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/EthanHeilman/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/EthanHeilman/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/EthanHeilman/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/EthanHeilman/bips/contributors",
        "deployments_url": "https://api.github.com/repos/EthanHeilman/bips/deployments",
        "downloads_url": "https://api.github.com/repos/EthanHeilman/bips/downloads",
        "events_url": "https://api.github.com/repos/EthanHeilman/bips/events",
        "forks_url": "https://api.github.com/repos/EthanHeilman/bips/forks",
        "git_commits_url": "https://api.github.com/repos/EthanHeilman/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/EthanHeilman/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/EthanHeilman/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/EthanHeilman/bips.git",
        "issue_comment_url": "https://api.github.com/repos/EthanHeilman/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/EthanHeilman/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/EthanHeilman/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/EthanHeilman/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/EthanHeilman/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/EthanHeilman/bips/languages",
        "merges_url": "https://api.github.com/repos/EthanHeilman/bips/merges",
        "milestones_url": "https://api.github.com/repos/EthanHeilman/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/EthanHeilman/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/EthanHeilman/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/EthanHeilman/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:EthanHeilman/bips.git",
        "stargazers_url": "https://api.github.com/repos/EthanHeilman/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/EthanHeilman/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/EthanHeilman/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/EthanHeilman/bips/subscription",
        "tags_url": "https://api.github.com/repos/EthanHeilman/bips/tags",
        "teams_url": "https://api.github.com/repos/EthanHeilman/bips/teams",
        "trees_url": "https://api.github.com/repos/EthanHeilman/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/EthanHeilman/bips.git",
        "hooks_url": "https://api.github.com/repos/EthanHeilman/bips/hooks",
        "svn_url": "https://github.com/EthanHeilman/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 13700,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-12-12T13:59:03Z",
        "created_at": "2022-05-15T18:38:29Z",
        "updated_at": "2023-12-11T23:00:33Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e918b50731397872ad2922a1b08a5a4cd1d6d546",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5671,
        "stargazers_count": 8520,
        "watchers_count": 8520,
        "size": 13657,
        "default_branch": "master",
        "open_issues_count": 129,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-12-14T03:41:35Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-12-14T19:53:21Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 91,
    "deletions": 0,
    "changed_files": 1,
    "commits": 5,
    "review_comments": 13,
    "comments": 2
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgzY2E1N2YyMjI2OGVkYjFmZjI4MTUwODVhNDM4M2JhOGQxYjU1ZmU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83ca57f22268edb1ff2815085a4383ba8d1b55fe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/83ca57f22268edb1ff2815085a4383ba8d1b55fe",
      "tree": {
        "sha": "f755d1bc897bc0a031e6edea54fe28f95268d198",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f755d1bc897bc0a031e6edea54fe28f95268d198"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f755d1bc897bc0a031e6edea54fe28f95268d198\nparent e918b50731397872ad2922a1b08a5a4cd1d6d546\nauthor Ethan Heilman <ethan.r.heilman@gmail.com> 1702336282 -0500\ncommitter GitHub <noreply@github.com> 1702336282 -0500\n\nCreate bip-???-cat.mediawiki",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJld5caCRBK7hj4Ov3rIwAAJv8IACaOOLi9Wh5g2KR+GqrXb7zX\ndvNdjZUu9FGByk7jNd3DfW+VK/bPaEi2hz89At/lO8COfv9XOsDZRg0KUKla+G0c\nrN71An4TwtKUtVtdcZzwGPAuursxJeOIslXrcVc22iwExNHt23oC7o3yRf5kwL/C\nGHhD0u3R+YTspnnfuG18R760DKkRaJubiqUV8/fI7CGVm3mXVFsnTpuYmio6GkHr\n2vJX+fR87PTFv+YaJJ5jAihBq6PhO/b2slGLtwWlOrn63TXsfXAAr4STVuQPitNB\nxXtrkDd0aAqHin8q1rYAW3ewFhbU0fSi8Qt0q1vHwoQeHthvq1QTDNLOzPaBnEw=\n=38bD\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e918b50731397872ad2922a1b08a5a4cd1d6d546",
          "sha": "e918b50731397872ad2922a1b08a5a4cd1d6d546",
          "html_url": "https://github.com/bitcoin/bips/commit/e918b50731397872ad2922a1b08a5a4cd1d6d546"
        }
      ],
      "message": "Create bip-???-cat.mediawiki",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2023-12-11T23:11:22Z"
      },
      "author": {
        "name": "Ethan Heilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2023-12-11T23:11:22Z"
      },
      "sha": "83ca57f22268edb1ff2815085a4383ba8d1b55fe"
    },
    {
      "event": "reviewed",
      "id": 1777360806,
      "node_id": "PRR_kwDOAN28mc5p8F-m",
      "url": null,
      "actor": null,
      "commit_id": "83ca57f22268edb1ff2815085a4383ba8d1b55fe",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some minor nits. Idea seems sensible. Mailing list post seems mostly positive sentiment as well.\r\n\r\n@luke-jr ?",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1525#pullrequestreview-1777360806",
      "submitted_at": "2023-12-12T12:34:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGYxMTY5ZGQxZmMwNjc4MjVjNTYwMTYzNzlhOGI4NGMwMzNiNmVlYjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f1169dd1fc067825c56016379a8b84c033b6eeb2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f1169dd1fc067825c56016379a8b84c033b6eeb2",
      "tree": {
        "sha": "915452a27d70d0ae56bccc17989b81ffc60b6037",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/915452a27d70d0ae56bccc17989b81ffc60b6037"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 915452a27d70d0ae56bccc17989b81ffc60b6037\nparent 83ca57f22268edb1ff2815085a4383ba8d1b55fe\nauthor Ethan Heilman <ethan.r.heilman@gmail.com> 1702387479 -0500\ncommitter GitHub <noreply@github.com> 1702387479 -0500\n\nFixes typo\n\nCo-authored-by: kallewoof <kalle.alm@gmail.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJleF8XCRBK7hj4Ov3rIwAAjYsIAIKIf768sUeWjLwqiw+e2Bk4\n6L+zoaaHgLhSAmfIc5OPrGAaV0lyQp+CTekRMOV+6IPPpSe8lse2dIzN1g3kRANR\nWr3HSJ8abK5MsK7MIQAgxzMiWFSWJ62J3u4wQ9gr91Fwg/kMn241R7DySed81h+a\nt06HgB/YyHVa03d8gugfKhXkWYoydNFk6Y20fgZARckGVzJ70OKsGZHnPqkhcms0\nLcs31njiIZcoSEfDvZt8Gm18Ut4aAC/I7pqyAk4HSGyq5xTEgRFsQj9JteV+q/cg\nw794KTAPic3MWwXmXYLqjD04Of/BtYlqF+/ReEUEYjqkxjToebvaSeMaeIIpKkg=\n=Mh90\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83ca57f22268edb1ff2815085a4383ba8d1b55fe",
          "sha": "83ca57f22268edb1ff2815085a4383ba8d1b55fe",
          "html_url": "https://github.com/bitcoin/bips/commit/83ca57f22268edb1ff2815085a4383ba8d1b55fe"
        }
      ],
      "message": "Fixes typo\n\nCo-authored-by: kallewoof <kalle.alm@gmail.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2023-12-12T13:24:39Z"
      },
      "author": {
        "name": "Ethan Heilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2023-12-12T13:24:39Z"
      },
      "sha": "f1169dd1fc067825c56016379a8b84c033b6eeb2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI2ZThlNWY3ZmMxZjUxZTZiYTg2MWRlN2EyNTUyNGUxYjU2MWEwOGQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/26e8e5f7fc1f51e6ba861de7a25524e1b561a08d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/26e8e5f7fc1f51e6ba861de7a25524e1b561a08d",
      "tree": {
        "sha": "f5659472be45c7f71a88641fb73c50d9aa09184a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f5659472be45c7f71a88641fb73c50d9aa09184a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f5659472be45c7f71a88641fb73c50d9aa09184a\nparent f1169dd1fc067825c56016379a8b84c033b6eeb2\nauthor Ethan Heilman <ethan.r.heilman@gmail.com> 1702387596 -0500\ncommitter GitHub <noreply@github.com> 1702387596 -0500\n\nBetter fits bitcoin style guide\r\n\r\n\"If an if only has a single-statement then-clause, it can appear on the same line as the if, without braces. In every other case, braces are required, and the then and else clauses must appear correctly indented on a new line.\"\n\nCo-authored-by: kallewoof <kalle.alm@gmail.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJleF+MCRBK7hj4Ov3rIwAAkD0IAH53iJfWMmIeETi9pdO64/EI\n+tXxC72qEqU9w7KEZ9Yj7WqAk56uCKNDLOcP4hqVlnD4/3ZJu8ZOPAYGrmwOsKEq\nSKITp0DtvGVGsBxOsNLP65h2yjVxZxdtGeFf781Fm1I6ttNcXg7yqufMJSjntO+H\nzqgTWpMFmGOacgRWadmqMyx6+fZ55zfwyKCnswiLyf7wdlNuUTkMElL/jw/jpBzI\nYuBDD1rzc76bXUOtpGSr7hEZbUTAce3K9ypj8FIkh+pWhOipus7/CQpzuwtdTEhT\nnG/sRJk4B8Zj9v0HlNLr49wy8MSLFDCktJgdIYqlZvqKYFDfueuyP0G4jDh1ZVM=\n=/2dj\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f1169dd1fc067825c56016379a8b84c033b6eeb2",
          "sha": "f1169dd1fc067825c56016379a8b84c033b6eeb2",
          "html_url": "https://github.com/bitcoin/bips/commit/f1169dd1fc067825c56016379a8b84c033b6eeb2"
        }
      ],
      "message": "Better fits bitcoin style guide\r\n\r\n\"If an if only has a single-statement then-clause, it can appear on the same line as the if, without braces. In every other case, braces are required, and the then and else clauses must appear correctly indented on a new line.\"\n\nCo-authored-by: kallewoof <kalle.alm@gmail.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2023-12-12T13:26:36Z"
      },
      "author": {
        "name": "Ethan Heilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2023-12-12T13:26:36Z"
      },
      "sha": "26e8e5f7fc1f51e6ba861de7a25524e1b561a08d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDAzMzVjOWQxODgxM2YzYTE4Y2ZmOWY5Yjc3NjQzMjExNGY2YTU3MGM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0335c9d18813f3a18cff9f9b776432114f6a570c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0335c9d18813f3a18cff9f9b776432114f6a570c",
      "tree": {
        "sha": "f9d3c580b53556b660442fbb22d13e7c4bc83914",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f9d3c580b53556b660442fbb22d13e7c4bc83914"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f9d3c580b53556b660442fbb22d13e7c4bc83914\nparent 26e8e5f7fc1f51e6ba861de7a25524e1b561a08d\nauthor Ethan Heilman <ethan.r.heilman@gmail.com> 1702387655 -0500\ncommitter GitHub <noreply@github.com> 1702387655 -0500\n\nGrammar fix\n\nCo-authored-by: kallewoof <kalle.alm@gmail.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJleF/HCRBK7hj4Ov3rIwAAcVkIABGTK9YMvksPbq08z4iWu4d/\nJ3ObdzFbnhbMEEgsymDFnKPj3lTO95pF3T1ILbhGvnx0JSTrEr2yt9xUJrRFxVjz\nyDt76fdKxLFQ50PWwW1XuTXbQ9laOuSM+5sPBqJIEGAk3BGanQVPws+QhxTKHR3c\nj6tO7GifUEMwR66vYDY796QJ3lp2ZoW3tl0wV65b7qEpIUJd6zU1+CFBxzzY25Ut\nDdrgk7mCgVqFhGdgQb+5cGHka3CEE2De89OveSVnFywxpTwHg0FMGZjCOQLQsw+M\nGqmegxxBeKUv/kC4SiT1OULyp9jum3Cfk5w1NSJM5pSjBzyyUIjbn4aBwtzixCM=\n=s/uq\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/26e8e5f7fc1f51e6ba861de7a25524e1b561a08d",
          "sha": "26e8e5f7fc1f51e6ba861de7a25524e1b561a08d",
          "html_url": "https://github.com/bitcoin/bips/commit/26e8e5f7fc1f51e6ba861de7a25524e1b561a08d"
        }
      ],
      "message": "Grammar fix\n\nCo-authored-by: kallewoof <kalle.alm@gmail.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2023-12-12T13:27:35Z"
      },
      "author": {
        "name": "Ethan Heilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2023-12-12T13:27:35Z"
      },
      "sha": "0335c9d18813f3a18cff9f9b776432114f6a570c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNkMzFlNWM4OTQ3YmY1ZDJkOGJhMDJkYzIyYzUzMDIwODViOWY5MWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "tree": {
        "sha": "562fa360a5ed02a26f88c54986364dcb2756eafd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/562fa360a5ed02a26f88c54986364dcb2756eafd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 562fa360a5ed02a26f88c54986364dcb2756eafd\nparent 0335c9d18813f3a18cff9f9b776432114f6a570c\nauthor Ethan Heilman <ethan.r.heilman@gmail.com> 1702389543 -0500\ncommitter GitHub <noreply@github.com> 1702389543 -0500\n\nAdds brackets\n\nCo-authored-by: kallewoof <kalle.alm@gmail.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJleGcnCRBK7hj4Ov3rIwAAlDwIADqHo42LpRnPbA1cJIQ2Y6Od\ndXcNzyVH7qz6L68+mbBln69IM6loj5mZxpzSI3Y9IJ4ly0KkVQZHhni0HbGPs0HU\npVj/ZMerWegbb4U8l8jblbFl3lG3YFp4Z8HgIxKJaphWd1eNvwvFCzvyngcKaFgi\n6md0X8F9P8DtqpZU2XuFvCEvBm3FfV/MsZUKm5TeyJul5tAt6k85KIU6ujCTH26H\nJ23vLyeSiDpAnXb0nQGtoreYRZYF5VKdTMHIFgJj+7e/rlIepcLdXN3bZdBRNUvN\nuDxR/IwPO5rGRZasPnuGlNrdsYw9HpcQjFgR/KL51FsyVloIxo+j3T9BqCaYgD4=\n=yUtP\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0335c9d18813f3a18cff9f9b776432114f6a570c",
          "sha": "0335c9d18813f3a18cff9f9b776432114f6a570c",
          "html_url": "https://github.com/bitcoin/bips/commit/0335c9d18813f3a18cff9f9b776432114f6a570c"
        }
      ],
      "message": "Adds brackets\n\nCo-authored-by: kallewoof <kalle.alm@gmail.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2023-12-12T13:59:03Z"
      },
      "author": {
        "name": "Ethan Heilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2023-12-12T13:59:03Z"
      },
      "sha": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b"
    },
    {
      "event": "commented",
      "id": 1852983310,
      "node_id": "IC_kwDOAN28mc5uckgO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1852983310",
      "actor": {
        "login": "Bloc6",
        "id": 135121941,
        "node_id": "U_kgDOCA3MFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/135121941?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bloc6",
        "html_url": "https://github.com/Bloc6",
        "followers_url": "https://api.github.com/users/Bloc6/followers",
        "following_url": "https://api.github.com/users/Bloc6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bloc6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bloc6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bloc6/subscriptions",
        "organizations_url": "https://api.github.com/users/Bloc6/orgs",
        "repos_url": "https://api.github.com/users/Bloc6/repos",
        "events_url": "https://api.github.com/users/Bloc6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bloc6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T23:21:33Z",
      "updated_at": "2023-12-12T23:21:33Z",
      "author_association": "NONE",
      "body": "Definitely looking forward to test drive this BIP.",
      "user": {
        "login": "Bloc6",
        "id": 135121941,
        "node_id": "U_kgDOCA3MFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/135121941?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bloc6",
        "html_url": "https://github.com/Bloc6",
        "followers_url": "https://api.github.com/users/Bloc6/followers",
        "following_url": "https://api.github.com/users/Bloc6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bloc6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bloc6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bloc6/subscriptions",
        "organizations_url": "https://api.github.com/users/Bloc6/orgs",
        "repos_url": "https://api.github.com/users/Bloc6/repos",
        "events_url": "https://api.github.com/users/Bloc6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bloc6/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1525#issuecomment-1852983310",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1525"
    },
    {
      "event": "commented",
      "id": 1856410780,
      "node_id": "IC_kwDOAN28mc5uppSc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1856410780",
      "actor": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T18:55:10Z",
      "updated_at": "2023-12-14T18:55:10Z",
      "author_association": "NONE",
      "body": "Can we get a BIP number assigned? Any blockers to doing this?",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1525#issuecomment-1856410780",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1525"
    },
    {
      "event": "reviewed",
      "id": 1783046400,
      "node_id": "PRR_kwDOAN28mc5qRyEA",
      "url": null,
      "actor": null,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Sorry, some more μ-nits. Fine with it as is though.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1525#pullrequestreview-1783046400",
      "submitted_at": "2023-12-15T02:54:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423924713",
      "pull_request_review_id": 1777360806,
      "id": 1423924713,
      "node_id": "PRRC_kwDOAN28mc5U313p",
      "diff_hunk": "@@ -0,0 +1,89 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\n+* Non-equivocation contracts <ref>T. Ruffing, A. Kate, D. Schröder, \"Liar, Liar, Coins on Fire: Penalizing Equivocation by Loss of Bitcoins\", 2015, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&rep=rep1&type=pdf</ref> in tapscript provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT enables this by enforcing rules on the spending transaction's nonce. The capability is a useful building block for payment channels and other Bitcoin protocols.\n+* Vaults <ref> M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.\n+* Replicating CheckSigFromStack <ref> A. Poelstra, \"CAT and Schnorr Tricks I\", 2021, https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298 </ref> which would allow the creation of simple covenants and other advanced contracts without having to presign spending transactions, possibly reducing complexity and the amount of data that needs to be stored. Originally shown to work with Schnorr signatures, this result has been extended to ECDSA signatures <ref>R. Linus, \"Covenants with CAT and ECDSA\", 2023, https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85#file-covenants_cat_ecdsa-md</ref>.\n+\n+The opcode OP_CAT was available in early versions of Bitcoin. However OP_CAT was removed because it enabled the construction of a script for which an evaluation could have memory usage exponential in the size of the script.\n+For instance a script which pushed an 1 Byte value on the stack then repeated the opcodes OP_DUP, OP_CAT 40 times would result in a stack value whose size was greater than 1 Terabyte. This is no longer an issue because tapscript enforces a maximum stack element size of 520 Bytes.\n+\n+==Specification==\n+\n+OP_CAT pops two elements of the stack, concatenates them together in stack order and pushes the resultant element onto the stack. Given the stack [x1,x2], where x2 is at the top of the stack, OP_CAT will push x1||x2 onto the stack. By '||' we denote concatenation.",
      "path": "bip-???-cat.mediawiki",
      "position": null,
      "original_position": 42,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "83ca57f22268edb1ff2815085a4383ba8d1b55fe",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nOP_CAT pops two elements off the stack, concatenates them together in stack order and pushes the resulting element onto the stack. Given the stack [x1,x2], where x2 is at the top of the stack, OP_CAT will push x1||x2 onto the stack. By '||' we denote concatenation.\r\n```",
      "created_at": "2023-12-12T12:30:37Z",
      "updated_at": "2023-12-12T12:34:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1423924713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423924713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423925177",
      "pull_request_review_id": 1777360806,
      "id": 1423925177,
      "node_id": "PRRC_kwDOAN28mc5U31-5",
      "diff_hunk": "@@ -0,0 +1,89 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\n+* Non-equivocation contracts <ref>T. Ruffing, A. Kate, D. Schröder, \"Liar, Liar, Coins on Fire: Penalizing Equivocation by Loss of Bitcoins\", 2015, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&rep=rep1&type=pdf</ref> in tapscript provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT enables this by enforcing rules on the spending transaction's nonce. The capability is a useful building block for payment channels and other Bitcoin protocols.\n+* Vaults <ref> M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.\n+* Replicating CheckSigFromStack <ref> A. Poelstra, \"CAT and Schnorr Tricks I\", 2021, https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298 </ref> which would allow the creation of simple covenants and other advanced contracts without having to presign spending transactions, possibly reducing complexity and the amount of data that needs to be stored. Originally shown to work with Schnorr signatures, this result has been extended to ECDSA signatures <ref>R. Linus, \"Covenants with CAT and ECDSA\", 2023, https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85#file-covenants_cat_ecdsa-md</ref>.\n+\n+The opcode OP_CAT was available in early versions of Bitcoin. However OP_CAT was removed because it enabled the construction of a script for which an evaluation could have memory usage exponential in the size of the script.\n+For instance a script which pushed an 1 Byte value on the stack then repeated the opcodes OP_DUP, OP_CAT 40 times would result in a stack value whose size was greater than 1 Terabyte. This is no longer an issue because tapscript enforces a maximum stack element size of 520 Bytes.\n+\n+==Specification==\n+\n+OP_CAT pops two elements of the stack, concatenates them together in stack order and pushes the resultant element onto the stack. Given the stack [x1,x2], where x2 is at the top of the stack, OP_CAT will push x1||x2 onto the stack. By '||' we denote concatenation.\n+\n+Implementation\n+<pre>\n+case OP_CAT:\n+{\n+    if (stack.size() < 2)\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
      "path": "bip-???-cat.mediawiki",
      "position": null,
      "original_position": 49,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "83ca57f22268edb1ff2815085a4383ba8d1b55fe",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    if (stack.size() < 2) {\r\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n    }\r\n```",
      "created_at": "2023-12-12T12:31:05Z",
      "updated_at": "2023-12-12T12:34:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1423925177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423925177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": 48,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423925496",
      "pull_request_review_id": 1777360806,
      "id": 1423925496,
      "node_id": "PRRC_kwDOAN28mc5U32D4",
      "diff_hunk": "@@ -0,0 +1,89 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\n+* Non-equivocation contracts <ref>T. Ruffing, A. Kate, D. Schröder, \"Liar, Liar, Coins on Fire: Penalizing Equivocation by Loss of Bitcoins\", 2015, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&rep=rep1&type=pdf</ref> in tapscript provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT enables this by enforcing rules on the spending transaction's nonce. The capability is a useful building block for payment channels and other Bitcoin protocols.\n+* Vaults <ref> M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.\n+* Replicating CheckSigFromStack <ref> A. Poelstra, \"CAT and Schnorr Tricks I\", 2021, https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298 </ref> which would allow the creation of simple covenants and other advanced contracts without having to presign spending transactions, possibly reducing complexity and the amount of data that needs to be stored. Originally shown to work with Schnorr signatures, this result has been extended to ECDSA signatures <ref>R. Linus, \"Covenants with CAT and ECDSA\", 2023, https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85#file-covenants_cat_ecdsa-md</ref>.\n+\n+The opcode OP_CAT was available in early versions of Bitcoin. However OP_CAT was removed because it enabled the construction of a script for which an evaluation could have memory usage exponential in the size of the script.\n+For instance a script which pushed an 1 Byte value on the stack then repeated the opcodes OP_DUP, OP_CAT 40 times would result in a stack value whose size was greater than 1 Terabyte. This is no longer an issue because tapscript enforces a maximum stack element size of 520 Bytes.\n+\n+==Specification==\n+\n+OP_CAT pops two elements of the stack, concatenates them together in stack order and pushes the resultant element onto the stack. Given the stack [x1,x2], where x2 is at the top of the stack, OP_CAT will push x1||x2 onto the stack. By '||' we denote concatenation.\n+\n+Implementation\n+<pre>\n+case OP_CAT:\n+{\n+    if (stack.size() < 2)\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    valtype& vch1 = stacktop(-2);\n+    valtype& vch2 = stacktop(-1);\n+    if (vch1.size() + vch2.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
      "path": "bip-???-cat.mediawiki",
      "position": null,
      "original_position": 53,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "83ca57f22268edb1ff2815085a4383ba8d1b55fe",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    if (vch1.size() + vch2.size() > MAX_SCRIPT_ELEMENT_SIZE) {\r\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n    }\r\n```",
      "created_at": "2023-12-12T12:31:22Z",
      "updated_at": "2023-12-12T12:34:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1423925496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423925496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": 52,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423926258",
      "pull_request_review_id": 1777360806,
      "id": 1423926258,
      "node_id": "PRRC_kwDOAN28mc5U32Py",
      "diff_hunk": "@@ -0,0 +1,89 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\n+* Non-equivocation contracts <ref>T. Ruffing, A. Kate, D. Schröder, \"Liar, Liar, Coins on Fire: Penalizing Equivocation by Loss of Bitcoins\", 2015, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&rep=rep1&type=pdf</ref> in tapscript provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT enables this by enforcing rules on the spending transaction's nonce. The capability is a useful building block for payment channels and other Bitcoin protocols.\n+* Vaults <ref> M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.\n+* Replicating CheckSigFromStack <ref> A. Poelstra, \"CAT and Schnorr Tricks I\", 2021, https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298 </ref> which would allow the creation of simple covenants and other advanced contracts without having to presign spending transactions, possibly reducing complexity and the amount of data that needs to be stored. Originally shown to work with Schnorr signatures, this result has been extended to ECDSA signatures <ref>R. Linus, \"Covenants with CAT and ECDSA\", 2023, https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85#file-covenants_cat_ecdsa-md</ref>.\n+\n+The opcode OP_CAT was available in early versions of Bitcoin. However OP_CAT was removed because it enabled the construction of a script for which an evaluation could have memory usage exponential in the size of the script.\n+For instance a script which pushed an 1 Byte value on the stack then repeated the opcodes OP_DUP, OP_CAT 40 times would result in a stack value whose size was greater than 1 Terabyte. This is no longer an issue because tapscript enforces a maximum stack element size of 520 Bytes.\n+\n+==Specification==\n+\n+OP_CAT pops two elements of the stack, concatenates them together in stack order and pushes the resultant element onto the stack. Given the stack [x1,x2], where x2 is at the top of the stack, OP_CAT will push x1||x2 onto the stack. By '||' we denote concatenation.\n+\n+Implementation\n+<pre>\n+case OP_CAT:\n+{\n+    if (stack.size() < 2)\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    valtype& vch1 = stacktop(-2);\n+    valtype& vch2 = stacktop(-1);\n+    if (vch1.size() + vch2.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    vch1.insert(vch1.end(), vch2.begin(), vch2.end());\n+    stack.pop_back();\n+}\n+break;\n+</pre>\n+This implementation is inspired by the original implementation of OP_CAT as shown below. Alternative implementation of OP_CAT can be found in Elements <ref>Roose S., Elements Project, \"Re-enable several disabled opcodes\", 2019, https://github.com/ElementsProject/elements/commit/13e1103abe3e328c5a4e2039b51a546f8be6c60a#diff-a0337ffd7259e8c7c9a7786d6dbd420c80abfa1afdb34ebae3261109d9ae3c19R740-R759</ref>.",
      "path": "bip-???-cat.mediawiki",
      "position": null,
      "original_position": 59,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "83ca57f22268edb1ff2815085a4383ba8d1b55fe",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThis implementation is inspired by the original implementation of OP_CAT as shown below. An alternative implementation of OP_CAT can be found in Elements <ref>Roose S., Elements Project, \"Re-enable several disabled opcodes\", 2019, https://github.com/ElementsProject/elements/commit/13e1103abe3e328c5a4e2039b51a546f8be6c60a#diff-a0337ffd7259e8c7c9a7786d6dbd420c80abfa1afdb34ebae3261109d9ae3c19R740-R759</ref>.\r\n```",
      "created_at": "2023-12-12T12:32:05Z",
      "updated_at": "2023-12-12T12:34:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1423926258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423926258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423992825",
      "pull_request_review_id": 1777469261,
      "id": 1423992825,
      "node_id": "PRRC_kwDOAN28mc5U4Gf5",
      "diff_hunk": "@@ -0,0 +1,89 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\n+* Non-equivocation contracts <ref>T. Ruffing, A. Kate, D. Schröder, \"Liar, Liar, Coins on Fire: Penalizing Equivocation by Loss of Bitcoins\", 2015, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&rep=rep1&type=pdf</ref> in tapscript provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT enables this by enforcing rules on the spending transaction's nonce. The capability is a useful building block for payment channels and other Bitcoin protocols.\n+* Vaults <ref> M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.\n+* Replicating CheckSigFromStack <ref> A. Poelstra, \"CAT and Schnorr Tricks I\", 2021, https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298 </ref> which would allow the creation of simple covenants and other advanced contracts without having to presign spending transactions, possibly reducing complexity and the amount of data that needs to be stored. Originally shown to work with Schnorr signatures, this result has been extended to ECDSA signatures <ref>R. Linus, \"Covenants with CAT and ECDSA\", 2023, https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85#file-covenants_cat_ecdsa-md</ref>.\n+\n+The opcode OP_CAT was available in early versions of Bitcoin. However OP_CAT was removed because it enabled the construction of a script for which an evaluation could have memory usage exponential in the size of the script.\n+For instance a script which pushed an 1 Byte value on the stack then repeated the opcodes OP_DUP, OP_CAT 40 times would result in a stack value whose size was greater than 1 Terabyte. This is no longer an issue because tapscript enforces a maximum stack element size of 520 Bytes.\n+\n+==Specification==\n+\n+OP_CAT pops two elements of the stack, concatenates them together in stack order and pushes the resultant element onto the stack. Given the stack [x1,x2], where x2 is at the top of the stack, OP_CAT will push x1||x2 onto the stack. By '||' we denote concatenation.\n+\n+Implementation\n+<pre>\n+case OP_CAT:\n+{\n+    if (stack.size() < 2)\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+    valtype& vch1 = stacktop(-2);\n+    valtype& vch2 = stacktop(-1);\n+    if (vch1.size() + vch2.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
      "path": "bip-???-cat.mediawiki",
      "position": null,
      "original_position": 53,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "83ca57f22268edb1ff2815085a4383ba8d1b55fe",
      "in_reply_to_id": 1423925496,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@kallewoof Thanks for the help!",
      "created_at": "2023-12-12T13:27:57Z",
      "updated_at": "2023-12-12T13:27:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1423992825",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1423992825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": 52,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427494652",
      "pull_request_review_id": 1783046400,
      "id": 1427494652,
      "node_id": "PRRC_kwDOAN28mc5VFdb8",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.",
      "path": "bip-???-cat.mediawiki",
      "position": 16,
      "original_position": 16,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThis BIP reintroduces OP_CAT in the form of a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\r\n```",
      "created_at": "2023-12-15T02:46:09Z",
      "updated_at": "2023-12-15T02:54:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1427494652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427494652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427494976",
      "pull_request_review_id": 1783046400,
      "id": 1427494976,
      "node_id": "PRRC_kwDOAN28mc5VFdhA",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,",
      "path": "bip-???-cat.mediawiki",
      "position": 20,
      "original_position": 20,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n# concatenates the popped values together,\r\n```",
      "created_at": "2023-12-15T02:46:51Z",
      "updated_at": "2023-12-15T02:54:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1427494976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427494976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427495138",
      "pull_request_review_id": 1783046400,
      "id": 1427495138,
      "node_id": "PRRC_kwDOAN28mc5VFdji",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.",
      "path": "bip-???-cat.mediawiki",
      "position": 23,
      "original_position": 23,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nOP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size greater than the maximum script element size of 520 Bytes.\r\n```",
      "created_at": "2023-12-15T02:47:14Z",
      "updated_at": "2023-12-15T02:54:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1427495138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427495138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427495621",
      "pull_request_review_id": 1783046400,
      "id": 1427495621,
      "node_id": "PRRC_kwDOAN28mc5VFdrF",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.",
      "path": "bip-???-cat.mediawiki",
      "position": 26,
      "original_position": 26,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nBitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. This prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\r\n```\r\n\r\n(Alternatively, \"For instance this prevents the ability to...\". Both \"For instance\" and \"many other things\" seem redundant.)",
      "created_at": "2023-12-15T02:48:14Z",
      "updated_at": "2023-12-15T02:54:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1427495621",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427495621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427496335",
      "pull_request_review_id": 1783046400,
      "id": 1427496335,
      "node_id": "PRRC_kwDOAN28mc5VFd2P",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>",
      "path": "bip-???-cat.mediawiki",
      "position": 32,
      "original_position": 32,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely require the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\r\n```",
      "created_at": "2023-12-15T02:49:53Z",
      "updated_at": "2023-12-15T02:54:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1427496335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427496335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427496713",
      "pull_request_review_id": 1783046400,
      "id": 1427496713,
      "node_id": "PRRC_kwDOAN28mc5VFd8J",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\n+* Non-equivocation contracts <ref>T. Ruffing, A. Kate, D. Schröder, \"Liar, Liar, Coins on Fire: Penalizing Equivocation by Loss of Bitcoins\", 2015, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&rep=rep1&type=pdf</ref> in tapscript provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT enables this by enforcing rules on the spending transaction's nonce. The capability is a useful building block for payment channels and other Bitcoin protocols.\n+* Vaults <ref> M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.",
      "path": "bip-???-cat.mediawiki",
      "position": 34,
      "original_position": 34,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Vaults <ref>M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.\r\n```",
      "created_at": "2023-12-15T02:50:49Z",
      "updated_at": "2023-12-15T02:54:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1427496713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427496713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427496956",
      "pull_request_review_id": 1783046400,
      "id": 1427496956,
      "node_id": "PRRC_kwDOAN28mc5VFd_8",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\n+* Non-equivocation contracts <ref>T. Ruffing, A. Kate, D. Schröder, \"Liar, Liar, Coins on Fire: Penalizing Equivocation by Loss of Bitcoins\", 2015, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&rep=rep1&type=pdf</ref> in tapscript provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT enables this by enforcing rules on the spending transaction's nonce. The capability is a useful building block for payment channels and other Bitcoin protocols.\n+* Vaults <ref> M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.\n+* Replicating CheckSigFromStack <ref> A. Poelstra, \"CAT and Schnorr Tricks I\", 2021, https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298 </ref> which would allow the creation of simple covenants and other advanced contracts without having to presign spending transactions, possibly reducing complexity and the amount of data that needs to be stored. Originally shown to work with Schnorr signatures, this result has been extended to ECDSA signatures <ref>R. Linus, \"Covenants with CAT and ECDSA\", 2023, https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85#file-covenants_cat_ecdsa-md</ref>.",
      "path": "bip-???-cat.mediawiki",
      "position": 35,
      "original_position": 35,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Replicating CheckSigFromStack <ref>A. Poelstra, \"CAT and Schnorr Tricks I\", 2021, https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298</ref> which would allow the creation of simple covenants and other advanced contracts without having to presign spending transactions, possibly reducing complexity and the amount of data that needs to be stored. Originally shown to work with Schnorr signatures, this result has been extended to ECDSA signatures <ref>R. Linus, \"Covenants with CAT and ECDSA\", 2023, https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85#file-covenants_cat_ecdsa-md</ref>.\r\n```",
      "created_at": "2023-12-15T02:51:22Z",
      "updated_at": "2023-12-15T02:54:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1427496956",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427496956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427497517",
      "pull_request_review_id": 1783046400,
      "id": 1427497517,
      "node_id": "PRRC_kwDOAN28mc5VFeIt",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+<pre>\n+  BIP: ???\n+  Layer: Consensus (soft fork)\n+  Title: OP_CAT\n+  Author: Ethan Heilman <ethan.r.heilman@gmail.com>\n+          Armin Sabouri <arminsdev@gmail.com>\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-10-21\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-op-cat\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines OP_CAT a new tapscript opcode which allows the concatenation of two values on the stack. This opcode would be activated via a soft fork by redefining the opcode OP_SUCCESS126.\n+\n+When evaluated the OP_CAT instruction:\n+# Pops the top two values off the stack,\n+# concatenate the popped values together,\n+# and then pushes the concatenated value on the top of the stack.\n+\n+OP_CAT fails if there are less than two values on the stack or if a concatenated value would have a combined size of greater than the maximum script element size of 520 Bytes.\n+\n+==Motivation==\n+Bitcoin tapscript lacks a general purpose way of combining objects on the stack restricting the expressiveness and power of tapscript. For instance this prevents among many other things the ability to construct and evaluate merkle trees and other hashed data structures in tapscript. OP_CAT by adding a general purpose way to concatenate stack values would overcome this limitation and greatly increase the functionality of tapscript.\n+\n+OP_CAT aims to expands the toolbox of the tapscript developer with a simple, modular and useful opcode in the spirit of Unix <ref>R. Pike and B. Kernighan, \"Program design in the UNIX environment\", 1983, https://harmful.cat-v.org/cat-v/unix_prog_design.pdf</ref>. To demonstrate the usefulness of OP_CAT below we provide a non-exhaustive list of some usecases that OP_CAT would enable:\n+\n+* Bitstream, a protocol for the atomic swap (fair exchange) of bitcoins for decryption keys, that enables decentralized file hosting systems paid in Bitcoin. While such swaps are currently possible on Bitcoin without OP_CAT they require the use of complex and computationally expensive Verifiable Computation cryptographic techniques. OP_CAT would remove this requirement on Verifiable Computation, making such protocols far more practical to build in Bitcoin. <ref>R. Linus, \"BitStream: Decentralized File Hosting Incentivised via Bitcoin Payments\", 2023, https://robinlinus.com/bitstream.pdf</ref>\n+* Tree Signatures provide a multisignature script whose size can be logarithmic in the number of public keys and can encode spend conditions beyond n-of-m. For instance a transaction less than 1KB in size could support tree signatures with a thousand public keys. This also enables generalized logical spend conditions. <ref> P. Wuille, \"Multisig on steroids using tree signatures\", 2015, https://blog.blockstream.com/en-treesignatures/</ref>\n+* Post-Quantum Lamport Signatures in Bitcoin transactions. Lamport signatures merely requires the ability to hash and concatenate values on the stack. <ref>J. Rubin, \"[bitcoin-dev] OP_CAT Makes Bitcoin Quantum Secure [was CheckSigFromStack for Arithmetic Values]\", 2021, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019233.html</ref>\n+* Non-equivocation contracts <ref>T. Ruffing, A. Kate, D. Schröder, \"Liar, Liar, Coins on Fire: Penalizing Equivocation by Loss of Bitcoins\", 2015, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.6262&rep=rep1&type=pdf</ref> in tapscript provide a mechanism to punish equivocation/double spending in Bitcoin payment channels. OP_CAT enables this by enforcing rules on the spending transaction's nonce. The capability is a useful building block for payment channels and other Bitcoin protocols.\n+* Vaults <ref> M. Moser, I. Eyal, and E. G. Sirer, Bitcoin Covenants, http://fc16.ifca.ai/bitcoin/papers/MES16.pdf</ref> which are a specialized covenant that allows a user to block a malicious party who has compromised the user's secret key from stealing the funds in that output. As shown in <ref>A. Poelstra, \"CAT and Schnorr Tricks II\", 2021, https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html</ref> OP_CAT is sufficent to build vaults in Bitcoin.\n+* Replicating CheckSigFromStack <ref> A. Poelstra, \"CAT and Schnorr Tricks I\", 2021, https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298 </ref> which would allow the creation of simple covenants and other advanced contracts without having to presign spending transactions, possibly reducing complexity and the amount of data that needs to be stored. Originally shown to work with Schnorr signatures, this result has been extended to ECDSA signatures <ref>R. Linus, \"Covenants with CAT and ECDSA\", 2023, https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85#file-covenants_cat_ecdsa-md</ref>.\n+\n+The opcode OP_CAT was available in early versions of Bitcoin. However OP_CAT was removed because it enabled the construction of a script for which an evaluation could have memory usage exponential in the size of the script.\n+For instance a script which pushed an 1 Byte value on the stack then repeated the opcodes OP_DUP, OP_CAT 40 times would result in a stack value whose size was greater than 1 Terabyte. This is no longer an issue because tapscript enforces a maximum stack element size of 520 Bytes.",
      "path": "bip-???-cat.mediawiki",
      "position": 38,
      "original_position": 38,
      "commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "original_commit_id": "3d31e5c8947bf5d2d8ba02dc22c5302085b9f91b",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nFor instance a script which pushed a 1 Byte value on the stack and then repeated the opcodes OP_DUP, OP_CAT 40 times would result in a stack value whose size was greater than 1 Terabyte. This is no longer an issue because tapscript enforces a maximum stack element size of 520 Bytes.\r\n```",
      "created_at": "2023-12-15T02:52:49Z",
      "updated_at": "2023-12-15T02:54:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1525#discussion_r1427497517",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1427497517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1525"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    }
  ]
}