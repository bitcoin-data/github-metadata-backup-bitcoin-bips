{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1610",
    "id": 1907628789,
    "node_id": "PR_kwDOAN28mc5xtBr1",
    "html_url": "https://github.com/bitcoin/bips/pull/1610",
    "diff_url": "https://github.com/bitcoin/bips/pull/1610.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1610.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1610/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/94ac21c60d6b432c766116a5dd0156673d8cc09c",
    "number": 1610,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP miniscript",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2024-06-06T16:20:48Z",
    "updated_at": "2024-06-11T21:49:28Z",
    "mergeable": true,
    "mergeable_state": "unstable",
    "merge_commit_sha": "d9a801508cc7743e36f15d52420020a4e8d8b42f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:miniscript",
      "ref": "miniscript",
      "sha": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45007004,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNzAwNA==",
        "name": "bips",
        "full_name": "achow101/bips",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bips",
        "archive_url": "https://api.github.com/repos/achow101/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bips/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bips/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bips/downloads",
        "events_url": "https://api.github.com/repos/achow101/bips/events",
        "forks_url": "https://api.github.com/repos/achow101/bips/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bips.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bips/languages",
        "merges_url": "https://api.github.com/repos/achow101/bips/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bips.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bips/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bips/tags",
        "teams_url": "https://api.github.com/repos/achow101/bips/teams",
        "trees_url": "https://api.github.com/repos/achow101/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bips.git",
        "hooks_url": "https://api.github.com/repos/achow101/bips/hooks",
        "svn_url": "https://github.com/achow101/bips",
        "homepage": "bitcoin.org",
        "language": "Python",
        "forks_count": 1,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 15086,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-06-11T21:48:59Z",
        "created_at": "2015-10-27T00:37:26Z",
        "updated_at": "2024-05-22T13:13:57Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "85cda4e225b4d5fd7aff403f69d827f23f6afbbc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5280,
        "stargazers_count": 9090,
        "watchers_count": 9090,
        "size": 15073,
        "default_branch": "master",
        "open_issues_count": 46,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-06-11T21:49:01Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2024-06-11T18:23:59Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 417,
    "deletions": 0,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 11,
    "comments": 8
  },
  "events": [
    {
      "event": "labeled",
      "id": 13069993789,
      "node_id": "LE_lADOAN28mc6LZS8tzwAAAAMLCEc9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13069993789",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T17:17:44Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2161373088,
      "node_id": "IC_kwDOAN28mc6A0--g",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161373088",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:29:59Z",
      "updated_at": "2024-06-11T18:29:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Was wondering whether @sipa, @apoelstra, @sanket1729, @darosior might want to review this?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161373088",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13121225701,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOFgPl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225701",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "subscribed",
      "id": 13121225717,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOFgP1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225717",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "mentioned",
      "id": 13121225729,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOFgQB",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225729",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "subscribed",
      "id": 13121225739,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOFgQL",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225739",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "mentioned",
      "id": 13121225755,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOFgQb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225755",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "subscribed",
      "id": 13121225764,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOFgQk",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225764",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:01Z"
    },
    {
      "event": "mentioned",
      "id": 13121225787,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOFgQ7",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225787",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:02Z"
    },
    {
      "event": "subscribed",
      "id": 13121225800,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOFgRI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121225800",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:30:02Z"
    },
    {
      "event": "commented",
      "id": 2161407987,
      "node_id": "IC_kwDOAN28mc6A1Hfz",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161407987",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:51:22Z",
      "updated_at": "2024-06-11T18:51:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "For the most part this looks great to me. In 3282c75eea9eb2698288c8d72e9a6af6f70b0e7c:\r\n\r\n* There is trailing whitespace on a couple of lines.\r\n* The definition of \"non-canonical\" doesn't make sense to me (and I forget what the correct definition is supposed to be :) @sipa do you remember?)\r\n* I think the `Type system` section (lowercase `s`) should be moved up and folded into the `Type System` section (uppercase `s`).\r\n",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161407987",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13121450566,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOGXJG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121450566",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:51:23Z"
    },
    {
      "event": "subscribed",
      "id": 13121450572,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOGXJM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13121450572",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:51:23Z"
    },
    {
      "event": "commented",
      "id": 2161501690,
      "node_id": "IC_kwDOAN28mc6A1eX6",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161501690",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:53:24Z",
      "updated_at": "2024-06-11T19:53:24Z",
      "author_association": "MEMBER",
      "body": "@apoelstra I think it's roughly right. Non-canonical (dis)satisfactions are ones that are valid by script semantics (and thus need to be taken into account when they're available to malleators, e.g.), but can be proven to never be used by the specified non-malleable satisfaction algorithm.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161501690",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13122073627,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOIvQb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122073627",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:53:24Z"
    },
    {
      "event": "subscribed",
      "id": 13122073648,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOIvQw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122073648",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:53:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13122121577,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMOI69p",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122121577",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:57:29Z"
    },
    {
      "event": "commented",
      "id": 2161510484,
      "node_id": "IC_kwDOAN28mc6A1ghU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161510484",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T19:59:15Z",
      "updated_at": "2024-06-11T19:59:15Z",
      "author_association": "MEMBER",
      "body": "> There is trailing whitespace on a couple of lines.\r\n\r\nFixed\r\n\r\n\r\n\r\n> I think the `Type system` section (lowercase `s`) should be moved up and folded into the `Type System` section (uppercase `s`).\r\n\r\nThis was a deliberate decision to split the discussion/reasoning/explanation of things away from the specification. The types are explained in the discussion section since an implementor does not need to understand what each type means in order to implement miniscript.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161510484",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2161512509,
      "node_id": "IC_kwDOAN28mc6A1hA9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161512509",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:00:36Z",
      "updated_at": "2024-06-11T20:00:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa ok, rereading the text, I understand it now, but I think it's worded in a confusing way. The text says \"are not necessary to produce correct witnesses\", but the surrounding text is not about the satisfaction algorithm and it's not clear who they're \"not necessary\" to. My read of it was that they weren't necessary *to the spec*, in which case, why are they listed, and why aren't they necessary.\r\n\r\nI think the text in your comment (they are provably unused by the satisfaction algorithm but they are legal according to consensus rules and available to malleators) is much better.\r\n\r\n>This was a deliberate decision to split the discussion/reasoning/explanation of things away from the specification. The types are explained in the discussion section since an implementor does not need to understand what each type means in order to implement miniscript.\r\n\r\nOk, yeah, that's reasonable. I rescind my request then.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161512509",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "mentioned",
      "id": 13122160572,
      "node_id": "MEE_lADOAN28mc6LZS8tzwAAAAMOJEe8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122160572",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:00:37Z"
    },
    {
      "event": "subscribed",
      "id": 13122160592,
      "node_id": "SE_lADOAN28mc6LZS8tzwAAAAMOJEfQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122160592",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:00:37Z"
    },
    {
      "event": "commented",
      "id": 2161514130,
      "node_id": "IC_kwDOAN28mc6A1haS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161514130",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:01:37Z",
      "updated_at": "2024-06-11T20:01:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK d2f8b25ba2c0ce174c9e8c34acb4d5b7ba6affd0 except that I'd still like the first occurrence of \"non-canonical\" to be changed to have a clearer definition.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161514130",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2161517188,
      "node_id": "IC_kwDOAN28mc6A1iKE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161517188",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:03:31Z",
      "updated_at": "2024-06-11T20:03:31Z",
      "author_association": "MEMBER",
      "body": "> I'd still like the first occurrence of \"non-canonical\" to be changed to have a clearer definition.\r\n\r\nSuggest some words please?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161517188",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "commented",
      "id": 2161525663,
      "node_id": "IC_kwDOAN28mc6A1kOf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2161525663",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:08:50Z",
      "updated_at": "2024-06-11T20:09:11Z",
      "author_association": "CONTRIBUTOR",
      "body": ">Some options are not actually necessary to produce correct witnesses, and are called *non-canonical* options.\r\n\r\nshould be\r\n\r\n>Some options are inefficient and provably unnecessary to the satisfaction algorithm described below, but are valid according to Script rules and could be used by a malleator or other non-standard actor. These are called *non-canonical* options, and are listed for completeness...",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#issuecomment-2161525663",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1610"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13122536830,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMOKgV-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13122536830",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:36:18Z"
    },
    {
      "event": "reviewed",
      "id": 2111432181,
      "node_id": "PRR_kwDOAN28mc592eX1",
      "url": null,
      "actor": null,
      "commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#pullrequestreview-2111432181",
      "submitted_at": "2024-06-11T20:49:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
    },
    {
      "event": "reviewed",
      "id": 2111435372,
      "node_id": "PRR_kwDOAN28mc592fJs",
      "url": null,
      "actor": null,
      "commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "A few quick comments.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1610#pullrequestreview-2111435372",
      "submitted_at": "2024-06-11T20:59:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk0YWMyMWM2MGQ2YjQzMmM3NjYxMTZhNWRkMDE1NjY3M2Q4Y2MwOWM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "tree": {
        "sha": "bb017362371f5d395172d3db0e1a174584eaa981",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bb017362371f5d395172d3db0e1a174584eaa981"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/70d9b07ab80ab3c267ece48f74e4e2250226d0cc",
          "sha": "70d9b07ab80ab3c267ece48f74e4e2250226d0cc",
          "html_url": "https://github.com/bitcoin/bips/commit/70d9b07ab80ab3c267ece48f74e4e2250226d0cc"
        }
      ],
      "message": "BIP miniscript: Specify Miniscript\n\nCo-Authored-By: Antoine Poinsot <darosior@protonmail.com>",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-06-11T21:48:57Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-04-10T13:37:34Z"
      },
      "sha": "94ac21c60d6b432c766116a5dd0156673d8cc09c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13123110732,
      "node_id": "HRFPE_lADOAN28mc6LZS8tzwAAAAMOMsdM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13123110732",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T21:49:00Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635468427",
      "pull_request_review_id": 2111435372,
      "id": 1635468427,
      "node_id": "PRRC_kwDOAN28mc5he0SL",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 49,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "BIP141 specifies the P2WSH consensus rules (BIP143 is just the sighash scheme)",
      "created_at": "2024-06-11T20:51:38Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635468427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635468427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635469072",
      "pull_request_review_id": 2111435372,
      "id": 1635469072,
      "node_id": "PRRC_kwDOAN28mc5he0cQ",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 59,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't generally permit spaces in descriptor notation.",
      "created_at": "2024-06-11T20:52:20Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635469072",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635469072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635471120",
      "pull_request_review_id": 2111435372,
      "id": 1635471120,
      "node_id": "PRRC_kwDOAN28mc5he08Q",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 73,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps a sentence like \"From a user's perspective, Miniscript is not a separate language, but a (significant) expansion of the descriptor language\"? Alternatively, this could go in the Abstract too.",
      "created_at": "2024-06-11T20:54:36Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635471120",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635471120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635472033",
      "pull_request_review_id": 2111435372,
      "id": 1635472033,
      "node_id": "PRRC_kwDOAN28mc5he1Kh",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 123,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: consistency, either \"zero-arg\" and \"one-arg\", or \"zero arg\" and \"one arg\".",
      "created_at": "2024-06-11T20:55:31Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635472033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635472033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635472732",
      "pull_request_review_id": 2111435372,
      "id": 1635472732,
      "node_id": "PRRC_kwDOAN28mc5he1Vc",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).",
      "path": "bip-miniscript.md",
      "position": 125,
      "original_position": 124,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The typing rules for timelock mixing don't seem to be included here.",
      "created_at": "2024-06-11T20:56:17Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635472732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635472732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635473445",
      "pull_request_review_id": 2111435372,
      "id": 1635473445,
      "node_id": "PRRC_kwDOAN28mc5he1gl",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u\n+| `multi_a(k,key_1,...,key_n)` | 1 &le; k &le; n                                       | B           | d; u\n+| `a:X`                        | X is B                                                | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `s:X`                        | X is Bo                                               | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `c:X`                        | X is K                                                | B           | o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+| `d:X`                        | X is Vz                                               | B           | o; n; d; *(Tapscript only)* u\n+| `v:X`                        | X is B                                                | V           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>\n+| `j:X`                        | X is Bn                                               | B           | o=o<sub>X</sub>; n; d; u=u<sub>X</sub>\n+| `n:X`                        | X is B                                                | B           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+\n+\n+#### Malleability\n+\n+Malleability is the ability for a third party (*not* a participant in the script) to modify an",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 161,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"participant\" could be made more specific: \"*not* someone who holds a participating private key\".",
      "created_at": "2024-06-11T20:57:02Z",
      "updated_at": "2024-06-11T20:59:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635473445",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635473445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635516999",
      "pull_request_review_id": 2111509144,
      "id": 1635516999,
      "node_id": "PRRC_kwDOAN28mc5hfAJH",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 49,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635468427,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-06-11T21:49:06Z",
      "updated_at": "2024-06-11T21:49:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635516999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635516999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517054",
      "pull_request_review_id": 2111509225,
      "id": 1635517054,
      "node_id": "PRRC_kwDOAN28mc5hfAJ-",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 59,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635469072,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-06-11T21:49:10Z",
      "updated_at": "2024-06-11T21:49:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635517054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517148",
      "pull_request_review_id": 2111509341,
      "id": 1635517148,
      "node_id": "PRRC_kwDOAN28mc5hfALc",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 73,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635471120,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-06-11T21:49:17Z",
      "updated_at": "2024-06-11T21:49:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635517148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517195",
      "pull_request_review_id": 2111509414,
      "id": 1635517195,
      "node_id": "PRRC_kwDOAN28mc5hfAML",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 123,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635472033,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-06-11T21:49:21Z",
      "updated_at": "2024-06-11T21:49:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635517195",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517273",
      "pull_request_review_id": 2111509549,
      "id": 1635517273,
      "node_id": "PRRC_kwDOAN28mc5hfANZ",
      "diff_hunk": "@@ -0,0 +1,409 @@\n+<pre>\n+  BIP: miniscript\n+  Layer: Applications\n+  Title: Miniscript\n+  Author: Pieter Wuille <pieter@wuille.net>\n+          Andrew Poelstra <andrew.poelstra@gmail.com>\n+          Sanket Kanjalkar <sanket1729@gmail.com>\n+          Antoine Poinsot <darosior@protonmail.com>\n+          Ava Chow <me@achow101.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-miniscript\n+  Status: Draft\n+  Type: Informational\n+  Created: 2023-10-10\n+  License: CC0-1.0\n+</pre>\n+\n+## Abstract\n+\n+This document specifies Miniscript, a language for writing (a subset of) Bitcoin Scripts in a\n+structured way, enabling analysis, composition, generic signing and more.\n+\n+## Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+## Motivation\n+\n+Bitcoin Script is an unusual stack-based language with many edge cases, designed for implementing\n+spending conditions consisting of various combinations of signatures, hash locks, and time locks.\n+Yet despite being limited in functionality it is still highly nontrivial to:\n+\n+* Given a combination of spending conditions, finding the most economical script to implement it.\n+* Given two scripts, construct a script that implements a composition of their spending conditions (e.g. a multisig where one of the \"keys\" is another multisig).\n+* Given a script, find out what spending conditions it permits.\n+* Given a script and access to a sufficient set of private keys, construct a general satisfying witness for it.\n+* Given a script, be able to predict the cost of spending an output.\n+* Given a script, know whether particular resource limitations like the ops limit might be hit when spending.\n+\n+Miniscript functions as a representation for scripts that makes this sort of operations possible.\n+It has a structure that allows composition. It is very easy to statically analyze for various\n+properties (spending conditions, correctness, security properties, malleability, ...). It can be\n+targeted by spending policy compilers. Finally, compatible scripts can easily be converted to\n+Miniscript form - avoiding the need for additional metadata for e.g. signing devices that support\n+it.\n+\n+## Specification\n+\n+These specifications apply to P2WSH (BIP143) and Tapscript (BIP342) scripts, with only minor\n+variations between the two. Differences are noted inline. Unless explicitly stated specifications\n+apply to both. P2SH and bare scripts are excluded from this specification.\n+\n+### Translation Table\n+\n+Miniscript consists of a set of script *fragments* which are designed to be safely and correctly composabe.\n+\n+This table shows all Miniscript *fragments* and their associated semantics and Bitcoin Script.\n+Fragments that do not change the semantics of their subexpressions are called *wrappers*. Normal\n+fragments use a `fragment(arg1, arg2, ..)` notation, while wrappers are written using\n+prefixes separated from other fragments by a colon. The colon is dropped between subsequent\n+wrappers; e.g.  `dv:older(144)` is the `d:` wrapper applied to the\n+`v:` wrapper applied to the `older` fragment for 144 blocks.\n+\n+The `pk`, `pkh`, and `and_n` fragments and `t:`,\n+`l:`, and `u:` wrappers are syntactic sugar for other Miniscripts, as listed\n+in the table below. Note that `<20>` are in hex representation in this document.\n+\n+Miniscript fragments are expected to be used in [BIP 382](bip-0382.mediawiki) `wsh()` descriptors\n+and [BIP 386](bip-0386.mediawiki) `tr()` descriptors. Key expressions are specified in\n+[BIP 380](bip-0380.mediawiki#user-content-Key_Expressions). Additionally, BIPs 382 and 386 specify\n+restrictions on key expressions and what they resolve to - these apply to key expressions in\n+Miniscript. BIP 382's key expression restrictions apply to Miniscript in P2WSH contexts, and BIP\n+386's key expression restrictions apply to Miniscript in P2TR contexts.\n+\n+| Semantics                                                | Miniscript Fragment           | Bitcoin Script\n+|----------------------------------------------------------|-------------------------------|---------------\n+| false                                                    | `0`                           | `0`\n+| true                                                     | `1`                           | `1`\n+| check(key)                                               | `pk_k(key)`                   | `<key>`\n+|                                                          | `pk_h(key)`                   | ` DUP HASH160 <HASH160(key)> EQUALVERIFY `\n+|                                                          | `pk(key)` = `c:pk_k(key)`     | `<key> CHECKSIG`\n+|                                                          | `pkh(key)` = `c:pk_h(key)`    | ` DUP HASH160 <HASH160(key)> EQUALVERIFY CHECKSIG`\n+| nSequence ≥ n (and compatible)                           | `older(n)`                    | `<n> CHECKSEQUENCEVERIFY`\n+| nLockTime ≥ n (and compatible)                           | `after(n)`                    | `<n> CHECKLOCKTIMEVERIFY`\n+| len(x) = 32 and SHA256(x) = h                            | `sha256(h)`                   | `SIZE <20> EQUALVERIFY SHA256 <h> EQUAL`\n+| len(x) = 32 and HASH256(x) = h                           | `hash256(h)`                  | `SIZE <20> EQUALVERIFY HASH256 <h> EQUAL`\n+| len(x) = 32 and RIPEMD160(x) = h                         | `ripemd160(h)`                | `SIZE <20> EQUALVERIFY RIPEMD160 <h> EQUAL`\n+| len(x) = 32 and HASH160(x) = h                           | `hash160(h)`                  | `SIZE <20> EQUALVERIFY HASH160 <h> EQUAL`\n+| (X and Y) or Z                                           | `andor(X,Y,Z)`                | `[X] NOTIF [Z] ELSE [Y] ENDIF`\n+| X and Y                                                  | `and_v(X,Y)`                  | `[X] [Y]`\n+|                                                          | `and_b(X,Y)`                  | `[X] [Y] BOOLAND`\n+|                                                          | `and_n(X,Y)` = `andor(X,Y,0)` | `[X] NOTIF 0 ELSE [Y] ENDIF`\n+| X or Z                                                   | `or_b(X,Z)`                   | `[X] [Z] BOOLOR`\n+|                                                          | `or_c(X,Z)`                   | `[X] NOTIF [Z] ENDIF`\n+|                                                          | `or_d(X,Z)`                   | `[X] IFDUP NOTIF [Z] ENDIF`\n+|                                                          | `or_i(X,Z)`                   | `IF [X] ELSE [Z] ENDIF`\n+| X_1 + ... + X_n = k                                      | `thresh(k,X_1,...,X_n)`       | `[X_1] [X_2] ADD ... [X_n] ADD ... <k> EQUAL`\n+| check(key_1) + ... + check(key_n) = k *(P2WSH only)*     | `multi(k,key_1,...,key_n)`    | `<k> <key_1> ... <key_n> <n> CHECKMULTISIG`\n+| check(key_1) + ... + check(key_n) = k *(Tapscript only)* | `multi_a(k,key_1,...,key_n)`  | `<key_1> CHECKSIG <key_2> CHECKSIGADD ... <key_n> CHECKSIGADD <k> NUMEQUAL`\n+| X (identities)                                           | `a:X`                         | `TOALTSTACK [X] FROMALTSTACK`\n+|                                                          | `s:X`                         | `SWAP [X]`\n+|                                                          | `c:X`                         | `[X] CHECKSIG`\n+|                                                          | `t:X` = `and_v(X,1)`          | `[X] 1`\n+|                                                          | `d:X`                         | `DUP IF [X] ENDIF`\n+|                                                          | `v:X`                         | `[X] VERIFY (or VERIFY version of last opcode in [X])`\n+|                                                          | `j:X`                         | `SIZE 0NOTEQUAL IF [X] ENDIF`\n+|                                                          | `n:X`                         | `[X] 0NOTEQUAL`\n+|                                                          | `l:X` = `or_i(0,X)`           | `IF 0 ELSE [X] ENDIF`\n+|                                                          | `u:X` = `or_i(X,0)`           | `IF [X] ELSE 0 ENDIF`\n+\n+### Type System\n+\n+Not every Miniscript expression can be composed with every other. Some return their result by\n+putting true or false on the stack; others can only abort or continue. Some require subexpressions\n+that consume an exactly known number of arguments, while others need a subexpression that has a\n+nonzero top stack element to satisfy. To model all these properties, we define a correctness type\n+system for Miniscript.\n+\n+#### Correctness\n+\n+Every miniscript expression has one of four basic types: \"**B**\" (base), \"**V**\" (verify),\n+\"**K**\" (key) and \"**W**\" (wrapped). Then there are 6 type modifiers which guarantee additional\n+properties: \"**z**\" (zero arg), \"**o**\" (one-arg), \"**n**\" (nonzero), \"**d**\"\n+(dissatisfiable), \"**u**\" (unit) and \"**k**\" (no timelock mixing).\n+\n+The following table lists the correctness requirements for each of the Miniscript expressions, and\n+its type properties in function of those of their subexpressions.\n+\n+| Miniscript                   | Requires                                              | Type        | Properties\n+|------------------------------|-------------------------------------------------------|-------------|-----------\n+| `0`                          |                                                       | B           | z; u; d\n+| `1`                          |                                                       | B           | z; u\n+| `pk_k(key)`                  |                                                       | K           | o; n; d; u\n+| `pk_h(key)`                  |                                                       | K           | n; d; u\n+| `older(n)`, `after(n)`       | 1 &le; n &lt; 2<sup>31</sup>                          | B           | z\n+| `sha256(h)`                  |                                                       | B           | o; n; d; u\n+| `ripemd160(h)`               |                                                       | B           | o; n; d; u\n+| `hash256(h)`                 |                                                       | B           | o; n; d; u\n+| `hash160(h)`                 |                                                       | B           | o; n; d; u\n+| `andor(X,Y,Z)`               | X is Bdu; Y and Z are both B, K, or V                 | same as Y/Z | z=z<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Y</sub>o<sub>Z</sub> or o<sub>X</sub>z<sub>Y</sub>z<sub>Z</sub>; u=u<sub>Y</sub>u<sub>Z</sub>; d=d<sub>Z</sub>\n+| `and_v(X,Y)`                 | X is V; Y is B, K, or V                               | same as Y   | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; u=u<sub>Y</sub>\n+| `and_b(X,Y)`                 | X is B; Y is W                                        | B           | z=z<sub>X</sub>z<sub>Y</sub>; o=z<sub>X</sub>o<sub>Y</sub> or z<sub>Y</sub>o<sub>X</sub>; n=n<sub>X</sub> or z<sub>X</sub>n<sub>Y</sub>; d=d<sub>X</sub>d<sub>Y</sub>; u\n+| `or_b(X,Z)`                  | X is Bd; Z is Wd                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=z<sub>X</sub>o<sub>Z</sub> or z<sub>Z</sub>o<sub>X</sub>; d; u\n+| `or_c(X,Z)`                  | X is Bdu; Z is V                                      | V           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>\n+| `or_d(X,Z)`                  | X is Bdu; Z is B                                      | B           | z=z<sub>X</sub>z<sub>Z</sub>; o=o<sub>X</sub>z<sub>Z</sub>; d=d<sub>Z</sub>; u=u<sub>Z</sub>\n+| `or_i(X,Z)`                  | both are B, K, or V                                   | same as X/Z | o=z<sub>X</sub>z<sub>Z</sub>; u=u<sub>X</sub>u<sub>Z</sub>; d=d<sub>X</sub> or d<sub>Z</sub>\n+| `thresh(k,X_1,...,X_n)`      | 1 &le; k &le; n; X<sub>1</sub> is Bdu; others are Wdu | B           | z=all are z; o=all are z except one is o; d; u\n+| `multi(k,key_1,...,key_n)`   | 1 &le; k &le; n                                       | B           | n; d; u\n+| `multi_a(k,key_1,...,key_n)` | 1 &le; k &le; n                                       | B           | d; u\n+| `a:X`                        | X is B                                                | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `s:X`                        | X is Bo                                               | W           | d=d<sub>X</sub>; u=u<sub>X</sub>\n+| `c:X`                        | X is K                                                | B           | o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+| `d:X`                        | X is Vz                                               | B           | o; n; d; *(Tapscript only)* u\n+| `v:X`                        | X is B                                                | V           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>\n+| `j:X`                        | X is Bn                                               | B           | o=o<sub>X</sub>; n; d; u=u<sub>X</sub>\n+| `n:X`                        | X is B                                                | B           | z=z<sub>X</sub>; o=o<sub>X</sub>; n=n<sub>X</sub>; d=d<sub>X</sub>; u\n+\n+\n+#### Malleability\n+\n+Malleability is the ability for a third party (*not* a participant in the script) to modify an",
      "path": "bip-miniscript.md",
      "position": null,
      "original_position": 161,
      "commit_id": "94ac21c60d6b432c766116a5dd0156673d8cc09c",
      "original_commit_id": "da4ca97260b7ed5aa66b5c02d032caecb3d9adb1",
      "in_reply_to_id": 1635473445,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-06-11T21:49:28Z",
      "updated_at": "2024-06-11T21:49:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1610#discussion_r1635517273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1635517273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1610"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    }
  ]
}