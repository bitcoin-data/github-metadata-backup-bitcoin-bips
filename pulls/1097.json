{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1097",
    "id": 608749251,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjA4NzQ5MjUx",
    "html_url": "https://github.com/bitcoin/bips/pull/1097",
    "diff_url": "https://github.com/bitcoin/bips/pull/1097.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1097.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1097/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/c9249b230b43e572dd29a29c43216ef805f6943e",
    "number": 1097,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "BIP 129: Bitcoin Secure Multisig Setup (BSMS)",
    "user": {
      "login": "hugohn",
      "id": 4769925,
      "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugohn",
      "html_url": "https://github.com/hugohn",
      "followers_url": "https://api.github.com/users/hugohn/followers",
      "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
      "organizations_url": "https://api.github.com/users/hugohn/orgs",
      "repos_url": "https://api.github.com/users/hugohn/repos",
      "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hugohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR proposes a standardized process for setting up Bitcoin multisig wallets securely.\r\n\r\nOriginal mailing list discussion: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html\r\nOriginal draft PR: https://github.com/nunchuk-io/bips/pull/1",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2021-04-05T06:49:28Z",
    "updated_at": "2021-10-31T18:25:06Z",
    "closed_at": "2021-05-15T04:29:03Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-05-15T04:29:03Z",
    "merge_commit_sha": "5bbfab9c565b6d2acd60446b913eb32a510709a7",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "hugohn:bip-hugonguyen-bsms",
      "ref": "bip-hugonguyen-bsms",
      "sha": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 311829649,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMTE4Mjk2NDk=",
        "name": "bips",
        "full_name": "hugohn/bips",
        "owner": {
          "login": "hugohn",
          "id": 4769925,
          "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hugohn",
          "html_url": "https://github.com/hugohn",
          "followers_url": "https://api.github.com/users/hugohn/followers",
          "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
          "organizations_url": "https://api.github.com/users/hugohn/orgs",
          "repos_url": "https://api.github.com/users/hugohn/repos",
          "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/hugohn/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/hugohn/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/hugohn/bips",
        "archive_url": "https://api.github.com/repos/hugohn/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/hugohn/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/hugohn/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/hugohn/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/hugohn/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/hugohn/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/hugohn/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/hugohn/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/hugohn/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/hugohn/bips/contributors",
        "deployments_url": "https://api.github.com/repos/hugohn/bips/deployments",
        "downloads_url": "https://api.github.com/repos/hugohn/bips/downloads",
        "events_url": "https://api.github.com/repos/hugohn/bips/events",
        "forks_url": "https://api.github.com/repos/hugohn/bips/forks",
        "git_commits_url": "https://api.github.com/repos/hugohn/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/hugohn/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/hugohn/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/hugohn/bips.git",
        "issue_comment_url": "https://api.github.com/repos/hugohn/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/hugohn/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/hugohn/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/hugohn/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/hugohn/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/hugohn/bips/languages",
        "merges_url": "https://api.github.com/repos/hugohn/bips/merges",
        "milestones_url": "https://api.github.com/repos/hugohn/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/hugohn/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/hugohn/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/hugohn/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:hugohn/bips.git",
        "stargazers_url": "https://api.github.com/repos/hugohn/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/hugohn/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/hugohn/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/hugohn/bips/subscription",
        "tags_url": "https://api.github.com/repos/hugohn/bips/tags",
        "teams_url": "https://api.github.com/repos/hugohn/bips/teams",
        "trees_url": "https://api.github.com/repos/hugohn/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/hugohn/bips.git",
        "hooks_url": "https://api.github.com/repos/hugohn/bips/hooks",
        "svn_url": "https://github.com/hugohn/bips",
        "homepage": "",
        "language": "Python",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 9695,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-05-15T01:43:50Z",
        "created_at": "2020-11-11T01:28:52Z",
        "updated_at": "2021-05-15T01:27:12Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1f0b563738199ca60d32b4ba779797fc97d040fe",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5535,
        "stargazers_count": 8220,
        "watchers_count": 8220,
        "size": 13787,
        "default_branch": "master",
        "open_issues_count": 112,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T12:09:15Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-08-01T09:08:43Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 469,
    "deletions": 0,
    "changed_files": 2,
    "commits": 27,
    "review_comments": 42,
    "comments": 32
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ODljNzUyOTY1MDkxM2VjODkwYzc3YWE3MWQ1ODc0Y2IwOTE5NWU5ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/89c7529650913ec890c77aa71d5874cb09195e9e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/89c7529650913ec890c77aa71d5874cb09195e9e",
      "tree": {
        "sha": "a9e06b4968ba06aa95fa55d2ff5315d8a7fed208",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a9e06b4968ba06aa95fa55d2ff5315d8a7fed208"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a9e06b4968ba06aa95fa55d2ff5315d8a7fed208\nparent 7e3284dafda168da34888977dbf4a55519b0c54d\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1617605166 -0700\ncommitter GitHub <noreply@github.com> 1617605166 -0700\n\nBIP: Bitcoin Secure Multisig Setup (BSMS)",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgarIuCRBK7hj4Ov3rIwAAdHIIAG6mzQ0wuM5Ckk2X+oO5sDz9\numKWqWxDUvdCIn3RZqOrl0hkZtOCsyzljGWU2eDh6kRD/Af9iaug007bpZ1Gn5PF\n+sUc06M4nRGkwAfMNZo90cfDD+TQfDzQYh2avyjCStKOg8zFdA64R6YdChLlyR7g\nyA4uZq4srdhQ0IdLPmvhwQpr8cWMHUZqkAoOnqsa46vJAtHp1lINtb84RNrCbYXt\nNHCEvViLEr/4H+UvJJ/ZFb3EQY5zsqdDk4Q3puh5TNYLrwjdUj9VpMlLp20X/bks\nNyfZ5OBE8J1FrvjRKJ7UqqYKniHBg/ClCm5hYqvdWsI5ads9c5Ci1ixx6SA1yGQ=\n=KHRb\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7e3284dafda168da34888977dbf4a55519b0c54d",
          "sha": "7e3284dafda168da34888977dbf4a55519b0c54d",
          "html_url": "https://github.com/bitcoin/bips/commit/7e3284dafda168da34888977dbf4a55519b0c54d"
        }
      ],
      "message": "BIP: Bitcoin Secure Multisig Setup (BSMS)",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-05T06:46:06Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-05T06:46:06Z"
      },
      "sha": "89c7529650913ec890c77aa71d5874cb09195e9e"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-06T14:59:54Z",
      "updated_at": "2021-04-06T14:59:54Z",
      "source": {
        "issue": {
          "id": 808310908,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTczMzc2MDA0",
          "url": "https://api.github.com/repos/nunchuk-io/bips/issues/1",
          "repository_url": "https://api.github.com/repos/nunchuk-io/bips",
          "labels_url": "https://api.github.com/repos/nunchuk-io/bips/issues/1/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/nunchuk-io/bips/issues/1/comments",
          "events_url": "https://api.github.com/repos/nunchuk-io/bips/issues/1/events",
          "html_url": "https://github.com/nunchuk-io/bips/pull/1",
          "number": 1,
          "state": "open",
          "state_reason": null,
          "title": "[DRAFT] BIP: Bitcoin Secure Multisig Setup (BSMS)",
          "body": "Original mailing list thread: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html",
          "user": {
            "login": "hugohn",
            "id": 4769925,
            "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hugohn",
            "html_url": "https://github.com/hugohn",
            "followers_url": "https://api.github.com/users/hugohn/followers",
            "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
            "organizations_url": "https://api.github.com/users/hugohn/orgs",
            "repos_url": "https://api.github.com/users/hugohn/repos",
            "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hugohn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 108,
          "pull_request": {
            "url": "https://api.github.com/repos/nunchuk-io/bips/pulls/1",
            "html_url": "https://github.com/nunchuk-io/bips/pull/1",
            "diff_url": "https://github.com/nunchuk-io/bips/pull/1.diff",
            "patch_url": "https://github.com/nunchuk-io/bips/pull/1.patch"
          },
          "created_at": "2021-02-15T08:27:17Z",
          "updated_at": "2021-05-16T09:00:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 814265857,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDI2NTg1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/814265857",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-06T16:39:40Z",
      "updated_at": "2021-04-06T16:39:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK commit https://github.com/bitcoin/bips/pull/1097/commits/89c7529650913ec890c77aa71d5874cb09195e9e (re-ACK of https://github.com/nunchuk-io/bips/commit/dfe7c9b29f419c9ff6e884688c6e39abdbe49ba0)",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-814265857",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 814286129,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDI4NjEyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/814286129",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-06T17:09:26Z",
      "updated_at": "2021-04-06T17:09:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK commit 89c7529650913ec890c77aa71d5874cb09195e9e (this is a re-ACK of https://github.com/nunchuk-io/bips/pull/1/commits/dfe7c9b29f419c9ff6e884688c6e39abdbe49ba0 - discussion can be seen here: https://github.com/nunchuk-io/bips/pull/1)",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-814286129",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 814531832,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDUzMTgzMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/814531832",
      "actor": {
        "login": "aaronisme",
        "id": 7855886,
        "node_id": "MDQ6VXNlcjc4NTU4ODY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7855886?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronisme",
        "html_url": "https://github.com/aaronisme",
        "followers_url": "https://api.github.com/users/aaronisme/followers",
        "following_url": "https://api.github.com/users/aaronisme/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aaronisme/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aaronisme/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aaronisme/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronisme/orgs",
        "repos_url": "https://api.github.com/users/aaronisme/repos",
        "events_url": "https://api.github.com/users/aaronisme/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aaronisme/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-07T01:15:56Z",
      "updated_at": "2021-04-07T01:15:56Z",
      "author_association": "NONE",
      "body": "ACK commit 89c7529 (re-ACK of nunchuk-io/bips@dfe7c9b)",
      "user": {
        "login": "aaronisme",
        "id": 7855886,
        "node_id": "MDQ6VXNlcjc4NTU4ODY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7855886?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronisme",
        "html_url": "https://github.com/aaronisme",
        "followers_url": "https://api.github.com/users/aaronisme/followers",
        "following_url": "https://api.github.com/users/aaronisme/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aaronisme/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aaronisme/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aaronisme/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronisme/orgs",
        "repos_url": "https://api.github.com/users/aaronisme/repos",
        "events_url": "https://api.github.com/users/aaronisme/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aaronisme/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-814531832",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 814534723,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDUzNDcyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/814534723",
      "actor": {
        "login": "doc-hex",
        "id": 1482781,
        "node_id": "MDQ6VXNlcjE0ODI3ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1482781?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/doc-hex",
        "html_url": "https://github.com/doc-hex",
        "followers_url": "https://api.github.com/users/doc-hex/followers",
        "following_url": "https://api.github.com/users/doc-hex/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/doc-hex/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/doc-hex/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/doc-hex/subscriptions",
        "organizations_url": "https://api.github.com/users/doc-hex/orgs",
        "repos_url": "https://api.github.com/users/doc-hex/repos",
        "events_url": "https://api.github.com/users/doc-hex/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/doc-hex/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-07T01:25:14Z",
      "updated_at": "2021-04-07T01:25:14Z",
      "author_association": "NONE",
      "body": "ACK all these commits.",
      "user": {
        "login": "doc-hex",
        "id": 1482781,
        "node_id": "MDQ6VXNlcjE0ODI3ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1482781?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/doc-hex",
        "html_url": "https://github.com/doc-hex",
        "followers_url": "https://api.github.com/users/doc-hex/followers",
        "following_url": "https://api.github.com/users/doc-hex/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/doc-hex/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/doc-hex/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/doc-hex/subscriptions",
        "organizations_url": "https://api.github.com/users/doc-hex/orgs",
        "repos_url": "https://api.github.com/users/doc-hex/repos",
        "events_url": "https://api.github.com/users/doc-hex/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/doc-hex/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-814534723",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 814765994,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDc2NTk5NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/814765994",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-07T09:32:15Z",
      "updated_at": "2021-04-07T09:32:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "I ACK-ed the text, but I would like to note that the encryption scheme described in the encryption section is a custom scheme that as far as I know was not designed by the cryptographers and was not reviewed yet by any cryptographer. It would be best for this custom scheme to be reviewed by someone competent in cryptography.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-814765994",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "reviewed",
      "id": 630047511,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMwMDQ3NTEx",
      "url": null,
      "actor": null,
      "commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "ACK 89c7529650913ec890c77aa71d5874cb09195e9e",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-630047511",
      "submitted_at": "2021-04-07T14:11:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "reviewed",
      "id": 630058666,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMwMDU4NjY2",
      "url": null,
      "actor": null,
      "commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-630058666",
      "submitted_at": "2021-04-07T14:11:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "commented",
      "id": 817314303,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzMxNDMwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/817314303",
      "actor": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-11T14:10:51Z",
      "updated_at": "2021-04-11T14:10:51Z",
      "author_association": "NONE",
      "body": "I raised some objections to this BIP on [the bitcoin-dev email list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018775.html), duplicating my comments here as well.\r\n\r\n--\r\n\r\nHi Hugo,\r\n\r\nI appreciate the effort you and everyone else is making to improve multisig in bitcoin!\r\n\r\nI like that this BIP gets rid of SLIP132 version bytes, as those have been de-facto deprecated in favor of output descriptors for some time. Having a standard for how to communicate descriptor records (BSMS 1.0) also seems like a nice positive.\r\n\r\nThe most commonly raised issues from [the 10x security guide](https://btcguide.github.io/) are about how to properly verify that all hardware wallets are participants in the user's multisig quorum (and with the correct m-of-n). This shows up in two big ways:\r\n1. The O(n^2) xpub validation problem creates a bad UX and is hard for non-advanced users.\r\n2. The risk for stateless hardware wallets (like Trezor) to have their xpubs swapped out by a compromised Coordinator.\r\n\r\nUnfortunately, this BIP does not improve either of these issues, while adding considerable complexity.\r\n\r\n#### 1. O(n^2) Xpub Validation\r\n\r\nThe proposed use of an output descriptor checksum has an obvious 40-bit MITM collision attack. A compromised Coordinator could trick a Signer into displaying an attacker's receive address, despite a correctly functioning Signers and the user properly validating the checksum ([github link](https://github.com/nunchuk-io/bips/pull/1/#issuecomment-801629857)).\r\n\r\nUsing a checksum with much higher entropy would reduce xpub validation to O(n) and create a very nice UX for signers. This would be a huge win for multisig! Instead, the recommended solution from the BIP is to validate all the key records manually, which is how multisig is currently done and what we desperately want to move away from. With a proper checksum, there’s no reason for a user to ever see an xpub.\r\n\r\nUsers should not be shown a checksum and asked to validate it in meatspace (across Signers) if an attacker’s address could still be substituted! Validating a single address across devices does solve this problem, but if you’re going to validate an address there’s no reason to display the checksum at all. However, validating an address is confusing to non-experts:\r\n- Is it a wallet ID or a bitcoin address?\r\n- Am I supposed to send funds to this address?\r\n\r\nIf creating a new checksum standard for the descriptor record is undesirable, we could use a child address (from an unhardened BIP32 path) and encode that in some way for end-users to verify it matches across all Signers. It would be strongly preferable for the encoding to be an unambiguously different format from a bitcoin address / BIP39 seed phrase, so that it’s clear it’s just a wallet ID. One non-ideal but simple solution is to use a hash function (i.e. dsha256) to calculate the digest of the child address, and display this in hexadecimal format. While hexadecimal is non-ideal for manual verification, it is already trivial for any bitcoin library to perform these steps.\r\n\r\n#### 2. Allow Support for Stateless Wallets\r\n\r\nThe current BIP states:\r\n\r\n> \"If all checks pass, the Signer must persist the descriptor record in its storage.\"\r\n\r\nWhile persistence has a lot of benefits, it is not a feature of the most sold multisig hardware wallet: Trezor. A simple solution here is to have each Signer sign the entire descriptor record at the end of round 2, not just its own key record in round 1. Then the data can be stored anywhere (including on the Signer itself) and played back to each Signer for validation when needed. The end-user would have no idea this was happening, but the device could refuse to display information it hasn’t fully validated (or at least add a warning message). Even a device with persistent storage would be better served using a signature, so that an evil maid couldn't tamper with the device (say in the no-encryption case for simplicity).\r\n\r\nThis existing vulnerability in stateless wallets is particularly bad for hosted multisig services like Casa/Unchained, where the service might control m-1 keys. It’s far easier for a hosted service to potentially trick non-expert users into displaying an attacker's receive address on their stateless Signer.\r\n\r\nFor example, assume the user is doing 2-of-3 multisig, where the Coordinator (service) controls 1 key. Here is how the Coordinator could trick their end-users:\r\n1. Coordinator swaps out 1 of the end-user’s xpubs, going from a 2-of-3 where the end-user has 2 seeds to a 2-of-3 where the Coordinator has 2 seeds.\r\n2. The end-user logs into the service to get a new receive address, and the service (Coordinator) displays malicious receive address X (as part of a 2-of-3).\r\n3. The end user connects stateless Signer 1 to the service (Coordinator), which under-the-hood gives stateless Signer 1 proof that it is included in this 2-of-3. Stateless singer 1 displays malicious receive address X!\r\n4. The end-user doesn't verify the address on Signer 2, as many users unfortunately don't -- perhaps it is in a far away location and the end-user (incorrectly) thinks that it’s already been validated in 2 places -- and makes a large deposit to receive address X. These funds now belong to the attacker and can be swept at any time!\r\n\r\nIf stateless Signer 1 required a signature to be replayed at step 3, stateless Signer 1 would refuse to display malicious receive address X (or at a minimum warn the end-user that it did not have enough info to properly validate the address).\r\n\r\nThis is also a concern for self-hosted multisig, I just used the hosted services as the best example.\r\n\r\nIt's also not just Trezor that is stateless. For example, I wrote [a simple CLI software multisig wallet as part of the buidl library](https://twitter.com/mflaxman/status/1321503036724989952) to be used mostly for emergency recovery. At 800 lines of code, it's too simple/minimal to touch the file system.\r\n\r\n#### BIP39\r\n\r\nWhile unrelated, the use of BIP39 words for session tokens seems like a big mistake, as end-users have learned over years that BIP39 words are for private key material. A small percent of users may backup their token BIP39 mnemonic and not their seed phrase BIP39 mnemonic! My suggestion is to just stick with the other two Token options: decimal and hex.\r\n\r\n#### Conclusion\r\n\r\nThe main purpose/benefit of the BIP seems to be the encryption protocol. I wouldn't have strong objections if the BIP were simply renamed Bitcoin Multisig Encryption, as that more accurately reflects what it does. That said, I think this BIP is missing out on a real opportunity to improve security in setting up a multisig scheme, and if adopted in the current form will negatively impact multisig adoption.\r\n\r\nI can't support this BIP in the current form, but I'd be happy to submit a PR if it's helpful.\r\n\r\nBest,\r\n\r\nMichael\r\nhttps://btcguide.github.io/\r\n",
      "user": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-817314303",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "reviewed",
      "id": 633018798,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzMDE4Nzk4",
      "url": null,
      "actor": null,
      "commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "I think there are serious issues with this PR in its current form:\r\n* 40-bit checksum is dangerously weak and can be used in a collision attack to display an attacker's receive address\r\n* Not compatible with stateless Signers like Trezor\r\n* Asks users to use BIP39 mnemonics for non-private key material\r\n\r\nFor details, see [here](https://github.com/bitcoin/bips/pull/1097#issuecomment-817314303).",
      "user": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-633018798",
      "submitted_at": "2021-04-11T14:23:52Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "commented",
      "id": 817341179,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzM0MTE3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/817341179",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-11T17:18:11Z",
      "updated_at": "2021-04-11T17:18:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "@mflaxman thanks, my response here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018776.html\r\n\r\nIf possible, please try to keep the comments in one location.",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-817341179",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "mentioned",
      "id": 4578778203,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU3ODc3ODIwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4578778203",
      "actor": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-11T17:18:11Z"
    },
    {
      "event": "subscribed",
      "id": 4578778204,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1Nzg3NzgyMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4578778204",
      "actor": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-11T17:18:11Z"
    },
    {
      "event": "commented",
      "id": 817515315,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzUxNTMxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/817515315",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T06:13:19Z",
      "updated_at": "2021-04-12T06:13:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "For those reading this github thread, besides @hugohn 's linked response on the ML, this has also been discussed in the original PR [here](https://github.com/nunchuk-io/bips/pull/1/#issuecomment-801650101), [here](https://github.com/nunchuk-io/bips/pull/1/#issuecomment-801901805), [here](https://github.com/nunchuk-io/bips/pull/1/#issuecomment-803663614), and [here](https://github.com/nunchuk-io/bips/pull/1/#issuecomment-806328077).\r\n\r\nAll proposed solutions have been implemented, except for a larger checksum, which requires a proposed change to the descriptor language (not this PR)",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-817515315",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "mentioned",
      "id": 4579933259,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU3OTkzMzI1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4579933259",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T06:13:19Z"
    },
    {
      "event": "subscribed",
      "id": 4579933266,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1Nzk5MzMyNjY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4579933266",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T06:13:19Z"
    },
    {
      "event": "commented",
      "id": 817654649,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzY1NDY0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/817654649",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T09:36:06Z",
      "updated_at": "2021-04-12T09:36:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hugo, referencing the bitcoin-dev posts I agree with making Signers display the first receive address a mandatory part of the Round 2 process to mitigate the checksum collision attack described by @mflaxman. In addition, it's a familiar format and users generally already know how to find the first address in their Coordinators. Once the setup is complete, it's also normally the first use of the new wallet (to receive funds at that address). For simplicity, I suggest only the first address should be displayed however.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-817654649",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "mentioned",
      "id": 4580957432,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU4MDk1NzQzMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4580957432",
      "actor": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T09:36:06Z"
    },
    {
      "event": "subscribed",
      "id": 4580957436,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1ODA5NTc0MzY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4580957436",
      "actor": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T09:36:06Z"
    },
    {
      "event": "commented",
      "id": 817896419,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzg5NjQxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/817896419",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T15:15:11Z",
      "updated_at": "2021-04-12T15:15:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Hugo, referencing the bitcoin-dev posts I agree with making Signers display the first receive address a mandatory part of the Round 2 process to mitigate the checksum collision attack described by @mflaxman. In addition, it's a familiar format and users generally already know how to find the first address in their Coordinators. Once the setup is complete, it's also normally the first use of the new wallet (to receive funds at that address). For simplicity, I suggest only the first address should be displayed however.\r\n\r\nThanks @craigraw. Yes, I'm leaning in this direction as well.",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-817896419",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "mentioned",
      "id": 4582825944,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU4MjgyNTk0NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4582825944",
      "actor": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T15:15:11Z"
    },
    {
      "event": "subscribed",
      "id": 4582825948,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1ODI4MjU5NDg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4582825948",
      "actor": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T15:15:11Z"
    },
    {
      "event": "mentioned",
      "id": 4582825958,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU4MjgyNTk1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4582825958",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T15:15:11Z"
    },
    {
      "event": "subscribed",
      "id": 4582825966,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1ODI4MjU5NjY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4582825966",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T15:15:11Z"
    },
    {
      "event": "reviewed",
      "id": 633689802,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzNjg5ODAy",
      "url": null,
      "actor": null,
      "commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-633689802",
      "submitted_at": "2021-04-12T15:39:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "commented",
      "id": 817980329,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzk4MDMyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/817980329",
      "actor": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T17:11:10Z",
      "updated_at": "2021-04-12T17:11:10Z",
      "author_association": "NONE",
      "body": "> For simplicity, I suggest only the first address should be displayed however.\r\n\r\n+1 using the first receive address for validation, as `OP_HASH160` is considered collision resistant under bitcoin's security model. However, this should **replace** displaying the 40-bit checksum, as there's no reason for humans to be manually verifying things in meatspace that do not provide real security. Put differently: *if you validate the first address on all Signers it doesn't matter what the checksum is, if you don't validate the first address on all Signers then a compromised Coordinator can use the checksum to fool you*.\r\n\r\nMy preferred solution would still be a much longer checksum in bitcoin core, but this hackey solution is secure if it's too hard to get upstream agreement on that.\r\n\r\nIYC, I started a draft of an encoding proposal [here](https://gist.github.com/mflaxman/7153c8ac8ec7f004ec1d6071ad5a9b7b), but ultimately decided to abandon it because I thought the negatives outweighed the positives.",
      "user": {
        "login": "mflaxman",
        "id": 448644,
        "node_id": "MDQ6VXNlcjQ0ODY0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/448644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mflaxman",
        "html_url": "https://github.com/mflaxman",
        "followers_url": "https://api.github.com/users/mflaxman/followers",
        "following_url": "https://api.github.com/users/mflaxman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mflaxman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mflaxman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mflaxman/subscriptions",
        "organizations_url": "https://api.github.com/users/mflaxman/orgs",
        "repos_url": "https://api.github.com/users/mflaxman/repos",
        "events_url": "https://api.github.com/users/mflaxman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mflaxman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-817980329",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T21:11:19Z",
      "updated_at": "2021-04-12T21:11:19Z",
      "source": {
        "issue": {
          "id": 814284048,
          "node_id": "MDU6SXNzdWU4MTQyODQwNDg=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21278",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21278/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21278/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21278/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/21278",
          "number": 21278,
          "state": "closed",
          "state_reason": "completed",
          "title": "wallet: Multi-sig flow with descriptor wallets",
          "body": "It would be nice to have documentation on how to set up a basic M-of-N multisig between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\r\n\r\nE.g. (borrowed some steps from @jonasschnelli)\r\n\r\n- First phase: generate and exchange `xpub`s:\r\n  - Every participant generates an `xpub`: most straightforward is to create a new wallet, I guess, but how to get the `xpub` to share for a specific BIP32 path?\r\n  - Maybe #21277 helps here *but* it might be putting the cart before the horse: do we want the default non-multisig descriptors at all here? I don't think so.\r\n  - Share it with the other participants.\r\n- Second phase: Every participant imports the following descriptors using `importdescriptors`:\r\n  - Receiving  (`internal: false`) addresses are `wsh(sortedmulti(<M>,xpubA/0/*,xpubB/0/*,xpubC/0/*,…))`\r\n  - Change (`internal: true`) addresses are `wsh(sortedmulti(<M>,xpubA/1/*,xpubB/1/*,xpubC/1/*,…))`\r\n- Send funds to the resulting address (every participant should get the same addresses).\r\n- When making a sending transaction create one using `walletcreatefundedpsbt` (everyone can initiate this)\r\n  - Send the resulting PSBT to other users\r\n  - At least M users checks it with `decodepsbt` then (if ok) signs it with `walletprocesspsbt`\r\n  - Collect the signed PSBTs with `joinpsbts` then broadcast the resulting transaction\r\n",
          "user": {
            "login": "laanwj",
            "id": 126646,
            "node_id": "MDQ6VXNlcjEyNjY0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/laanwj",
            "html_url": "https://github.com/laanwj",
            "followers_url": "https://api.github.com/users/laanwj/followers",
            "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
            "organizations_url": "https://api.github.com/users/laanwj/orgs",
            "repos_url": "https://api.github.com/users/laanwj/repos",
            "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/laanwj/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 6,
          "closed_at": "2021-11-15T20:30:36Z",
          "created_at": "2021-02-23T09:37:14Z",
          "updated_at": "2022-11-15T13:10:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-12T22:46:44Z",
      "updated_at": "2021-04-12T22:46:44Z",
      "source": {
        "issue": {
          "id": 837323141,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTk3NjczNjg5",
          "url": "https://api.github.com/repos/bitcoin/bips/issues/1089",
          "repository_url": "https://api.github.com/repos/bitcoin/bips",
          "labels_url": "https://api.github.com/repos/bitcoin/bips/issues/1089/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1089/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bips/issues/1089/events",
          "html_url": "https://github.com/bitcoin/bips/pull/1089",
          "number": 1089,
          "state": "closed",
          "state_reason": null,
          "title": "BIP 87: Hierarchy for Deterministic Multisig Wallets",
          "body": "Updates derivation paths for descriptors, by removing the redundant `script_type` currently in use.\r\n\r\n@luke-jr @harding @hugohn",
          "user": {
            "login": "Rspigler",
            "id": 24482484,
            "node_id": "MDQ6VXNlcjI0NDgyNDg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Rspigler",
            "html_url": "https://github.com/Rspigler",
            "followers_url": "https://api.github.com/users/Rspigler/followers",
            "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
            "organizations_url": "https://api.github.com/users/Rspigler/orgs",
            "repos_url": "https://api.github.com/users/Rspigler/repos",
            "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Rspigler/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 275845989,
              "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
              "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
              "name": "New BIP",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bips/pulls/1089",
            "html_url": "https://github.com/bitcoin/bips/pull/1089",
            "diff_url": "https://github.com/bitcoin/bips/pull/1089.diff",
            "patch_url": "https://github.com/bitcoin/bips/pull/1089.patch"
          },
          "closed_at": "2021-05-17T23:29:22Z",
          "created_at": "2021-03-22T05:14:48Z",
          "updated_at": "2021-05-18T01:42:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 820390611,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDM5MDYxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/820390611",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-15T12:40:06Z",
      "updated_at": "2021-04-15T12:40:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "> +1 using the first receive address for validation, as OP_HASH160 is considered collision resistant under bitcoin's security model.\r\n\r\n160 bit hashes are only considered secure for single-sig use. See e.g. BIP-0341 rationale for not allowing p2sh-wrapping:\r\nhttps://github.com/bitcoin/bips/blob/1f0b563738199ca60d32b4ba779797fc97d040fe/bip-0341.mediawiki#cite_note-3\r\nHowever, whatever security the \"first\" receive address has is clearly considered sufficient by its owner so it should be good to use for validating the multisig.",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-820390611",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 820442928,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDQ0MjkyOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/820442928",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-15T13:57:31Z",
      "updated_at": "2021-04-15T17:08:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > +1 using the first receive address for validation, as OP_HASH160 is considered collision resistant under bitcoin's security model.\r\n> \r\n> 160 bit hashes are only considered secure for single-sig use. See e.g. BIP-0341 rationale for not allowing p2sh-wrapping:\r\n> https://github.com/bitcoin/bips/blob/1f0b563738199ca60d32b4ba779797fc97d040fe/bip-0341.mediawiki#cite_note-3\r\n\r\nBitcoin Optech had a very nice newsletter on this topic: https://bitcoinops.org/en/bech32-sending-support/#address-security\r\n\r\nThe short summary is that for multi-party multisig it is safer to use native SegWit than wrapped SegWit. In the worst case, you'd still get 128-bit address security, since P2WSH uses the longer hash function SHA256d instead of RIPEMD160. Also worth noting that the theoretical weakness of RIPEMD160 would still likely take an attacker billions of dollars to exploit.\r\n\r\nNevertheless, address security is not really a concern of this spec. Whatever weaknesses exist for Bitcoin addresses, they should be addressed in the Bitcoin protocol, not here.",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-820442928",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZjMxZmE5YzFlNDFiZmNiM2U0YTZmYWFlYzE0OWQ3ZmZmZjViN2UyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f31fa9c1e41bfcb3e4a6faaec149d7ffff5b7e25",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f31fa9c1e41bfcb3e4a6faaec149d7ffff5b7e25",
      "tree": {
        "sha": "4fc6d6e53f859f73e143ec30da81a04afca98290",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4fc6d6e53f859f73e143ec30da81a04afca98290"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4fc6d6e53f859f73e143ec30da81a04afca98290\nparent 89c7529650913ec890c77aa71d5874cb09195e9e\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1618546433 -0700\ncommitter GitHub <noreply@github.com> 1618546433 -0700\n\nclarify Signer definition and add reference links",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgeQ8BCRBK7hj4Ov3rIwAADlcIACQ+N7cklqirHO1SBO4A0w2o\nb6dYl/aSBLjUSssHpA2McbgUvYWHYwgfKyAQI1ufHDmg+p3y374z42GzMO01mrhG\n4WnzTiOPyBVvnY+t/xp4G+T8ULsvyj6z/MQZ1irYuZjALxPjEckLw6PqCrDZ7eLH\nezDHWORHp0f1SUWByRnaenFGGMJ9txRDnITn7cmAEmeuEy5HZDVkP0/uPf9Emg+q\nQ7/cQyakEXcxbs6vLOvJoHI5v/qoiz3VAIkcwnzMq8DFFxBRK8b3n3LH5buIYs3X\nrcLDN0PHKJgxHuZFiS+wyFeN+wGuRB5XSN73H52Qc0HQHg7a4mgEWE3Uks9qSg4=\n=eTMY\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/89c7529650913ec890c77aa71d5874cb09195e9e",
          "sha": "89c7529650913ec890c77aa71d5874cb09195e9e",
          "html_url": "https://github.com/bitcoin/bips/commit/89c7529650913ec890c77aa71d5874cb09195e9e"
        }
      ],
      "message": "clarify Signer definition and add reference links",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-16T04:13:53Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-16T04:13:53Z"
      },
      "sha": "f31fa9c1e41bfcb3e4a6faaec149d7ffff5b7e25"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZjJlODFjOGM1MDI4ZjM3MzUzOGZmOTEyMWFmMzQzN2FmYjUzMGRhMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f2e81c8c5028f373538ff9121af3437afb530da1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f2e81c8c5028f373538ff9121af3437afb530da1",
      "tree": {
        "sha": "70cfbb4b60281ef4905fb2b5080aad0d36321a21",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/70cfbb4b60281ef4905fb2b5080aad0d36321a21"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 70cfbb4b60281ef4905fb2b5080aad0d36321a21\nparent f31fa9c1e41bfcb3e4a6faaec149d7ffff5b7e25\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1618565938 -0700\ncommitter GitHub <noreply@github.com> 1618565938 -0700\n\ninclude and verify the wallet's first address in round 2",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgeVsyCRBK7hj4Ov3rIwAA3/oIAKAKECp8/kz20IjE8OU3f/f5\n0IYUOkfWu1iVZMSe6RM7TCrnom6MRZ9LH9PyaVFoPSlc37gV0cYeAy7uxmoYA/DL\nVo5LXqoYutHDc75vrDH+DZ39YGpyTDRXHnR5aSbupGwNIgwZ5bLiTD9zOEFBXX/Y\niGw14PByNhQKFqtuppNDWOtEQX9e1/RceI7rNL4bXqQKmQCTM3LYrSq6ceO8kOl1\nRyIRNU08XnQovFoLZA5Y35eD6GrTldQx8YE/1yV3UEMKrZt3jNAEgBOe/XtaBMLZ\nYyH8aWD/tceWePfLUTWSvkBrVxaoPmtExHGg4fgGphn6QkER9fHwW4b8ff4THTc=\n=CsR/\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f31fa9c1e41bfcb3e4a6faaec149d7ffff5b7e25",
          "sha": "f31fa9c1e41bfcb3e4a6faaec149d7ffff5b7e25",
          "html_url": "https://github.com/bitcoin/bips/commit/f31fa9c1e41bfcb3e4a6faaec149d7ffff5b7e25"
        }
      ],
      "message": "include and verify the wallet's first address in round 2",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-16T09:38:58Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-16T09:38:58Z"
      },
      "sha": "f2e81c8c5028f373538ff9121af3437afb530da1"
    },
    {
      "event": "commented",
      "id": 821054762,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTA1NDc2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/821054762",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T09:40:53Z",
      "updated_at": "2021-04-16T09:40:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updates:\r\n* https://github.com/bitcoin/bips/pull/1097/commits/f2e81c8c5028f373538ff9121af3437afb530da1 clarify Signer definition and add reference links\r\n* https://github.com/bitcoin/bips/pull/1097/commits/f2e81c8c5028f373538ff9121af3437afb530da1 include and verify the wallet's first address in round 2\r\n\r\nTest vectors to be updated.",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-821054762",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjMzZGFiMzk1MmZiY2I0ZmZlNWQyMWRiYjdhMTE5MDNhNmIxZDAxZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/633dab3952fbcb4ffe5d21dbb7a11903a6b1d01d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/633dab3952fbcb4ffe5d21dbb7a11903a6b1d01d",
      "tree": {
        "sha": "6f8044a4efd145efabf2cb846bd3ceb792c0c589",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6f8044a4efd145efabf2cb846bd3ceb792c0c589"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6f8044a4efd145efabf2cb846bd3ceb792c0c589\nparent f2e81c8c5028f373538ff9121af3437afb530da1\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1618626484 -0700\ncommitter GitHub <noreply@github.com> 1618626484 -0700\n\nmove descriptor to the second line in the descriptor record",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgeke0CRBK7hj4Ov3rIwAA7TEIAJr6ukOfSgQjhC2/8qC5+jwx\niBBaWSwnQu/cE6ChGGbDwten1yMoFM51QXs1LITXZQ71AYt/mGMT2OTJ7UXy8kH2\nnD/fcvUQmpEebkv/I+NHp6ka7VqzzOrVG2aH3Da9TUliPc8IJ97ngdEczZvd1Yod\ntfq4nuzpdU1yH4jCjWm6lmarL5uFyJY99rd3sDkoy/cugOk35tpXA+Yj7fTrY3Xa\nZ+oJO/7MVxzd7ZKvTWGhlTPcguiPNoTmFqz5MrLQAMIvJMuo/ORfMkwkKYU/F3Xd\n2Ly6kTXl3IsvwochHSIpjSsBLN5j0LtMCjw/xDCn94h1jCn7dH+7rXbUHjL8YWo=\n=eH3t\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f2e81c8c5028f373538ff9121af3437afb530da1",
          "sha": "f2e81c8c5028f373538ff9121af3437afb530da1",
          "html_url": "https://github.com/bitcoin/bips/commit/f2e81c8c5028f373538ff9121af3437afb530da1"
        }
      ],
      "message": "move descriptor to the second line in the descriptor record",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-17T02:28:04Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-17T02:28:04Z"
      },
      "sha": "633dab3952fbcb4ffe5d21dbb7a11903a6b1d01d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MDFlOWNlOTM3MzQ5ZjAzZTdhZGM5YjkzZDg0ZjBlNzBlZDEwMTNlZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/01e9ce937349f03e7adc9b93d84f0e70ed1013ee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/01e9ce937349f03e7adc9b93d84f0e70ed1013ee",
      "tree": {
        "sha": "9bb5b5e9d8660174fbf0389c48dd335b0c32eadf",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9bb5b5e9d8660174fbf0389c48dd335b0c32eadf"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9bb5b5e9d8660174fbf0389c48dd335b0c32eadf\nparent 633dab3952fbcb4ffe5d21dbb7a11903a6b1d01d\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1618629573 -0700\ncommitter GitHub <noreply@github.com> 1618629573 -0700\n\nupdate test vectors",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgelPFCRBK7hj4Ov3rIwAAcBEIAK0n01wqxf89Ppp6BSEx9JGE\nblNBVlpf2KGTtx8a16JVv6dxSFX/kzYbddR44wkX380QNS1VFS/7DupBdJyzvERo\nKr/mzX+WnrtgNiPSAkq/Ft2V6trokXaRPiSPKKU9iz9/dfa8EEMH/t/KG42/ldLc\nouEWq38P52TDpp0AXP/egVix6lSjVK0+xLY7sicTnlembXbZ1TgJzsZJJ4amTKuZ\napZ+ZvP2Lp6S/o41bBzeTA/p7PcVwhgydT26pOCQ55q7WKiQ4ADpmKPAv0yndQGy\nS2d3RZXd9skxDlai+rSoacR1f6k5swUbqQjHOkqLLXrsCDAbmg/jwgikqSt7iEg=\n=1g/H\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/633dab3952fbcb4ffe5d21dbb7a11903a6b1d01d",
          "sha": "633dab3952fbcb4ffe5d21dbb7a11903a6b1d01d",
          "html_url": "https://github.com/bitcoin/bips/commit/633dab3952fbcb4ffe5d21dbb7a11903a6b1d01d"
        }
      ],
      "message": "update test vectors",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-17T03:19:33Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-17T03:19:33Z"
      },
      "sha": "01e9ce937349f03e7adc9b93d84f0e70ed1013ee"
    },
    {
      "event": "commented",
      "id": 821759417,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTc1OTQxNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/821759417",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-17T03:38:44Z",
      "updated_at": "2021-04-17T03:38:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Moved descriptor to the second line and updated test vectors. ",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-821759417",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 822089304,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjA4OTMwNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/822089304",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-18T23:57:58Z",
      "updated_at": "2021-04-18T23:57:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Will be going through changes soon",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-822089304",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MTdhNWE4NThlMjA0NWM2Njg5YTdlMmYwY2M0Yjc3YjkwY2RjZjZmNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7",
      "tree": {
        "sha": "691cdb74f8253bf6102b99603c436b85bde2cd27",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/691cdb74f8253bf6102b99603c436b85bde2cd27"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 691cdb74f8253bf6102b99603c436b85bde2cd27\nparent 01e9ce937349f03e7adc9b93d84f0e70ed1013ee\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1618848222 -0700\ncommitter GitHub <noreply@github.com> 1618848222 -0700\n\nintroduce descriptor template",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfaneCRBK7hj4Ov3rIwAAUIIIAEt5ssSz4bmIz630vbfwOERx\na/VAWLMuZTY7KeWxVf1BkiYKBdIe5txCTf7zwY1zxMcobi2Nz6UrAEFeItdsHOTa\njSkiOnTwohPWxL/MJVLwXaPngFadkCcGU8VBpMZMQt7N1oFukwJhKVFPZs/rBi2G\nGK5ti+I9Cyz3YcKGxQOL/23lmcwTl+tLEb20RBzbCoNKs5hl3uI4EAmAGKqSgVME\nPvk8qikH8Pjycrme88Ob5vZgY/7jA67QSQZsSJH9nS6nPO9cT7zqG0hsiXsURvzD\nf5szdQWVNaqj7XRv5e6+7D3D6tYJ3e/MoMZtSSd7xsx/qGFNtujYImVkuFsDrlA=\n=/FOe\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/01e9ce937349f03e7adc9b93d84f0e70ed1013ee",
          "sha": "01e9ce937349f03e7adc9b93d84f0e70ed1013ee",
          "html_url": "https://github.com/bitcoin/bips/commit/01e9ce937349f03e7adc9b93d84f0e70ed1013ee"
        }
      ],
      "message": "introduce descriptor template",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-19T16:03:42Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-19T16:03:42Z"
      },
      "sha": "17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTc3MWM1ZTJhOGEwNGE2ODQ5OTYwNGQ4ZDJjMmY4YWM3ZTg1OTRiNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9771c5e2a8a04a68499604d8d2c2f8ac7e8594b4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9771c5e2a8a04a68499604d8d2c2f8ac7e8594b4",
      "tree": {
        "sha": "ec5bbca4825eb06ffa7a94ddf701bb114c683160",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ec5bbca4825eb06ffa7a94ddf701bb114c683160"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ec5bbca4825eb06ffa7a94ddf701bb114c683160\nparent 17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1618849168 -0700\ncommitter GitHub <noreply@github.com> 1618849168 -0700\n\nreplace XPUBs with keys to be more generic",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfa2QCRBK7hj4Ov3rIwAAvP8IADBnIT3pDyP5JW162faR019b\nwIRMbq6KP3/DZBwxaru5VT1VyY6AtwtSstDTF0oMFsA5NqQcnLfYD8Mzrzn48Fhr\nHU8aztmJiG3qyZKBBGkrnEDszOshXKkUxuyduhjamMawDzXY7SQ7clBLxeImXvkR\nK0ANSdon32gd2Lc8K7caB3KgDkgg3IQl9pv1+u2DVzT+VuUl8SO2jZqAvA7Tcb6A\nizY8jDr4LT4UGkIuBDmz84diOZ2gjKhPpOJsProTcnNh6zivVuQQ/XMCfff3raqm\nP68sUcD9hhWKF8M/2FLCkSrAo+V47V68/ohN/VVna+UjjvPBglLNxgs8+/HPJ80=\n=j26r\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7",
          "sha": "17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7",
          "html_url": "https://github.com/bitcoin/bips/commit/17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7"
        }
      ],
      "message": "replace XPUBs with keys to be more generic",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-19T16:19:28Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-19T16:19:28Z"
      },
      "sha": "9771c5e2a8a04a68499604d8d2c2f8ac7e8594b4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2ViNDgxYzU1MTk1OTc1ODRmYjdhMDAyMDNkODFhNmRjZTQxYTcwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3eb481c5519597584fb7a00203d81a6dce41a709",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3eb481c5519597584fb7a00203d81a6dce41a709",
      "tree": {
        "sha": "6e1ccd30c9fc62c5a4266f379ff05314aefd4486",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6e1ccd30c9fc62c5a4266f379ff05314aefd4486"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6e1ccd30c9fc62c5a4266f379ff05314aefd4486\nparent 9771c5e2a8a04a68499604d8d2c2f8ac7e8594b4\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1618850939 -0700\ncommitter GitHub <noreply@github.com> 1618850939 -0700\n\nminor edit",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfbR7CRBK7hj4Ov3rIwAAkScIAGg9Fx+U9EEUPjCiPmtkSj7s\n1qeKk/Y6Gn56Obw0YaxXHiMScxKnuNrpOzs3y7bxaK1ULiQp2K5Fv0z+0lU5Em4j\nCh9FN0ijgSvDJEKAqCeuk07oZ4pEDUHOs7Fyfs6X5JHApLgDJn7g328D5s0VQzHb\njp7D6z0QWwip8YUPHX53gti34psXbn0guBkgszuI+lCrCAOmTc5MXvCPitMKBBNi\noUOlgI8JMrpKJ21jz/gRhAwPraHz0E8/4J7Zj5ev7Q5b97zhIHfN/sQLKdCzHm06\nKFTvr3tpvpFIMqIf239RhKX8FafeXGasezKJm8LuRdYVZd0bTLYvCsmSbUKpnqs=\n=IuOe\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9771c5e2a8a04a68499604d8d2c2f8ac7e8594b4",
          "sha": "9771c5e2a8a04a68499604d8d2c2f8ac7e8594b4",
          "html_url": "https://github.com/bitcoin/bips/commit/9771c5e2a8a04a68499604d8d2c2f8ac7e8594b4"
        }
      ],
      "message": "minor edit",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-19T16:48:59Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-19T16:48:59Z"
      },
      "sha": "3eb481c5519597584fb7a00203d81a6dce41a709"
    },
    {
      "event": "commented",
      "id": 822621249,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjYyMTI0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/822621249",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-19T16:52:26Z",
      "updated_at": "2021-04-19T16:52:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Should the descriptor template have a checksum like the descriptor? (I see the checksum verification is now gone even if a descriptor is used)\r\n\r\nCan you explain the rationale for expanding to xpubs and public keys? How would that work",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-822621249",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 822628283,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjYyODI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/822628283",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-19T17:03:09Z",
      "updated_at": "2021-04-19T17:05:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Should the descriptor template have a checksum like the descriptor? (I see the checksum verification is now gone even if a descriptor is used)\r\n\r\nNow that we mandate the verification of first address, the checksum technically isn't necessary. Since first address provides stronger integrity check.\r\n\r\nThe descriptor language also only defines a checksum for a \"valid\" descriptor. You can still include the checksum in the descriptor string if you really want to, just not the template.\r\n\r\n> Can you explain the rationale for expanding to xpubs and public keys? How would that work\r\n\r\nJust like how it would work in a descriptor that uses public keys instead of XPUBs (a KEY expression in the descriptor language can be either one).\r\n\r\nFor example, a one-time use multisig wallet that has a single receive address (and no change).\r\n\r\nI'll update the test vectors separately.",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-822628283",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 822755281,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjc1NTI4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/822755281",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-19T20:15:14Z",
      "updated_at": "2021-04-19T20:15:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK commit f31fa9c1e41bfcb3e4a6faaec149d7ffff5b7e25, f2e81c8c5028f373538ff9121af3437afb530da1, 633dab3952fbcb4ffe5d21dbb7a11903a6b1d01d, 01e9ce937349f03e7adc9b93d84f0e70ed1013ee, 17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7, 9771c5e2a8a04a68499604d8d2c2f8ac7e8594b4, 3eb481c5519597584fb7a00203d81a6dce41a709",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-822755281",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "reviewed",
      "id": 639272177,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM5MjcyMTc3",
      "url": null,
      "actor": null,
      "commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-639272177",
      "submitted_at": "2021-04-19T20:19:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "reviewed",
      "id": 639273488,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM5MjczNDg4",
      "url": null,
      "actor": null,
      "commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-639273488",
      "submitted_at": "2021-04-19T20:21:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "reviewed",
      "id": 639275432,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM5Mjc1NDMy",
      "url": null,
      "actor": null,
      "commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-639275432",
      "submitted_at": "2021-04-19T20:23:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "reviewed",
      "id": 639281931,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM5MjgxOTMx",
      "url": null,
      "actor": null,
      "commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-639281931",
      "submitted_at": "2021-04-19T20:32:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "reviewed",
      "id": 639283807,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM5MjgzODA3",
      "url": null,
      "actor": null,
      "commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-639283807",
      "submitted_at": "2021-04-19T20:34:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YWJiYjc2ZTk4N2NmMGVjYmE0MzEzMWE1ZGZjYzk4NzcxZWE2ODQ4Zg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/abbb76e987cf0ecba43131a5dfcc98771ea6848f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/abbb76e987cf0ecba43131a5dfcc98771ea6848f",
      "tree": {
        "sha": "5a9537e9d8b2d659dc4128df6c05a97a6e7333cc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5a9537e9d8b2d659dc4128df6c05a97a6e7333cc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5a9537e9d8b2d659dc4128df6c05a97a6e7333cc\nparent 3eb481c5519597584fb7a00203d81a6dce41a709\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619250384 -0700\ncommitter GitHub <noreply@github.com> 1619250384 -0700\n\nMinor edit",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgg8zQCRBK7hj4Ov3rIwAA32wIAJZRk1HOaqIRk7n0Sez3y09N\nJ7XR0l7Abac1du0DFIqyMtLsxmPr5fLrWNHArl4jLVXO6ILXygR7tKeEq4AxXyHS\n8YXXmPydmYh4zOYr7rk8Ciljyk2kKrstAP+XWKy431XVOFk8cagjlkkBe1Fr4RYs\nLCvDG3NPWXjvy5su2bSuFaans6e+MA2k9X1ujWZ7xqq/rl1JkL/fpzCMV6GEMOQA\njcVmXKQp71VsZKB8XJDVynTBbDFdV+B+WJL4e9OdPPb5gVPHuzvvJ5uQOQpzI8hA\na827nzYTnoBbIz2rzxj0d1cwe9o6KoJCs04zwYk5drWukKA1jrEz8IglehOc6KU=\n=rvXt\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3eb481c5519597584fb7a00203d81a6dce41a709",
          "sha": "3eb481c5519597584fb7a00203d81a6dce41a709",
          "html_url": "https://github.com/bitcoin/bips/commit/3eb481c5519597584fb7a00203d81a6dce41a709"
        }
      ],
      "message": "Minor edit",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-24T07:46:24Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-24T07:46:24Z"
      },
      "sha": "abbb76e987cf0ecba43131a5dfcc98771ea6848f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2VjYWQ4MWJlYTgxYzNiZTYxODgxMzlhNzMxODU2MmI5Zjc3OTdlNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3ecad81bea81c3be6188139a7318562b9f7797e6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3ecad81bea81c3be6188139a7318562b9f7797e6",
      "tree": {
        "sha": "881cb065285105a03243c5a768a57c93f929b673",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/881cb065285105a03243c5a768a57c93f929b673"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 881cb065285105a03243c5a768a57c93f929b673\nparent abbb76e987cf0ecba43131a5dfcc98771ea6848f\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619252479 -0700\ncommitter GitHub <noreply@github.com> 1619252479 -0700\n\nupdate test vectors",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgg9T/CRBK7hj4Ov3rIwAAXBgIADXLV9ZbDSRydgmyuf8MCNnw\nXdHWRvSDiIdtuMUI3ZCYFOXrYmpl+5cQu6tA1cAcxugayBfjyP38f4bDB1t9Bb+S\nlZGp/CrxR4PitcadZ1mGJjTSkTmEH3zS/pDMH3O+9zPWcyvMKwv5/G5AplumoIHd\nF7Fjgk8UECN/j4cWJr1k2V9+cxXt49kPIU9e5Ii1yBVUVfnOnDMMOEca1DUPIDZa\n3opZDcvXpGC5uhraWSWjOzGdaug+b0M1vePUpILQ3OPg2MK/ZbpB8IVEtsBsTcjo\nhDTApwuQM77WxBn7HRrFR7OIhSZLL2f1N0fEoSt+CF7ovgTNwTRBhwas+XJG18M=\n=X23X\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/abbb76e987cf0ecba43131a5dfcc98771ea6848f",
          "sha": "abbb76e987cf0ecba43131a5dfcc98771ea6848f",
          "html_url": "https://github.com/bitcoin/bips/commit/abbb76e987cf0ecba43131a5dfcc98771ea6848f"
        }
      ],
      "message": "update test vectors",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-24T08:21:19Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-24T08:21:19Z"
      },
      "sha": "3ecad81bea81c3be6188139a7318562b9f7797e6"
    },
    {
      "event": "commented",
      "id": 826056698,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjA1NjY5OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/826056698",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-24T08:21:47Z",
      "updated_at": "2021-04-24T08:21:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated test vectors https://github.com/bitcoin/bips/pull/1097/commits/3ecad81bea81c3be6188139a7318562b9f7797e6",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-826056698",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "labeled",
      "id": 4640590596,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2NDA1OTA1OTY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4640590596",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T02:05:47Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 644082007,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ0MDgyMDA3",
      "url": null,
      "actor": null,
      "commit_id": "3ecad81bea81c3be6188139a7318562b9f7797e6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "This needs a section on backward compatibility.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-644082007",
      "submitted_at": "2021-04-25T02:08:41Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "commented",
      "id": 826227982,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjIyNzk4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/826227982",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T02:45:24Z",
      "updated_at": "2021-04-25T02:45:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "> This needs a section on backward compatibility.\r\n\r\nThanks @luke-jr. Will add.",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-826227982",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "mentioned",
      "id": 4640633347,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY0MDYzMzM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4640633347",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T02:45:24Z"
    },
    {
      "event": "subscribed",
      "id": 4640633349,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2NDA2MzMzNDk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4640633349",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T02:45:24Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDViYzMxZDgzZDMxYTVjNjg4MDcyYWM3ZTA2MGQxNmY4NTEzYWFkOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/45bc31d83d31a5c688072ac7e060d16f8513aad9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/45bc31d83d31a5c688072ac7e060d16f8513aad9",
      "tree": {
        "sha": "63008a5b88b13c9bf0bf07842144ec43dc8b3185",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/63008a5b88b13c9bf0bf07842144ec43dc8b3185"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 63008a5b88b13c9bf0bf07842144ec43dc8b3185\nparent 3ecad81bea81c3be6188139a7318562b9f7797e6\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619321070 -0700\ncommitter GitHub <noreply@github.com> 1619321070 -0700\n\nminor edit",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghODuCRBK7hj4Ov3rIwAAqfQIAI7eqmRESs+86tyAAPQLOIMb\nXS4lCdyEsgiJEHX0I2E8jTM79vd99dbmALFo3Zi7CnbQtwKXUvqZkVxhRTp+7Qne\nlKAG3h8g5+JjRRK3rjePn8Um+PhhCf2a/I/ZyKWxdveyMtPDckAodIl/xJqDoB/9\noZrfGUdFraabOOfLP96U+fUjcJsXwdW0nX17NRq5qErabZIb1svsuk/ngGKmpDpn\n5UnkWXrLPzIWvqrhFllVYsG+7FkcKIboN+wWjslpWuMtxUMpOF6EiT6O3BqaDVQ4\nFfyeZU3JYAxRTFHc5y+x8IYMIMxVCB2frVTu0cgLyhUMme+BZaYdNxuiIBukq9g=\n=xPCc\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3ecad81bea81c3be6188139a7318562b9f7797e6",
          "sha": "3ecad81bea81c3be6188139a7318562b9f7797e6",
          "html_url": "https://github.com/bitcoin/bips/commit/3ecad81bea81c3be6188139a7318562b9f7797e6"
        }
      ],
      "message": "minor edit",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-25T03:24:30Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-25T03:24:30Z"
      },
      "sha": "45bc31d83d31a5c688072ac7e060d16f8513aad9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZGU3OWE3M2I0OWFhZTFkYzk4ZmQwYzA1ZTU0OGYxYjc4NDRjMzA2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/de79a73b49aae1dc98fd0c05e548f1b7844c3065",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/de79a73b49aae1dc98fd0c05e548f1b7844c3065",
      "tree": {
        "sha": "14ebd0eeee25e71d5b6306ef0bdfd494d69dbb4c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/14ebd0eeee25e71d5b6306ef0bdfd494d69dbb4c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 14ebd0eeee25e71d5b6306ef0bdfd494d69dbb4c\nparent 45bc31d83d31a5c688072ac7e060d16f8513aad9\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619321556 -0700\ncommitter GitHub <noreply@github.com> 1619321556 -0700\n\nadd a test vector for public keys",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghOLUCRBK7hj4Ov3rIwAAzhsIAAw4UEzq4bbvxO9tvVjYd9Nj\nyVh95gjgW1TlNBYyxG/y1d/tElrjsD2pUx9GtVFBGAOJPLMiY9eN2/yq5ftQaUEe\n04eiSpRQMgW/L5bIQFvwsZP48qfNP0NA40+7lL83TmADTfwFAA8Mg9/FuUzRuUrF\nO2Y48RJ6U+st/2ZmNhYTmlzX5g59sBK6lXazx55K+veQAfBzVa9cuxHbs8c9wHaD\npB8uJ/J7KigOxPM2pC6ZAHdq7/bVbeGOh29omzZ3kF0BGBx6RN6B2KKADs5sXCa8\nB6u6G/5j+8re4+H5A8UkUhEZLjWqoxnjJBfUJJziPIH9igoUdjDlhmQYlNs5N+0=\n=fByj\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/45bc31d83d31a5c688072ac7e060d16f8513aad9",
          "sha": "45bc31d83d31a5c688072ac7e060d16f8513aad9",
          "html_url": "https://github.com/bitcoin/bips/commit/45bc31d83d31a5c688072ac7e060d16f8513aad9"
        }
      ],
      "message": "add a test vector for public keys",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-25T03:32:36Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-25T03:32:36Z"
      },
      "sha": "de79a73b49aae1dc98fd0c05e548f1b7844c3065"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzViYjA1NjU5NmIxOWQxY2I1YmQ0NDBhODNjY2Q1NzlmZmIzMTg4YQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/75bb056596b19d1cb5bd440a83ccd579ffb3188a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/75bb056596b19d1cb5bd440a83ccd579ffb3188a",
      "tree": {
        "sha": "8ea899c32c336296e07c4ae21d4fb82a27b62b0e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8ea899c32c336296e07c4ae21d4fb82a27b62b0e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8ea899c32c336296e07c4ae21d4fb82a27b62b0e\nparent de79a73b49aae1dc98fd0c05e548f1b7844c3065\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619323044 -0700\ncommitter GitHub <noreply@github.com> 1619323044 -0700\n\nminor edit",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghOikCRBK7hj4Ov3rIwAAJVQIAGwfKACJIAEBLVz/EaKMpmvu\nSMC7l1upL5ZOK/4w9Zh7kslwR10MgRS8Yn1kOrFPeiBY8HDvMCcvpmTYTHSqFOED\no2klTtIYnNd4yLDqa3Ep/hALXMzyM/3YE/0wq+BGw50s87ESYxnG9nctn02NxCbU\nY/0W0rozgsd48nR09MKeAC4sha8wEr+QA58ai7T/NXuuh9m/SwX0wztTnxXqV7Ok\nFzY///8jhocscvVXBgtJD3gyvDmFKyApHw5Gxs+YjzD5d54zsUd+kxDhsvanOOdx\nV7mTJCLQRA3Hv74JxHLLOElKKnT82y5yGfiPbFIA/IoOD1Bj8mLNAaI6R1Nbmto=\n=2XIu\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/de79a73b49aae1dc98fd0c05e548f1b7844c3065",
          "sha": "de79a73b49aae1dc98fd0c05e548f1b7844c3065",
          "html_url": "https://github.com/bitcoin/bips/commit/de79a73b49aae1dc98fd0c05e548f1b7844c3065"
        }
      ],
      "message": "minor edit",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-25T03:57:24Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-25T03:57:24Z"
      },
      "sha": "75bb056596b19d1cb5bd440a83ccd579ffb3188a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTgyZGUxZDNiYjczMTNlNTAwZTc1ZWQxN2RlZWI4NDYzZjUzYjMwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e82de1d3bb7313e500e75ed17deeb8463f53b305",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e82de1d3bb7313e500e75ed17deeb8463f53b305",
      "tree": {
        "sha": "df2e3e696c833c72ade14ce2f2c0aedfff897290",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/df2e3e696c833c72ade14ce2f2c0aedfff897290"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree df2e3e696c833c72ade14ce2f2c0aedfff897290\nparent 75bb056596b19d1cb5bd440a83ccd579ffb3188a\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619323338 -0700\ncommitter GitHub <noreply@github.com> 1619323338 -0700\n\nminor edit",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghOnKCRBK7hj4Ov3rIwAAY78IAGnhoyXolgoY1jmTwPbKsvGu\nw5fi2duVAT6NEw0fdrg9x/t2r01gp9IxU1U8uozOlc0eOkvwGBJGZXTBI7ICE1Bi\ndU10bDxFP3AaLk+qDWiHPH+dFi7wG/jD2Vuwal/61U5rf87ErvInHKMk4wVOTD9y\nbWquJE18bxRCjbNA01NObY7phwiYZ4z3hK3VuHisgWZUNH9bct3PRK2Tl2vcjBqb\nQ1AtM2W05v3Viv/C0RdVk5rEBTSAgkTuOLa2sWjU6zV+UhC74yfQY40jqqN2QIEc\nxACbc3J0rIQxdyp3xRESIarXKu9LYK8cYBn8cas4tGw6OgY66jsBd+F9J2Rnbgg=\n=OyTn\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/75bb056596b19d1cb5bd440a83ccd579ffb3188a",
          "sha": "75bb056596b19d1cb5bd440a83ccd579ffb3188a",
          "html_url": "https://github.com/bitcoin/bips/commit/75bb056596b19d1cb5bd440a83ccd579ffb3188a"
        }
      ],
      "message": "minor edit",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-25T04:02:18Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-25T04:02:18Z"
      },
      "sha": "e82de1d3bb7313e500e75ed17deeb8463f53b305"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Y2YwMGI0NTY3OThlZWRiODI5ZjJkMjQ3ZWFmOTc0Yjk2NjhmNTM3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cf00b456798eedb829f2d247eaf974b9668f5376",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/cf00b456798eedb829f2d247eaf974b9668f5376",
      "tree": {
        "sha": "ec666b960eb9147618962078f0acaddcbfda391d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ec666b960eb9147618962078f0acaddcbfda391d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ec666b960eb9147618962078f0acaddcbfda391d\nparent e82de1d3bb7313e500e75ed17deeb8463f53b305\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619326803 -0700\ncommitter GitHub <noreply@github.com> 1619326803 -0700\n\nupgrade EXTENDED mode to 128-bit",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghPdTCRBK7hj4Ov3rIwAAI7EIAGxEQdwQfpeN/DohMuLSN+A9\na0aWAXqbENOM+HglULIesqF1n3lSgVBmxTUS+TBwlrLpMryfdF2QHJCeaL6TG9ZG\nze+V8ggxse46eeLUQmk3XzOVH+niKHJt7GUezdEQrGmd+LHJY3TpgA34aVkh/027\n05PkziFxwGF+NCc4fLc1u3KgUx5tCJessdYUvubfCRDYsTyLJ1XfEiR+rSEGQwUv\nrhZNkv+zfrOIFLQkkncyxmma0Cw9dAm8ccmr2YxsYWveYAkeeh5wA80e1C0MJUDK\ncvFRgsJowc06w3bO3BBU3T9/dYpodF4EKBUmMbsVQF2IeS6mw5gWEgjBt1AsweI=\n=2Irs\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e82de1d3bb7313e500e75ed17deeb8463f53b305",
          "sha": "e82de1d3bb7313e500e75ed17deeb8463f53b305",
          "html_url": "https://github.com/bitcoin/bips/commit/e82de1d3bb7313e500e75ed17deeb8463f53b305"
        }
      ],
      "message": "upgrade EXTENDED mode to 128-bit",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-25T05:00:03Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-25T05:00:03Z"
      },
      "sha": "cf00b456798eedb829f2d247eaf974b9668f5376"
    },
    {
      "event": "commented",
      "id": 826256248,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjI1NjI0OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/826256248",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T05:15:21Z",
      "updated_at": "2021-04-25T05:15:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "A couple of updates, most of which are minor text edits / rephrasing to make things clearer. Two notable changes:\r\n* https://github.com/bitcoin/bips/pull/1097/commits/de79a73b49aae1dc98fd0c05e548f1b7844c3065 Added a test vector for public keys (instead of XPUBs)\r\n* https://github.com/bitcoin/bips/pull/1097/commits/cf00b456798eedb829f2d247eaf974b9668f5376 Upgraded EXTENDED mode to 128-bit while explicitly disallowing mnemonics for such a mode\r\n\r\nRationale for (2): it doesn't feel right to limit ourselves to a lower bit security just because of a potential problem with one out of hundreds of possible encodings. The solution here is to go with higher bit security while explicitly disallowing the problematic encoding for such a mode.\r\n\r\nI'll add a Backward Compatibility section separately. ",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-826256248",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 826472244,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjQ3MjI0NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/826472244",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-26T03:13:54Z",
      "updated_at": "2021-04-26T03:13:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK commit abbb76e987cf0ecba43131a5dfcc98771ea6848f, 3ecad81bea81c3be6188139a7318562b9f7797e6, 45bc31d83d31a5c688072ac7e060d16f8513aad9, de79a73b49aae1dc98fd0c05e548f1b7844c3065, 75bb056596b19d1cb5bd440a83ccd579ffb3188a, e82de1d3bb7313e500e75ed17deeb8463f53b305, cf00b456798eedb829f2d247eaf974b9668f5376\r\n\r\nThis is looking really great.  Glad to see the 128-bit extension",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-826472244",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2YwNTBkYjY0ZTc3MTZhNjI5OTNlNmZmOWZhZTdiMDc2OGIyMTdmOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3f050db64e7716a62993e6ff9fae7b0768b217f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3f050db64e7716a62993e6ff9fae7b0768b217f8",
      "tree": {
        "sha": "a6ed77515bcc7035f2e75d45f9c200c724a6c017",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a6ed77515bcc7035f2e75d45f9c200c724a6c017"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a6ed77515bcc7035f2e75d45f9c200c724a6c017\nparent cf00b456798eedb829f2d247eaf974b9668f5376\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619623543 -0700\ncommitter GitHub <noreply@github.com> 1619623543 -0700\n\nadd Compatibility section",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgiX53CRBK7hj4Ov3rIwAAfMcIAI8jKiPpRW8z/FoKbzhtE5NE\n/4odvGiW5NfLFOi7JboPl7FFQYBRzN127mWXbLDyCu8mHMYHze3iUUAH8amvzX+6\ntZHGZEiraN/gGMqL8xaAHmFnOfOc1FEsjSArvYxGkJXzKuZ5gjRL0h+i6XPxt2Du\n85Ybg+QcErNgPyk365Q9f9XzwvqT3FFLSo/OXe2CmAF28fYzzKFRlcGcBs7+OXau\n/YPIhj+qB/pL0whvFRgX6wHsvII43EHo3lFlCynGmd9eLAiY/3QeU/ghDqD5d/dZ\n9Lc74dHUyFKkaqycUWbySA3ZYfZyhmK5jZmU7Vec4jdIekp8njuFwBaYl9C9bVA=\n=JqiX\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cf00b456798eedb829f2d247eaf974b9668f5376",
          "sha": "cf00b456798eedb829f2d247eaf974b9668f5376",
          "html_url": "https://github.com/bitcoin/bips/commit/cf00b456798eedb829f2d247eaf974b9668f5376"
        }
      ],
      "message": "add Compatibility section",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-28T15:25:43Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-28T15:25:43Z"
      },
      "sha": "3f050db64e7716a62993e6ff9fae7b0768b217f8"
    },
    {
      "event": "commented",
      "id": 828548557,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyODU0ODU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/828548557",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T15:26:17Z",
      "updated_at": "2021-04-28T15:26:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "https://github.com/bitcoin/bips/pull/1097/commits/3f050db64e7716a62993e6ff9fae7b0768b217f8 added a Compatibility section - cc @luke-jr ",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-828548557",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "mentioned",
      "id": 4657634692,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY1NzYzNDY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4657634692",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T15:26:17Z"
    },
    {
      "event": "subscribed",
      "id": 4657634700,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2NTc2MzQ3MDA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4657634700",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T15:26:17Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ODNlOWIzOWViOTE1OWIzNjdiYjA0YTI0NzdkNWY4Njc3ZjA1NjMyZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "tree": {
        "sha": "81919f356c52d670e49c2141be6e12272472c4b8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/81919f356c52d670e49c2141be6e12272472c4b8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 81919f356c52d670e49c2141be6e12272472c4b8\nparent 3f050db64e7716a62993e6ff9fae7b0768b217f8\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1619624665 -0700\ncommitter GitHub <noreply@github.com> 1619624665 -0700\n\nfix test vector",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgiYLaCRBK7hj4Ov3rIwAAEZEIAIMYOpv5KGXSFdjjcYLGg/TT\nbXUvwCDrPLYWUXc12gX1LI5LJXo/AIG5SVkQ1M+wNQYvMfUIyrwpSFCuWc8lojuu\n+Zg4oWsxAr3yUDTwyFab0fcnL/x1mf6+Jb02pfgjjYiO7ICKtVlrFcG1oP3+JZ7y\nepWtuHV0auOYJvSnx5XgXhzIw/I50UWdnYZLXcnUtr1l3ZvyeONRygTy6eQBmASe\nndP64CIk6YZr4GhzFCc8SY8jkK/7yu2Sxk+b5IXY2P2XTS9D4I9YrcIwMAePJF5g\nEbrvG91RKSBYH+8BFGW4hNfEs+3fItKrDv7pWd1gBbPPimQ0JpQABuNJSIQDphc=\n=RgbR\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3f050db64e7716a62993e6ff9fae7b0768b217f8",
          "sha": "3f050db64e7716a62993e6ff9fae7b0768b217f8",
          "html_url": "https://github.com/bitcoin/bips/commit/3f050db64e7716a62993e6ff9fae7b0768b217f8"
        }
      ],
      "message": "fix test vector",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-04-28T15:44:25Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-04-28T15:44:25Z"
      },
      "sha": "83e9b39eb9159b367bb04a2477d5f8677f05632d"
    },
    {
      "event": "commented",
      "id": 828737452,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyODczNzQ1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/828737452",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T19:57:50Z",
      "updated_at": "2021-04-28T19:57:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK commit 3f050db64e7716a62993e6ff9fae7b0768b217f8, 83e9b39eb9159b367bb04a2477d5f8677f05632d (sorry, missed that mistake during my review as well).",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-828737452",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "commented",
      "id": 831705059,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTcwNTA1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/831705059",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-04T06:10:17Z",
      "updated_at": "2021-05-04T06:10:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK as of https://github.com/bitcoin/bips/pull/1097/commits/83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-831705059",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "reviewed",
      "id": 651379745,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxMzc5NzQ1",
      "url": null,
      "actor": null,
      "commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-651379745",
      "submitted_at": "2021-05-04T15:43:09Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ODNhYTA0Nzc2ZDM4ZTE4ZjAzY2Q3NjYxMDJjZmNlZmI1YjI0NGM5Zg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83aa04776d38e18f03cd766102cfcefb5b244c9f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/83aa04776d38e18f03cd766102cfcefb5b244c9f",
      "tree": {
        "sha": "b53b47b32e0a70b6eeb70ac0666e6b3f5f1994e3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b53b47b32e0a70b6eeb70ac0666e6b3f5f1994e3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b53b47b32e0a70b6eeb70ac0666e6b3f5f1994e3\nparent 83e9b39eb9159b367bb04a2477d5f8677f05632d\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1620189305 -0700\ncommitter GitHub <noreply@github.com> 1620189305 -0700\n\nupdate Compatibility section",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgkiB5CRBK7hj4Ov3rIwAABj0IAE8Z0qdQv79MEsXhOMjxhGLe\nS30+r1HGWc3qbyptQfzn7r+SZDv7rfQkO3huiE/z83/SyvGtwpJA1ZUxbGfDsvIi\nl+nwGDjJZ/7k941RvQdUWfSxyFEW2gEnuXkOu7XTkxIJvsgywPO7dwrC1S41ZGTt\ntd+t63/wzU3oJyCwghYCYJNdfYh5r5E0ccKZr5jpbNMbUCnlmsOBhKYN2L6qrIEw\nz1M0F8Br9uu9rVrKvkU6gZJLXE18+j0QezeIE4Xlm3zPN1umt1mu6MZzjzf0mIdp\n2bygkrt1fa89gtWpoUvS2bHzvoaLlYkBk4eYIp4eeHwVWrVMhlKhusxgW7Vi+dw=\n=lGDF\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83e9b39eb9159b367bb04a2477d5f8677f05632d",
          "sha": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
          "html_url": "https://github.com/bitcoin/bips/commit/83e9b39eb9159b367bb04a2477d5f8677f05632d"
        }
      ],
      "message": "update Compatibility section",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-05T04:35:05Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-05T04:35:05Z"
      },
      "sha": "83aa04776d38e18f03cd766102cfcefb5b244c9f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MDQwOGI0MTJmOTE0N2U0MDJhMjIwNWIyM2M1ZWY5NDJhNzVkZGNiNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0408b412f9147e402a2205b23c5ef942a75ddcb7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0408b412f9147e402a2205b23c5ef942a75ddcb7",
      "tree": {
        "sha": "b23ecaec9cfda0b7ecfa0476f2577fec165d891e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b23ecaec9cfda0b7ecfa0476f2577fec165d891e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b23ecaec9cfda0b7ecfa0476f2577fec165d891e\nparent 83aa04776d38e18f03cd766102cfcefb5b244c9f\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1620190690 -0700\ncommitter GitHub <noreply@github.com> 1620190690 -0700\n\nminor edit",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgkiXiCRBK7hj4Ov3rIwAAHgYIACHWmkz2ObOQSWU0Ky5Rf+Wk\nw9zBsx7noMosaAxMamYmiwoje4on9lL3VQ+73JdPDMwTEEpAwTrcWgL6GuDA++tN\nr8XFW+oOqwD8oDmYpGG1uL0ylSdNA4kkjb+VOGTE8qQdZ8h86ClFEkVkZ+n14YGN\njoNfFyy690KVhrbPl6adYWw3MOoTSFeBSdiI95nYFHD5KWg6CQa5T3SjldjUQktw\nu3BrGh7CF/LWvT0nTPF3Y58XpEDT16Ysa4JEBOx4q4a4u8s1EUuARiWFbNQMipq8\nVOKqFauJl3RoG1UHsVOUINSslp3G1PRoahD6pIS/CMWk2BqsRRFBrpPkGKRIZlA=\n=pq9b\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83aa04776d38e18f03cd766102cfcefb5b244c9f",
          "sha": "83aa04776d38e18f03cd766102cfcefb5b244c9f",
          "html_url": "https://github.com/bitcoin/bips/commit/83aa04776d38e18f03cd766102cfcefb5b244c9f"
        }
      ],
      "message": "minor edit",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-05T04:58:10Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-05T04:58:10Z"
      },
      "sha": "0408b412f9147e402a2205b23c5ef942a75ddcb7"
    },
    {
      "event": "commented",
      "id": 833154932,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzE1NDkzMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/833154932",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T01:16:34Z",
      "updated_at": "2021-05-06T01:16:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK commit 83aa04776d38e18f03cd766102cfcefb5b244c9f and 0408b412f9147e402a2205b23c5ef942a75ddcb7",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-833154932",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZjEzY2Q4ZGRlOWU2NzAwM2ZjYzk1MmRlMDJkMGI2M2M0ZGI1YmJhYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f13cd8dde9e67003fcc952de02d0b63c4db5bbac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f13cd8dde9e67003fcc952de02d0b63c4db5bbac",
      "tree": {
        "sha": "d8b05558c4a926ef0236560eac02c856328a35f2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d8b05558c4a926ef0236560eac02c856328a35f2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d8b05558c4a926ef0236560eac02c856328a35f2\nparent 0408b412f9147e402a2205b23c5ef942a75ddcb7\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1620270308 -0700\ncommitter GitHub <noreply@github.com> 1620270308 -0700\n\nupdate Compatibility section",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgk1zkCRBK7hj4Ov3rIwAASgIIACBAzCpY8QYBPK53t5UjKWUS\nfLHJjnaApwy3eCJ8lYQUnv8LTTSJGDzkUN3u2wfsQeKjdknrMW4B9f+LL1OxML42\nJycXxyaVKy+wwdWxcFV7PwXF5FSgXTIVRgxvXYoQH7wd5fDtxm7EpU59z4tpzQ7v\n/rqJcyvpOVbHqlITpxu5MpNLyMY5z7UxgVzuBMZMhaTobec3hLnam131UuBekf8S\nGS4UwOGf2CMvg4MmWgGDOaAjpbebSCKMCfmNAglTedADBztuc5rVfcdAYkGlXFOs\nfYbxxJPU+/bPfBvD88vEx/tb1gtX28or2HxoFp0Cfr3pbnP/3NmFrfaYURA8FOM=\n=SC0J\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0408b412f9147e402a2205b23c5ef942a75ddcb7",
          "sha": "0408b412f9147e402a2205b23c5ef942a75ddcb7",
          "html_url": "https://github.com/bitcoin/bips/commit/0408b412f9147e402a2205b23c5ef942a75ddcb7"
        }
      ],
      "message": "update Compatibility section",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-06T03:05:08Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-06T03:05:08Z"
      },
      "sha": "f13cd8dde9e67003fcc952de02d0b63c4db5bbac"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjI5YTYwYmY4ZTE4MGY2ZDc4YWNjZTExMTAxOGQyNjFiODMyN2RlYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/229a60bf8e180f6d78acce111018d261b8327dec",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/229a60bf8e180f6d78acce111018d261b8327dec",
      "tree": {
        "sha": "74613f222f93cce098125eb28618514a8970851f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/74613f222f93cce098125eb28618514a8970851f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 74613f222f93cce098125eb28618514a8970851f\nparent f13cd8dde9e67003fcc952de02d0b63c4db5bbac\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1620441764 -0700\ncommitter GitHub <noreply@github.com> 1620441764 -0700\n\nupdate Compatibility section",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglfqkCRBK7hj4Ov3rIwAANsQIAA6Bt8Izq81Rxk9oRPVu14ZJ\nse1EREnqBDQA/h9I1ihCIa+eD+Hm5w96miUnKA7R6m5+iLtS7COKf+aWGH1iDPSJ\nY7vcej1mFlF8XBjg9YxuTAmxXllSh0e02uiVNMVS3Xy15JhNuKbKTu/0gkf6p7/n\njsmUv9NyfUCJy5vLOswDQ2WRdRB6rnkkroCFQhnTxtdQeaU7NIrgcGIha53zwcIj\ng+vSV9gLWEAJr/jdimfGMtowf3jlmDbgzaS1iYZOZ6JhrcRS/yOOJckJAn8yCpI6\nwgTQePqeZW8kn1lBFRuUt2V8pxDsEkOe0ZlVsKpTmXKkGUSCKZchTasWWVcNBdA=\n=m5w7\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f13cd8dde9e67003fcc952de02d0b63c4db5bbac",
          "sha": "f13cd8dde9e67003fcc952de02d0b63c4db5bbac",
          "html_url": "https://github.com/bitcoin/bips/commit/f13cd8dde9e67003fcc952de02d0b63c4db5bbac"
        }
      ],
      "message": "update Compatibility section",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-08T02:42:44Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-08T02:42:44Z"
      },
      "sha": "229a60bf8e180f6d78acce111018d261b8327dec"
    },
    {
      "event": "commented",
      "id": 834992293,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDk5MjI5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/834992293",
      "actor": {
        "login": "aaronisme",
        "id": 7855886,
        "node_id": "MDQ6VXNlcjc4NTU4ODY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7855886?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronisme",
        "html_url": "https://github.com/aaronisme",
        "followers_url": "https://api.github.com/users/aaronisme/followers",
        "following_url": "https://api.github.com/users/aaronisme/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aaronisme/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aaronisme/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aaronisme/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronisme/orgs",
        "repos_url": "https://api.github.com/users/aaronisme/repos",
        "events_url": "https://api.github.com/users/aaronisme/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aaronisme/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-08T02:45:27Z",
      "updated_at": "2021-05-08T02:45:52Z",
      "author_association": "NONE",
      "body": "ACK commit 83aa047, 0408b41 and 229a60b",
      "user": {
        "login": "aaronisme",
        "id": 7855886,
        "node_id": "MDQ6VXNlcjc4NTU4ODY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7855886?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronisme",
        "html_url": "https://github.com/aaronisme",
        "followers_url": "https://api.github.com/users/aaronisme/followers",
        "following_url": "https://api.github.com/users/aaronisme/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aaronisme/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aaronisme/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aaronisme/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronisme/orgs",
        "repos_url": "https://api.github.com/users/aaronisme/repos",
        "events_url": "https://api.github.com/users/aaronisme/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aaronisme/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-834992293",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "reviewed",
      "id": 655027816,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU1MDI3ODE2",
      "url": null,
      "actor": null,
      "commit_id": "229a60bf8e180f6d78acce111018d261b8327dec",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-655027816",
      "submitted_at": "2021-05-08T23:15:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "reviewed",
      "id": 655027854,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU1MDI3ODU0",
      "url": null,
      "actor": null,
      "commit_id": "229a60bf8e180f6d78acce111018d261b8327dec",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-655027854",
      "submitted_at": "2021-05-08T23:16:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "commented",
      "id": 835567616,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzNTU2NzYxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/835567616",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-08T23:17:40Z",
      "updated_at": "2021-05-08T23:17:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Dependent on comments, ACK commit f13cd8dde9e67003fcc952de02d0b63c4db5bbac and 229a60bf8e180f6d78acce111018d261b8327dec",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-835567616",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDc4NDdmZTg3NDc2NGEwZmZjOWFkZGJjZmM2OTJlNTE5OWE3MzM5ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/47847fe874764a0ffc9addbcfc692e5199a7339d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/47847fe874764a0ffc9addbcfc692e5199a7339d",
      "tree": {
        "sha": "a0699f30847ee812e9e25b32f0aa9af07de92d59",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a0699f30847ee812e9e25b32f0aa9af07de92d59"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a0699f30847ee812e9e25b32f0aa9af07de92d59\nparent 229a60bf8e180f6d78acce111018d261b8327dec\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1620729392 -0700\ncommitter GitHub <noreply@github.com> 1620729392 -0700\n\nminor edit",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgml4wCRBK7hj4Ov3rIwAAol0IAEuhSXVx0ZI/7yH3V6hhcSUi\nRZtc1wF3oCiy+LM9R0tXc/Aai+jIVVPwK4y/COLQ0Fmg5+W4Ssy5iMAcOiTritoZ\nfojySIKV0RfvhtNi5PQsLvDPpdC22lexRnlnomxamDD8TZKJepQah37f/XO/Ulo7\nB5q+3BENgHMpVEbDLRuW5nS9Sus1DAt9sTJYMM+MCeMyNZDoOxt+j0bdlFxkKXmJ\nwSDY7u2A/5xM375sNhcFOE+RKemYvTGQj4E4aNMo8JjmXZ9YS5WgBSwOP45ZMiv4\nUE3yUhQJufsAevJw0GehCp2h5VGRtiqCWZpDUFgbskzrDVdPB2yi545ymWIDfS4=\n=A5Pk\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/229a60bf8e180f6d78acce111018d261b8327dec",
          "sha": "229a60bf8e180f6d78acce111018d261b8327dec",
          "html_url": "https://github.com/bitcoin/bips/commit/229a60bf8e180f6d78acce111018d261b8327dec"
        }
      ],
      "message": "minor edit",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-11T10:36:32Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-11T10:36:32Z"
      },
      "sha": "47847fe874764a0ffc9addbcfc692e5199a7339d"
    },
    {
      "event": "reviewed",
      "id": 656637529,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU2NjM3NTI5",
      "url": null,
      "actor": null,
      "commit_id": "47847fe874764a0ffc9addbcfc692e5199a7339d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#pullrequestreview-656637529",
      "submitted_at": "2021-05-11T12:23:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
    },
    {
      "event": "commented",
      "id": 839211460,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTIxMTQ2MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/839211460",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T21:59:52Z",
      "updated_at": "2021-05-11T21:59:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK commit 47847fe874764a0ffc9addbcfc692e5199a7339d ",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-839211460",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-12T23:19:14Z",
      "updated_at": "2021-05-12T23:19:14Z",
      "source": {
        "issue": {
          "id": 799960424,
          "node_id": "MDU6SXNzdWU3OTk5NjA0MjQ=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21071",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21071/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21071/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21071/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/21071",
          "number": 21071,
          "state": "closed",
          "state_reason": "completed",
          "title": "~~$1,500 Bounty for Offline Multisignature through the GUI~~ View #24861",
          "body": "There has been incredible work implementing descriptor wallets, PSBTs, offline signing, HWWs; and GUI support for it all into Bitcoin Core.  It has been incredibly exciting to watch!\r\n\r\nMy goal is to financially support developers to implement offline multisignature wallets into Bitcoin Core.  I believe we are almost there.\r\n\r\nI am here to humbly try to attempt to describe what I see, as a user and through talks with other developers, as the work that is needed to implement secure, offline multisignature wallets in Bitcoin Core.\r\n\r\n1) A standard for Coordinating Multisignature Wallets, with an authentication scheme.  This is being discussed [here](https://github.com/bitcoin/bitcoin/issues/18142).\r\n\r\nBlockchainCommons has done a lot of work around this:\r\n\r\nOnline Node Coordinator sends a 'Policy Request' to Offline Co-Signers, if acceptable, co-signers send a 'Keyset', and then get an 'Account Map' back.\r\n\r\nPolicy Request = empty descriptor\r\n\r\nKeyset = BIP48 path\r\n\r\nAccount Map = descriptor w/ no xprvs in it\r\n\r\nAND/OR\r\n\r\nCo-Signers send array of descriptors for all script types ([BCR-2020-015](https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md)) to Coordinator, Coordinator selects necessary descriptor and creates wallet, then sends 'Account Map' back.\r\n\r\nConcerns:  lack of complete standardization.  use of BIP48.  Names still up in the air.\r\n\r\n@Sjors also discussed the possibility of a 'Wallet Composer File' that could compose a wallet interactively, use future-proof syntax (can the signer decompile miniscript?), and support other capabilities.  Not sure how much work has been done on this.\r\n\r\n1 A)  The authentication:\r\n\r\nJust trust on first use, with warnings if data changes?  @benma has done great research and reporting on this:\r\n\r\nTo receive securely, the offline signers need to be able to verify the following:\r\n\r\n> The receive address, which has to encode the hash of an ordinary multisig redeem script with no other spending conditions\r\n> The key of the hardware wallet, which has to be one of the public keys in the redeem script\r\n> The keypath of the displayed address in order to avoid ransom attacks if no restrictions are enforced by the hardware wallet\r\n> The number of cosigners in order to prevent an attacker from adding more\r\n> The threshold of required signatures to not be higher or lower than intended\r\n> The xpubs of the cosigners in order to prevent an attacker from swapping them\r\n\r\nThe above is written for hardware wallets, but I believe any BIP written and code implemented should be for both HWWs and offline Core wallets.  With descriptor wallets, I believe a lot of the above authentication can be automated by the info in the Account Map that all offline co-signers have.\r\n\r\nTo send securely, the offline signers need to be able to verify the following:\r\n\r\n> The recipient’s address, displayed and confirmed by the user like with singlesig\r\n> The change address, having the same cosigners and threshold in an ordinary multisig script with no other spending conditions\r\n> The change goes to an address at a keypath recoverable by the user\r\n\r\nI think all the above is very important, since there have been many instances of devices not properly implementing the above security measures, so having a BIP for devices/software to comply with would be important.\r\n\r\n\r\n@Sjors and @achow101 have been doing a ton of work integrating HWWs.  This looks like it will be merged soon: (https://github.com/bitcoin/bitcoin/pull/16546).  After that, the UI will be worked on (https://github.com/bitcoin-core/gui/pull/4), and there is a currently-closed PR for HWW multisig functionality on top (https://github.com/bitcoin/bitcoin/pull/16895).  Perhaps some of this code can be re-used for multisig with Core on offline computers, but I am not sure.\r\n\r\nI believe having this ability would be an extensive security gain (being able to create a multisig wallet with Core on offline computers through the GUI).\r\n\r\n\r\n2)  Represent multiple derivation paths with one descriptor (https://github.com/bitcoin/bitcoin/issues/17190)\r\n\r\nSingle descriptors make creating, backing up, and restoring multisignature wallets much simpler.  For example:\r\n\r\nTo create a multisignature wallet in Bitcoin Core, you can currently:\r\n\r\n1. Create wallet\r\n2. Dump `hdseed`\r\n3. Create address, dump xpriv\r\n4. Repeat Steps 1-3 N times\r\n5. Create multisig wallet using descriptor containing all N xprvs (M of N multisig)\r\n6. Use the N `hdseed`s along with Account Map as backup\r\n\r\nHowever, the above wallet can not create change addresses.  You need to create (backup and restore) a second descriptor for change addresses, even though most of the descriptor is the same, except for the derivation path at the end.  This can be very time consuming/confusing for end users, especially when backing up by paper/hand.\r\n\r\nFor a comprehensive offline multisignature wallet, I believe this change needs to be implemented.  Currently in Yeti, we bypass this by recommending coin control and only sending entire UTXO's (which is a pretty bad user experience and short term solution we have chosen).\r\n\r\nSome users like setting custom change descriptors (for example, for sending to an application for mixing change) so I believe this should be able to be done behind expert options, and perhaps this makes a single descriptor less controversial.\r\n\r\n\r\n3)  QR code scanner (https://github.com/bitcoin/bitcoin/issues/9913)\r\n\r\nQR codes are the most secure way to pass data between airgapped signers.  I currently have a $300 bounty on implementing this.  BlockchainCommons has a standard ([BCR-2020-005](https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md)) that is compatible with PSBTs (multiple QR codes checksummed; or a single animated QR code), and has a C++ reference implementation (https://github.com/BlockchainCommons/bc-ur).\r\n\r\n\r\n4)  After the above (1-3) is finished, I believe implementing offline multisignature wallets into Bitcoin Core will be possible.\r\n\r\nI am not trying to influence consensus (this should just be wallet code), and ultimately it is of course up to the developers and the community if these are changes that are good for Bitcoin, and if the above is how it should be implemented.  I am just trying to put all the thoughts/discussions down in one place.\r\n\r\n\r\nDevelopers who might be interested:\r\n\r\n@Sjors @gwillen @instagibbs @achow101 \r\n\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nI, Robert Spigler, am offering a $1,500 bounty for implementing 1, 2, 3, and 4 (standard for coordination of co-signers, single descriptors, QR codes, and offline multisignature wallets) in Bitcoin Core.\r\n\r\nThis does not include the already existing $300 bounty for #3 (QR codes).\r\n\r\nThe bounty will be split between developers as I see most fair (author and substantial reviews/discussions).\r\n\r\nThe bounty has no expiration and will be paid in bitcoin.\r\n\r\nThe date is 2021-02-02.\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCgAdFiEEf4WKHNGE9pWzsby0UsewL8eQ8/AFAmAaJz0ACgkQUsewL8eQ\r\n8/CVqw//ZOQkDabWlYxqcf669FqvsWRK/q/mNidaBor9gVwFiXZsBP1j7knGgpvZ\r\nWCpek6JpMU4b1ZA2jobbSAKcaEarUiBRMVoXWnHmeg0igJmNhZyhL9D4lvy1kUBd\r\n3F8KhqZ0yIlAzGRWu6+CKOVlTMQFwS/giAgoWeQCa8a4Nx0WjbhtyMWvXQmXlbnJ\r\n7zjN3nfJDi7CYxMGGyfnLLJSCdUGt205PIwphwI9OR2TJVwfl6rRLR1rzakCHOOa\r\nzvd6Ud0mGCHiJMvlWv5Qyk6KGm4O9XTVPYWU9DkWq1Jahv4MtZvb+n1DsgT6ZQxF\r\ngNZVOp+iuigEmgWe1Qw8wsiWjubJrVBhWcg3cFfchmRYefMo6+53RCYM8+VnbYEm\r\nVFts1rmMtLex8UTfrXX4FAla1WdPhlNFCNIlNnabBMTrck7WUTQdO07eNc6kI/wz\r\nQXBAbuLqIp3FEhLcsv9oZQIkQmtAwN2235aN+B0J7bFLaegBg2E+Ur3lIlDPKZvo\r\nU1r+NgDfNf9ZkA8rKJxRENCH5o46SbxI6gPYVTVY8NAy8pj2RFcGMYg1a0DEW1G2\r\nzy/3/4Umud5Mr92ggkJWbKKe7HWqypYEXWhc+vo5fOoCY5XTJza0hOyiW+5vHKMM\r\nYGS81OAQfIV/MJFffSJ581uU6th1s+7g9nWjeT9vGqTSJbNd1P4=\r\n=Xm2a\r\n-----END PGP SIGNATURE-----\r\n",
          "user": {
            "login": "Rspigler",
            "id": 24482484,
            "node_id": "MDQ6VXNlcjI0NDgyNDg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Rspigler",
            "html_url": "https://github.com/Rspigler",
            "followers_url": "https://api.github.com/users/Rspigler/followers",
            "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
            "organizations_url": "https://api.github.com/users/Rspigler/orgs",
            "repos_url": "https://api.github.com/users/Rspigler/repos",
            "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Rspigler/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 11,
          "closed_at": "2022-04-19T12:21:52Z",
          "created_at": "2021-02-03T04:38:01Z",
          "updated_at": "2023-04-19T14:44:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-13T07:21:37Z",
      "updated_at": "2021-05-13T07:21:37Z",
      "source": {
        "issue": {
          "id": 679049998,
          "node_id": "MDU6SXNzdWU2NzkwNDk5OTg=",
          "url": "https://api.github.com/repos/bitcoin-core/gui/issues/56",
          "repository_url": "https://api.github.com/repos/bitcoin-core/gui",
          "labels_url": "https://api.github.com/repos/bitcoin-core/gui/issues/56/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/56/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/56/events",
          "html_url": "https://github.com/bitcoin-core/gui/issues/56",
          "number": 56,
          "state": "open",
          "state_reason": null,
          "title": "offline / multisig UX",
          "body": "Moved from https://github.com/bitcoin/bitcoin/issues/16954.\r\n\r\nContinued discussion from https://github.com/bitcoin/bitcoin/pull/16944#issuecomment-534538035, based on @gwillen's offline signing branch: https://github.com/gwillen/bitcoin/tree/feature-offline-v2\r\n\r\n<img width=\"910\" alt=\"Schermafbeelding 2019-09-24 om 14 09 54\" src=\"https://user-images.githubusercontent.com/10217/65514592-e6090400-dedd-11e9-812b-614df2526946.png\">\r\n\r\nIf we make the entire Send experience a modal, things might get a bit simpler.\r\n  \r\n![IMG_4970](https://user-images.githubusercontent.com/10217/65515874-4600aa00-dee0-11e9-89a3-4848c80540c5.jpg)\r\n\r\nSorry for the handwriting :-) There's 3 stages to a transaction:\r\n1. Draft / compose: enter recipient, amount, fees, etc. (the current Send screen).\r\n\r\nThis step is skipped when loading a PSBT (e.g. via menu: Transaction -> Load, or a smart clipboard).\r\n\r\n2. Sign: currently a popup which confirms the details. With hardware wallets (e.g. #16549) this should enumerate connected wallets and let you sign one by one. In a multisig situation it should detect if any signatures are missing, and rename the 3rd step to \"Export\".\r\n\r\n3. Finish / Export: once again repeat the importantant details. For basic wallets with private keys in it, this should just show that the transaction has been broadcast. With a completed PSBT it should let the user choose between broadcasting or exporting (clipboard, save to disk).",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 2146203879,
              "node_id": "MDU6TGFiZWwyMTQ2MjAzODc5",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Brainstorming",
              "name": "Brainstorming",
              "description": "",
              "color": "f4e095",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "created_at": "2020-08-14T10:04:29Z",
          "updated_at": "2021-05-13T07:21:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-13T07:37:26Z",
      "updated_at": "2021-05-13T07:37:26Z",
      "source": {
        "issue": {
          "id": 494545329,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzE4Mjc1NTA5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16895",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16895/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16895/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16895/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16895",
          "number": 16895,
          "state": "closed",
          "state_reason": null,
          "title": "External signer multisig support",
          "body": "This adds 7 commits on top of #16546 (External signer support) to enable multisig functionality.\r\n\r\nIt introduces a new `createmultisigwallet` RPC which can also be used without external signer support (although it's only marginally easier than importing descriptors).\r\n\r\nIt automatically fetches xpubs from connected hardware devices (using HWI), constructs BIP67 multisig descriptors (native and wrapped SegWit) and imports them into a new wallet. For not connected external signers it's also possible to manually provide an xpub.\r\n\r\nUse `enumeratesigners` to get a list of device fingerprints, and then call the new `createmultisigwallet `:\r\n\r\n```\r\ncreatemultisigwallet \"wallet_name\" threshold [\"fingerprint\",\"xpub1\",\"xpub2\",...] ( avoid_reuse )\r\n\r\nCreates and loads a new multisig wallet.\r\nOnly native segwit bech32 addresses are supported.\r\nArguments:\r\n1. wallet_name           (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.\r\n2. threshold             (numeric, required) Number of required signatures\r\n3. signers               (json array, required) A json array of signers identified by their BIP32 fingerprint\r\n     [\r\n       \"fingerprint\",    (string, required) master key fingerprint. Can be obtained using emumeratesigners.\r\n       \"xpub1\",          (string) the xpub at deriviation path m/48h/0h/0h/1h used for P2SH_SEGWIT, obtained automatically if -signer if configured\r\n       \"xpub2\",          (string) the xpub at deriviation path m/48h/0h/0h/2h used for native SegWit, obtained automatically if -signer if configured\r\n       ...\r\n     ]\r\n4. avoid_reuse           (boolean, optional, default=false) Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\r\n\r\nResult:\r\n{\r\n  \"name\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\r\n  \"warning\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.\r\n}\r\n\r\nExamples:\r\n> bitcoin-cli createmultisigwallet \"ManualMultisigWallet\" 2 '[{\"fingerprint\": \"d34db33f\", \"xpub2\": \"xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY\"}, {\"fingerprint\": \"3442193e\", \"xpub1\": \"xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\"}]'\r\n> bitcoin-cli createmultisigwallet \"AutomaticMultisigWallet\" 2 '[{\"fingerprint\": \"d34db33f\"}, {\"fingerprint\": \"3442193e\"}]'\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisigwallet\", \"params\": [\"ManualMultisigWallet\", 2, '[{\"fingerprint\": \"d34db33f\", \"xpub2\": \"xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY\"}, {\"fingerprint\": \"3442193e\", \"xpub1\": \"xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\"}]'] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisigwallet\", \"params\": [\"AutomaticMultisigWallet\", 2, '[{\"fingerprint\": \"d34db33f\"}, {\"fingerprint\": \"3442193e\"}]'] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n```\r\n\r\nIt uses the `getxpub` HWI method instead of `getdescriptors`, and constructs the descriptor locally.\r\n\r\nTODO:\r\n- [ ] displayaddress support for all connected devices (only ColdCard can handle this afaik, but requires producing a Multisig.txt file)\r\n- [ ] wait for improved change address detection support, or add strong warning\r\n\r\n\r\nSee also: [Junction](https://github.com/justinmoon/junction) or [Specter Desktop](https://github.com/cryptoadvance/specter-desktop) for similar workflows.\r\n\r\n## Change detection\r\n\r\nNote that due to limitations in HWI, hardware wallet firmware and the PSBT format, the current multisig flow is pretty unsafe. This is because change detection generally doesn't work.\r\n\r\nOn ColdCard you can put a `multisig.txt` file to enable change detection:\r\n```\r\nName: My-2-of-2\r\nPolicy: 2 of 2\r\nDerivation: m/48h/0h/0h/2h\r\n\r\nA1A1A1A1: xpub...\r\nB1B1B1B1: xpub...\r\n```",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16895",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16895",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16895.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16895.patch"
          },
          "closed_at": "2020-02-19T12:29:13Z",
          "created_at": "2019-09-17T10:43:29Z",
          "updated_at": "2022-11-18T09:56:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-13T07:46:15Z",
      "updated_at": "2021-05-13T07:46:15Z",
      "source": {
        "issue": {
          "id": 564928115,
          "node_id": "MDU6SXNzdWU1NjQ5MjgxMTU=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/18142",
          "number": 18142,
          "state": "closed",
          "state_reason": "completed",
          "title": "Coordinate multi-sig wallet",
          "body": "Multiple people, or even just one person with multiple devices, want to setup a multi-sig wallet. The end result is a [descriptor wallet](https://github.com/bitcoin/bitcoin/pull/16528), perhaps [miniscript enhanced](https://github.com/bitcoin/bitcoin/pull/16800).\r\n\r\nProblem: how do you coordinate this setup? See Electrum thread about the same issue: https://github.com/spesmilo/electrum/issues/5715\r\n\r\nBonus points: it should also work with a protocol like MuSig that requires more than one round of communication.\r\n\r\n## Current situation\r\n\r\nI made a [tutorial and screencast](https://nthkey.com/tutorial) of a setup flow, in this case using two signers: a ColdCard  and an iOs app that I'm working on. It's based on the flow ColdCard uses to setup a multisig between two of their devices. [Specter wallet](https://github.com/cryptoadvance) uses a similar flow and the same file format, last time I checked.\r\n\r\nThe general idea there is for each cosigner to export a (JSON) file with information about their public keys, and for the other signers to import that. Derivation paths are standardised (see also #16895). All participating devices will derive the same addresses; the user just needs to enter the (same) threshold on all devices.\r\n\r\nThe above is pretty easy to implement.\r\n\r\n## Flexible signer policies\r\n\r\nThe above approach requires everyone to contribute a single key. Individual participants can't do fancy stuff like having their own internal multisig setup or some backup key after a timeout. Yet this could be very useful, e.g. imagine a user with two hardware wallets who wants to use an external service provider as the third key. That service provider may have some super fancy setup, but they don't want to ship custom software to the user, let alone merge their special sauce into Bitcoin Core. What if you could use the Green Address service, but with your favourite orange QT wallet?\r\n\r\nA more flexible setup could use miniscript, where each participant provides a policy language snippet they want to use. These are then aggregated with `thresh(M, policy1, policy2, ... policyN)`. The result is then compiled by a coordinator (one of the participants) and shared with the others. Each participant could use a simple public key, or some super convoluted scheme. The cool thing about miniscript if that each participant can verify, without understanding the policy of the others, that they indeed control 1/Nth.\r\n\r\nIIUC the plan is to [combine](https://github.com/bitcoin/bitcoin/pull/16800) the powers of miniscript and output descriptors, and eventually add that to the wallet. Hopefully this allows for putting xpubs and origin info in both the policy language and the miniscript itself.\r\n\r\nThere is no current plan to add the policy language to miniscript compiler to Bitcoin Core, but we can start with a naive concatenation of participant miniscripts. Also AFAIK existing hardware wallets don't support anything other than plain OP_CHECKMULTISIG (`thresh_m(2, xpub1, xpub2, xpub3))` anyway.\r\n\r\nIn other words, we would use future proof syntax like the policy language, but in practice \"compile\" only to trivial, non-optimized, miniscript(s) that match what we can already do with descriptors.\r\n\r\n## Wallet composer file?\r\n\r\nWhat I have in mind is to (wait for someone else to) design a (binary) format, perhaps similar to PSBT, to compose a wallet interactively.\r\n\r\nIt would start with a coordinator. They populate the file with the \"shape\" of the wallet (YAML for illustrative purposes): \r\n\r\n```yaml\r\n- descriptor: null\r\n- policy: thresh(2, participant_1, participant_2, participant_3))\r\n- participant_1:\r\n   - policy: null\r\n- participant_2:\r\n   - policy: null\r\n- participant_3:\r\n   - policy: null\r\n```\r\n\r\nThen the first participant, probably the coordinator, fills in their details. They can also list their (advanced) capabilities, e.g. if they're able to decompile miniscript or only understand very basic policies.\r\n\r\n```yaml\r\n- descriptor: null\r\n- policy: thresh(2, participant_1, participant_2, participant_3))\r\n- participant_1:\r\n   - policy: c:pk([00000000]/m/48h/0h/0h/2h/xpub_1/{0,1}/*)\r\n   - can_decompile_miniscript: false\r\n- participant_2:\r\n   - policy: null\r\n- participant_3:\r\n   - policy: null\r\n```\r\n\r\nThe file is then passed to participants 2 and 3. Participant 3 will have all the info it needs to construct a final descriptor (set), and it can prompt the user to \"commit\" to that wallet:\r\n\r\n```yaml\r\n- descriptor: multi(2, [00000000]/m/48h/0h/0h/2h/xpub_1/{0,1}/*, ......)\r\n- policy: ...\r\netc...\r\n```\r\n\r\n(`{0,1}` is a fake descriptor syntax; for now you need a separate receive and change descriptor)\r\n\r\nEach participant needs to \"commit\" to the wallet, in the sense of storing it in their memory. This lets them display receive addresses, and it lets them check the change address before signing a transaction.\r\n\r\nIt then passes it to the other participants. If the devices all have screens, the user can now compare the first receive address as a sanity check.\r\n\r\nBitcoin Core should be able to import this a watch-only descriptor wallet (or maybe it has one of the keys).\r\n\r\nIf any of the devices isn't smart / powerful enough to figure out the descriptor, then it needs to go back to the coordinator first. Conversely you could start with a round where each participant announces their capabilities (support for lock times, if they can decompile miniscript and understand their role in the top policy, taproot support, resource limits, etc). A coordinator can then propose a top level policy based on that.\r\n\r\nAdditional fields can be added e.g. to include nonces for a musig pubkey generation ritual. Also additional fields could contain friendly names for the participants.\r\n\r\nIdeally the whole thing is small enough to copy-paste or put in a QR code (e.g. bech32-ish encoded).",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 41,
          "closed_at": "2022-09-06T13:28:17Z",
          "created_at": "2020-02-13T20:20:45Z",
          "updated_at": "2022-09-06T19:28:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "renamed",
      "id": 4749236323,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDc0OTIzNjMyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749236323",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-14T22:57:01Z",
      "rename": {
        "from": "BIP: Bitcoin Secure Multisig Setup (BSMS)",
        "to": "BIP 129: Bitcoin Secure Multisig Setup (BSMS)"
      }
    },
    {
      "event": "commented",
      "id": 841540577,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTU0MDU3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841540577",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-14T22:57:15Z",
      "updated_at": "2021-05-14T22:57:15Z",
      "author_association": "MEMBER",
      "body": "Assigned BIP number 129. Please rename file and update README",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-841540577",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjY0NGUyOTMzZTk4YjFhMzBmNDQyZTcxMWMzYjIwNDlmNTMxYTk5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b644e2933e98b1a30f442e711c3b2049f531a997",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b644e2933e98b1a30f442e711c3b2049f531a997",
      "tree": {
        "sha": "7e49beb5e079d40d68b1eb55aa50a943d55faf7b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7e49beb5e079d40d68b1eb55aa50a943d55faf7b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7e49beb5e079d40d68b1eb55aa50a943d55faf7b\nparent 47847fe874764a0ffc9addbcfc692e5199a7339d\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1621041248 -0700\ncommitter GitHub <noreply@github.com> 1621041248 -0700\n\nupdate BIP number and rename file",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgnyBgCRBK7hj4Ov3rIwAAk+IIAACYhJ+LQtJu/hLQsf+EEKUg\nGuoKuvaiJi3TCwmvMxxnVrvYvyYre5Beo/9P4QwLuJWfG/5pKrhnrEteuGX97hz1\nl4OrJEX+VxFGt9mXjhYOi9pyprN2DHS8O/8HHFm83Z3Dh4SI48dZgRkh2Q9b3pew\nPSmJoTrmIYulZ52FGLPWk3ChoD/aXb/bubrs1SeF7yMCC1wq94GdZcH3of2DNTwB\n1toII0Kncs8dGcLii6s2Y/QgEBGevoypbDWWSWyxMdywOPJvLU8oEBhkb1WJUii1\nDXKqhJ1v7ZQOVYdsfj93wIUm1EULZoZk6sR57SXrV0M+K6pYrbKCxQmblEf8iL4=\n=hS+8\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/47847fe874764a0ffc9addbcfc692e5199a7339d",
          "sha": "47847fe874764a0ffc9addbcfc692e5199a7339d",
          "html_url": "https://github.com/bitcoin/bips/commit/47847fe874764a0ffc9addbcfc692e5199a7339d"
        }
      ],
      "message": "update BIP number and rename file",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-15T01:14:08Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-15T01:14:08Z"
      },
      "sha": "b644e2933e98b1a30f442e711c3b2049f531a997"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzNlNTgxY2EwNmIyOGFmYjQ0MTlhNGRjM2U1MmRiZjM4NDA5MDc1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/73e581ca06b28afb4419a4dc3e52dbf384090759",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/73e581ca06b28afb4419a4dc3e52dbf384090759",
      "tree": {
        "sha": "c043fb2c6bc69b94297cb335450c38b21581d672",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c043fb2c6bc69b94297cb335450c38b21581d672"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c043fb2c6bc69b94297cb335450c38b21581d672\nparent b644e2933e98b1a30f442e711c3b2049f531a997\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1621042198 -0700\ncommitter GitHub <noreply@github.com> 1621042198 -0700\n\nBIP 129: Bitcoin Secure Multisig Setup (BSMS)",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgnyQWCRBK7hj4Ov3rIwAAdfMIAKsM96uRSy4ImNZbbCBQb2vE\nRkgVH7YmsB1QG1gpemP6p3+r2Q4UMFQRn3BuAE+3p37XKwkSZ5EY6spLyIWQAXzV\n1tlsffFTRvHE7Nw5iDGEKWsN0y68sUq/b1RvGOt2JJZndBNy64j88xRQGwQHMUlu\nsHRWcOC3R6xIj8H8iOqxR6zS8rciSbhr9qRmO1R8vJMBo2BtVnArxVxmjmOaFYBC\nav9fkZTuOqs26a6Wvcibxb4+IF6pSr7W5TdD77pxsDSMZM+LZ5gpw60Vi9eQwjvZ\nhXjuTlkfrZ8c8djrkSEJGGo9Ak+fvXxCqDSpfG6LDABP5LP5eJkheELDXnMu6N8=\n=DYyy\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b644e2933e98b1a30f442e711c3b2049f531a997",
          "sha": "b644e2933e98b1a30f442e711c3b2049f531a997",
          "html_url": "https://github.com/bitcoin/bips/commit/b644e2933e98b1a30f442e711c3b2049f531a997"
        }
      ],
      "message": "BIP 129: Bitcoin Secure Multisig Setup (BSMS)",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-15T01:29:58Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-15T01:29:58Z"
      },
      "sha": "73e581ca06b28afb4419a4dc3e52dbf384090759"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MGU5YWVmNWQ5ZWQ2NGRiMjlmNGZhNzRlZjIyZTE5NzRlMTk4NzQ5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0e9aef5d9ed64db29f4fa74ef22e1974e1987496",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0e9aef5d9ed64db29f4fa74ef22e1974e1987496",
      "tree": {
        "sha": "2829f014e3aeadb682db89a7694b8d162804ef48",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2829f014e3aeadb682db89a7694b8d162804ef48"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2829f014e3aeadb682db89a7694b8d162804ef48\nparent 73e581ca06b28afb4419a4dc3e52dbf384090759\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1621042627 -0700\ncommitter GitHub <noreply@github.com> 1621042627 -0700\n\nCorrect BIP number",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgnyXDCRBK7hj4Ov3rIwAANjcIAGhc+Uv6TL3lS6u+F50bclLT\nA0/G/6ud4jK13vAN7KuBTl1q22J84Pch9PWoeXAQnm49IdyYUuS5a9WPlMtl0R/T\nk3qBYrBvIyILNea3LKFHPbfzDZPqQd8C0ae1qO4CZQpC4POUYP/IrPiMjplpnEY7\n5tqZnFE4mO4ynzblwZpzQrj/nAMCW7BXIt/SArQhLZqfHCyMNa6c/PHsgl3n3PUq\nv4Kj2vU7kqdLn+DN/SJCDAFUl1sZpTgmj5EjF6PZgGncKCfjTx/DEDv+icF/JUJW\noHi2d7XHmr+q0kqidCzun+/ZphP9f+DenPAjwId6f0WsM2psKDPze8FbkEzZoHE=\n=AyoG\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/73e581ca06b28afb4419a4dc3e52dbf384090759",
          "sha": "73e581ca06b28afb4419a4dc3e52dbf384090759",
          "html_url": "https://github.com/bitcoin/bips/commit/73e581ca06b28afb4419a4dc3e52dbf384090759"
        }
      ],
      "message": "Correct BIP number",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-15T01:37:07Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-15T01:37:07Z"
      },
      "sha": "0e9aef5d9ed64db29f4fa74ef22e1974e1987496"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzZjMTAzYTBlZmZkNzNhMGNiZTJmMzVkZWJiNmY1NTAxMzI4YWYxYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/76c103a0effd73a0cbe2f35debb6f5501328af1b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/76c103a0effd73a0cbe2f35debb6f5501328af1b",
      "tree": {
        "sha": "5a9066e174b4f00695b35656360a7bddd9eafb3c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5a9066e174b4f00695b35656360a7bddd9eafb3c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5a9066e174b4f00695b35656360a7bddd9eafb3c\nparent 0e9aef5d9ed64db29f4fa74ef22e1974e1987496\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1621042691 -0700\ncommitter GitHub <noreply@github.com> 1621042691 -0700\n\nFix email format",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgnyYDCRBK7hj4Ov3rIwAAbHcIALNZQ7LgPV0ZBx1080pV/c3I\nkDRsr5LfBXbbNFyWaMnCv/86pqamoLTbmZT+UqDqGUO8nCloT/AdHUMb9qh+gGBr\nFPKz3Ks+pRYzSnUOXs5UBn1S72w7bdoliuzwscvSdvs5okQVvvElyQDcuyjwn0JK\nRjTlVq3ypdsr/oK/pDxoGajk5YP6hTBaX9EfwQZ47DWi6BnOX/Z7UaB16AET+okg\nEmehdmcO+NOpIjWMaFsOuY2uynNWb9wVToz4gMbGsPM1bS8ZnnF4eKGs1gmqFqR6\na8tbqbFGHIXqch7yXn0eIqhel3sR0L+HisZrEaJyVyqtfQRppDd8YbLr+97OlSE=\n=oddV\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0e9aef5d9ed64db29f4fa74ef22e1974e1987496",
          "sha": "0e9aef5d9ed64db29f4fa74ef22e1974e1987496",
          "html_url": "https://github.com/bitcoin/bips/commit/0e9aef5d9ed64db29f4fa74ef22e1974e1987496"
        }
      ],
      "message": "Fix email format",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-15T01:38:11Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-15T01:38:11Z"
      },
      "sha": "76c103a0effd73a0cbe2f35debb6f5501328af1b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzkyNDliMjMwYjQzZTU3MmRkMjlhMjljNDMyMTZlZjgwNWY2OTQzZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c9249b230b43e572dd29a29c43216ef805f6943e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c9249b230b43e572dd29a29c43216ef805f6943e",
      "tree": {
        "sha": "c4d42918c5c69aac7543cd52709558e49d59333d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c4d42918c5c69aac7543cd52709558e49d59333d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c4d42918c5c69aac7543cd52709558e49d59333d\nparent 76c103a0effd73a0cbe2f35debb6f5501328af1b\nauthor Hugo Nguyen <hugh.hn@gmail.com> 1621043030 -0700\ncommitter GitHub <noreply@github.com> 1621043030 -0700\n\nupdate URI",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgnydWCRBK7hj4Ov3rIwAAyacIAHcKizA3ZFpYISoMV7hkSqNM\nMYwlcQBgZoWgTyur9wC+zhnp9uh4RrnJUNfFB6vDwMY3Mddl98dBe8v4hDg2VyuL\nUKH+jxUsfJVK8ktC8A/DQNNC7yd/CqhfqqU8By/JD3Z8wui+E0XlJWjVB3YwwQAm\nE2DbZxLxqhuyUAiMVD2Yc0y1mXkT5Gfr5+o6tvrSKVHzd4+siWUHakJ9Avw0p0jn\nnMEp3TYfycY0JNf9afVXh4+3Jc6duytcitXguo8ndu5hwDJSjU/kmAyXkPB78M7z\nQQXb8EoDPY0TnMQXXbMvUYit4TKG+Ia6kf1Y9eKiruUhsppD5vcbE5JQzZNWcvM=\n=FxvX\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/76c103a0effd73a0cbe2f35debb6f5501328af1b",
          "sha": "76c103a0effd73a0cbe2f35debb6f5501328af1b",
          "html_url": "https://github.com/bitcoin/bips/commit/76c103a0effd73a0cbe2f35debb6f5501328af1b"
        }
      ],
      "message": "update URI",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-05-15T01:43:50Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2021-05-15T01:43:50Z"
      },
      "sha": "c9249b230b43e572dd29a29c43216ef805f6943e"
    },
    {
      "event": "commented",
      "id": 841580865,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTU4MDg2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841580865",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T01:44:56Z",
      "updated_at": "2021-05-15T01:44:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Done. @luke-jr ",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1097#issuecomment-841580865",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1097"
    },
    {
      "event": "mentioned",
      "id": 4749447234,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDc0OTQ0NzIzNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749447234",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T01:44:56Z"
    },
    {
      "event": "subscribed",
      "id": 4749447237,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3NDk0NDcyMzc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749447237",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T01:44:56Z"
    },
    {
      "event": "merged",
      "id": 4749558515,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDc0OTU1ODUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749558515",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5bbfab9c565b6d2acd60446b913eb32a510709a7",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/5bbfab9c565b6d2acd60446b913eb32a510709a7",
      "created_at": "2021-05-15T04:29:03Z"
    },
    {
      "event": "closed",
      "id": 4749558517,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDc0OTU1ODUxNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749558517",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T04:29:04Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/608684114",
      "pull_request_review_id": 630047511,
      "id": 608684114,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY4NDExNA==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies the descriptor’s <tt>CHECKSUM</tt>.\n+* The Signer verifies that it can support the descriptor.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* For confirmation, the Signer must display to the user the <tt>CHECKSUM</tt>, the derivation path restrictions and the policy parameters, such as <tt>M</tt>, <tt>N</tt> and the position(s) of its own XPUB in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where key order matters. When applicable, all positions of the XPUB must be displayed. The full descriptor must also be available for review upon user request. \n+* When possible, the Signer should also show a preview of the first address(es) of the wallet.\n+* Parties must check with each other that all Signers have verified the descriptor and has the same confirmation (except for the key positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>. Encryption is disabled.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 118,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": null,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is clear from the test vectors below, but if not too much trouble, I'd clarify here that it it set to `0` the byte, not `0` the digit (ascii byte 48).",
      "created_at": "2021-04-07T14:02:23Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r608684114",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/608684114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/611741109",
      "pull_request_review_id": 633689802,
      "id": 611741109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTc0MTEwOQ==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": null,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A minor note: while the third line is _syntactically_ a valid descriptor as per Bitcoin Core, it isn't _semantically_. For example, `wsh(sortedmulti(2,keyA/*,keyB/*))#checksum` describes the list `[wsh(sortedmulti(2,keyA/0,keyB/0)), wsh(sortedmulti(2,keyA/1,keyB/1))], wsh(sortedmulti(2,keyA/2,keyB/2)), ...]`, which is very different from what it represents in the context of BSMS. Therefore, calling that a _descriptor_ might generate confusion, as [it has already happened](https://github.com/nunchuk-io/bips/pull/1/#issuecomment-804152141) in the discussion.\r\n\r\nThe idea of separating the valid derivation paths from the output descriptors is great, as it works well for any multisig scenario, and as far as I understand it seamlessly generalizes to miniscript policies).\r\n \r\nTherefore, I think it might be worth finding a new term (for example _descriptor template_; or _wallet descriptor_) and have a short paragraph in the introduction to explain how the _descriptor template_ is expanded with the possible derivation paths to obtain the full list of output script descriptors, which would harmonize the naming with Core.\r\nSuch descriptor template, as it currently stands, would be exactly like a descriptor, except it redefines the meaning of the `*` symbol.",
      "created_at": "2021-04-12T15:39:10Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r611741109",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/611741109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/611917364",
      "pull_request_review_id": 633918696,
      "id": 611917364,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxNzM2NA==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "+1 on descriptor template or similar naming.  So many vendors/applications do this, so it would be good to try standardize this and not confuse with the same naming",
      "created_at": "2021-04-12T20:02:48Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r611917364",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/611917364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/614706373",
      "pull_request_review_id": 637520345,
      "id": 614706373,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDcwNjM3Mw==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies the descriptor’s <tt>CHECKSUM</tt>.\n+* The Signer verifies that it can support the descriptor.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* For confirmation, the Signer must display to the user the <tt>CHECKSUM</tt>, the derivation path restrictions and the policy parameters, such as <tt>M</tt>, <tt>N</tt> and the position(s) of its own XPUB in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where key order matters. When applicable, all positions of the XPUB must be displayed. The full descriptor must also be available for review upon user request. \n+* When possible, the Signer should also show a preview of the first address(es) of the wallet.\n+* Parties must check with each other that all Signers have verified the descriptor and has the same confirmation (except for the key positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>. Encryption is disabled.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 118,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 608684114,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-04-16T09:41:09Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r614706373",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/614706373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615203653",
      "pull_request_review_id": 638196161,
      "id": 615203653,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIwMzY1Mw==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't have a strong opinion on this, since it's just a very small difference in terminology. Calling that line a \"descriptor template\" is fine with me. But IMHO calling it just a \"descriptor\" is not wrong either, syntactically and semantically.\r\n\r\n> Such descriptor template, as it currently stands, would be exactly like a descriptor, except it redefines the meaning of the `*` symbol.\r\n\r\nI don't think we are redefining the meaning of `/*`. `/*` simply means that the Signers are entering a contract that accepts all non-hardened keys/addresses under the XPUBs being submitted.\r\n\r\nAn address generated from `/0/*` belongs to the address space of `/*` as well.\r\n\r\nOne can think of `/0/*` and `/1/*` as conventions that parties agree among themselves to reduce the usable address space within `/*`.\r\n\r\n\r\n",
      "created_at": "2021-04-17T04:12:21Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r615203653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615203653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615218172",
      "pull_request_review_id": 638204748,
      "id": 615218172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIxODE3Mg==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> An address generated from `/0/*` belongs to the address space of `/*` as well.\r\n> \r\n> One can think of `/0/*` and `/1/*` as conventions that parties agree among themselves to reduce the usable address space within `/*`.\r\n\r\nThis is _not_ what `*` means in output descriptors, and the precise reason you want a different term (if not a different symbol altogether).\r\n\r\nIn hindsight, I would have preferred to have the `#` symbol in output descriptors for the _address index_, and reserve `*` for use cases like yours.\r\n",
      "created_at": "2021-04-17T06:57:32Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r615218172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615218172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615218529",
      "pull_request_review_id": 638204941,
      "id": 615218529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIxODUyOQ==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another option could be to use `\\**` for the descriptor template, which is a standard way of matching _all subpaths_ when describing paths in a filesystem (e.g. in `.gitignore`), which is a familiar semantics for many people. Moreover, it would be visually different and an invalid descriptor. This is desirable in my opinion, since entering the descriptor template into a descriptor wallet would _not_ find any valid addresses!\r\n\r\nThis might also address the concerns that @Rspigler and @prusnak voiced multiple times.",
      "created_at": "2021-04-17T07:01:08Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r615218529",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615218529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615218947",
      "pull_request_review_id": 638205214,
      "id": 615218947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIxODk0Nw==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > An address generated from `/0/*` belongs to the address space of `/*` as well.\r\n> > One can think of `/0/*` and `/1/*` as conventions that parties agree among themselves to reduce the usable address space within `/*`.\r\n> \r\n> This is _not_ what `*` means in output descriptors\r\n\r\nWhat do you mean? I'm interpreting `*` here as per defined in https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md:\r\n\r\n> Optionally followed by a single /* or /*' final step **to denote all (direct) unhardened or hardened children**.\r\n\r\n`/*` literally means all unhardened children, of which `/0/*` and `/1/*` are subsets.",
      "created_at": "2021-04-17T07:06:00Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r615218947",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615218947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615219505",
      "pull_request_review_id": 638205546,
      "id": 615219505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIxOTUwNQ==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "_direct_, as in _exactly 1 level of derivation_. Perhaps that page should be clarified as well, I had the same confusion the first time I read it.\r\n\r\nThe rationale is: a descriptor wallet needs to give enough information to _easily_ find the described addresses. Therefore, you want a 1-dimensional list you can iterate.",
      "created_at": "2021-04-17T07:11:24Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r615219505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615219505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615220186",
      "pull_request_review_id": 638205963,
      "id": 615220186,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIyMDE4Ng==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> _direct_, as in _exactly 1 level of derivation_. Perhaps that page should be clarified as well, I had the same confusion the first time I read it.\r\n\r\nI actually missed this. Good point, I stand corrected.",
      "created_at": "2021-04-17T07:18:23Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r615220186",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615220186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615220610",
      "pull_request_review_id": 638206207,
      "id": 615220610,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIyMDYxMA==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In that case, I agree we should rename this a \"descriptor template\", and have a short explanation of what it is.",
      "created_at": "2021-04-17T07:23:42Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r615220610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615220610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615477412",
      "pull_request_review_id": 638389307,
      "id": 615477412,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTQ3NzQxMg==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I like this, and will update https://github.com/bitcoin/bips/pull/1089 to use the same terminology",
      "created_at": "2021-04-18T23:50:49Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r615477412",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/615477412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616008341",
      "pull_request_review_id": 639084747,
      "id": 616008341,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjAwODM0MQ==",
      "diff_hunk": "@@ -0,0 +1,394 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums BECH32 encoding].",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "89c7529650913ec890c77aa71d5874cb09195e9e",
      "in_reply_to_id": 611741109,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done https://github.com/bitcoin/bips/pull/1097/commits/17a5a858e2045c6689a7e2f0cc4b77b90cdcf6f7",
      "created_at": "2021-04-19T16:40:42Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r616008341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616008341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616150275",
      "pull_request_review_id": 639272177,
      "id": 616150275,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1MDI3NQ==",
      "diff_hunk": "@@ -0,0 +1,413 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its key is included in the descriptor record and persisting the descriptor record in its storage.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 58,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "verifying that its key is included -> `<tt>KEY</tt>`",
      "created_at": "2021-04-19T20:19:38Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r616150275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616150275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616151304",
      "pull_request_review_id": 639273488,
      "id": 616151304,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1MTMwNA==",
      "diff_hunk": "@@ -0,0 +1,413 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its key is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the key at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing keys for different wallets.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 74,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "retrieves the key -> `<tt>KEY</tt>`",
      "created_at": "2021-04-19T20:21:28Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r616151304",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616151304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616152849",
      "pull_request_review_id": 639275432,
      "id": 616152849,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1Mjg0OQ==",
      "diff_hunk": "@@ -0,0 +1,413 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its key is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the key at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing keys for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 88,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~~, for all N SIG's~~ Disregard.",
      "created_at": "2021-04-19T20:23:59Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r616152849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616152849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616157780",
      "pull_request_review_id": 639281931,
      "id": 616157780,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1Nzc4MA==",
      "diff_hunk": "@@ -0,0 +1,413 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its key is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the key at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing keys for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of accepted derivation paths, to be applied to the template. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "KEY is included in descriptor or descriptor template",
      "created_at": "2021-04-19T20:32:16Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r616157780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616157780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616159180",
      "pull_request_review_id": 639283807,
      "id": 616159180,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1OTE4MA==",
      "diff_hunk": "@@ -0,0 +1,413 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its key is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the key at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing keys for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of accepted derivation paths, to be applied to the template. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid given the descriptor and the path restrictions.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> First address is valid given the descriptor\r\n\r\nAt this point, should the descriptor template have expanded into two descriptors? When a user asks the software/hardware to show the descriptor (for confirmation) does this standard say to provide the template, or the expanded descriptors?",
      "created_at": "2021-04-19T20:34:48Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r616159180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616159180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616161746",
      "pull_request_review_id": 639287010,
      "id": 616161746,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE2MTc0Ng==",
      "diff_hunk": "@@ -0,0 +1,413 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its key is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the key at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing keys for different wallets.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 74,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "in_reply_to_id": 616151304,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also:\r\ntry to avoid reusing KEYs for different wallets",
      "created_at": "2021-04-19T20:39:05Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r616161746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/616161746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/619606496",
      "pull_request_review_id": 643979672,
      "id": 619606496,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTYwNjQ5Ng==",
      "diff_hunk": "@@ -0,0 +1,413 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extension===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its key is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the key at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing keys for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of accepted derivation paths, to be applied to the template. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid given the descriptor and the path restrictions.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "3eb481c5519597584fb7a00203d81a6dce41a709",
      "in_reply_to_id": 616159180,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It has to be expanded in order to verify the validity of the first address. I don't think it needs to be said since there's no other way to validate.\r\n\r\nThe template, since path restrictions are shown as well. I've clarified in the text.",
      "created_at": "2021-04-24T07:50:30Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r619606496",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/619606496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/625885709",
      "pull_request_review_id": 651379745,
      "id": 625885709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTg4NTcwOQ==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 183,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you add something about how this interacts with existing multisig technology?",
      "created_at": "2021-05-04T15:33:05Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r625885709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/625885709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/625892291",
      "pull_request_review_id": 651379745,
      "id": 625892291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTg5MjI5MQ==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(As reviewer, not BIP editor) Shouldn't there be a way to differentiate BSMS files other than context/message?",
      "created_at": "2021-05-04T15:41:21Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r625892291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/625892291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626240587",
      "pull_request_review_id": 651821982,
      "id": 626240587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjI0MDU4Nw==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625892291,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@luke-jr the `.bsms` file extension is another way to differentiate.\r\n\r\nSjors suggested adding magic bytes to the files, but I've decided against it. Magic bytes are typically reserved for binary data format, whereas BSMS records are simple text files.",
      "created_at": "2021-05-05T04:04:58Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r626240587",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626240587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626247078",
      "pull_request_review_id": 651829265,
      "id": 626247078,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjI0NzA3OA==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 183,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625885709,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@luke-jr done https://github.com/bitcoin/bips/pull/1097/commits/83aa04776d38e18f03cd766102cfcefb5b244c9f https://github.com/bitcoin/bips/pull/1097/commits/0408b412f9147e402a2205b23c5ef942a75ddcb7",
      "created_at": "2021-05-05T04:35:20Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r626247078",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626247078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626659935",
      "pull_request_review_id": 652433727,
      "id": 626659935,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjY1OTkzNQ==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625892291,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But the file on line 79 is also a BSMS file...?",
      "created_at": "2021-05-05T15:14:59Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r626659935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626659935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626661038",
      "pull_request_review_id": 652435226,
      "id": 626661038,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjY2MTAzOA==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 183,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625885709,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I mean BSMS compatibility with current multisig hardware/softfork/firmware. It sounds like it's simply not compatible (since you are advising all users must upgrade before using BSMS)?",
      "created_at": "2021-05-05T15:16:16Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r626661038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626661038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626663758",
      "pull_request_review_id": 652438952,
      "id": 626663758,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjY2Mzc1OA==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625892291,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@luke-jr yes. you can look at the test vectors for a concrete example.",
      "created_at": "2021-05-05T15:19:26Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r626663758",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626663758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626682168",
      "pull_request_review_id": 652464243,
      "id": 626682168,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjY4MjE2OA==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 183,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625885709,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@luke-jr BSMS is opt-in so it doesn't really affect existing multisig wallets (unlike many changes at the Bitcoin protocol layer where everyone has to upgrade). If you already had a multisig wallet, you can continue using it as-is, with the caveat that existing multisig solutions on the market are full of pitfalls. @benma wrote an article on this topic last year: https://benma.github.io/2020/11/05/multisig-xpubs-verification.html. We also discovered a related vulnerability that motivated us to write this standard in the first place. See https://medium.com/nunchuk/the-missing-multisig-standard-5b4092e3ea92.\r\n\r\nThe stateful nature of the Signer and an interoperable multisig configuration proposed in this spec are to address the problems with existing solutions.\r\n\r\nTo use BSMS, vendors (such as Coldcard, Trezor, BitBox02, Ledger, Cobo etc.) first have to update their firmware to add support for BSMS. After the users upgrade to the new firmware, they can create new multisig wallets or upgrade their existing ones to use BSMS. But it's entirely opt-in.",
      "created_at": "2021-05-05T15:41:09Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r626682168",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626682168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626825386",
      "pull_request_review_id": 652652193,
      "id": 626825386,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjgyNTM4Ng==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 183,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625885709,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, this kind of stuff should be in the BIP",
      "created_at": "2021-05-05T19:04:22Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r626825386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/626825386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/627047224",
      "pull_request_review_id": 652923803,
      "id": 627047224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA0NzIyNA==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 183,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625885709,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@luke-jr added some more details here https://github.com/bitcoin/bips/pull/1097/commits/f13cd8dde9e67003fcc952de02d0b63c4db5bbac. Note that I'm trying to use a broader language so as to avoid referring to any vendors, or types of vendors specifically.",
      "created_at": "2021-05-06T03:09:19Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r627047224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/627047224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/628682199",
      "pull_request_review_id": 654947637,
      "id": 628682199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY4MjE5OQ==",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 183,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "83e9b39eb9159b367bb04a2477d5f8677f05632d",
      "in_reply_to_id": 625885709,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@luke-jr https://github.com/bitcoin/bips/pull/1097/commits/229a60bf8e180f6d78acce111018d261b8327dec",
      "created_at": "2021-05-08T02:43:49Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r628682199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/628682199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/628807634",
      "pull_request_review_id": 655027816,
      "id": 628807634,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODgwNzYzNA==",
      "diff_hunk": "@@ -0,0 +1,464 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==\n+This specification is not backwards compatible with existing multisig implementations.\n+\n+BSMS is opt-in, meaning existing multisig implementations can continue working as-is, with the caveat that they are full of pitfalls. Some of the problems have been described in the [[#Motivation]] section.\n+\n+To comply with this standard, a Signer must be able to persist the descriptor record in its storage.\n+\n+Once a Signer has implemented BSMS, the user can create new multisig wallets using BSMS or migrate existing ones to BSMS.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 194,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "229a60bf8e180f6d78acce111018d261b8327dec",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How would a migration work? This standard is about setup, so isn't the only option to create a new wallet?",
      "created_at": "2021-05-08T23:15:32Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r628807634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/628807634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/628807751",
      "pull_request_review_id": 655027854,
      "id": 628807751,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODgwNzc1MQ==",
      "diff_hunk": "@@ -0,0 +1,464 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==\n+This specification is not backwards compatible with existing multisig implementations.\n+\n+BSMS is opt-in, meaning existing multisig implementations can continue working as-is, with the caveat that they are full of pitfalls. Some of the problems have been described in the [[#Motivation]] section.\n+\n+To comply with this standard, a Signer must be able to persist the descriptor record in its storage.\n+\n+Once a Signer has implemented BSMS, the user can create new multisig wallets using BSMS or migrate existing ones to BSMS.\n+\n+Existing multisig wallets should delay upgrading to BSMS until all participating Signers have implemented BSMS.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 196,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "229a60bf8e180f6d78acce111018d261b8327dec",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Depending on previous comment:\r\nDelay upgrading and/or delay creating new wallets until all Signers have implemented...",
      "created_at": "2021-05-08T23:16:38Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r628807751",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/628807751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630034666",
      "pull_request_review_id": 656527994,
      "id": 630034666,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDAzNDY2Ng==",
      "diff_hunk": "@@ -0,0 +1,464 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==\n+This specification is not backwards compatible with existing multisig implementations.\n+\n+BSMS is opt-in, meaning existing multisig implementations can continue working as-is, with the caveat that they are full of pitfalls. Some of the problems have been described in the [[#Motivation]] section.\n+\n+To comply with this standard, a Signer must be able to persist the descriptor record in its storage.\n+\n+Once a Signer has implemented BSMS, the user can create new multisig wallets using BSMS or migrate existing ones to BSMS.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 194,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "229a60bf8e180f6d78acce111018d261b8327dec",
      "in_reply_to_id": 628807634,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, \"migrate\" here just means creating a new wallet using existing keys.\r\n",
      "created_at": "2021-05-11T10:11:54Z",
      "updated_at": "2021-05-11T10:36:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r630034666",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630034666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630050333",
      "pull_request_review_id": 656548866,
      "id": 630050333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDA1MDMzMw==",
      "diff_hunk": "@@ -0,0 +1,464 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==\n+This specification is not backwards compatible with existing multisig implementations.\n+\n+BSMS is opt-in, meaning existing multisig implementations can continue working as-is, with the caveat that they are full of pitfalls. Some of the problems have been described in the [[#Motivation]] section.\n+\n+To comply with this standard, a Signer must be able to persist the descriptor record in its storage.\n+\n+Once a Signer has implemented BSMS, the user can create new multisig wallets using BSMS or migrate existing ones to BSMS.\n+\n+Existing multisig wallets should delay upgrading to BSMS until all participating Signers have implemented BSMS.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 196,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "229a60bf8e180f6d78acce111018d261b8327dec",
      "in_reply_to_id": 628807751,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bips/pull/1097/commits/47847fe874764a0ffc9addbcfc692e5199a7339d",
      "created_at": "2021-05-11T10:36:50Z",
      "updated_at": "2021-05-11T10:36:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r630050333",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630050333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630050377",
      "pull_request_review_id": 656548940,
      "id": 630050377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDA1MDM3Nw==",
      "diff_hunk": "@@ -0,0 +1,464 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>\n+\n+Should translate to two concrete descriptors:\n+* <tt>wsh(sortedmulti(2,XPUB1/0/*,XPUB2/0/*))</tt>\n+* <tt>wsh(sortedmulti(2,XPUB1/1/*,XPUB2/1/*))</tt>\n+\n+==QR Codes==\n+For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n+\n+Also refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md UR Type Definition for BIP44 Accounts] and [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md UR Type Definition for Bitcoin Output Descriptors] for more details.\n+\n+==Compatibility==\n+This specification is not backwards compatible with existing multisig implementations.\n+\n+BSMS is opt-in, meaning existing multisig implementations can continue working as-is, with the caveat that they are full of pitfalls. Some of the problems have been described in the [[#Motivation]] section.\n+\n+To comply with this standard, a Signer must be able to persist the descriptor record in its storage.\n+\n+Once a Signer has implemented BSMS, the user can create new multisig wallets using BSMS or migrate existing ones to BSMS.",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 194,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "229a60bf8e180f6d78acce111018d261b8327dec",
      "in_reply_to_id": 628807634,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bips/pull/1097/commits/47847fe874764a0ffc9addbcfc692e5199a7339d",
      "created_at": "2021-05-11T10:36:56Z",
      "updated_at": "2021-05-11T10:36:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r630050377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630050377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630116304",
      "pull_request_review_id": 656637529,
      "id": 630116304,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDExNjMwNA==",
      "diff_hunk": "@@ -0,0 +1,462 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 176,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "47847fe874764a0ffc9addbcfc692e5199a7339d",
      "in_reply_to_id": null,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is the leading slash in `/0/*` needed here? It seems that it is better to specify this as `0/*,1/*`",
      "created_at": "2021-05-11T12:23:19Z",
      "updated_at": "2021-05-11T12:23:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r630116304",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630116304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630123125",
      "pull_request_review_id": 656646722,
      "id": 630123125,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDEyMzEyNQ==",
      "diff_hunk": "@@ -0,0 +1,462 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 176,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "47847fe874764a0ffc9addbcfc692e5199a7339d",
      "in_reply_to_id": 630116304,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, but I feel that it's better for the leading character to be `/` so that it's clear that it's a path, not a number.",
      "created_at": "2021-05-11T12:32:49Z",
      "updated_at": "2021-05-11T12:41:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r630123125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630123125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630127642",
      "pull_request_review_id": 656652966,
      "id": 630127642,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDEyNzY0Mg==",
      "diff_hunk": "@@ -0,0 +1,462 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 176,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "47847fe874764a0ffc9addbcfc692e5199a7339d",
      "in_reply_to_id": 630116304,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, I've updated my BIP draft for path restrictions (https://github.com/dgpv/bips/blob/bip-path-templates/bip-path-templates.mediawiki, https://github.com/bitcoin/bips/pull/1025) to use '{}' for ranges, which makes the format more in line with https://github.com/bitcoin/bitcoin/issues/17190 and removes a clash with `[]` in descriptors.\r\n\r\nIt describes a format that might be more complex than desired for this particular purpose, but at the same time it is thoroughly specified and it can be made fully unambiguous.\r\n\r\nThe `0/*,1/*` could be specified as `{0-1}/*` when using the format in my BIP draft (the `{0-1}/*` would be  \"partial path template\" because it does not start with `m/`, and the `{0,1}/*` form is better disallowed, thus the path encoding can be fully unambigous)",
      "created_at": "2021-05-11T12:39:16Z",
      "updated_at": "2021-05-11T12:39:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r630127642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630127642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630606528",
      "pull_request_review_id": 657311828,
      "id": 630606528,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDYwNjUyOA==",
      "diff_hunk": "@@ -0,0 +1,462 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 176,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "47847fe874764a0ffc9addbcfc692e5199a7339d",
      "in_reply_to_id": 630116304,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "^ Very interesting @dgpv , I will check it out.  Probably shouldn't put BSMS on hold though.  I also have a BIP for an  updated multisig derivation scheme that works very well with BSMS (https://github.com/Rspigler/bips-1/blob/v2_Multisig_deriv/Modern%20Hierarchy%20for%20Deterministic%20Multisignature%20Wallets.mediawiki, https://github.com/bitcoin/bips/pull/1089). I am waiting for this to be merged to link to it in my BIP, and I think BSMS could use it in the test vectors once merged.",
      "created_at": "2021-05-11T23:36:24Z",
      "updated_at": "2021-05-11T23:36:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r630606528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630606528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630788343",
      "pull_request_review_id": 657543654,
      "id": 630788343,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDc4ODM0Mw==",
      "diff_hunk": "@@ -0,0 +1,462 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 176,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "47847fe874764a0ffc9addbcfc692e5199a7339d",
      "in_reply_to_id": 630116304,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Probably shouldn't put BSMS on hold though.\r\n\r\nI fully agree.",
      "created_at": "2021-05-12T07:22:47Z",
      "updated_at": "2021-05-12T07:22:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r630788343",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/630788343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/631519785",
      "pull_request_review_id": 658532596,
      "id": 631519785,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTUxOTc4NQ==",
      "diff_hunk": "@@ -0,0 +1,462 @@\n+<pre>\n+  BIP: To be determined\n+  Layer: Applications\n+  Title: Bitcoin Secure Multisig Setup (BSMS)\n+  Author: Hugo Nguyen <hugo at nunchuk.io>\n+          Peter Gray <peter at coinkite.com>\n+          Marko Bencun <marko at shiftcrypto.ch>\n+          Aaron Chen <aarondongchen at gmail.com>\n+          Rodolfo Novak <rodolfo at coinkite.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Proposed\n+  Type: Standards Track\n+  Created: 2020-11-10\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a mechanism to set up multisig wallets securely.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n+(Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n+\n+There are a number of concerns when it comes to setting up a multisig wallet:\n+\n+# Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n+# Whether the keys or the multisig configuration are leaked during the setup.\n+# Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n+# Whether the Signer's storage is tamper-proof.\n+# Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n+\n+An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n+\n+This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n+\n+Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n+\n+==Specification==\n+\n+===Prerequisites===\n+This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and [https://tools.ietf.org/html/rfc3686 AES encryption].\n+\n+===File Extensions===\n+All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n+\n+===Roles===\n+====Coordinator====\n+\n+The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n+\n+====Signer====\n+\n+The Signer is any software or hardware that controls the private keys and can sign using those keys. The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains a public key or an Extended Public Key (XPUB) -- to the Coordinator, verifying that its <tt>KEY</tt> is included in the descriptor record and persisting the descriptor record in its storage.\n+\n+===Setup Process===\n+\n+====Round 1====\n+\n+=====Coordinator=====\n+\n+* The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n+* The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n+* If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the [[#Encryption]] section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n+* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0x00</tt>, and all the encryption/decryption steps below can be skipped.\n+\n+=====Signer=====\n+\n+* The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n+* The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the <tt>KEY</tt> at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing <tt>KEY</tt>s for different wallets.\n+* The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is a public key or an XPUB plus the key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{KEY}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the public key or XPUB to sign the first four lines. The signature should follow [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322], legacy format accepted.\n+* The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n+* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+\n+====Round 2====\n+\n+=====Coordinator=====\n+\n+* The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n+* For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Coordinator verifies that the key records have compatible specification versions.\n+* The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n+* If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n+* The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a descriptor or a descriptor template. The third line must be a comma-separated list of derivation path restrictions. The paths must start with <tt>/</tt> and use non-hardened derivation. If there are no template or restrictions, it must say <tt>No path restrictions</tt>. The fourth line must be the wallet's first address. If there are path restrictions, use the first address from the first path restriction.\n+* The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption.. \n+* The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n+* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n+* The Coordinator sends the encrypted descriptor record to all participating Signers.\n+\n+=====Signer=====\n+\n+* The Signer imports the descriptor record.\n+* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n+* The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n+* The Signer verifies that it can support the included specification version.\n+* The Signer verifies that it can support the descriptor or descriptor template.\n+* The Signer checks that its <tt>KEY</tt> is included in the descriptor or descriptor template, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n+* The Signer verifies that it is compatible with the derivation path restrictions.\n+* The Signer verifies that the wallet's first address is valid.\n+* For confirmation, the Signer must display to the user the wallet's first address and policy parameters, including, but not limited to: the derivation path restrictions, <tt>M</tt>, <tt>N</tt>, and the position(s) of the Signer's own <tt>KEY</tt> in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where <tt>KEY</tt> order matters. When applicable, all positions of the <tt>KEY</tt> must be displayed. The full descriptor or descriptor template must also be available for review upon user request. \n+* Parties must check with each other that all Signers have the same confirmation (except for the <tt>KEY</tt> positions).\n+* If all checks pass, the Signer must persist the descriptor record in its storage.\n+\n+This completes the setup.\n+\n+===Encryption===\n+\n+====The Token====\n+We define three modes of encryption.\n+\n+# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0x00</tt>. Encryption is disabled.\n+# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n+# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n+\n+The <tt>TOKEN</tt> can be converted to one of these formats:\n+* A decimal number (recommended). The number must not exceed the maximum value of the nonce. \n+* A mnemonic phrase using [https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039] word list. This would be 6 words in <tt>STANDARD</tt> mode. This encoding is not recommended in <tt>EXTENDED</tt> mode as it can result in potential confusion between seed mnemonics and <tt>TOKEN</tt> mnemonics. \n+* A QR code.\n+* Other formats.\n+\n+The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n+\n+====Key Derivation====\n+The key derivation function is [https://tools.ietf.org/html/rfc2898 PBKDF2], with PRF = SHA512. Specifically:\n+\n+<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n+\n+Whereas:\n+\n+* PRF = SHA512\n+* Password = \"No SPOF\"\n+* Salt = <tt>TOKEN</tt>\n+* c = 2048\n+* dkLen = 256\n+* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n+\n+====Encryption Scheme====\n+The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n+\n+<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n+\n+<tt>IV = First 16 bytes of MAC</tt>\n+\n+<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n+\n+<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n+\n+Whereas:\n+* DKey = <tt>ENCRYPTION_KEY</tt>\n+* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n+* Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n+\n+The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M) Encrypt-and-MAC] form of authenticated encryption.\n+\n+===Descriptor Template===\n+The output descriptor language only supports one-dimensional lists. This proposal introduces a descriptor template to represent multi-dimensional lists:\n+\n+<tt>XPUB/**</tt>\n+\n+Whereas <tt>/**</tt> can be replaced by any number of derivation path restrictions.\n+\n+A descriptor template must be accompanied by derivation path restrictions. Signers should expand the template into concrete descriptors by replacing <tt>/**</tt> with the restrictions.\n+\n+For example, the following template and derivation path restrictions:\n+* <tt>wsh(sortedmulti(2,XPUB1/**,XPUB2/**))</tt>\n+* <tt>/0/*,/1/*</tt>",
      "path": "bip-hugonguyen-bsms.mediawiki",
      "position": null,
      "original_position": 176,
      "commit_id": "c9249b230b43e572dd29a29c43216ef805f6943e",
      "original_commit_id": "47847fe874764a0ffc9addbcfc692e5199a7339d",
      "in_reply_to_id": 630116304,
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Had off-thread discussion wiith @dgpv, since this is mainly aesthetic it really doesn't matter which way we go. Let's stick with the current proposal.",
      "created_at": "2021-05-13T02:22:42Z",
      "updated_at": "2021-05-13T02:22:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1097#discussion_r631519785",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/631519785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1097"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    }
  ]
}