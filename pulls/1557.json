{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1557",
    "id": 1761316253,
    "node_id": "PR_kwDOAN28mc5o-42d",
    "html_url": "https://github.com/bitcoin/bips/pull/1557",
    "diff_url": "https://github.com/bitcoin/bips/pull/1557.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1557.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1557/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/ec52ae132126fe6ba8b33d94cf3f835dd1964084",
    "number": 1557,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Add draft of BIP 40",
    "user": {
      "login": "ben221199",
      "id": 12856904,
      "node_id": "MDQ6VXNlcjEyODU2OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ben221199",
      "html_url": "https://github.com/ben221199",
      "followers_url": "https://api.github.com/users/ben221199/followers",
      "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
      "organizations_url": "https://api.github.com/users/ben221199/orgs",
      "repos_url": "https://api.github.com/users/ben221199/repos",
      "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ben221199/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The Stratum wire protocol has a long history since @slush0 introduced it. However, the protocol never got standardized in a formal way, so many implementations have been based on incomplete documents or on other implementations. With this document I finally want to give Stratum its place between the other BIPs, so that developers can just read this document and don't have to search through years of code or dead pages that need to be revived with Wayback Machine.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2024-03-07T15:46:34Z",
    "updated_at": "2024-05-06T19:36:32Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merge_commit_sha": "bab32256648dfb96b2362d9469e5465c0280954b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ben221199:add-bip40",
      "ref": "add-bip40",
      "sha": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 768580186,
        "node_id": "R_kgDOLc-aWg",
        "name": "bips",
        "full_name": "ben221199/bips",
        "owner": {
          "login": "ben221199",
          "id": 12856904,
          "node_id": "MDQ6VXNlcjEyODU2OTA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ben221199",
          "html_url": "https://github.com/ben221199",
          "followers_url": "https://api.github.com/users/ben221199/followers",
          "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
          "organizations_url": "https://api.github.com/users/ben221199/orgs",
          "repos_url": "https://api.github.com/users/ben221199/repos",
          "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ben221199/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ben221199/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/ben221199/bips",
        "archive_url": "https://api.github.com/repos/ben221199/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ben221199/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ben221199/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ben221199/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ben221199/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ben221199/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ben221199/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ben221199/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ben221199/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ben221199/bips/contributors",
        "deployments_url": "https://api.github.com/repos/ben221199/bips/deployments",
        "downloads_url": "https://api.github.com/repos/ben221199/bips/downloads",
        "events_url": "https://api.github.com/repos/ben221199/bips/events",
        "forks_url": "https://api.github.com/repos/ben221199/bips/forks",
        "git_commits_url": "https://api.github.com/repos/ben221199/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ben221199/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ben221199/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ben221199/bips.git",
        "issue_comment_url": "https://api.github.com/repos/ben221199/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ben221199/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ben221199/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ben221199/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ben221199/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ben221199/bips/languages",
        "merges_url": "https://api.github.com/repos/ben221199/bips/merges",
        "milestones_url": "https://api.github.com/repos/ben221199/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ben221199/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ben221199/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ben221199/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:ben221199/bips.git",
        "stargazers_url": "https://api.github.com/repos/ben221199/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/ben221199/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ben221199/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/ben221199/bips/subscription",
        "tags_url": "https://api.github.com/repos/ben221199/bips/tags",
        "teams_url": "https://api.github.com/repos/ben221199/bips/teams",
        "trees_url": "https://api.github.com/repos/ben221199/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ben221199/bips.git",
        "hooks_url": "https://api.github.com/repos/ben221199/bips/hooks",
        "svn_url": "https://github.com/ben221199/bips",
        "homepage": "",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 14174,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-03-21T21:35:27Z",
        "created_at": "2024-03-07T10:51:57Z",
        "updated_at": "2024-03-07T10:51:57Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5239,
        "stargazers_count": 8973,
        "watchers_count": 8973,
        "size": 14724,
        "default_branch": "master",
        "open_issues_count": 65,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-06T18:36:30Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2024-05-06T18:02:47Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 239,
    "deletions": 4,
    "changed_files": 3,
    "commits": 13,
    "review_comments": 20,
    "comments": 3
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQ3Y2EyMDJlMWY5ZDlkMzFhNGU0YjgwN2Y4ZGJiNTU4NDAzOGE2NjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/47ca202e1f9d9d31a4e4b807f8dbb5584038a663",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/47ca202e1f9d9d31a4e4b807f8dbb5584038a663",
      "tree": {
        "sha": "6030cc000d0073dea12c571d4a20ff675064bff0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6030cc000d0073dea12c571d4a20ff675064bff0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed",
          "sha": "b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed",
          "html_url": "https://github.com/bitcoin/bips/commit/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed"
        }
      ],
      "message": "Write initial draft of BIP 40",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T15:26:28Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T15:26:28Z"
      },
      "sha": "47ca202e1f9d9d31a4e4b807f8dbb5584038a663"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDkxNGZiN2M0MGNjMGYzNGNmNzhiMTIzYzJiZTk3YTcyNGJjOGZlN2Y",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/914fb7c40cc0f34cf78b123c2be97a724bc8fe7f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/914fb7c40cc0f34cf78b123c2be97a724bc8fe7f",
      "tree": {
        "sha": "832e4a5d4a27a48f1069fd037c633d57bffc28de",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/832e4a5d4a27a48f1069fd037c633d57bffc28de"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/47ca202e1f9d9d31a4e4b807f8dbb5584038a663",
          "sha": "47ca202e1f9d9d31a4e4b807f8dbb5584038a663",
          "html_url": "https://github.com/bitcoin/bips/commit/47ca202e1f9d9d31a4e4b807f8dbb5584038a663"
        }
      ],
      "message": "Fix inline code",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T15:38:43Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T15:38:43Z"
      },
      "sha": "914fb7c40cc0f34cf78b123c2be97a724bc8fe7f"
    },
    {
      "event": "mentioned",
      "id": 12044312704,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAALN5aCA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12044312704",
      "actor": {
        "login": "slush0",
        "id": 565341,
        "node_id": "MDQ6VXNlcjU2NTM0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slush0",
        "html_url": "https://github.com/slush0",
        "followers_url": "https://api.github.com/users/slush0/followers",
        "following_url": "https://api.github.com/users/slush0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/slush0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/slush0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
        "organizations_url": "https://api.github.com/users/slush0/orgs",
        "repos_url": "https://api.github.com/users/slush0/repos",
        "events_url": "https://api.github.com/users/slush0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/slush0/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T15:46:35Z"
    },
    {
      "event": "subscribed",
      "id": 12044312732,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAALN5aCc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12044312732",
      "actor": {
        "login": "slush0",
        "id": 565341,
        "node_id": "MDQ6VXNlcjU2NTM0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slush0",
        "html_url": "https://github.com/slush0",
        "followers_url": "https://api.github.com/users/slush0/followers",
        "following_url": "https://api.github.com/users/slush0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/slush0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/slush0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
        "organizations_url": "https://api.github.com/users/slush0/orgs",
        "repos_url": "https://api.github.com/users/slush0/repos",
        "events_url": "https://api.github.com/users/slush0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/slush0/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T15:46:35Z"
    },
    {
      "event": "convert_to_draft",
      "id": 12044314514,
      "node_id": "CTDE_lADOAN28mc6BlzY5zwAAAALN5aeS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12044314514",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T15:46:39Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDcyYmZjNGQwMWJkZDZjOTMzNjg0M2VmZmU0NThjMjU0YmQ5N2JkMzc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/72bfc4d01bdd6c9336843effe458c254bd97bd37",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/72bfc4d01bdd6c9336843effe458c254bd97bd37",
      "tree": {
        "sha": "3497c7a9f79ab98d33fb50ffbc095eb764bd7eb1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3497c7a9f79ab98d33fb50ffbc095eb764bd7eb1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/914fb7c40cc0f34cf78b123c2be97a724bc8fe7f",
          "sha": "914fb7c40cc0f34cf78b123c2be97a724bc8fe7f",
          "html_url": "https://github.com/bitcoin/bips/commit/914fb7c40cc0f34cf78b123c2be97a724bc8fe7f"
        }
      ],
      "message": "Allow public domain",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T17:28:42Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T17:28:42Z"
      },
      "sha": "72bfc4d01bdd6c9336843effe458c254bd97bd37"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12045691404,
      "node_id": "HRFPE_lADOAN28mc6BlzY5zwAAAALN-qoM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12045691404",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T17:28:52Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFiZTA4ZTRiNWY4MmU4Y2I2M2NiYjJiOTU3NTY2ZjJlYTAzNzcxZjg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
      "tree": {
        "sha": "c42328b04852c0496bff17baec19055db3afc314",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c42328b04852c0496bff17baec19055db3afc314"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/72bfc4d01bdd6c9336843effe458c254bd97bd37",
          "sha": "72bfc4d01bdd6c9336843effe458c254bd97bd37",
          "html_url": "https://github.com/bitcoin/bips/commit/72bfc4d01bdd6c9336843effe458c254bd97bd37"
        }
      ],
      "message": "Improve specification of transport protocols",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T20:52:29Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T20:52:29Z"
      },
      "sha": "abe08e4b5f82e8cb63cbb2b957566f2ea03771f8"
    },
    {
      "event": "subscribed",
      "id": 12146758158,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAALUANIO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12146758158",
      "actor": {
        "login": "Minicoolboy77777",
        "id": 155213799,
        "node_id": "U_kgDOCUBf5w",
        "avatar_url": "https://avatars.githubusercontent.com/u/155213799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Minicoolboy77777",
        "html_url": "https://github.com/Minicoolboy77777",
        "followers_url": "https://api.github.com/users/Minicoolboy77777/followers",
        "following_url": "https://api.github.com/users/Minicoolboy77777/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Minicoolboy77777/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Minicoolboy77777/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Minicoolboy77777/subscriptions",
        "organizations_url": "https://api.github.com/users/Minicoolboy77777/orgs",
        "repos_url": "https://api.github.com/users/Minicoolboy77777/repos",
        "events_url": "https://api.github.com/users/Minicoolboy77777/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Minicoolboy77777/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T06:55:57Z"
    },
    {
      "event": "reviewed",
      "id": 1942097925,
      "node_id": "PRR_kwDOAN28mc5zwhAF",
      "url": null,
      "actor": null,
      "commit_id": "abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Minicoolboy77777",
        "id": 155213799,
        "node_id": "U_kgDOCUBf5w",
        "avatar_url": "https://avatars.githubusercontent.com/u/155213799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Minicoolboy77777",
        "html_url": "https://github.com/Minicoolboy77777",
        "followers_url": "https://api.github.com/users/Minicoolboy77777/followers",
        "following_url": "https://api.github.com/users/Minicoolboy77777/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Minicoolboy77777/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Minicoolboy77777/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Minicoolboy77777/subscriptions",
        "organizations_url": "https://api.github.com/users/Minicoolboy77777/orgs",
        "repos_url": "https://api.github.com/users/Minicoolboy77777/repos",
        "events_url": "https://api.github.com/users/Minicoolboy77777/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Minicoolboy77777/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#pullrequestreview-1942097925",
      "submitted_at": "2024-03-18T06:57:52Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGE1YWVlNWJkNmM1MTg3YmUyY2M1NzkyMjEyZGRjMmE2MTU5NGZhNGM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a5aee5bd6c5187be2cc5792212ddc2a61594fa4c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a5aee5bd6c5187be2cc5792212ddc2a61594fa4c",
      "tree": {
        "sha": "8b68d0decffe4405c868911a60a8352f581e7c52",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8b68d0decffe4405c868911a60a8352f581e7c52"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
          "sha": "abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
          "html_url": "https://github.com/bitcoin/bips/commit/abe08e4b5f82e8cb63cbb2b957566f2ea03771f8"
        }
      ],
      "message": "Add letters and default ports",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-19T08:58:44Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-19T08:58:44Z"
      },
      "sha": "a5aee5bd6c5187be2cc5792212ddc2a61594fa4c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg2NThiZThmYWFjZWVjOGJiN2ZjOWE5MTdiZjI5NTUzZTJkZDg3OTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8658be8faaceec8bb7fc9a917bf29553e2dd8799",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8658be8faaceec8bb7fc9a917bf29553e2dd8799",
      "tree": {
        "sha": "d111d7989ccaefa24518f588aade976dec78a2ca",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d111d7989ccaefa24518f588aade976dec78a2ca"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a5aee5bd6c5187be2cc5792212ddc2a61594fa4c",
          "sha": "a5aee5bd6c5187be2cc5792212ddc2a61594fa4c",
          "html_url": "https://github.com/bitcoin/bips/commit/a5aee5bd6c5187be2cc5792212ddc2a61594fa4c"
        }
      ],
      "message": "Add more information about WebSockets",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-19T10:14:46Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-19T10:14:46Z"
      },
      "sha": "8658be8faaceec8bb7fc9a917bf29553e2dd8799"
    },
    {
      "event": "commented",
      "id": 2009056897,
      "node_id": "IC_kwDOAN28mc53v8aB",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2009056897",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T08:52:25Z",
      "updated_at": "2024-03-20T08:52:25Z",
      "author_association": "NONE",
      "body": "Yesterday, I sent two registration requests to IANA to get some information officially egistered. The registries are:\r\n- Media Types (https://www.iana.org/assignments/media-types/media-types.xhtml)\r\n- WebSocket Subprotocol Name Registry (https://www.iana.org/assignments/websocket/websocket.xml#subprotocol-name)\r\n\r\nToday, I got a response that for both registrations some things have to be done first, before IANA can add these records to their registry. In case of the Media Types, this is process is a little bit more difficult. For the WebSocket Subprotocol Name Registry it is just letting them know when this pull request is merged and I have a permalink to the specification.\r\n\r\nAlso, it is possible that I will send more registration requests for other IANA registries too. For example, the Service Name and Transport Protocol Port Number Registry (https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml) is a possible candidate. In that case, I will post new comments about that too.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2009056897",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUxM2RlZjQxZTVjZmQ3MzM0NmRiZDQ1MWQxMzUyNTBhMWU3NDQ2NjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e13def41e5cfd73346dbd451d135250a1e744662",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e13def41e5cfd73346dbd451d135250a1e744662",
      "tree": {
        "sha": "117774898334d1ae9fcde0aa3fa66e569001993e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/117774898334d1ae9fcde0aa3fa66e569001993e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8658be8faaceec8bb7fc9a917bf29553e2dd8799",
          "sha": "8658be8faaceec8bb7fc9a917bf29553e2dd8799",
          "html_url": "https://github.com/bitcoin/bips/commit/8658be8faaceec8bb7fc9a917bf29553e2dd8799"
        }
      ],
      "message": "Add information about WebSocket subprotocol",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T09:46:56Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T09:46:56Z"
      },
      "sha": "e13def41e5cfd73346dbd451d135250a1e744662"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUyODA3NzEzZTAzNmY4NjA0ZGUzZWQ1ODA3MzRjMGRhOThmODE0YmY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e2807713e036f8604de3ed580734c0da98f814bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e2807713e036f8604de3ed580734c0da98f814bf",
      "tree": {
        "sha": "c482c3dce1512c8d59578cdcd70f6398255f4d11",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c482c3dce1512c8d59578cdcd70f6398255f4d11"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e13def41e5cfd73346dbd451d135250a1e744662",
          "sha": "e13def41e5cfd73346dbd451d135250a1e744662",
          "html_url": "https://github.com/bitcoin/bips/commit/e13def41e5cfd73346dbd451d135250a1e744662"
        }
      ],
      "message": "Add information about HTTP polling",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T11:01:45Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T11:01:45Z"
      },
      "sha": "e2807713e036f8604de3ed580734c0da98f814bf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgzNjQ3YjFiMjA4YmUwZGQ3Zjc4MmMyMGZkNTNiMWZmNGI2N2M3OTc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83647b1b208be0dd7f782c20fd53b1ff4b67c797",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/83647b1b208be0dd7f782c20fd53b1ff4b67c797",
      "tree": {
        "sha": "5dc85860a2781ad5c443abbc247c7587a32583cd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5dc85860a2781ad5c443abbc247c7587a32583cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e2807713e036f8604de3ed580734c0da98f814bf",
          "sha": "e2807713e036f8604de3ed580734c0da98f814bf",
          "html_url": "https://github.com/bitcoin/bips/commit/e2807713e036f8604de3ed580734c0da98f814bf"
        }
      ],
      "message": "Improve text",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T13:09:36Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T13:09:36Z"
      },
      "sha": "83647b1b208be0dd7f782c20fd53b1ff4b67c797"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNkMjE3YjA5Yjg5YjYxNTFhYWRmMTMwZDExZDE3NThmNGEwNjBkNzc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d217b09b89b6151aadf130d11d1758f4a060d77",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3d217b09b89b6151aadf130d11d1758f4a060d77",
      "tree": {
        "sha": "e794c13602437f14b7dc412fa916d2f9ede9db05",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e794c13602437f14b7dc412fa916d2f9ede9db05"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83647b1b208be0dd7f782c20fd53b1ff4b67c797",
          "sha": "83647b1b208be0dd7f782c20fd53b1ff4b67c797",
          "html_url": "https://github.com/bitcoin/bips/commit/83647b1b208be0dd7f782c20fd53b1ff4b67c797"
        }
      ],
      "message": "Add note",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T13:30:06Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T13:30:06Z"
      },
      "sha": "3d217b09b89b6151aadf130d11d1758f4a060d77"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM4MmEyYTExYjdlZjFhOGViMDZiZjViOGI4NzA5NzgxMjg0ODYwOWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c82a2a11b7ef1a8eb06bf5b8b87097812848609b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c82a2a11b7ef1a8eb06bf5b8b87097812848609b",
      "tree": {
        "sha": "b5aecd0570ecaacc98f995cfd7553b37190d8204",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b5aecd0570ecaacc98f995cfd7553b37190d8204"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d217b09b89b6151aadf130d11d1758f4a060d77",
          "sha": "3d217b09b89b6151aadf130d11d1758f4a060d77",
          "html_url": "https://github.com/bitcoin/bips/commit/3d217b09b89b6151aadf130d11d1758f4a060d77"
        }
      ],
      "message": "Add information about HTTP Push",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T16:07:05Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T16:07:05Z"
      },
      "sha": "c82a2a11b7ef1a8eb06bf5b8b87097812848609b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgwNTU1OWY2OTVlMjA5NjQ0MTQ1MDE0MTI0YTljOGMzODQxMWZkZmI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/805559f695e209644145014124a9c8c38411fdfb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/805559f695e209644145014124a9c8c38411fdfb",
      "tree": {
        "sha": "95b1d967f3e0e6b1ee64403c945fd1939a950be3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/95b1d967f3e0e6b1ee64403c945fd1939a950be3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c82a2a11b7ef1a8eb06bf5b8b87097812848609b",
          "sha": "c82a2a11b7ef1a8eb06bf5b8b87097812848609b",
          "html_url": "https://github.com/bitcoin/bips/commit/c82a2a11b7ef1a8eb06bf5b8b87097812848609b"
        }
      ],
      "message": "Add two methods",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T20:15:06Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T20:15:06Z"
      },
      "sha": "805559f695e209644145014124a9c8c38411fdfb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGVjNTJhZTEzMjEyNmZlNmJhOGIzM2Q5NGNmM2Y4MzVkZDE5NjQwODQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "tree": {
        "sha": "d52bfe176e2477c2c6b6f103d529295a6c203845",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d52bfe176e2477c2c6b6f103d529295a6c203845"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/805559f695e209644145014124a9c8c38411fdfb",
          "sha": "805559f695e209644145014124a9c8c38411fdfb",
          "html_url": "https://github.com/bitcoin/bips/commit/805559f695e209644145014124a9c8c38411fdfb"
        }
      ],
      "message": "Improve commands",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T21:35:25Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T21:35:25Z"
      },
      "sha": "ec52ae132126fe6ba8b33d94cf3f835dd1964084"
    },
    {
      "event": "labeled",
      "id": 12568643249,
      "node_id": "LE_lADOAN28mc6BlzY5zwAAAALtJkax",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12568643249",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-23T03:41:35Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2041409131,
      "node_id": "PRR_kwDOAN28mc55rW5r",
      "url": null,
      "actor": null,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Some editorial feedback.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#pullrequestreview-2041409131",
      "submitted_at": "2024-05-06T19:08:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
    },
    {
      "event": "commented",
      "id": 2096750956,
      "node_id": "IC_kwDOAN28mc58-eFs",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2096750956",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T19:27:12Z",
      "updated_at": "2024-05-06T19:27:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "This BIP refers to BIP41, The Stratum mining protocol, for which a BIP number was assigned and an entry exists in the README, but there doesn't seem to be pull request to add the BIP draft -- any update on that?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2096750956",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "commented",
      "id": 2096768324,
      "node_id": "IC_kwDOAN28mc58-iVE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2096768324",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T19:36:31Z",
      "updated_at": "2024-05-06T19:36:31Z",
      "author_association": "NONE",
      "body": "Hi @jonatack, thank you for feedback. I will take a look at it. I didn't have time to work on BIP 40 lately. Yes, both BIP 40 and BIP 41 are already assigned by the README and BIP 41 is also mentioned in this BIP 40. The goal is to finish BIP 40 (Stratum wire protocol) first and then start working on BIP 41 (Stratum mining protocol), referring back to BIP 40, because the mining protocol is based on the wire protocol.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2096768324",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 12719574486,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAL2JU3W",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12719574486",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T19:36:33Z"
    },
    {
      "event": "subscribed",
      "id": 12719574502,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAL2JU3m",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12719574502",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T19:36:33Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591396841",
      "pull_request_review_id": 2041409131,
      "id": 1591396841,
      "node_id": "PRRC_kwDOAN28mc5e2snp",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.",
      "path": "bip-0040.mediawiki",
      "position": 27,
      "original_position": 27,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\r\n```",
      "created_at": "2024-05-06T18:25:41Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591396841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591396841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591397759",
      "pull_request_review_id": 2041409131,
      "id": 1591397759,
      "node_id": "PRRC_kwDOAN28mc5e2s1_",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.",
      "path": "bip-0040.mediawiki",
      "position": 31,
      "original_position": 31,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\r\n```",
      "created_at": "2024-05-06T18:26:27Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591397759",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591397759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591398821",
      "pull_request_review_id": 2041409131,
      "id": 1591398821,
      "node_id": "PRRC_kwDOAN28mc5e2tGl",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].",
      "path": "bip-0040.mediawiki",
      "position": 33,
      "original_position": 33,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nLater in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\r\n```",
      "created_at": "2024-05-06T18:27:30Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591398821",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591398821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591403769",
      "pull_request_review_id": 2041409131,
      "id": 1591403769,
      "node_id": "PRRC_kwDOAN28mc5e2uT5",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.",
      "path": "bip-0040.mediawiki",
      "position": 37,
      "original_position": 37,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nStratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. The rules of each version apply accordingly.\r\n```\r\n\r\nor \r\n\r\n```suggestion\r\nStratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\r\n```",
      "created_at": "2024-05-06T18:31:59Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591403769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591403769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591405891",
      "pull_request_review_id": 2041409131,
      "id": 1591405891,
      "node_id": "PRRC_kwDOAN28mc5e2u1D",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.",
      "path": "bip-0040.mediawiki",
      "position": 39,
      "original_position": 39,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nAdditionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the value <code>blockchain.block.subscribe</code>.\r\n```",
      "created_at": "2024-05-06T18:34:05Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591405891",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591405891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591407393",
      "pull_request_review_id": 2041409131,
      "id": 1591407393,
      "node_id": "PRRC_kwDOAN28mc5e2vMh",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''",
      "path": "bip-0040.mediawiki",
      "position": 41,
      "original_position": 41,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\r\n```",
      "created_at": "2024-05-06T18:35:38Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591407393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591407393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591420753",
      "pull_request_review_id": 2041409131,
      "id": 1591420753,
      "node_id": "PRRC_kwDOAN28mc5e2ydR",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''",
      "path": "bip-0040.mediawiki",
      "position": 47,
      "original_position": 47,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "double \"only\" in `only use the server only`\r\n\r\n```suggestion\r\n''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\r\n```",
      "created_at": "2024-05-06T18:48:54Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591420753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591420753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591421561",
      "pull_request_review_id": 2041409131,
      "id": 1591421561,
      "node_id": "PRRC_kwDOAN28mc5e2yp5",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.",
      "path": "bip-0040.mediawiki",
      "position": 51,
      "original_position": 51,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nStratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\r\n```\r\n",
      "created_at": "2024-05-06T18:49:37Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591421561",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591421561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591424958",
      "pull_request_review_id": 2041409131,
      "id": 1591424958,
      "node_id": "PRRC_kwDOAN28mc5e2ze-",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.",
      "path": "bip-0040.mediawiki",
      "position": 58,
      "original_position": 58,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nStratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\r\n```",
      "created_at": "2024-05-06T18:52:38Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591424958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591424958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591426378",
      "pull_request_review_id": 2041409131,
      "id": 1591426378,
      "node_id": "PRRC_kwDOAN28mc5e2z1K",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.",
      "path": "bip-0040.mediawiki",
      "position": 65,
      "original_position": 65,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nStratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\r\n```",
      "created_at": "2024-05-06T18:54:03Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591426378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591426378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591428105",
      "pull_request_review_id": 2041409131,
      "id": 1591428105,
      "node_id": "PRRC_kwDOAN28mc5e20QJ",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).",
      "path": "bip-0040.mediawiki",
      "position": 67,
      "original_position": 67,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nA request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\r\n```",
      "created_at": "2024-05-06T18:55:31Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591428105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591428105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591430061",
      "pull_request_review_id": 2041409131,
      "id": 1591430061,
      "node_id": "PRRC_kwDOAN28mc5e20ut",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.",
      "path": "bip-0040.mediawiki",
      "position": 76,
      "original_position": 76,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nServers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\r\n```",
      "created_at": "2024-05-06T18:57:17Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591430061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591430061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591431220",
      "pull_request_review_id": 2041409131,
      "id": 1591431220,
      "node_id": "PRRC_kwDOAN28mc5e21A0",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.",
      "path": "bip-0040.mediawiki",
      "position": 80,
      "original_position": 80,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nWhen polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\r\n```",
      "created_at": "2024-05-06T18:58:30Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591431220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591431220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 80,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591432423",
      "pull_request_review_id": 2041409131,
      "id": 1591432423,
      "node_id": "PRRC_kwDOAN28mc5e21Tn",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.",
      "path": "bip-0040.mediawiki",
      "position": 82,
      "original_position": 82,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nIf no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\r\n```",
      "created_at": "2024-05-06T18:59:49Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591432423",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591432423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591433102",
      "pull_request_review_id": 2041409131,
      "id": 1591433102,
      "node_id": "PRRC_kwDOAN28mc5e21eO",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.",
      "path": "bip-0040.mediawiki",
      "position": 86,
      "original_position": 86,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nHTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\r\n```",
      "created_at": "2024-05-06T19:00:35Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591433102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591433102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591433891",
      "pull_request_review_id": 2041409131,
      "id": 1591433891,
      "node_id": "PRRC_kwDOAN28mc5e21qj",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.",
      "path": "bip-0040.mediawiki",
      "position": 88,
      "original_position": 88,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\r\n```",
      "created_at": "2024-05-06T19:01:24Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591433891",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591433891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 88,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591434735",
      "pull_request_review_id": 2041409131,
      "id": 1591434735,
      "node_id": "PRRC_kwDOAN28mc5e213v",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS. Just the same as normal HTTP, but with SSL/TLS enabled.",
      "path": "bip-0040.mediawiki",
      "position": 92,
      "original_position": 92,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nStratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\r\n```",
      "created_at": "2024-05-06T19:02:15Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591434735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591434735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591436408",
      "pull_request_review_id": 2041409131,
      "id": 1591436408,
      "node_id": "PRRC_kwDOAN28mc5e22R4",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS. Just the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send more JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (\\n). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.",
      "path": "bip-0040.mediawiki",
      "position": 99,
      "original_position": 99,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nStratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\r\n```",
      "created_at": "2024-05-06T19:03:58Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591436408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591436408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591437982",
      "pull_request_review_id": 2041409131,
      "id": 1591437982,
      "node_id": "PRRC_kwDOAN28mc5e22qe",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS. Just the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send more JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (\\n). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS. Just the same as normal WebSocket, but with SSL/TLS enabled.",
      "path": "bip-0040.mediawiki",
      "position": 120,
      "original_position": 120,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nStratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\r\n```",
      "created_at": "2024-05-06T19:05:27Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591437982",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591437982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591439761",
      "pull_request_review_id": 2041409131,
      "id": 1591439761,
      "node_id": "PRRC_kwDOAN28mc5e23GR",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS. Just the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send more JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (\\n). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS. Just the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Commands==\n+\n+===Service: Blockchain Address===\n+\n+* Service name: <code>blockchain.address</code>\n+\n+====Method: Get History====\n+\n+* Method name: <code>get_history</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>blockchain.address.get_history</code>\n+|-\n+! Param [0]\n+| <code>string</code>\n+| <code>1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L</code>\n+| The address to get the history of.\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Result\n+| <code>array</code>\n+|\n+| The history of the a blockchain address.",
      "path": "bip-0040.mediawiki",
      "position": 157,
      "original_position": 157,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"the a\" -> one of these seems redundant\r\n\r\n```suggestion\r\n| The history of the blockchain address.\r\n```",
      "created_at": "2024-05-06T19:07:17Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591439761",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591439761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    }
  ]
}