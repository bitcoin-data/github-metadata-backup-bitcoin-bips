{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/876",
    "id": 363792615,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzYzNzkyNjE1",
    "html_url": "https://github.com/bitcoin/bips/pull/876",
    "diff_url": "https://github.com/bitcoin/bips/pull/876.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/876.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/876/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/876/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/876/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
    "number": 876,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Add BIPs 340-342 bip-schnorr, bip-taproot, bip-tapscript",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This adds the 3 BIPs that describe the consensus rules and (basic) wallet operation for the Taproot proposal (https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html). There have been several discussions on the mailing list on the original idea, and this proposal specifically, including ones that resulting in significant changes being made to the proposal. Furthermore, a structured review session (https://github.com/ajtowns/taproot-review) with many participants was held, resulting in many comments and improvements.\r\n\r\nI believe it's time to actually publish them as BIPs.\r\n\r\nAn (unreviewed) reference implementation is available (https://github.com/sipa/bitcoin/commits/taproot), which I'll open as a (WIP) PR as soon as there are BIP numbers to refer to.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2020-01-16T18:49:12Z",
    "updated_at": "2022-07-04T04:50:34Z",
    "closed_at": "2020-01-24T00:01:34Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-01-24T00:01:33Z",
    "merge_commit_sha": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sipa:bip-taproot",
      "ref": "bip-taproot",
      "sha": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 15477215,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTQ3NzIxNQ==",
        "name": "bips",
        "full_name": "sipa/bips",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bips",
        "archive_url": "https://api.github.com/repos/sipa/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bips/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bips/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bips/downloads",
        "events_url": "https://api.github.com/repos/sipa/bips/events",
        "forks_url": "https://api.github.com/repos/sipa/bips/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bips.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bips/languages",
        "merges_url": "https://api.github.com/repos/sipa/bips/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bips.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bips/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bips/tags",
        "teams_url": "https://api.github.com/repos/sipa/bips/teams",
        "trees_url": "https://api.github.com/repos/sipa/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bips.git",
        "hooks_url": "https://api.github.com/repos/sipa/bips/hooks",
        "svn_url": "https://github.com/sipa/bips",
        "homepage": "bitcoin.org",
        "language": "Wikitext",
        "forks_count": 45,
        "stargazers_count": 139,
        "watchers_count": 139,
        "size": 13960,
        "default_branch": "bip-taproot",
        "open_issues_count": 8,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-04-20T20:01:44Z",
        "created_at": "2013-12-27T16:12:37Z",
        "updated_at": "2022-12-02T21:25:08Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6a802329e468b6a5fa24a1f28d2464736e490fbb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5178,
        "stargazers_count": 8116,
        "watchers_count": 8116,
        "size": 13694,
        "default_branch": "master",
        "open_issues_count": 115,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-08T12:03:37Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-06-12T10:53:19Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1162,
    "deletions": 0,
    "changed_files": 10,
    "commits": 163,
    "review_comments": 11,
    "comments": 11
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 2955702425,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk1NTcwMjQyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2955702425",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-16T19:02:20Z"
    },
    {
      "event": "reviewed",
      "id": 344277144,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Mjc3MTQ0",
      "url": null,
      "actor": null,
      "commit_id": "77b3a03f0e4a15a773f2b16f3e7766f55fee591f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#pullrequestreview-344277144",
      "submitted_at": "2020-01-16T23:11:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/876"
    },
    {
      "event": "commented",
      "id": 575672275,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTY3MjI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/575672275",
      "actor": {
        "login": "coinables",
        "id": 11477785,
        "node_id": "MDQ6VXNlcjExNDc3Nzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11477785?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coinables",
        "html_url": "https://github.com/coinables",
        "followers_url": "https://api.github.com/users/coinables/followers",
        "following_url": "https://api.github.com/users/coinables/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/coinables/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/coinables/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/coinables/subscriptions",
        "organizations_url": "https://api.github.com/users/coinables/orgs",
        "repos_url": "https://api.github.com/users/coinables/repos",
        "events_url": "https://api.github.com/users/coinables/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/coinables/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T15:28:48Z",
      "updated_at": "2020-01-17T15:28:48Z",
      "author_association": "NONE",
      "body": "Does this suggest there will be a new address type?\r\n\r\n\"Instead of using ''compressed'' 33-byte encodings of elliptic curve points which are common in Bitcoin today, public keys in this proposal are encoded as 32 bytes.\"",
      "user": {
        "login": "coinables",
        "id": 11477785,
        "node_id": "MDQ6VXNlcjExNDc3Nzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11477785?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coinables",
        "html_url": "https://github.com/coinables",
        "followers_url": "https://api.github.com/users/coinables/followers",
        "following_url": "https://api.github.com/users/coinables/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/coinables/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/coinables/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/coinables/subscriptions",
        "organizations_url": "https://api.github.com/users/coinables/orgs",
        "repos_url": "https://api.github.com/users/coinables/repos",
        "events_url": "https://api.github.com/users/coinables/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/coinables/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-575672275",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "commented",
      "id": 575678958,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTY3ODk1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/575678958",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T15:45:23Z",
      "updated_at": "2020-01-17T15:46:47Z",
      "author_association": "MEMBER",
      "body": "@coinables the address type has already been defined by [BIP173!](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\r\n\r\nHere's an example of a mainnet SegWit V1 (Taproot) address:\r\n\r\n`bc1pqyqszqgpqyqszqgpqyqszqgpqyqszqgpqyqszqgpqyqszqgpqyqs3wf0qm`\r\n\r\nThis encodes a witness version of `1` followed by 32 `0x01` bytes.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-575678958",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "mentioned",
      "id": 2958598923,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk1ODU5ODkyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2958598923",
      "actor": {
        "login": "coinables",
        "id": 11477785,
        "node_id": "MDQ6VXNlcjExNDc3Nzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11477785?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coinables",
        "html_url": "https://github.com/coinables",
        "followers_url": "https://api.github.com/users/coinables/followers",
        "following_url": "https://api.github.com/users/coinables/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/coinables/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/coinables/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/coinables/subscriptions",
        "organizations_url": "https://api.github.com/users/coinables/orgs",
        "repos_url": "https://api.github.com/users/coinables/repos",
        "events_url": "https://api.github.com/users/coinables/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/coinables/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T15:45:23Z"
    },
    {
      "event": "subscribed",
      "id": 2958598924,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NTg1OTg5MjQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2958598924",
      "actor": {
        "login": "coinables",
        "id": 11477785,
        "node_id": "MDQ6VXNlcjExNDc3Nzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11477785?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coinables",
        "html_url": "https://github.com/coinables",
        "followers_url": "https://api.github.com/users/coinables/followers",
        "following_url": "https://api.github.com/users/coinables/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/coinables/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/coinables/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/coinables/subscriptions",
        "organizations_url": "https://api.github.com/users/coinables/orgs",
        "repos_url": "https://api.github.com/users/coinables/repos",
        "events_url": "https://api.github.com/users/coinables/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/coinables/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T15:45:23Z"
    },
    {
      "event": "commented",
      "id": 575744876,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTc0NDg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/575744876",
      "actor": {
        "login": "julien-boudry",
        "id": 4020317,
        "node_id": "MDQ6VXNlcjQwMjAzMTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4020317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/julien-boudry",
        "html_url": "https://github.com/julien-boudry",
        "followers_url": "https://api.github.com/users/julien-boudry/followers",
        "following_url": "https://api.github.com/users/julien-boudry/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/julien-boudry/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/julien-boudry/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/julien-boudry/subscriptions",
        "organizations_url": "https://api.github.com/users/julien-boudry/orgs",
        "repos_url": "https://api.github.com/users/julien-boudry/repos",
        "events_url": "https://api.github.com/users/julien-boudry/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/julien-boudry/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T18:37:56Z",
      "updated_at": "2020-01-17T18:37:56Z",
      "author_association": "NONE",
      "body": "> @coinables the address type has already been defined by [BIP173!](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\r\n\r\nIndeed but [BIP84](https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki) does not seem to anticipate these successive versions? Or if it does, it does not contain examples or tests.\r\n\r\n",
      "user": {
        "login": "julien-boudry",
        "id": 4020317,
        "node_id": "MDQ6VXNlcjQwMjAzMTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4020317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/julien-boudry",
        "html_url": "https://github.com/julien-boudry",
        "followers_url": "https://api.github.com/users/julien-boudry/followers",
        "following_url": "https://api.github.com/users/julien-boudry/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/julien-boudry/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/julien-boudry/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/julien-boudry/subscriptions",
        "organizations_url": "https://api.github.com/users/julien-boudry/orgs",
        "repos_url": "https://api.github.com/users/julien-boudry/repos",
        "events_url": "https://api.github.com/users/julien-boudry/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/julien-boudry/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-575744876",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "mentioned",
      "id": 2959112908,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk1OTExMjkwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2959112908",
      "actor": {
        "login": "coinables",
        "id": 11477785,
        "node_id": "MDQ6VXNlcjExNDc3Nzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11477785?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coinables",
        "html_url": "https://github.com/coinables",
        "followers_url": "https://api.github.com/users/coinables/followers",
        "following_url": "https://api.github.com/users/coinables/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/coinables/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/coinables/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/coinables/subscriptions",
        "organizations_url": "https://api.github.com/users/coinables/orgs",
        "repos_url": "https://api.github.com/users/coinables/repos",
        "events_url": "https://api.github.com/users/coinables/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/coinables/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T18:37:56Z"
    },
    {
      "event": "subscribed",
      "id": 2959112913,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NTkxMTI5MTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2959112913",
      "actor": {
        "login": "coinables",
        "id": 11477785,
        "node_id": "MDQ6VXNlcjExNDc3Nzg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11477785?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coinables",
        "html_url": "https://github.com/coinables",
        "followers_url": "https://api.github.com/users/coinables/followers",
        "following_url": "https://api.github.com/users/coinables/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/coinables/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/coinables/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/coinables/subscriptions",
        "organizations_url": "https://api.github.com/users/coinables/orgs",
        "repos_url": "https://api.github.com/users/coinables/repos",
        "events_url": "https://api.github.com/users/coinables/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/coinables/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T18:37:56Z"
    },
    {
      "event": "commented",
      "id": 575749591,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTc0OTU5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/575749591",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T18:50:24Z",
      "updated_at": "2020-01-17T18:50:24Z",
      "author_association": "MEMBER",
      "body": "@julien-boudry Funny I just asked on IRC about this. Both BIP84 and BIP49 define Extended Key prefixes (`xpub`, `ypub`, `zpub` for mainnet, others for testnet...) that are supposed to inform the importing wallet what type of address to derive. Adoption of those is flimsy and not consistent between wallets. So far I don't think anyone has proposed new prefix values for Taproot addresses. There are different ways to spend from Taproot outputs as well (key-path, MuSig key-path, and script-path) so a single `prefix->address type` mapping might not be sufficient for BIP44 wallet recovery.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-575749591",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "mentioned",
      "id": 2959147658,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk1OTE0NzY1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2959147658",
      "actor": {
        "login": "julien-boudry",
        "id": 4020317,
        "node_id": "MDQ6VXNlcjQwMjAzMTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4020317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/julien-boudry",
        "html_url": "https://github.com/julien-boudry",
        "followers_url": "https://api.github.com/users/julien-boudry/followers",
        "following_url": "https://api.github.com/users/julien-boudry/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/julien-boudry/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/julien-boudry/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/julien-boudry/subscriptions",
        "organizations_url": "https://api.github.com/users/julien-boudry/orgs",
        "repos_url": "https://api.github.com/users/julien-boudry/repos",
        "events_url": "https://api.github.com/users/julien-boudry/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/julien-boudry/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T18:50:24Z"
    },
    {
      "event": "subscribed",
      "id": 2959147659,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NTkxNDc2NTk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2959147659",
      "actor": {
        "login": "julien-boudry",
        "id": 4020317,
        "node_id": "MDQ6VXNlcjQwMjAzMTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4020317?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/julien-boudry",
        "html_url": "https://github.com/julien-boudry",
        "followers_url": "https://api.github.com/users/julien-boudry/followers",
        "following_url": "https://api.github.com/users/julien-boudry/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/julien-boudry/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/julien-boudry/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/julien-boudry/subscriptions",
        "organizations_url": "https://api.github.com/users/julien-boudry/orgs",
        "repos_url": "https://api.github.com/users/julien-boudry/repos",
        "events_url": "https://api.github.com/users/julien-boudry/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/julien-boudry/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T18:50:24Z"
    },
    {
      "event": "commented",
      "id": 576023563,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjAyMzU2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/576023563",
      "actor": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T16:50:04Z",
      "updated_at": "2020-01-19T16:50:04Z",
      "author_association": "NONE",
      "body": "I propose BIP numbers 200 for schnorr, 201 for taproot and 202 for tapscript",
      "user": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-576023563",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "labeled",
      "id": 2961140137,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI5NjExNDAxMzc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961140137",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T20:41:23Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 576045592,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjA0NTU5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/576045592",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T20:51:50Z",
      "updated_at": "2020-01-19T20:51:50Z",
      "author_association": "MEMBER",
      "body": "@Relaxo143 BIP numbers 200-202 are already assigned. Please don't confuse people.\r\n\r\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-576045592",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "mentioned",
      "id": 2961145941,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk2MTE0NTk0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961145941",
      "actor": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T20:51:53Z"
    },
    {
      "event": "subscribed",
      "id": 2961145955,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NjExNDU5NTU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961145955",
      "actor": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T20:51:53Z"
    },
    {
      "event": "mentioned",
      "id": 2961146098,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk2MTE0NjA5OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961146098",
      "actor": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T20:52:10Z"
    },
    {
      "event": "subscribed",
      "id": 2961146117,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NjExNDYxMTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961146117",
      "actor": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T20:52:11Z"
    },
    {
      "event": "commented",
      "id": 576045735,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjA0NTczNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/576045735",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T20:53:15Z",
      "updated_at": "2020-01-19T20:53:15Z",
      "author_association": "MEMBER",
      "body": "These are:\r\n\r\n* BIP 340: Schnorr Signatures for secp256k1\r\n* BIP 341: Taproot: SegWit version 1 output spending rules\r\n* BIP 342: Validation of Taproot Scripts\r\n",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-576045735",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "renamed",
      "id": 2961147199,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50Mjk2MTE0NzE5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961147199",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T20:54:26Z",
      "rename": {
        "from": "Add bip-schnorr, bip-taproot, bip-tapscript",
        "to": "Add BIPs 340-342 bip-schnorr, bip-taproot, bip-tapscript"
      }
    },
    {
      "event": "commented",
      "id": 576051128,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjA1MTEyOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/576051128",
      "actor": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T21:48:57Z",
      "updated_at": "2020-01-19T21:48:57Z",
      "author_association": "NONE",
      "body": "> @Relaxo143 BIP numbers 200-202 are already assigned. Please don't confuse people.\r\n\r\nAccording to [this page](https://github.com/bitcoin/bips) 199 is used and then 300+. That's why I suggested 200's. \r\n",
      "user": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-576051128",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "mentioned",
      "id": 2961179177,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk2MTE3OTE3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961179177",
      "actor": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T21:48:57Z"
    },
    {
      "event": "subscribed",
      "id": 2961179180,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NjExNzkxODA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961179180",
      "actor": {
        "login": "Relaxo143",
        "id": 42069389,
        "node_id": "MDQ6VXNlcjQyMDY5Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/42069389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Relaxo143",
        "html_url": "https://github.com/Relaxo143",
        "followers_url": "https://api.github.com/users/Relaxo143/followers",
        "following_url": "https://api.github.com/users/Relaxo143/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Relaxo143/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Relaxo143/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Relaxo143/subscriptions",
        "organizations_url": "https://api.github.com/users/Relaxo143/orgs",
        "repos_url": "https://api.github.com/users/Relaxo143/repos",
        "events_url": "https://api.github.com/users/Relaxo143/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Relaxo143/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T21:48:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2961202809,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MTIwMjgwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961202809",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:29:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2961204296,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MTIwNDI5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961204296",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:31:46Z"
    },
    {
      "event": "commented",
      "id": 576055035,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjA1NTAzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/576055035",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:34:11Z",
      "updated_at": "2020-01-19T22:34:11Z",
      "author_association": "MEMBER",
      "body": "@luke-jr Any idea what I'm doing wrong? The Travis message seems unrelated to my changes.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-576055035",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "mentioned",
      "id": 2961205752,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk2MTIwNTc1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961205752",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:34:12Z"
    },
    {
      "event": "subscribed",
      "id": 2961205754,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NjEyMDU3NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961205754",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:34:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2961209159,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MTIwOTE1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961209159",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:39:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2961210405,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MTIxMDQwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961210405",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:41:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NmU3NzIzM2I1NzFlMTM3YWZmNjkxNjAyNWUzOWZkOTU5YTZkY2RjMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6e77233b571e137aff6916025e39fd959a6dcdc2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6e77233b571e137aff6916025e39fd959a6dcdc2",
      "tree": {
        "sha": "43ab59f6601d8edcdd300718c3b281fd3b0a103d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/43ab59f6601d8edcdd300718c3b281fd3b0a103d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/24eddbb48a1d686f70bf33172de602d865a244b4",
          "sha": "24eddbb48a1d686f70bf33172de602d865a244b4",
          "html_url": "https://github.com/bitcoin/bips/commit/24eddbb48a1d686f70bf33172de602d865a244b4"
        }
      ],
      "message": "Add draft for Schnorr BIP\n\nIncludes squashed contributions by GitHub users jonasnick,\nreal-or-random, AustinWilliams, JustinTArthur, ysangkok,\nRCassatta, Sjors, tnakagawa, and guggero.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-06T01:45:34Z"
      },
      "sha": "6e77233b571e137aff6916025e39fd959a6dcdc2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzdkNzAzNGIxNmY0MjI5ZTZiNzIzMTU1ZTExOTJkNDcyOGNmZmViMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c7d7034b16f4229e6b723155e1192d4728cffeb1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c7d7034b16f4229e6b723155e1192d4728cffeb1",
      "tree": {
        "sha": "730ff5301ca8e965e72c60fb564bfef1916112ff",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/730ff5301ca8e965e72c60fb564bfef1916112ff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6e77233b571e137aff6916025e39fd959a6dcdc2",
          "sha": "6e77233b571e137aff6916025e39fd959a6dcdc2",
          "html_url": "https://github.com/bitcoin/bips/commit/6e77233b571e137aff6916025e39fd959a6dcdc2"
        }
      ],
      "message": "Add taproot/tapscript bips drafts",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-05-06T17:46:09Z"
      },
      "sha": "c7d7034b16f4229e6b723155e1192d4728cffeb1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZWI5NmJlN2E5ZGQwYzIwNDMyNzQ0ZmNmNzExMzM3YzYwYjdhM2YzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/eb96be7a9dd0c20432744fcf711337c60b7a3f39",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/eb96be7a9dd0c20432744fcf711337c60b7a3f39",
      "tree": {
        "sha": "bbd9b149c6e49f6778c2c460417e67208d32889f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bbd9b149c6e49f6778c2c460417e67208d32889f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c7d7034b16f4229e6b723155e1192d4728cffeb1",
          "sha": "c7d7034b16f4229e6b723155e1192d4728cffeb1",
          "html_url": "https://github.com/bitcoin/bips/commit/c7d7034b16f4229e6b723155e1192d4728cffeb1"
        }
      ],
      "message": "Clarify what 'reduced' means in tests and use word 'message' instead of 'message hash'",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-01-14T15:54:24Z"
      },
      "sha": "eb96be7a9dd0c20432744fcf711337c60b7a3f39"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjY1Y2Q2OTQ2NzYwOTZkZDMxZWE3OTA0ODVhMjAxOWNhNjUzYjM0Zg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b65cd694676096dd31ea790485a2019ca653b34f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b65cd694676096dd31ea790485a2019ca653b34f",
      "tree": {
        "sha": "dbd02e46f34b9f84402d4fc53702ec23400a8f7d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dbd02e46f34b9f84402d4fc53702ec23400a8f7d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/eb96be7a9dd0c20432744fcf711337c60b7a3f39",
          "sha": "eb96be7a9dd0c20432744fcf711337c60b7a3f39",
          "html_url": "https://github.com/bitcoin/bips/commit/eb96be7a9dd0c20432744fcf711337c60b7a3f39"
        }
      ],
      "message": "remove duplicate warning\n\nThough perhaps, the emphasis is warranted given its importance. :-)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Mark B Lundeberg",
        "email": "36528214+markblundeberg@users.noreply.github.com",
        "date": "2019-05-06T20:13:20Z"
      },
      "sha": "b65cd694676096dd31ea790485a2019ca653b34f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTUzZGQyMzY2NTBhMDJhYTk2NDA0OWYxMzg1MTNiMTU4NDYzYmVhNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/953dd236650a02aa964049f138513b158463bea4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/953dd236650a02aa964049f138513b158463bea4",
      "tree": {
        "sha": "68a8dfe2e0c962c56f9f55a521bc063e8720f0e6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/68a8dfe2e0c962c56f9f55a521bc063e8720f0e6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b65cd694676096dd31ea790485a2019ca653b34f",
          "sha": "b65cd694676096dd31ea790485a2019ca653b34f",
          "html_url": "https://github.com/bitcoin/bips/commit/b65cd694676096dd31ea790485a2019ca653b34f"
        }
      ],
      "message": "taproot_output_script: first returned byte should be OP_1 (0x51)\n\nIf we look at\r\n\r\n  def IsPayToTaproot(script):\r\n      return len(script) == 35 and script[0] == OP_1 and script[1] == 33 and script[2] >= 0 and script[2] <= 1\r\n\r\nFirst byte is is checked for OP_1. OP_1 is 0x51\r\n\r\nBut the example code in this BIP returns  \r\n\r\n`bytes([0x01, 0x21, output_pubkey[0] & 1]) + output_pubkey[1:]`\r\n\r\nFirst byte 0x01, but it should be 0x51",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2019-05-09T22:09:54Z"
      },
      "sha": "953dd236650a02aa964049f138513b158463bea4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjJlNmQxMWE2ZTFiYmFlMmJjY2QxN2JkNmFiZDA1NjRkMTlhZTU0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b2e6d11a6e1bbae2bccd17bd6abd0564d19ae549",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b2e6d11a6e1bbae2bccd17bd6abd0564d19ae549",
      "tree": {
        "sha": "9ebc34a227ac602ee6c7c96dacdd1cd6d89651f1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9ebc34a227ac602ee6c7c96dacdd1cd6d89651f1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/953dd236650a02aa964049f138513b158463bea4",
          "sha": "953dd236650a02aa964049f138513b158463bea4",
          "html_url": "https://github.com/bitcoin/bips/commit/953dd236650a02aa964049f138513b158463bea4"
        }
      ],
      "message": "Clarify diagram",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-05-10T13:57:12Z"
      },
      "sha": "b2e6d11a6e1bbae2bccd17bd6abd0564d19ae549"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MWE0YjA4YWI3MjY5MGNhZWRhZThiNTM5OGRkZTBmZWRkMGE0ODg1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1a4b08ab72690caedae8b5398dde0fedd0a48856",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1a4b08ab72690caedae8b5398dde0fedd0a48856",
      "tree": {
        "sha": "db7e87e436d6039b50ce180d77362ffc0d159070",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/db7e87e436d6039b50ce180d77362ffc0d159070"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b2e6d11a6e1bbae2bccd17bd6abd0564d19ae549",
          "sha": "b2e6d11a6e1bbae2bccd17bd6abd0564d19ae549",
          "html_url": "https://github.com/bitcoin/bips/commit/b2e6d11a6e1bbae2bccd17bd6abd0564d19ae549"
        }
      ],
      "message": "Fix point_from_bytes in bip-schnorr reference implementation",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-06T14:11:52Z"
      },
      "sha": "1a4b08ab72690caedae8b5398dde0fedd0a48856"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTA4NGFhZmI4YjZlYmFjYmNlNTU5Y2M1NTE1MWEzOTJlZjY1Mzc4OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e084aafb8b6ebacbce559cc55151a392ef653788",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e084aafb8b6ebacbce559cc55151a392ef653788",
      "tree": {
        "sha": "e027bf66e71b5b3691caaf1cfc2bcc4bc39169ac",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e027bf66e71b5b3691caaf1cfc2bcc4bc39169ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1a4b08ab72690caedae8b5398dde0fedd0a48856",
          "sha": "1a4b08ab72690caedae8b5398dde0fedd0a48856",
          "html_url": "https://github.com/bitcoin/bips/commit/1a4b08ab72690caedae8b5398dde0fedd0a48856"
        }
      ],
      "message": "Switch to 32 byte public keys in bip-schnorr",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-07-06T16:32:41Z"
      },
      "sha": "e084aafb8b6ebacbce559cc55151a392ef653788"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MDhlMWIzZGE3NDc3ZWRjMzkwMGUxMGNlYzIyNDlmNjcwZjQ3YjllNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/08e1b3da7477edc3900e10cec2249f670f47b9e4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/08e1b3da7477edc3900e10cec2249f670f47b9e4",
      "tree": {
        "sha": "c4338a0edfae070e21548c4ac9ca0671b467608d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c4338a0edfae070e21548c4ac9ca0671b467608d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e084aafb8b6ebacbce559cc55151a392ef653788",
          "sha": "e084aafb8b6ebacbce559cc55151a392ef653788",
          "html_url": "https://github.com/bitcoin/bips/commit/e084aafb8b6ebacbce559cc55151a392ef653788"
        }
      ],
      "message": "Use short public keys for taproot output keys",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-02T13:52:29Z"
      },
      "sha": "08e1b3da7477edc3900e10cec2249f670f47b9e4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzAzZmY1ZmIyNmZjNmNlNGQ2ZGZjYzZlNTJhNWRhM2RkNmQ2NWU0Yg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/303ff5fb26fc6ce4d6dfcc6e52a5da3dd6d65e4b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/303ff5fb26fc6ce4d6dfcc6e52a5da3dd6d65e4b",
      "tree": {
        "sha": "1c72385b72b40e514493a1e5dbaf6d0316308f35",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1c72385b72b40e514493a1e5dbaf6d0316308f35"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/08e1b3da7477edc3900e10cec2249f670f47b9e4",
          "sha": "08e1b3da7477edc3900e10cec2249f670f47b9e4",
          "html_url": "https://github.com/bitcoin/bips/commit/08e1b3da7477edc3900e10cec2249f670f47b9e4"
        }
      ],
      "message": "Address Tim's comments",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-19T14:37:55Z"
      },
      "sha": "303ff5fb26fc6ce4d6dfcc6e52a5da3dd6d65e4b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NWRhMzBiZDU2ODhkZjU3MzhhZmExNTdkYjg3Nzc5N2Y1Y2Y0ODBkZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5da30bd5688df5738afa157db877797f5cf480dd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5da30bd5688df5738afa157db877797f5cf480dd",
      "tree": {
        "sha": "ac552f22cfb0e53fe27b48475f8e8df5a5cbdb33",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ac552f22cfb0e53fe27b48475f8e8df5a5cbdb33"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/303ff5fb26fc6ce4d6dfcc6e52a5da3dd6d65e4b",
          "sha": "303ff5fb26fc6ce4d6dfcc6e52a5da3dd6d65e4b",
          "html_url": "https://github.com/bitcoin/bips/commit/303ff5fb26fc6ce4d6dfcc6e52a5da3dd6d65e4b"
        }
      ],
      "message": "Update bip-schnorr.mediawiki\n\nCo-Authored-By: Tim Ruffing <tim@timruffing.de>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-20T10:53:51Z"
      },
      "sha": "5da30bd5688df5738afa157db877797f5cf480dd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTY3ZTVlMzIzY2EzMWFiYTFlNTI1MzI2NDYyOTU2ZDdlNmU3ODViMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a67e5e323ca31aba1e525326462956d7e6e785b1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a67e5e323ca31aba1e525326462956d7e6e785b1",
      "tree": {
        "sha": "792955a7b57eab4c4f929b4118d60a7c81d597ea",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/792955a7b57eab4c4f929b4118d60a7c81d597ea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5da30bd5688df5738afa157db877797f5cf480dd",
          "sha": "5da30bd5688df5738afa157db877797f5cf480dd",
          "html_url": "https://github.com/bitcoin/bips/commit/5da30bd5688df5738afa157db877797f5cf480dd"
        }
      ],
      "message": "Update bip-schnorr/test-vectors.py\n\nCo-Authored-By: Tim Ruffing <tim@timruffing.de>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-20T10:53:58Z"
      },
      "sha": "a67e5e323ca31aba1e525326462956d7e6e785b1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZjNiZWY0ZjQ1OWIyNWQ2NDUwZmRjZTNhYzA3Y2RkODdmMDlmNGM3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f3bef4f459b25d6450fdce3ac07cdd87f09f4c76",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f3bef4f459b25d6450fdce3ac07cdd87f09f4c76",
      "tree": {
        "sha": "116b23df937f6cec1400f1c4c671f5c5ea7e334c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/116b23df937f6cec1400f1c4c671f5c5ea7e334c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a67e5e323ca31aba1e525326462956d7e6e785b1",
          "sha": "a67e5e323ca31aba1e525326462956d7e6e785b1",
          "html_url": "https://github.com/bitcoin/bips/commit/a67e5e323ca31aba1e525326462956d7e6e785b1"
        }
      ],
      "message": "Address sipa's feedback",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-21T11:40:42Z"
      },
      "sha": "f3bef4f459b25d6450fdce3ac07cdd87f09f4c76"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MTYwNzNkMGMyMDU4ODljOWY5YTU5YWQyODMxZGI4Yjc2OTIxNjQ4ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/16073d0c205889c9f9a59ad2831db8b76921648e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/16073d0c205889c9f9a59ad2831db8b76921648e",
      "tree": {
        "sha": "bf13efe3c363f46f1c56c6a59bdb28fcd009e8d4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bf13efe3c363f46f1c56c6a59bdb28fcd009e8d4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f3bef4f459b25d6450fdce3ac07cdd87f09f4c76",
          "sha": "f3bef4f459b25d6450fdce3ac07cdd87f09f4c76",
          "html_url": "https://github.com/bitcoin/bips/commit/f3bef4f459b25d6450fdce3ac07cdd87f09f4c76"
        }
      ],
      "message": "Clarify how to disable key path spending",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-05-10T13:29:21Z"
      },
      "sha": "16073d0c205889c9f9a59ad2831db8b76921648e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MWM2YjEwNDU5N2Q2YTZmMzc0ZTFhZTIyZTc0OGY3OGE1Mjk1YzE1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1c6b104597d6a6f374e1ae22e748f78a5295c151",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1c6b104597d6a6f374e1ae22e748f78a5295c151",
      "tree": {
        "sha": "12ff4186283fa4b9df316aa909660e7e1bb2e9dd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/12ff4186283fa4b9df316aa909660e7e1bb2e9dd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/16073d0c205889c9f9a59ad2831db8b76921648e",
          "sha": "16073d0c205889c9f9a59ad2831db8b76921648e",
          "html_url": "https://github.com/bitcoin/bips/commit/16073d0c205889c9f9a59ad2831db8b76921648e"
        }
      ],
      "message": "Replace 'quadratic residue of...'",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-05-18T18:05:49Z"
      },
      "sha": "1c6b104597d6a6f374e1ae22e748f78a5295c151"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YmJhMGJhZDVlODAwMWE3MzAyNTU3ODgzZDY1NWVjNWI1ODNhYzhhNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bba0bad5e8001a7302557883d655ec5b583ac8a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/bba0bad5e8001a7302557883d655ec5b583ac8a6",
      "tree": {
        "sha": "67000b3b2db4659c1275bfa9e3fa0790628846d2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/67000b3b2db4659c1275bfa9e3fa0790628846d2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1c6b104597d6a6f374e1ae22e748f78a5295c151",
          "sha": "1c6b104597d6a6f374e1ae22e748f78a5295c151",
          "html_url": "https://github.com/bitcoin/bips/commit/1c6b104597d6a6f374e1ae22e748f78a5295c151"
        }
      ],
      "message": "Define c in lift_x(x)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-05-18T17:24:23Z"
      },
      "sha": "bba0bad5e8001a7302557883d655ec5b583ac8a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjgwYWY3ZGI0YzQyMzc1NGQ1OTkwNWU3NmU2MGE0MDY5YjlkNjdmZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/680af7db4c423754d59905e76e60a4069b9d67fe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/680af7db4c423754d59905e76e60a4069b9d67fe",
      "tree": {
        "sha": "7383bfff9d3387097421b1fcf700b2163cdd3060",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7383bfff9d3387097421b1fcf700b2163cdd3060"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bba0bad5e8001a7302557883d655ec5b583ac8a6",
          "sha": "bba0bad5e8001a7302557883d655ec5b583ac8a6",
          "html_url": "https://github.com/bitcoin/bips/commit/bba0bad5e8001a7302557883d655ec5b583ac8a6"
        }
      ],
      "message": "Return a point from lift_x()",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-05-18T17:38:00Z"
      },
      "sha": "680af7db4c423754d59905e76e60a4069b9d67fe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YmE3NDhkY2Q5Mzg5Njg4NWU0MWM2MjBmOWQxZDg4YWFjNzQ4Y2E2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ba748dcd93896885e41c620f9d1d88aac748ca63",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ba748dcd93896885e41c620f9d1d88aac748ca63",
      "tree": {
        "sha": "e0743629348628d9232733d57f333ce6420b7793",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e0743629348628d9232733d57f333ce6420b7793"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/680af7db4c423754d59905e76e60a4069b9d67fe",
          "sha": "680af7db4c423754d59905e76e60a4069b9d67fe",
          "html_url": "https://github.com/bitcoin/bips/commit/680af7db4c423754d59905e76e60a4069b9d67fe"
        }
      ],
      "message": "Use key path spend terminology more consistently in taproot/tapscript",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-19T14:45:34Z"
      },
      "sha": "ba748dcd93896885e41c620f9d1d88aac748ca63"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6N2YzNjExZDIzOThmMDUzZDRjMWE5ODg5Y2IyMGQ4MTRiZDZhYmVkZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7f3611d2398f053d4c1a9889cb20d814bd6abedd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7f3611d2398f053d4c1a9889cb20d814bd6abedd",
      "tree": {
        "sha": "522dcee40fe1e872afc0275c9c1db77f6abd7f49",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/522dcee40fe1e872afc0275c9c1db77f6abd7f49"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ba748dcd93896885e41c620f9d1d88aac748ca63",
          "sha": "ba748dcd93896885e41c620f9d1d88aac748ca63",
          "html_url": "https://github.com/bitcoin/bips/commit/ba748dcd93896885e41c620f9d1d88aac748ca63"
        }
      ],
      "message": "Use a tagged hash in bip-schnorr nonce derivation",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-26T11:32:04Z"
      },
      "sha": "7f3611d2398f053d4c1a9889cb20d814bd6abedd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzMzYzdkMGEwYzc4MzI3ZTZjYTc4ZGQ0ZjZhMzcyOTZmYTQ5ZmQyYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c33c7d0a0c78327e6ca78dd4f6a37296fa49fd2b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c33c7d0a0c78327e6ca78dd4f6a37296fa49fd2b",
      "tree": {
        "sha": "5aa2d1138c51648bc08c9bb85b0b5b44d5e8976e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5aa2d1138c51648bc08c9bb85b0b5b44d5e8976e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7f3611d2398f053d4c1a9889cb20d814bd6abedd",
          "sha": "7f3611d2398f053d4c1a9889cb20d814bd6abedd",
          "html_url": "https://github.com/bitcoin/bips/commit/7f3611d2398f053d4c1a9889cb20d814bd6abedd"
        }
      ],
      "message": "Tag signature hashes, improve rationale and update test vectors",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-26T20:46:08Z"
      },
      "sha": "c33c7d0a0c78327e6ca78dd4f6a37296fa49fd2b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Y2M5NjJiZjg0ZjQ0YTFhYzA3YmRiOGMyNjlhZWUwN2FiZGU1NTFkNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cc962bf84f44a1ac07bdb8c269aee07abde551d4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/cc962bf84f44a1ac07bdb8c269aee07abde551d4",
      "tree": {
        "sha": "02a404b4dc4050a92759bdfa4ac2a397c911d78e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/02a404b4dc4050a92759bdfa4ac2a397c911d78e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c33c7d0a0c78327e6ca78dd4f6a37296fa49fd2b",
          "sha": "c33c7d0a0c78327e6ca78dd4f6a37296fa49fd2b",
          "html_url": "https://github.com/bitcoin/bips/commit/c33c7d0a0c78327e6ca78dd4f6a37296fa49fd2b"
        }
      ],
      "message": "Address sipa's comments",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-27T15:13:08Z"
      },
      "sha": "cc962bf84f44a1ac07bdb8c269aee07abde551d4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OGZkNjI5YzNmOWM5NGM0OGIzZDA0OWVjNTBkMWNiYmEyMmIwMmQzYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8fd629c3f9c94c48b3d049ec50d1cbba22b02d3c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8fd629c3f9c94c48b3d049ec50d1cbba22b02d3c",
      "tree": {
        "sha": "608216c6226930e2ced2e73c104710755101a341",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/608216c6226930e2ced2e73c104710755101a341"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cc962bf84f44a1ac07bdb8c269aee07abde551d4",
          "sha": "cc962bf84f44a1ac07bdb8c269aee07abde551d4",
          "html_url": "https://github.com/bitcoin/bips/commit/cc962bf84f44a1ac07bdb8c269aee07abde551d4"
        }
      ],
      "message": "Fix privkey negation in taproot_sign_key",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-29T20:46:47Z"
      },
      "sha": "8fd629c3f9c94c48b3d049ec50d1cbba22b02d3c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZWZhNTU2YWEwNjNjOTIyMmE5MTg1Y2I4YTkxMTBmZjE5MTYxNGYwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/efa556aa063c9222a9185cb8a9110ff191614f08",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/efa556aa063c9222a9185cb8a9110ff191614f08",
      "tree": {
        "sha": "27866c351ff9579d16f15abef17837d046b09401",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/27866c351ff9579d16f15abef17837d046b09401"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8fd629c3f9c94c48b3d049ec50d1cbba22b02d3c",
          "sha": "8fd629c3f9c94c48b3d049ec50d1cbba22b02d3c",
          "html_url": "https://github.com/bitcoin/bips/commit/8fd629c3f9c94c48b3d049ec50d1cbba22b02d3c"
        }
      ],
      "message": "public keys aren't identical",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-08-22T00:11:10Z"
      },
      "sha": "efa556aa063c9222a9185cb8a9110ff191614f08"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTNmNzRhMjA0ZTU1ZDcwOGU0MGYzNTc2MWIxZWE5YjMwMmNiMTk1Yg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a3f74a204e55d708e40f35761b1ea9b302cb195b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a3f74a204e55d708e40f35761b1ea9b302cb195b",
      "tree": {
        "sha": "44ce511f19e16d24db4c366c5328ce495005d72a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/44ce511f19e16d24db4c366c5328ce495005d72a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/efa556aa063c9222a9185cb8a9110ff191614f08",
          "sha": "efa556aa063c9222a9185cb8a9110ff191614f08",
          "html_url": "https://github.com/bitcoin/bips/commit/efa556aa063c9222a9185cb8a9110ff191614f08"
        }
      ],
      "message": "pk not p",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-08-22T00:20:12Z"
      },
      "sha": "a3f74a204e55d708e40f35761b1ea9b302cb195b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NGUxM2VjNzMwMTYyMTMxODAyZGRhMDgxNTY5Y2VhMDA5ZWE3ZWI0Yw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4e13ec730162131802dda081569cea009ea7eb4c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4e13ec730162131802dda081569cea009ea7eb4c",
      "tree": {
        "sha": "5a6ec8764d7b10069d867f46842c0bd5b09f0a84",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5a6ec8764d7b10069d867f46842c0bd5b09f0a84"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a3f74a204e55d708e40f35761b1ea9b302cb195b",
          "sha": "a3f74a204e55d708e40f35761b1ea9b302cb195b",
          "html_url": "https://github.com/bitcoin/bips/commit/a3f74a204e55d708e40f35761b1ea9b302cb195b"
        }
      ],
      "message": "make secret key a 32-byte array called sk, introduce pubkey()",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-08-22T01:06:19Z"
      },
      "sha": "4e13ec730162131802dda081569cea009ea7eb4c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OGZmZWE4NjAyMzA0OGI2NzRjOGM1NDBjODBmZjFlZTI0ZWMxOGJlZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8ffea86023048b674c8c540c80ff1ee24ec18bee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8ffea86023048b674c8c540c80ff1ee24ec18bee",
      "tree": {
        "sha": "9a181a79eba11ba914f6625a5d24644b10ada1cc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9a181a79eba11ba914f6625a5d24644b10ada1cc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4e13ec730162131802dda081569cea009ea7eb4c",
          "sha": "4e13ec730162131802dda081569cea009ea7eb4c",
          "html_url": "https://github.com/bitcoin/bips/commit/4e13ec730162131802dda081569cea009ea7eb4c"
        }
      ],
      "message": "use p for taproot internal key",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-08-23T05:19:28Z"
      },
      "sha": "8ffea86023048b674c8c540c80ff1ee24ec18bee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MGQwNGU0MWUyZjVhNTg4MzAwZTVjNjYwM2Y0MGU1NTM4ZTFlMGU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0d04e41e2f5a588300e5c6603f40e5538e1e0e54",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0d04e41e2f5a588300e5c6603f40e5538e1e0e54",
      "tree": {
        "sha": "9a9e491075e3fd6f97023e29da121c5d901a9087",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9a9e491075e3fd6f97023e29da121c5d901a9087"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8ffea86023048b674c8c540c80ff1ee24ec18bee",
          "sha": "8ffea86023048b674c8c540c80ff1ee24ec18bee",
          "html_url": "https://github.com/bitcoin/bips/commit/8ffea86023048b674c8c540c80ff1ee24ec18bee"
        }
      ],
      "message": "key gen, verify, sign in intro",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-08-23T05:42:00Z"
      },
      "sha": "0d04e41e2f5a588300e5c6603f40e5538e1e0e54"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDQ5MTkwMjU2OTMxNWIzNzVmNWJkNDFlNjZkMGEyMWE0ZTU3MDg1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4491902569315b375f5bd41e66d0a21a4e570852",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4491902569315b375f5bd41e66d0a21a4e570852",
      "tree": {
        "sha": "45e0c039435e373328449fcc0ee61505f4352eaf",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/45e0c039435e373328449fcc0ee61505f4352eaf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0d04e41e2f5a588300e5c6603f40e5538e1e0e54",
          "sha": "0d04e41e2f5a588300e5c6603f40e5538e1e0e54",
          "html_url": "https://github.com/bitcoin/bips/commit/0d04e41e2f5a588300e5c6603f40e5538e1e0e54"
        }
      ],
      "message": "note about pubkey collision",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-08-24T05:08:05Z"
      },
      "sha": "4491902569315b375f5bd41e66d0a21a4e570852"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjkwMzdiZDEyMzBkMjM1MTI5ZjQ2NzNkZGFjNWRiODQ1YjI5NGJiNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/29037bd1230d235129f4673ddac5db845b294bb5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/29037bd1230d235129f4673ddac5db845b294bb5",
      "tree": {
        "sha": "8aa998b69cc115acc8ef4e948e942393e6009c9b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8aa998b69cc115acc8ef4e948e942393e6009c9b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4491902569315b375f5bd41e66d0a21a4e570852",
          "sha": "4491902569315b375f5bd41e66d0a21a4e570852",
          "html_url": "https://github.com/bitcoin/bips/commit/4491902569315b375f5bd41e66d0a21a4e570852"
        }
      ],
      "message": "Add a footnote about 32-byte security",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-09-08T14:38:55Z"
      },
      "sha": "29037bd1230d235129f4673ddac5db845b294bb5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjA0YjdmMTNhMGNiM2QzMzUwNmE3MzY5ZTFmMTMxZDlmMzBlOThkMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/204b7f13a0cb3d33506a7369e1f131d9f30e98d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/204b7f13a0cb3d33506a7369e1f131d9f30e98d2",
      "tree": {
        "sha": "333d8f5c6ad18c18ad7add8244b2f75a76a8fb9b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/333d8f5c6ad18c18ad7add8244b2f75a76a8fb9b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/29037bd1230d235129f4673ddac5db845b294bb5",
          "sha": "29037bd1230d235129f4673ddac5db845b294bb5",
          "html_url": "https://github.com/bitcoin/bips/commit/29037bd1230d235129f4673ddac5db845b294bb5"
        }
      ],
      "message": "Prescribe that a taproot output key should always have a taproot commitment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-06-05T13:59:09Z"
      },
      "sha": "204b7f13a0cb3d33506a7369e1f131d9f30e98d2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MmI5ODdiNTcxMTJhZjk3NjdmODg4ZWQ2NWIxN2M4OTRlZTRiMzRhNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2b987b57112af9767f888ed65b17c894ee4b34a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2b987b57112af9767f888ed65b17c894ee4b34a6",
      "tree": {
        "sha": "a59853ca09a5327cd0129f1ae73aa5348d1cd25d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a59853ca09a5327cd0129f1ae73aa5348d1cd25d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/204b7f13a0cb3d33506a7369e1f131d9f30e98d2",
          "sha": "204b7f13a0cb3d33506a7369e1f131d9f30e98d2",
          "html_url": "https://github.com/bitcoin/bips/commit/204b7f13a0cb3d33506a7369e1f131d9f30e98d2"
        }
      ],
      "message": "Rework Applications section",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-09-08T14:38:15Z"
      },
      "sha": "2b987b57112af9767f888ed65b17c894ee4b34a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTUxMTJmOWYwMWU2ZmQ2M2U2OTg1ZTYzZTY1NWVhNTRkMmU2OWNhYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a5112f9f01e6fd63e6985e63e655ea54d2e69cab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a5112f9f01e6fd63e6985e63e655ea54d2e69cab",
      "tree": {
        "sha": "b9b255fd561af338a916c1d4512e6ba5bc830f4c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b9b255fd561af338a916c1d4512e6ba5bc830f4c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2b987b57112af9767f888ed65b17c894ee4b34a6",
          "sha": "2b987b57112af9767f888ed65b17c894ee4b34a6",
          "html_url": "https://github.com/bitcoin/bips/commit/2b987b57112af9767f888ed65b17c894ee4b34a6"
        }
      ],
      "message": "Move plain public key in output rationale to design section\n\nRebased by Pieter Wuille",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-05-10T12:11:07Z"
      },
      "sha": "a5112f9f01e6fd63e6985e63e655ea54d2e69cab"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ODg4NmViNDA3MTlmOWM3MTZjYjAwMTg2YjJjODU1ODJiYzgwNTQ2Yw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8886eb40719f9c716cb00186b2c85582bc80546c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8886eb40719f9c716cb00186b2c85582bc80546c",
      "tree": {
        "sha": "83fa36764d42bbfb6f0e5a570576c6c3a33c5f46",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/83fa36764d42bbfb6f0e5a570576c6c3a33c5f46"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a5112f9f01e6fd63e6985e63e655ea54d2e69cab",
          "sha": "a5112f9f01e6fd63e6985e63e655ea54d2e69cab",
          "html_url": "https://github.com/bitcoin/bips/commit/a5112f9f01e6fd63e6985e63e655ea54d2e69cab"
        }
      ],
      "message": "Address some nits",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-10T23:24:07Z"
      },
      "sha": "8886eb40719f9c716cb00186b2c85582bc80546c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjVhNGYxZGViOGVhMWFhZmRiYjJjODkzMzJlMzM1OGRiNTIxY2RkMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/65a4f1deb8ea1aafdbb2c89332e3358db521cdd1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/65a4f1deb8ea1aafdbb2c89332e3358db521cdd1",
      "tree": {
        "sha": "423361e71cd63500faca5bc7ba1b918497aff3eb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/423361e71cd63500faca5bc7ba1b918497aff3eb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8886eb40719f9c716cb00186b2c85582bc80546c",
          "sha": "8886eb40719f9c716cb00186b2c85582bc80546c",
          "html_url": "https://github.com/bitcoin/bips/commit/8886eb40719f9c716cb00186b2c85582bc80546c"
        }
      ],
      "message": "Mention SHA256 block size\n\nRebased by Pieter Wuille",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-08-22T12:26:57Z"
      },
      "sha": "65a4f1deb8ea1aafdbb2c89332e3358db521cdd1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Yjc4YjZkZTRmZDQzMmM3MzVlZTc5NjU3NGQ1ODQzZjczZGNkMGJmNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b78b6de4fd432c735ee796574d5843f73dcd0bf7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b78b6de4fd432c735ee796574d5843f73dcd0bf7",
      "tree": {
        "sha": "2123b7e70b4446eb25da5f7fa9984d860273a396",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2123b7e70b4446eb25da5f7fa9984d860273a396"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/65a4f1deb8ea1aafdbb2c89332e3358db521cdd1",
          "sha": "65a4f1deb8ea1aafdbb2c89332e3358db521cdd1",
          "html_url": "https://github.com/bitcoin/bips/commit/65a4f1deb8ea1aafdbb2c89332e3358db521cdd1"
        }
      ],
      "message": "bip-taproot: fix small typo (is does not)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Bryan Bishop",
        "email": "kanzure@gmail.com",
        "date": "2019-09-16T23:47:54Z"
      },
      "sha": "b78b6de4fd432c735ee796574d5843f73dcd0bf7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZjVjNzI4ZmY4MmRkZWFlNjVmZGM3ZDYwOTgzNTg2Njk2YjgyOWJmNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f5c728ff82ddeae65fdc7d60983586696b829bf5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f5c728ff82ddeae65fdc7d60983586696b829bf5",
      "tree": {
        "sha": "3869c09aa8e2699b86a5e7cf95343a6d0203898d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3869c09aa8e2699b86a5e7cf95343a6d0203898d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b78b6de4fd432c735ee796574d5843f73dcd0bf7",
          "sha": "b78b6de4fd432c735ee796574d5843f73dcd0bf7",
          "html_url": "https://github.com/bitcoin/bips/commit/b78b6de4fd432c735ee796574d5843f73dcd0bf7"
        }
      ],
      "message": "Removed reference to 0xc1 leaf version.\n\nNo longer necessary with 32B pubkeys.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "JamesC",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-09-16T19:59:54Z"
      },
      "sha": "f5c728ff82ddeae65fdc7d60983586696b829bf5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OGVhNjc5OGE5ZDA4OTNhZWM5NWYwY2M5MGQ5ZjRkNDVmMzQ3MWQwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8ea6798a9d0893aec95f0cc90d9f4d45f3471d09",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8ea6798a9d0893aec95f0cc90d9f4d45f3471d09",
      "tree": {
        "sha": "b6902d6f325a936899c3cfd569afcab7c7057d0b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b6902d6f325a936899c3cfd569afcab7c7057d0b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f5c728ff82ddeae65fdc7d60983586696b829bf5",
          "sha": "f5c728ff82ddeae65fdc7d60983586696b829bf5",
          "html_url": "https://github.com/bitcoin/bips/commit/f5c728ff82ddeae65fdc7d60983586696b829bf5"
        }
      ],
      "message": "Euler's Criterion prime only nit",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2019-09-22T23:06:14Z"
      },
      "sha": "8ea6798a9d0893aec95f0cc90d9f4d45f3471d09"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTcyMTM2YmViNmNhMzZlNDM4N2EyMzU4MjQwY2FmZTIyZGNiMjFkYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/972136beb6ca36e4387a2358240cafe22dcb21dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/972136beb6ca36e4387a2358240cafe22dcb21dc",
      "tree": {
        "sha": "10501627e0277b7b74546301dcb438183e808db9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/10501627e0277b7b74546301dcb438183e808db9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8ea6798a9d0893aec95f0cc90d9f4d45f3471d09",
          "sha": "8ea6798a9d0893aec95f0cc90d9f4d45f3471d09",
          "html_url": "https://github.com/bitcoin/bips/commit/8ea6798a9d0893aec95f0cc90d9f4d45f3471d09"
        }
      ],
      "message": "Remove P2SH support",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-20T23:14:25Z"
      },
      "sha": "972136beb6ca36e4387a2358240cafe22dcb21dc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDk5MTA2YzU3Yjg4YjE1OTk2NmJjNGQwZjU2YThlNWI4NWU4ZGM3OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/499106c57b88b159966bc4d0f56a8e5b85e8dc78",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/499106c57b88b159966bc4d0f56a8e5b85e8dc78",
      "tree": {
        "sha": "5dcaed196bde2b353038a24b291bbd4372d720e7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5dcaed196bde2b353038a24b291bbd4372d720e7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/972136beb6ca36e4387a2358240cafe22dcb21dc",
          "sha": "972136beb6ca36e4387a2358240cafe22dcb21dc",
          "html_url": "https://github.com/bitcoin/bips/commit/972136beb6ca36e4387a2358240cafe22dcb21dc"
        }
      ],
      "message": "Rework resource limits section",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-21T02:38:03Z"
      },
      "sha": "499106c57b88b159966bc4d0f56a8e5b85e8dc78"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDA4NzgzNGM3M2MwMTNlYjM4ZGM4OTZlMDlkMjYwMmE2MGRlZTJhZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4087834c73c013eb38dc896e09d2602a60dee2af",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4087834c73c013eb38dc896e09d2602a60dee2af",
      "tree": {
        "sha": "fd84ab2bcc0db097e47976e19536d8f2f73a3f10",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fd84ab2bcc0db097e47976e19536d8f2f73a3f10"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/499106c57b88b159966bc4d0f56a8e5b85e8dc78",
          "sha": "499106c57b88b159966bc4d0f56a8e5b85e8dc78",
          "html_url": "https://github.com/bitcoin/bips/commit/499106c57b88b159966bc4d0f56a8e5b85e8dc78"
        }
      ],
      "message": "Move/reword tagged hashes motivation",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-20T22:01:57Z"
      },
      "sha": "4087834c73c013eb38dc896e09d2602a60dee2af"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjIwMjYxNWI3Y2NjOTc5OTAwNmRkZWE1MWRkNTc1MjU2ZjliNmRkNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2202615b7ccc9799006ddea51dd575256f9b6dd6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2202615b7ccc9799006ddea51dd575256f9b6dd6",
      "tree": {
        "sha": "798c1592252f50aed9b49c10cc18a87a74686076",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/798c1592252f50aed9b49c10cc18a87a74686076"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4087834c73c013eb38dc896e09d2602a60dee2af",
          "sha": "4087834c73c013eb38dc896e09d2602a60dee2af",
          "html_url": "https://github.com/bitcoin/bips/commit/4087834c73c013eb38dc896e09d2602a60dee2af"
        }
      ],
      "message": "Fixups",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-23T20:24:33Z"
      },
      "sha": "2202615b7ccc9799006ddea51dd575256f9b6dd6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6N2M2ZWU0OWMwM2EzNjUzNzA0ODU3NTg1YzE2ZWNkOGRmZDIwOWNhOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7c6ee49c03a3653704857585c16ecd8dfd209ca8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7c6ee49c03a3653704857585c16ecd8dfd209ca8",
      "tree": {
        "sha": "07f45140e9974aa10df5ec2ceec63e40db74172f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/07f45140e9974aa10df5ec2ceec63e40db74172f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2202615b7ccc9799006ddea51dd575256f9b6dd6",
          "sha": "2202615b7ccc9799006ddea51dd575256f9b6dd6",
          "html_url": "https://github.com/bitcoin/bips/commit/2202615b7ccc9799006ddea51dd575256f9b6dd6"
        }
      ],
      "message": "typo",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-09-25T04:02:42Z"
      },
      "sha": "7c6ee49c03a3653704857585c16ecd8dfd209ca8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Y2Y4MjMzZDM5ZTFlYzdiZWYwZDZiMWQyNmZmNWQ2MDU2M2VmNDYwNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cf8233d39e1ec7bef0d6b1d26ff5d60563ef4604",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/cf8233d39e1ec7bef0d6b1d26ff5d60563ef4604",
      "tree": {
        "sha": "fff998cecbcbf1cebe37cd74666966129872301c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fff998cecbcbf1cebe37cd74666966129872301c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7c6ee49c03a3653704857585c16ecd8dfd209ca8",
          "sha": "7c6ee49c03a3653704857585c16ecd8dfd209ca8",
          "html_url": "https://github.com/bitcoin/bips/commit/7c6ee49c03a3653704857585c16ecd8dfd209ca8"
        }
      ],
      "message": "separate p2sh wrapped security rationale",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-09-25T04:14:14Z"
      },
      "sha": "cf8233d39e1ec7bef0d6b1d26ff5d60563ef4604"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MWM4YmRkNzVhNTlhMjA0YjYzYzA3ZTM0NjMzZTBmNTNiYjFhNjc5ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1c8bdd75a59a204b63c07e34633e0f53bb1a679e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1c8bdd75a59a204b63c07e34633e0f53bb1a679e",
      "tree": {
        "sha": "b0001ed5c043db3d59db98b013262e624cc1c82c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b0001ed5c043db3d59db98b013262e624cc1c82c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cf8233d39e1ec7bef0d6b1d26ff5d60563ef4604",
          "sha": "cf8233d39e1ec7bef0d6b1d26ff5d60563ef4604",
          "html_url": "https://github.com/bitcoin/bips/commit/cf8233d39e1ec7bef0d6b1d26ff5d60563ef4604"
        }
      ],
      "message": "Remove 0xc1",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-09-25T21:02:43Z"
      },
      "sha": "1c8bdd75a59a204b63c07e34633e0f53bb1a679e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MDVjYzkyYjlhZGJlMWVhYzc1NGNhOGMyNWJhMDIyNzU5YjIwOTc1Zg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/05cc92b9adbe1eac754ca8c25ba022759b20975f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/05cc92b9adbe1eac754ca8c25ba022759b20975f",
      "tree": {
        "sha": "f945561aea8354763cbd426f04a02e377bae00d3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f945561aea8354763cbd426f04a02e377bae00d3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1c8bdd75a59a204b63c07e34633e0f53bb1a679e",
          "sha": "1c8bdd75a59a204b63c07e34633e0f53bb1a679e",
          "html_url": "https://github.com/bitcoin/bips/commit/1c8bdd75a59a204b63c07e34633e0f53bb1a679e"
        }
      ],
      "message": "Add x() and y() functions for points to bip-schnorr",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-09-26T21:18:53Z"
      },
      "sha": "05cc92b9adbe1eac754ca8c25ba022759b20975f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmU4ZjVmNjhjYWE5YzhkYTAwZmNkMmNmZjRhMDIzMDM3NjYwOTdjMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fe8f5f68caa9c8da00fcd2cff4a02303766097c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fe8f5f68caa9c8da00fcd2cff4a02303766097c1",
      "tree": {
        "sha": "6ba56b29602ee0a851f08c6eed37e4bea84eec96",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6ba56b29602ee0a851f08c6eed37e4bea84eec96"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/05cc92b9adbe1eac754ca8c25ba022759b20975f",
          "sha": "05cc92b9adbe1eac754ca8c25ba022759b20975f",
          "html_url": "https://github.com/bitcoin/bips/commit/05cc92b9adbe1eac754ca8c25ba022759b20975f"
        }
      ],
      "message": "Standardize on secret key in bip-schnorr",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-09-27T09:00:37Z"
      },
      "sha": "fe8f5f68caa9c8da00fcd2cff4a02303766097c1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTFkN2RhMzc5NmMzYzM1NTA4Zjg1YmMyMjZiOTdjMWVmNzI2OWViOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e1d7da3796c3c35508f85bc226b97c1ef7269eb9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e1d7da3796c3c35508f85bc226b97c1ef7269eb9",
      "tree": {
        "sha": "d7261ec5612ce6c09f62c2e325373ff2bd8c4959",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d7261ec5612ce6c09f62c2e325373ff2bd8c4959"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fe8f5f68caa9c8da00fcd2cff4a02303766097c1",
          "sha": "fe8f5f68caa9c8da00fcd2cff4a02303766097c1",
          "html_url": "https://github.com/bitcoin/bips/commit/fe8f5f68caa9c8da00fcd2cff4a02303766097c1"
        }
      ],
      "message": "Add is_quad function to bip-schnorr reference code",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-09-27T09:56:21Z"
      },
      "sha": "e1d7da3796c3c35508f85bc226b97c1ef7269eb9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YWZhNTUxOWFkZTdkMWI5MGQ5MWZiNzI1YmYzN2VlY2QzOGNjNGViMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/afa5519ade7d1b90d91fb725bf37eecd38cc4eb3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/afa5519ade7d1b90d91fb725bf37eecd38cc4eb3",
      "tree": {
        "sha": "fee9a71681f01b2e0d6021759db95eddc282cb92",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fee9a71681f01b2e0d6021759db95eddc282cb92"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e1d7da3796c3c35508f85bc226b97c1ef7269eb9",
          "sha": "e1d7da3796c3c35508f85bc226b97c1ef7269eb9",
          "html_url": "https://github.com/bitcoin/bips/commit/e1d7da3796c3c35508f85bc226b97c1ef7269eb9"
        }
      ],
      "message": "Add taproot_tweak_pubkey and taproot_tweak_privkey functions to bip-taproot wallet section",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-09-27T15:34:55Z"
      },
      "sha": "afa5519ade7d1b90d91fb725bf37eecd38cc4eb3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDExMmY1YjAzNTJmNDA0ZTJjZmViZDZmM2Q5YmYwMzBjNjg5NDkxNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d112f5b0352f404e2cfebd6f3d9bf030c6894917",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d112f5b0352f404e2cfebd6f3d9bf030c6894917",
      "tree": {
        "sha": "ff18b4115bb6fe8dc3c1a62e0b9a41bde65d6fef",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ff18b4115bb6fe8dc3c1a62e0b9a41bde65d6fef"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/afa5519ade7d1b90d91fb725bf37eecd38cc4eb3",
          "sha": "afa5519ade7d1b90d91fb725bf37eecd38cc4eb3",
          "html_url": "https://github.com/bitcoin/bips/commit/afa5519ade7d1b90d91fb725bf37eecd38cc4eb3"
        }
      ],
      "message": "Replace taproot_tweak_pubkey assertion with exception and add it to taproot_tweak_seckey too",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-09-30T11:15:23Z"
      },
      "sha": "d112f5b0352f404e2cfebd6f3d9bf030c6894917"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTBlNDIyYTVjYWQ0NzY1M2EwOTJiMTc1ZGZiMTg3OGZlZjAyMWIwYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e0e422a5cad47653a092b175dfb1878fef021b0b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e0e422a5cad47653a092b175dfb1878fef021b0b",
      "tree": {
        "sha": "ab299dd516f5dd6c8edf76face7b606e1f3c3cdd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ab299dd516f5dd6c8edf76face7b606e1f3c3cdd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d112f5b0352f404e2cfebd6f3d9bf030c6894917",
          "sha": "d112f5b0352f404e2cfebd6f3d9bf030c6894917",
          "html_url": "https://github.com/bitcoin/bips/commit/d112f5b0352f404e2cfebd6f3d9bf030c6894917"
        }
      ],
      "message": "Link to Schnorr's paper instead of Wikipedia",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-10-03T09:21:24Z"
      },
      "sha": "e0e422a5cad47653a092b175dfb1878fef021b0b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzhiYjMxYzNiZjFhYTk0NTk2NDM2NTNlMDc3MTVkNTk3ZGY0YTI0Zg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/78bb31c3bf1aa9459643653e07715d597df4a24f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/78bb31c3bf1aa9459643653e07715d597df4a24f",
      "tree": {
        "sha": "5da66a409f36ee614c49d02728525b1e4cdac011",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5da66a409f36ee614c49d02728525b1e4cdac011"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e0e422a5cad47653a092b175dfb1878fef021b0b",
          "sha": "e0e422a5cad47653a092b175dfb1878fef021b0b",
          "html_url": "https://github.com/bitcoin/bips/commit/e0e422a5cad47653a092b175dfb1878fef021b0b"
        }
      ],
      "message": "Accept seckey in the form of bytes and not int in the reference BIP-schnorr code to match the spec.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-09-26T21:12:21Z"
      },
      "sha": "78bb31c3bf1aa9459643653e07715d597df4a24f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDlhMzBjOTU0ZjI0Y2Q3N2Y3Njk1ZDMxNzU1YWIxOGFiMzJkZWFhNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d9a30c954f24cd77f7695d31755ab18ab32deaa7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d9a30c954f24cd77f7695d31755ab18ab32deaa7",
      "tree": {
        "sha": "a17644eda37011d2ad9dbf39662a8dd27a9ca840",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a17644eda37011d2ad9dbf39662a8dd27a9ca840"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/78bb31c3bf1aa9459643653e07715d597df4a24f",
          "sha": "78bb31c3bf1aa9459643653e07715d597df4a24f",
          "html_url": "https://github.com/bitcoin/bips/commit/78bb31c3bf1aa9459643653e07715d597df4a24f"
        }
      ],
      "message": "Extend codeseparator_position from 16 to 32 bits",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-24T05:48:12Z"
      },
      "sha": "d9a30c954f24cd77f7695d31755ab18ab32deaa7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzlmOWZjNGNjODQ0NDZmZDEwMDJlZGY3OTg4YzZkYWViOThkOWZiNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/79f9fc4cc84446fd1002edf7988c6daeb98d9fb5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/79f9fc4cc84446fd1002edf7988c6daeb98d9fb5",
      "tree": {
        "sha": "4c68852c6eb3c99f0268871e5c4f88e766f3a08e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4c68852c6eb3c99f0268871e5c4f88e766f3a08e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d9a30c954f24cd77f7695d31755ab18ab32deaa7",
          "sha": "d9a30c954f24cd77f7695d31755ab18ab32deaa7",
          "html_url": "https://github.com/bitcoin/bips/commit/d9a30c954f24cd77f7695d31755ab18ab32deaa7"
        }
      ],
      "message": "Extend input_index from 16 to 32 bits",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-24T17:36:41Z"
      },
      "sha": "79f9fc4cc84446fd1002edf7988c6daeb98d9fb5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmI0ODZkN2UxMzE1M2MzZDQxODBkY2YzOTZkYjZkNzE1NDYzYjEzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fb486d7e13153c3d4180dcf396db6d715463b135",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fb486d7e13153c3d4180dcf396db6d715463b135",
      "tree": {
        "sha": "8e21056686747ead5d901421ad915fd331b966f7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8e21056686747ead5d901421ad915fd331b966f7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/79f9fc4cc84446fd1002edf7988c6daeb98d9fb5",
          "sha": "79f9fc4cc84446fd1002edf7988c6daeb98d9fb5",
          "html_url": "https://github.com/bitcoin/bips/commit/79f9fc4cc84446fd1002edf7988c6daeb98d9fb5"
        }
      ],
      "message": "Fix formula",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-07T21:37:41Z"
      },
      "sha": "fb486d7e13153c3d4180dcf396db6d715463b135"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzkzZTI5ODUxODVmYjczMGYwOThkM2QxZmFjZTU3YzU4YTdjMThlNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c93e2985185fb730f098d3d1face57c58a7c18e7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c93e2985185fb730f098d3d1face57c58a7c18e7",
      "tree": {
        "sha": "f9f54afecfc9fa347aea922747375753e0148de4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f9f54afecfc9fa347aea922747375753e0148de4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fb486d7e13153c3d4180dcf396db6d715463b135",
          "sha": "fb486d7e13153c3d4180dcf396db6d715463b135",
          "html_url": "https://github.com/bitcoin/bips/commit/fb486d7e13153c3d4180dcf396db6d715463b135"
        }
      ],
      "message": "Increase max Merkle path length",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-09T01:37:58Z"
      },
      "sha": "c93e2985185fb730f098d3d1face57c58a7c18e7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Mjc2ZDlkMzM4YjIxZTQ4ZGNiNDBjNGU0YzBhNWQ5ZjhmZjVhMjBhMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/276d9d338b21e48dcb40c4e4c0a5d9f8ff5a20a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/276d9d338b21e48dcb40c4e4c0a5d9f8ff5a20a1",
      "tree": {
        "sha": "ab6790621d21d871430f50f64ecbee7f112e66bb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ab6790621d21d871430f50f64ecbee7f112e66bb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c93e2985185fb730f098d3d1face57c58a7c18e7",
          "sha": "c93e2985185fb730f098d3d1face57c58a7c18e7",
          "html_url": "https://github.com/bitcoin/bips/commit/c93e2985185fb730f098d3d1face57c58a7c18e7"
        }
      ],
      "message": "Small fix: 0xc1 is possible as first control block byte",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-09T19:12:55Z"
      },
      "sha": "276d9d338b21e48dcb40c4e4c0a5d9f8ff5a20a1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDA2YmMxN2MxNjMwYThmMDViZmQyMDM3NTc4ZjA0MGE2ZTM0YmM0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/406bc17c1630a8f05bfd2037578f040a6e34bc46",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/406bc17c1630a8f05bfd2037578f040a6e34bc46",
      "tree": {
        "sha": "b8db3c20b8e72b7810251848d9b4bb8b1afd847d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b8db3c20b8e72b7810251848d9b4bb8b1afd847d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/276d9d338b21e48dcb40c4e4c0a5d9f8ff5a20a1",
          "sha": "276d9d338b21e48dcb40c4e4c0a5d9f8ff5a20a1",
          "html_url": "https://github.com/bitcoin/bips/commit/276d9d338b21e48dcb40c4e4c0a5d9f8ff5a20a1"
        }
      ],
      "message": "Small fixes from review with real-or-random",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T00:55:19Z"
      },
      "sha": "406bc17c1630a8f05bfd2037578f040a6e34bc46"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OWI5ZmFiOWEwMzkyMGE2NWZjODk1Njg3MGRiNGQxMjI3ZGNmYjI4ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9b9fab9a03920a65fc8956870db4d1227dcfb28e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9b9fab9a03920a65fc8956870db4d1227dcfb28e",
      "tree": {
        "sha": "cebbcd1d5157c9e3da7313b56188ba7e7f9387ce",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/cebbcd1d5157c9e3da7313b56188ba7e7f9387ce"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/406bc17c1630a8f05bfd2037578f040a6e34bc46",
          "sha": "406bc17c1630a8f05bfd2037578f040a6e34bc46",
          "html_url": "https://github.com/bitcoin/bips/commit/406bc17c1630a8f05bfd2037578f040a6e34bc46"
        }
      ],
      "message": "HTTPS links where possible",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T16:30:06Z"
      },
      "sha": "9b9fab9a03920a65fc8956870db4d1227dcfb28e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6N2Y1OTI2NzAzYTE2MmI4ZGQxOGUxZDRlMDI0YmUwYzczZWVlYmVmMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7f5926703a162b8dd18e1d4e024be0c73eeebef2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7f5926703a162b8dd18e1d4e024be0c73eeebef2",
      "tree": {
        "sha": "a5b39a9be28303081d79f5aea24f9c8429fca733",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a5b39a9be28303081d79f5aea24f9c8429fca733"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9b9fab9a03920a65fc8956870db4d1227dcfb28e",
          "sha": "9b9fab9a03920a65fc8956870db4d1227dcfb28e",
          "html_url": "https://github.com/bitcoin/bips/commit/9b9fab9a03920a65fc8956870db4d1227dcfb28e"
        }
      ],
      "message": "Use is_square/is_positive and introduce algorithm names",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T17:34:41Z"
      },
      "sha": "7f5926703a162b8dd18e1d4e024be0c73eeebef2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MGQ0MTkxYmFlNWZhY2RiN2I0YWUyMGFiNWY3YWZjOThmN2U4NDg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0d4191bae5facdb7b4ae20ab5f7afc98f7e84877",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0d4191bae5facdb7b4ae20ab5f7afc98f7e84877",
      "tree": {
        "sha": "1071d696e7893e765120c4b2c6b1574a5f8704da",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1071d696e7893e765120c4b2c6b1574a5f8704da"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7f5926703a162b8dd18e1d4e024be0c73eeebef2",
          "sha": "7f5926703a162b8dd18e1d4e024be0c73eeebef2",
          "html_url": "https://github.com/bitcoin/bips/commit/7f5926703a162b8dd18e1d4e024be0c73eeebef2"
        }
      ],
      "message": "Formulate claims about BatchVerify more accurately",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T19:11:17Z"
      },
      "sha": "0d4191bae5facdb7b4ae20ab5f7afc98f7e84877"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTI5ZDgyZGM4ODMzM2QyNjUzOTBiZmY1NWMxYjUyYTRiYzQ3YWViOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e29d82dc88333d265390bff55c1b52a4bc47aeb9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e29d82dc88333d265390bff55c1b52a4bc47aeb9",
      "tree": {
        "sha": "3f79d977772cd4e17c96414da5cb02d285737305",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3f79d977772cd4e17c96414da5cb02d285737305"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0d4191bae5facdb7b4ae20ab5f7afc98f7e84877",
          "sha": "0d4191bae5facdb7b4ae20ab5f7afc98f7e84877",
          "html_url": "https://github.com/bitcoin/bips/commit/0d4191bae5facdb7b4ae20ab5f7afc98f7e84877"
        }
      ],
      "message": "Apply suggestions from code review\n\nCo-Authored-By: Tim Ruffing <tim@timruffing.de>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T19:22:31Z"
      },
      "sha": "e29d82dc88333d265390bff55c1b52a4bc47aeb9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjgxZGY2NjBiOTVkZTcxMmE4NDZjYjM0NjJjY2NiMTMxMDczYmM0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/281df660b95de712a846cb3462cccb131073bc45",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/281df660b95de712a846cb3462cccb131073bc45",
      "tree": {
        "sha": "d1c08f994847dd45ce225153236685560e7fbd53",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d1c08f994847dd45ce225153236685560e7fbd53"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e29d82dc88333d265390bff55c1b52a4bc47aeb9",
          "sha": "e29d82dc88333d265390bff55c1b52a4bc47aeb9",
          "html_url": "https://github.com/bitcoin/bips/commit/e29d82dc88333d265390bff55c1b52a4bc47aeb9"
        }
      ],
      "message": "Prefix infinite with is_",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T19:24:07Z"
      },
      "sha": "281df660b95de712a846cb3462cccb131073bc45"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTZhMTk5YWM4YzZhNDU3NzIzZWMzNzUzNGMwZGI2NzNlMjA3MTZlZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/96a199ac8c6a457723ec37534c0db673e20716ee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/96a199ac8c6a457723ec37534c0db673e20716ee",
      "tree": {
        "sha": "242b37275e4b56c6d162fe4e31310f25f0b26fae",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/242b37275e4b56c6d162fe4e31310f25f0b26fae"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/281df660b95de712a846cb3462cccb131073bc45",
          "sha": "281df660b95de712a846cb3462cccb131073bc45",
          "html_url": "https://github.com/bitcoin/bips/commit/281df660b95de712a846cb3462cccb131073bc45"
        }
      ],
      "message": "Drop other curve comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T19:26:21Z"
      },
      "sha": "96a199ac8c6a457723ec37534c0db673e20716ee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NTY1YWM0ZjcxNzVlNGMyNWI5MmE1YjVjOTMzZDBmYTQ2MTI2M2I3ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/565ac4f7175e4c25b92a5b5c933d0fa461263b7e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/565ac4f7175e4c25b92a5b5c933d0fa461263b7e",
      "tree": {
        "sha": "c261fc8bb1226cd9780ae33b69a8609d7758bc19",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c261fc8bb1226cd9780ae33b69a8609d7758bc19"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/96a199ac8c6a457723ec37534c0db673e20716ee",
          "sha": "96a199ac8c6a457723ec37534c0db673e20716ee",
          "html_url": "https://github.com/bitcoin/bips/commit/96a199ac8c6a457723ec37534c0db673e20716ee"
        }
      ],
      "message": "Typo",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T19:29:52Z"
      },
      "sha": "565ac4f7175e4c25b92a5b5c933d0fa461263b7e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YmM0ZThmMjhiOGYzZjI3ZTQ2ZWExYTcwZmMwZmZhMzk4YWI1MWFmZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bc4e8f28b8f3f27e46ea1a70fc0ffa398ab51aff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/bc4e8f28b8f3f27e46ea1a70fc0ffa398ab51aff",
      "tree": {
        "sha": "411d693067b98a24bbe64f38d10b9980a54ca267",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/411d693067b98a24bbe64f38d10b9980a54ca267"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/565ac4f7175e4c25b92a5b5c933d0fa461263b7e",
          "sha": "565ac4f7175e4c25b92a5b5c933d0fa461263b7e",
          "html_url": "https://github.com/bitcoin/bips/commit/565ac4f7175e4c25b92a5b5c933d0fa461263b7e"
        }
      ],
      "message": "bip-schnorr: more on provable security\n\nI'll try to get a link to the CCS paper that does not have a paywall...",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-10-15T23:02:09Z"
      },
      "sha": "bc4e8f28b8f3f27e46ea1a70fc0ffa398ab51aff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTdlZTZjMzBmYWFlM2U2ZjQwNjIxNTJmMGU5MTBhYmQzZjQ0NmE4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a7ee6c30faae3e6f4062152f0e910abd3f446a86",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a7ee6c30faae3e6f4062152f0e910abd3f446a86",
      "tree": {
        "sha": "c5961d60cbd8699d9c863d723ea34073a4e6fd54",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c5961d60cbd8699d9c863d723ea34073a4e6fd54"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bc4e8f28b8f3f27e46ea1a70fc0ffa398ab51aff",
          "sha": "bc4e8f28b8f3f27e46ea1a70fc0ffa398ab51aff",
          "html_url": "https://github.com/bitcoin/bips/commit/bc4e8f28b8f3f27e46ea1a70fc0ffa398ab51aff"
        }
      ],
      "message": "bip-schnorr: more on (e,s)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-10-15T23:21:40Z"
      },
      "sha": "a7ee6c30faae3e6f4062152f0e910abd3f446a86"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YWVmMTQ4ZmZjNjIyMzMwZWExMzA4YzUzYjE1NGFlZWFkZDIyZWYxMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/aef148ffc622330ea1308c53b154aeeadd22ef10",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/aef148ffc622330ea1308c53b154aeeadd22ef10",
      "tree": {
        "sha": "d00d4b6b9c75d243f3a6af0f1747249e3428faeb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d00d4b6b9c75d243f3a6af0f1747249e3428faeb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a7ee6c30faae3e6f4062152f0e910abd3f446a86",
          "sha": "a7ee6c30faae3e6f4062152f0e910abd3f446a86",
          "html_url": "https://github.com/bitcoin/bips/commit/a7ee6c30faae3e6f4062152f0e910abd3f446a86"
        }
      ],
      "message": "Explain that MuSig needs key prefixing",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T22:21:08Z"
      },
      "sha": "aef148ffc622330ea1308c53b154aeeadd22ef10"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjBmOTkwMTgwOWRlNDg1MGRhOGQyNWYwOTEzYzY1ZTc3YjdmZDc1NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/20f9901809de4850da8d25f0913c65e77b7fd754",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/20f9901809de4850da8d25f0913c65e77b7fd754",
      "tree": {
        "sha": "0c6e2b783d7e5e539f99c01bb3c9050fc1573b80",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0c6e2b783d7e5e539f99c01bb3c9050fc1573b80"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/aef148ffc622330ea1308c53b154aeeadd22ef10",
          "sha": "aef148ffc622330ea1308c53b154aeeadd22ef10",
          "html_url": "https://github.com/bitcoin/bips/commit/aef148ffc622330ea1308c53b154aeeadd22ef10"
        }
      ],
      "message": "Update bip-schnorr.mediawiki\n\nCo-Authored-By: Tim Ruffing <tim@timruffing.de>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-16T00:28:52Z"
      },
      "sha": "20f9901809de4850da8d25f0913c65e77b7fd754"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6N2E3YWIxMTFjOWIxNzFkNzYyN2E4Nzk2ODJlZmNkNDM1MWRlN2YzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7a7ab111c9b171d7627a879682efcd4351de7f37",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7a7ab111c9b171d7627a879682efcd4351de7f37",
      "tree": {
        "sha": "68dc593bb5d0a93128dce65578a6ca96009bd941",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/68dc593bb5d0a93128dce65578a6ca96009bd941"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/20f9901809de4850da8d25f0913c65e77b7fd754",
          "sha": "20f9901809de4850da8d25f0913c65e77b7fd754",
          "html_url": "https://github.com/bitcoin/bips/commit/20f9901809de4850da8d25f0913c65e77b7fd754"
        }
      ],
      "message": "Clarify interaction x-only keys with verification",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-15T23:03:19Z"
      },
      "sha": "7a7ab111c9b171d7627a879682efcd4351de7f37"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjNjMWMzZWQ4Yjk1NDQ5N2MwZWM2ZWMxZjY5ZWQxNGI1YWJjZjA5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/23c1c3ed8b954497c0ec6ec1f69ed14b5abcf092",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/23c1c3ed8b954497c0ec6ec1f69ed14b5abcf092",
      "tree": {
        "sha": "713c64f9cfedb528c160da3d46922c88d5863829",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/713c64f9cfedb528c160da3d46922c88d5863829"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7a7ab111c9b171d7627a879682efcd4351de7f37",
          "sha": "7a7ab111c9b171d7627a879682efcd4351de7f37",
          "html_url": "https://github.com/bitcoin/bips/commit/7a7ab111c9b171d7627a879682efcd4351de7f37"
        }
      ],
      "message": "More on key generation",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-16T00:54:04Z"
      },
      "sha": "23c1c3ed8b954497c0ec6ec1f69ed14b5abcf092"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmVmZmM0ZTM0ZDg5ZDAzNDMzZGFkNjAzNDhjNmFjYmM3MzM5MjA2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feffc4e34d89d03433dad60348c6acbc73392063",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/feffc4e34d89d03433dad60348c6acbc73392063",
      "tree": {
        "sha": "d27f53d44498fa65b24a5a51ab05cb7e3537c5c3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d27f53d44498fa65b24a5a51ab05cb7e3537c5c3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/23c1c3ed8b954497c0ec6ec1f69ed14b5abcf092",
          "sha": "23c1c3ed8b954497c0ec6ec1f69ed14b5abcf092",
          "html_url": "https://github.com/bitcoin/bips/commit/23c1c3ed8b954497c0ec6ec1f69ed14b5abcf092"
        }
      ],
      "message": "annex is bit 0 of spend_type",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-10-18T03:41:00Z"
      },
      "sha": "feffc4e34d89d03433dad60348c6acbc73392063"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MDllM2Y2MzdiNTJlYjJlMTRjNThhOGMyY2EwNjE4YThmNDE2MmQwZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/09e3f637b52eb2e14c58a8c2ca0618a8f4162d0f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/09e3f637b52eb2e14c58a8c2ca0618a8f4162d0f",
      "tree": {
        "sha": "a199c8f351c56d38e456b6206b55ba264d95fb57",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a199c8f351c56d38e456b6206b55ba264d95fb57"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feffc4e34d89d03433dad60348c6acbc73392063",
          "sha": "feffc4e34d89d03433dad60348c6acbc73392063",
          "html_url": "https://github.com/bitcoin/bips/commit/feffc4e34d89d03433dad60348c6acbc73392063"
        }
      ],
      "message": "Change reference for ECDSA proofs\n\nRefer to Manuel Fersch's dissertation for provable security of ECDSA. It's freely accessible and multiple results put well in context.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-10-21T11:27:01Z"
      },
      "sha": "09e3f637b52eb2e14c58a8c2ca0618a8f4162d0f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzU5NWMzMGFjZDU5MDY4YjhhM2Q1MTUwYmM3NDE1Nzk1MGM1OWIxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3595c30acd59068b8a3d5150bc74157950c59b19",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3595c30acd59068b8a3d5150bc74157950c59b19",
      "tree": {
        "sha": "1050883d42044152b3202c953b9ed395dd5488df",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1050883d42044152b3202c953b9ed395dd5488df"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/09e3f637b52eb2e14c58a8c2ca0618a8f4162d0f",
          "sha": "09e3f637b52eb2e14c58a8c2ca0618a8f4162d0f",
          "html_url": "https://github.com/bitcoin/bips/commit/09e3f637b52eb2e14c58a8c2ca0618a8f4162d0f"
        }
      ],
      "message": "Improve section on alternatives to OP_CHECKMULTISIG",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-21T23:16:47Z"
      },
      "sha": "3595c30acd59068b8a3d5150bc74157950c59b19"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjA1OWI5ZTM1YTM5Y2YzNDY1NWU4YjZmMmMzZTU1MDAwNGI1YTk5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2059b9e35a39cf34655e8b6f2c3e550004b5a997",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2059b9e35a39cf34655e8b6f2c3e550004b5a997",
      "tree": {
        "sha": "4900ab2756b8755c1ea5bb9cd256f1d5dbb08fcb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4900ab2756b8755c1ea5bb9cd256f1d5dbb08fcb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3595c30acd59068b8a3d5150bc74157950c59b19",
          "sha": "3595c30acd59068b8a3d5150bc74157950c59b19",
          "html_url": "https://github.com/bitcoin/bips/commit/3595c30acd59068b8a3d5150bc74157950c59b19"
        }
      ],
      "message": "Address aj comments",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-22T18:15:36Z"
      },
      "sha": "2059b9e35a39cf34655e8b6f2c3e550004b5a997"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmMwYTRlZjU0MjcxNWM5ZTU4NDE2MzZmZDBkOTY0NWRmOTUzNGY1Yw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fc0a4ef542715c9e5841636fd0d9645df9534f5c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fc0a4ef542715c9e5841636fd0d9645df9534f5c",
      "tree": {
        "sha": "76cf77963899fbeb5b1d6bde5ca338d07dab1b49",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/76cf77963899fbeb5b1d6bde5ca338d07dab1b49"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2059b9e35a39cf34655e8b6f2c3e550004b5a997",
          "sha": "2059b9e35a39cf34655e8b6f2c3e550004b5a997",
          "html_url": "https://github.com/bitcoin/bips/commit/2059b9e35a39cf34655e8b6f2c3e550004b5a997"
        }
      ],
      "message": "Explain why CMS is not turned into SUCCESSx",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-22T18:46:31Z"
      },
      "sha": "fc0a4ef542715c9e5841636fd0d9645df9534f5c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MTY5NWYwNzNkM2M5ZjZmM2VhODM4ZmQxMzU2YWRiZDAzNmQzMGJkZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1695f073d3c9f6f3ea838fd1356adbd036d30bdd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1695f073d3c9f6f3ea838fd1356adbd036d30bdd",
      "tree": {
        "sha": "dadf677567ec1204cab1c710b4e6b7528d968b77",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dadf677567ec1204cab1c710b4e6b7528d968b77"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fc0a4ef542715c9e5841636fd0d9645df9534f5c",
          "sha": "fc0a4ef542715c9e5841636fd0d9645df9534f5c",
          "html_url": "https://github.com/bitcoin/bips/commit/fc0a4ef542715c9e5841636fd0d9645df9534f5c"
        }
      ],
      "message": "Elaborate on default and alternative signing",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-24T21:48:24Z"
      },
      "sha": "1695f073d3c9f6f3ea838fd1356adbd036d30bdd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ODNjZWJiNTMyNmI4ZmJlYmIzOWZiMzRmNzdhNzU1YjNhOWRmZTk0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83cebb5326b8fbebb39fb34f77a755b3a9dfe942",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/83cebb5326b8fbebb39fb34f77a755b3a9dfe942",
      "tree": {
        "sha": "5ca7bb8a1b36e7e13f74928f30c514fe57f88dd8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5ca7bb8a1b36e7e13f74928f30c514fe57f88dd8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1695f073d3c9f6f3ea838fd1356adbd036d30bdd",
          "sha": "1695f073d3c9f6f3ea838fd1356adbd036d30bdd",
          "html_url": "https://github.com/bitcoin/bips/commit/1695f073d3c9f6f3ea838fd1356adbd036d30bdd"
        }
      ],
      "message": "Update bip-schnorr.mediawiki\n\nCo-Authored-By: Tim Ruffing <tim@timruffing.de>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-25T17:18:17Z"
      },
      "sha": "83cebb5326b8fbebb39fb34f77a755b3a9dfe942"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OWMxNjcwZjM0NTZlZjdiNmZlZTIwZWNhMTliYTkyMmQ5YTE5NjdmYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9c1670f3456ef7b6fee20eca19ba922d9a1967fa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9c1670f3456ef7b6fee20eca19ba922d9a1967fa",
      "tree": {
        "sha": "aec20329ba408f1cfc78b82923360b58f6dc591e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/aec20329ba408f1cfc78b82923360b58f6dc591e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83cebb5326b8fbebb39fb34f77a755b3a9dfe942",
          "sha": "83cebb5326b8fbebb39fb34f77a755b3a9dfe942",
          "html_url": "https://github.com/bitcoin/bips/commit/83cebb5326b8fbebb39fb34f77a755b3a9dfe942"
        }
      ],
      "message": "Update bip-schnorr.mediawiki\n\nCo-Authored-By: Tim Ruffing <tim@timruffing.de>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-25T17:18:29Z"
      },
      "sha": "9c1670f3456ef7b6fee20eca19ba922d9a1967fa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZGJiZTY5MGM4YWQwYWEwMmNhODdiMTk0MmIzMjJjMDhmYmUzY2RkNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dbbe690c8ad0aa02ca87b1942b322c08fbe3cdd4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/dbbe690c8ad0aa02ca87b1942b322c08fbe3cdd4",
      "tree": {
        "sha": "98fa49517c9fce6cddcc049113054533cadce270",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/98fa49517c9fce6cddcc049113054533cadce270"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9c1670f3456ef7b6fee20eca19ba922d9a1967fa",
          "sha": "9c1670f3456ef7b6fee20eca19ba922d9a1967fa",
          "html_url": "https://github.com/bitcoin/bips/commit/9c1670f3456ef7b6fee20eca19ba922d9a1967fa"
        }
      ],
      "message": "Consistently mention resource limits in bip-tapscript",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-24T18:12:59Z"
      },
      "sha": "dbbe690c8ad0aa02ca87b1942b322c08fbe3cdd4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6N2MwMDM0NmNmMmJmZjBjMjAzZDgyYzczOWNjYTkxNWM4N2FkMjJkZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7c00346cf2bff0c203d82c739cca915c87ad22de",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7c00346cf2bff0c203d82c739cca915c87ad22de",
      "tree": {
        "sha": "f4947a9c76832f77e709be5e49511736fd518712",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f4947a9c76832f77e709be5e49511736fd518712"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dbbe690c8ad0aa02ca87b1942b322c08fbe3cdd4",
          "sha": "dbbe690c8ad0aa02ca87b1942b322c08fbe3cdd4",
          "html_url": "https://github.com/bitcoin/bips/commit/dbbe690c8ad0aa02ca87b1942b322c08fbe3cdd4"
        }
      ],
      "message": "typos",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-10-30T00:27:26Z"
      },
      "sha": "7c00346cf2bff0c203d82c739cca915c87ad22de"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDg3YzVjODgwMTkzMmQ1MzYzZDVjZmMwMmQ3ZjlmNjVjNWU0OGYxYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d87c5c8801932d5363d5cfc02d7f9f65c5e48f1a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d87c5c8801932d5363d5cfc02d7f9f65c5e48f1a",
      "tree": {
        "sha": "84a9f98e37e8adb26175cf4fa8e3489ede6e773d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/84a9f98e37e8adb26175cf4fa8e3489ede6e773d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7c00346cf2bff0c203d82c739cca915c87ad22de",
          "sha": "7c00346cf2bff0c203d82c739cca915c87ad22de",
          "html_url": "https://github.com/bitcoin/bips/commit/7c00346cf2bff0c203d82c739cca915c87ad22de"
        }
      ],
      "message": "use bytes() instead of b'' - avoid markdown issue \n\nCurrently github markdown renders `b''` inside `<source>` tags incorrectly. This makes `h = b''` show as `h = b` and creates some confusion.\r\nThe issue can be avoided by using bytes() to create empty byte array",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2019-11-04T14:15:12Z"
      },
      "sha": "d87c5c8801932d5363d5cfc02d7f9f65c5e48f1a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MGY5YWIwY2VjOTkzYjNmZGU1ODdjM2VkYTIwYzdhMTgzMjdlZGU5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0f9ab0cec993b3fde587c3eda20c7a18327ede92",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0f9ab0cec993b3fde587c3eda20c7a18327ede92",
      "tree": {
        "sha": "1b170b819763186ea3d92e883890ca0f9c98ab91",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1b170b819763186ea3d92e883890ca0f9c98ab91"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d87c5c8801932d5363d5cfc02d7f9f65c5e48f1a",
          "sha": "d87c5c8801932d5363d5cfc02d7f9f65c5e48f1a",
          "html_url": "https://github.com/bitcoin/bips/commit/d87c5c8801932d5363d5cfc02d7f9f65c5e48f1a"
        }
      ],
      "message": "fix docstring in taproot_output_script\n\nthe final \"-None\" line in the docstring of `taproot_output_script` example function was actually outside of the docstring",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2019-11-04T12:46:00Z"
      },
      "sha": "0f9ab0cec993b3fde587c3eda20c7a18327ede92"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YWU3MTIyODIyYWMzY2Q1MTQxNWYzNTE0OWFjNjBlNjExYzNhYmM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ae7122822ac3cd51415f35149ac60e611c3abc40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ae7122822ac3cd51415f35149ac60e611c3abc40",
      "tree": {
        "sha": "9201ad6c4f061b62912cc69238ae321616dc1285",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9201ad6c4f061b62912cc69238ae321616dc1285"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0f9ab0cec993b3fde587c3eda20c7a18327ede92",
          "sha": "0f9ab0cec993b3fde587c3eda20c7a18327ede92",
          "html_url": "https://github.com/bitcoin/bips/commit/0f9ab0cec993b3fde587c3eda20c7a18327ede92"
        }
      ],
      "message": "Settle on notation: is_square(y), has_square_y(P)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-04T19:56:48Z"
      },
      "sha": "ae7122822ac3cd51415f35149ac60e611c3abc40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmRmNmU4OTdkOWEzYjgwNmNiYzBmNDM3NTBkZTBjMWU4MGVjYmNkYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fdf6e897d9a3b806cbc0f43750de0c1e80ecbcdb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fdf6e897d9a3b806cbc0f43750de0c1e80ecbcdb",
      "tree": {
        "sha": "2b37ede8a96ca9c7556da62519e434bfa514b4e7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2b37ede8a96ca9c7556da62519e434bfa514b4e7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ae7122822ac3cd51415f35149ac60e611c3abc40",
          "sha": "ae7122822ac3cd51415f35149ac60e611c3abc40",
          "html_url": "https://github.com/bitcoin/bips/commit/ae7122822ac3cd51415f35149ac60e611c3abc40"
        }
      ],
      "message": "Fix test vector generation code after changing schnorrsig_sign api",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-01T14:44:02Z"
      },
      "sha": "fdf6e897d9a3b806cbc0f43750de0c1e80ecbcdb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ODIxMjllNzIwZDgwOGRkN2JmZmU3NmU1MDdiYTdhMTBlYmY4MGQ3ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/82129e720d808dd7bffe76e507ba7a10ebf80d7e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/82129e720d808dd7bffe76e507ba7a10ebf80d7e",
      "tree": {
        "sha": "98b6e4b934b66b5b85f1bd2a9384dc14524d2d17",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/98b6e4b934b66b5b85f1bd2a9384dc14524d2d17"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fdf6e897d9a3b806cbc0f43750de0c1e80ecbcdb",
          "sha": "fdf6e897d9a3b806cbc0f43750de0c1e80ecbcdb",
          "html_url": "https://github.com/bitcoin/bips/commit/fdf6e897d9a3b806cbc0f43750de0c1e80ecbcdb"
        }
      ],
      "message": "Adjust test vector generation code to latest terminology",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-01T14:50:26Z"
      },
      "sha": "82129e720d808dd7bffe76e507ba7a10ebf80d7e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTZkMmQ0MmFhMmM2YzY4OTkzMmNhNTM2NGEwMWRmOTQzNzhjOWM5ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a6d2d42aa2c6c689932ca5364a01df94378c9c9e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a6d2d42aa2c6c689932ca5364a01df94378c9c9e",
      "tree": {
        "sha": "542b7a216b9244b100eaa0f1232144477aa03bfa",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/542b7a216b9244b100eaa0f1232144477aa03bfa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/82129e720d808dd7bffe76e507ba7a10ebf80d7e",
          "sha": "82129e720d808dd7bffe76e507ba7a10ebf80d7e",
          "html_url": "https://github.com/bitcoin/bips/commit/82129e720d808dd7bffe76e507ba7a10ebf80d7e"
        }
      ],
      "message": "Check infinity in is_positive",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-01T16:14:57Z"
      },
      "sha": "a6d2d42aa2c6c689932ca5364a01df94378c9c9e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzAxZmVmMzZkZThmZmYyYThkNjkyZjg2ZmJkZTEzN2Y5M2JmZjE0ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/301fef36de8fff2a8d692f86fbde137f93bff14d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/301fef36de8fff2a8d692f86fbde137f93bff14d",
      "tree": {
        "sha": "22c1f8085c1ba232a8e3015d59e85c4e19e40adb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/22c1f8085c1ba232a8e3015d59e85c4e19e40adb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a6d2d42aa2c6c689932ca5364a01df94378c9c9e",
          "sha": "a6d2d42aa2c6c689932ca5364a01df94378c9c9e",
          "html_url": "https://github.com/bitcoin/bips/commit/a6d2d42aa2c6c689932ca5364a01df94378c9c9e"
        }
      ],
      "message": "Make more clear that signing function in test vectors generation code isn't intended to be used anywhere else",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-02T12:17:17Z"
      },
      "sha": "301fef36de8fff2a8d692f86fbde137f93bff14d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzkxOTZlZWVmNDFiODk2YWY5ZDVmZDVlYjM4MjMwMDQ3NzBmY2NmMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c9196eeef41b896af9d5fd5eb3823004770fccf0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c9196eeef41b896af9d5fd5eb3823004770fccf0",
      "tree": {
        "sha": "5b64346fb390b580c34375d0bebefc5493a3ab00",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5b64346fb390b580c34375d0bebefc5493a3ab00"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/301fef36de8fff2a8d692f86fbde137f93bff14d",
          "sha": "301fef36de8fff2a8d692f86fbde137f93bff14d",
          "html_url": "https://github.com/bitcoin/bips/commit/301fef36de8fff2a8d692f86fbde137f93bff14d"
        }
      ],
      "message": "Fix typo in reference code comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-02T12:19:17Z"
      },
      "sha": "c9196eeef41b896af9d5fd5eb3823004770fccf0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OWI1YmExNThjMWVlOGZjODdiNmMyMWRlOGFmNTg3NTRhN2VhMzA2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9b5ba158c1ee8fc87b6c21de8af58754a7ea3069",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9b5ba158c1ee8fc87b6c21de8af58754a7ea3069",
      "tree": {
        "sha": "13cdccddc360d4c7f4c12ef67c424f52d46ad5eb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/13cdccddc360d4c7f4c12ef67c424f52d46ad5eb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c9196eeef41b896af9d5fd5eb3823004770fccf0",
          "sha": "c9196eeef41b896af9d5fd5eb3823004770fccf0",
          "html_url": "https://github.com/bitcoin/bips/commit/c9196eeef41b896af9d5fd5eb3823004770fccf0"
        }
      ],
      "message": "improve rationale for key prefixing",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-10-23T15:26:45Z"
      },
      "sha": "9b5ba158c1ee8fc87b6c21de8af58754a7ea3069"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzgyODFkZWVjNjRkY2QwNmI0OWVmZDI3OGMzMjJmMTNmN2IxM2RlNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c8281deec64dcd06b49efd278c322f13f7b13de7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c8281deec64dcd06b49efd278c322f13f7b13de7",
      "tree": {
        "sha": "2bdfcd620932b0a8037db7b1f5bbdb02522db826",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2bdfcd620932b0a8037db7b1f5bbdb02522db826"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9b5ba158c1ee8fc87b6c21de8af58754a7ea3069",
          "sha": "9b5ba158c1ee8fc87b6c21de8af58754a7ea3069",
          "html_url": "https://github.com/bitcoin/bips/commit/9b5ba158c1ee8fc87b6c21de8af58754a7ea3069"
        }
      ],
      "message": "Fix point_from_bytes accepting out-of-range pubkeys and add test vector",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-04T12:53:37Z"
      },
      "sha": "c8281deec64dcd06b49efd278c322f13f7b13de7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmU3NGFiNjVkYmMxMTllNzVlYWMyYzllMjU4MTI0MTBlMzJjNGNiMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fe74ab65dbc119e75eac2c9e25812410e32c4cb0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fe74ab65dbc119e75eac2c9e25812410e32c4cb0",
      "tree": {
        "sha": "86fb2edfc56cf232e12323d9bf85034c1cb22e08",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/86fb2edfc56cf232e12323d9bf85034c1cb22e08"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c8281deec64dcd06b49efd278c322f13f7b13de7",
          "sha": "c8281deec64dcd06b49efd278c322f13f7b13de7",
          "html_url": "https://github.com/bitcoin/bips/commit/c8281deec64dcd06b49efd278c322f13f7b13de7"
        }
      ],
      "message": "Update test-vectors.csv",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-05T10:14:23Z"
      },
      "sha": "fe74ab65dbc119e75eac2c9e25812410e32c4cb0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2Q5Nzk2N2I5NzgzMWRjMjY4YjM5YmM4YjY2N2Q2YWFjZTBkYzU2YQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d97967b97831dc268b39bc8b667d6aace0dc56a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3d97967b97831dc268b39bc8b667d6aace0dc56a",
      "tree": {
        "sha": "afad53e547ba2f6ddc3e02dd193eac8c2d16a3b5",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/afad53e547ba2f6ddc3e02dd193eac8c2d16a3b5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fe74ab65dbc119e75eac2c9e25812410e32c4cb0",
          "sha": "fe74ab65dbc119e75eac2c9e25812410e32c4cb0",
          "html_url": "https://github.com/bitcoin/bips/commit/fe74ab65dbc119e75eac2c9e25812410e32c4cb0"
        }
      ],
      "message": "fix: script spend, not key spend\n\nFor the key spend the script tree depth is not revealed, it is only done for script spends. This sentence makes sense only for the script spend.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Max Hillebrand",
        "email": "30683012+MaxHillebrand@users.noreply.github.com",
        "date": "2019-11-06T04:58:11Z"
      },
      "sha": "3d97967b97831dc268b39bc8b667d6aace0dc56a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDc3NGU0ZDFlOGQ4NTY1NjdhZDJkZTlhMzliMmIzYTI5ZjM1NDIyYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4774e4d1e8d856567ad2de9a39b2b3a29f35422a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4774e4d1e8d856567ad2de9a39b2b3a29f35422a",
      "tree": {
        "sha": "a66eb147dbf8eb55467f2cb05227155aaa88605e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a66eb147dbf8eb55467f2cb05227155aaa88605e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d97967b97831dc268b39bc8b667d6aace0dc56a",
          "sha": "3d97967b97831dc268b39bc8b667d6aace0dc56a",
          "html_url": "https://github.com/bitcoin/bips/commit/3d97967b97831dc268b39bc8b667d6aace0dc56a"
        }
      ],
      "message": "Link design section of BIP Schnorr in Specification",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fabjahr@gmail.com",
        "date": "2019-11-05T13:53:16Z"
      },
      "sha": "4774e4d1e8d856567ad2de9a39b2b3a29f35422a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTllMjNlNDc0Zjc1OGU5ZTM4ZTMwYTcxNzczZTE1ZTZiZGQzZTc3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e9e23e474f758e9e38e30a71773e15e6bdd3e775",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e9e23e474f758e9e38e30a71773e15e6bdd3e775",
      "tree": {
        "sha": "65e77218e6f259a35d00e525414dff6ad20890e9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/65e77218e6f259a35d00e525414dff6ad20890e9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4774e4d1e8d856567ad2de9a39b2b3a29f35422a",
          "sha": "4774e4d1e8d856567ad2de9a39b2b3a29f35422a",
          "html_url": "https://github.com/bitcoin/bips/commit/4774e4d1e8d856567ad2de9a39b2b3a29f35422a"
        }
      ],
      "message": "Internal pubkey calculation fixed in taproot_tweak_pubkey()",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2019-11-06T18:18:29Z"
      },
      "sha": "e9e23e474f758e9e38e30a71773e15e6bdd3e775"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzJmMzY0Yzg1YzM0Nzc4M2Q0MzU4MTcxNDJhY2YzNWI0YWU3ZGI0NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/32f364c85c347783d435817142acf35b4ae7db44",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/32f364c85c347783d435817142acf35b4ae7db44",
      "tree": {
        "sha": "3f62ad00960a54a7a859c21e8ba7a62b754566b0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3f62ad00960a54a7a859c21e8ba7a62b754566b0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e9e23e474f758e9e38e30a71773e15e6bdd3e775",
          "sha": "e9e23e474f758e9e38e30a71773e15e6bdd3e775",
          "html_url": "https://github.com/bitcoin/bips/commit/e9e23e474f758e9e38e30a71773e15e6bdd3e775"
        }
      ],
      "message": "Fxied typo in taproot_sign_script()",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "LaurentMT",
        "email": "LaurentMT@users.noreply.github.com",
        "date": "2019-11-11T00:20:28Z"
      },
      "sha": "32f364c85c347783d435817142acf35b4ae7db44"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjVlYjUzNDUxZjNkZTZlNDcyY2JiY2I4NjIxNjk5Y2NjNzc3NWNiOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5eb53451f3de6e472cbbcb8621699ccc7775cb8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b5eb53451f3de6e472cbbcb8621699ccc7775cb8",
      "tree": {
        "sha": "bd7ac9c37612cd38283d76025b459d9e14532b35",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bd7ac9c37612cd38283d76025b459d9e14532b35"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/32f364c85c347783d435817142acf35b4ae7db44",
          "sha": "32f364c85c347783d435817142acf35b4ae7db44",
          "html_url": "https://github.com/bitcoin/bips/commit/32f364c85c347783d435817142acf35b4ae7db44"
        }
      ],
      "message": "Fix typo",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Agis Anastasopoulos",
        "email": "a@xz0.org",
        "date": "2019-11-11T10:39:53Z"
      },
      "sha": "b5eb53451f3de6e472cbbcb8621699ccc7775cb8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDNmYmIwMzIzNTJiMTgzNmVhMmQ1ZjExYTRkODIyMWRhMzVlMTAyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/43fbb032352b1836ea2d5f11a4d8221da35e1029",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/43fbb032352b1836ea2d5f11a4d8221da35e1029",
      "tree": {
        "sha": "93f39786d4cd4e98c1e07c508b1fb7832a87159b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/93f39786d4cd4e98c1e07c508b1fb7832a87159b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5eb53451f3de6e472cbbcb8621699ccc7775cb8",
          "sha": "b5eb53451f3de6e472cbbcb8621699ccc7775cb8",
          "html_url": "https://github.com/bitcoin/bips/commit/b5eb53451f3de6e472cbbcb8621699ccc7775cb8"
        }
      ],
      "message": "BIP16 has no relation to bip-taproot/tapscript\n\nPreviously did.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-11-11T20:32:57Z"
      },
      "sha": "43fbb032352b1836ea2d5f11a4d8221da35e1029"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NGU4OGQ0ZmFlN2M3OWFiYzJhY2QzNWYwMzZkYWNlYWNkODEyMmRhOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4e88d4fae7c79abc2acd35f036daceacd8122da8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4e88d4fae7c79abc2acd35f036daceacd8122da8",
      "tree": {
        "sha": "6a62da57d1c19bc9244dab2efc348b7651b830ad",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6a62da57d1c19bc9244dab2efc348b7651b830ad"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/43fbb032352b1836ea2d5f11a4d8221da35e1029",
          "sha": "43fbb032352b1836ea2d5f11a4d8221da35e1029",
          "html_url": "https://github.com/bitcoin/bips/commit/43fbb032352b1836ea2d5f11a4d8221da35e1029"
        }
      ],
      "message": "Replace R with P in taproot_tweak_seckey",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-13T14:00:03Z"
      },
      "sha": "4e88d4fae7c79abc2acd35f036daceacd8122da8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzU4YmUxNGEyYjFjNjFkNzA0MmQ3MDg1NjRiZWQ2OWViZmM2NmI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/758be14a2b1c61d7042d708564bed69ebfc66b62",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/758be14a2b1c61d7042d708564bed69ebfc66b62",
      "tree": {
        "sha": "4e2d7e07bbfe62df7ccb5e5c727e755e9192499b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4e2d7e07bbfe62df7ccb5e5c727e755e9192499b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4e88d4fae7c79abc2acd35f036daceacd8122da8",
          "sha": "4e88d4fae7c79abc2acd35f036daceacd8122da8",
          "html_url": "https://github.com/bitcoin/bips/commit/4e88d4fae7c79abc2acd35f036daceacd8122da8"
        }
      ],
      "message": "remind reader where [:] is defined\n\nin addition to `point`. This caused confusion for one reader who expected inclusive at end of range.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-11-15T18:46:35Z"
      },
      "sha": "758be14a2b1c61d7042d708564bed69ebfc66b62"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjgwZWJiZjI4NzZhNDBlMzk5OWI4ZDJjMDI3YmZmNDBkZGE3ODFmMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b80ebbf2876a40e3999b8d2c027bff40dda781f2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b80ebbf2876a40e3999b8d2c027bff40dda781f2",
      "tree": {
        "sha": "7fdede038978121b8cdf44e4fda60ea766eabfd4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7fdede038978121b8cdf44e4fda60ea766eabfd4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/758be14a2b1c61d7042d708564bed69ebfc66b62",
          "sha": "758be14a2b1c61d7042d708564bed69ebfc66b62",
          "html_url": "https://github.com/bitcoin/bips/commit/758be14a2b1c61d7042d708564bed69ebfc66b62"
        }
      ],
      "message": "clarify 211 hash bytes and non-reuse of keys",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Devrandom",
        "email": "miron@basezero.com",
        "date": "2019-11-13T17:46:05Z"
      },
      "sha": "b80ebbf2876a40e3999b8d2c027bff40dda781f2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YWMzMzY0MGJmNWY2OTRiODQ5Mzc1MWFhMzBmZDFmNWRkNTYzZmRjYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ac33640bf5f694b8493751aa30fd1f5dd563fdca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ac33640bf5f694b8493751aa30fd1f5dd563fdca",
      "tree": {
        "sha": "7be23e256a4e035caa57f249c6b69c327f1ac99e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7be23e256a4e035caa57f249c6b69c327f1ac99e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b80ebbf2876a40e3999b8d2c027bff40dda781f2",
          "sha": "b80ebbf2876a40e3999b8d2c027bff40dda781f2",
          "html_url": "https://github.com/bitcoin/bips/commit/b80ebbf2876a40e3999b8d2c027bff40dda781f2"
        }
      ],
      "message": "tweak 211 bytes text",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Dev Random",
        "email": "devrandom@users.noreply.github.com",
        "date": "2019-11-14T18:55:32Z"
      },
      "sha": "ac33640bf5f694b8493751aa30fd1f5dd563fdca"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NGJjNDJkMGYwMDlhNzg5ZTRmZjI0ZDIwZjRhYzU1NDE1ZDhmNjdkYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4bc42d0f009a789e4ff24d20f4ac55415d8f67db",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4bc42d0f009a789e4ff24d20f4ac55415d8f67db",
      "tree": {
        "sha": "9a2b14213f797535480312c29a22a372510669ac",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9a2b14213f797535480312c29a22a372510669ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ac33640bf5f694b8493751aa30fd1f5dd563fdca",
          "sha": "ac33640bf5f694b8493751aa30fd1f5dd563fdca",
          "html_url": "https://github.com/bitcoin/bips/commit/ac33640bf5f694b8493751aa30fd1f5dd563fdca"
        }
      ],
      "message": "ADD: Require Schnorr BIP for Taproot\n\nPer https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki:\r\n\r\n\"BIPs may have a Requires header, indicating the BIP numbers that this BIP depends on\"",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony",
        "email": "pyskell@users.noreply.github.com",
        "date": "2019-11-11T18:40:42Z"
      },
      "sha": "4bc42d0f009a789e4ff24d20f4ac55415d8f67db"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjYyMzYxY2M0NGE2MTdkYmQ1MTk5OTYzMzA0ZTk3NzljNjlhYjY3ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/662361cc44a617dbd5199963304e9779c69ab67d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/662361cc44a617dbd5199963304e9779c69ab67d",
      "tree": {
        "sha": "352c87a1fd2dc81f965d8e281d60db11c6c6546b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/352c87a1fd2dc81f965d8e281d60db11c6c6546b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4bc42d0f009a789e4ff24d20f4ac55415d8f67db",
          "sha": "4bc42d0f009a789e4ff24d20f4ac55415d8f67db",
          "html_url": "https://github.com/bitcoin/bips/commit/4bc42d0f009a789e4ff24d20f4ac55415d8f67db"
        }
      ],
      "message": "ADD: Require Schnorr and Taproot BIPs for Tapscript\n\nhttps://github.com/sipa/bips/pull/135#issuecomment-552754867",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony",
        "email": "pyskell@users.noreply.github.com",
        "date": "2019-11-12T19:08:09Z"
      },
      "sha": "662361cc44a617dbd5199963304e9779c69ab67d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjJhZWQzZTNmZThmMDZkM2NmZDhkZDY3NDdjZmVlMTI3YTRmOTcwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b2aed3e3fe8f06d3cfd8dd6747cfee127a4f9701",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b2aed3e3fe8f06d3cfd8dd6747cfee127a4f9701",
      "tree": {
        "sha": "5f18e89ee47f71df65c46b95acb5c1eb915a4b90",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5f18e89ee47f71df65c46b95acb5c1eb915a4b90"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/662361cc44a617dbd5199963304e9779c69ab67d",
          "sha": "662361cc44a617dbd5199963304e9779c69ab67d",
          "html_url": "https://github.com/bitcoin/bips/commit/662361cc44a617dbd5199963304e9779c69ab67d"
        }
      ],
      "message": "FIX: BIPs should be specified as lowercase to match filenames",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony",
        "email": "pyskell@users.noreply.github.com",
        "date": "2019-11-12T20:47:39Z"
      },
      "sha": "b2aed3e3fe8f06d3cfd8dd6747cfee127a4f9701"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YmE3ZGQ1NzY5NzU4YTk1Mzg1MzIwMDg5OTI4OTEyMWI1MmZmYjJhMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ba7dd5769758a953853200899289121b52ffb2a2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ba7dd5769758a953853200899289121b52ffb2a2",
      "tree": {
        "sha": "bd14225e601507a2efb173b6b2ffc49c143e56b9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bd14225e601507a2efb173b6b2ffc49c143e56b9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b2aed3e3fe8f06d3cfd8dd6747cfee127a4f9701",
          "sha": "b2aed3e3fe8f06d3cfd8dd6747cfee127a4f9701",
          "html_url": "https://github.com/bitcoin/bips/commit/b2aed3e3fe8f06d3cfd8dd6747cfee127a4f9701"
        }
      ],
      "message": "G refers to secp256k1 base point rather generator",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-11T18:09:55Z"
      },
      "sha": "ba7dd5769758a953853200899289121b52ffb2a2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NGY2N2VkMjVjNzcwNGQzOGMxNmM3ZDgxYTY1ZGEyZGM2NjNiNzcyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4f67ed25c7704d38c16c7d81a65da2dc663b7729",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4f67ed25c7704d38c16c7d81a65da2dc663b7729",
      "tree": {
        "sha": "c8edf2c81ed4ebdfde72c3194985b71893f89eaf",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c8edf2c81ed4ebdfde72c3194985b71893f89eaf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ba7dd5769758a953853200899289121b52ffb2a2",
          "sha": "ba7dd5769758a953853200899289121b52ffb2a2",
          "html_url": "https://github.com/bitcoin/bips/commit/ba7dd5769758a953853200899289121b52ffb2a2"
        }
      ],
      "message": "Add clarification of semantics of 0x00 hash type",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Adam Gibson",
        "email": "ekaggata@gmail.com",
        "date": "2019-11-12T11:41:27Z"
      },
      "sha": "4f67ed25c7704d38c16c7d81a65da2dc663b7729"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZGFmZjQ2MmY5ZDIzZDdiN2RiOTYxMzdmYmRmZjkxYmE5YThmNTk0ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/daff462f9d23d7b7db96137fbdff91ba9a8f594e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/daff462f9d23d7b7db96137fbdff91ba9a8f594e",
      "tree": {
        "sha": "0cff45f4ebd2bd1d4792c11f51dc214c8ee6301a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0cff45f4ebd2bd1d4792c11f51dc214c8ee6301a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4f67ed25c7704d38c16c7d81a65da2dc663b7729",
          "sha": "4f67ed25c7704d38c16c7d81a65da2dc663b7729",
          "html_url": "https://github.com/bitcoin/bips/commit/4f67ed25c7704d38c16c7d81a65da2dc663b7729"
        }
      ],
      "message": "Add links to unlinked BIPs\n\nOnly first mention of each BIP is made into a link",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-13T17:20:09Z"
      },
      "sha": "daff462f9d23d7b7db96137fbdff91ba9a8f594e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjhmNjc3NjRlYzNkNTI4NmU3MjNmMjVkZGFhYTIxN2Y0MzE1N2I2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/28f67764ec3d5286e723f25ddaaa217f43157b69",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/28f67764ec3d5286e723f25ddaaa217f43157b69",
      "tree": {
        "sha": "a46bec77ef410e49a94e1d7287dcaccd958e9222",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a46bec77ef410e49a94e1d7287dcaccd958e9222"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/daff462f9d23d7b7db96137fbdff91ba9a8f594e",
          "sha": "daff462f9d23d7b7db96137fbdff91ba9a8f594e",
          "html_url": "https://github.com/bitcoin/bips/commit/daff462f9d23d7b7db96137fbdff91ba9a8f594e"
        }
      ],
      "message": " bip-taproot: clarify bip-schnorr reference code\n\n- update the paragraph in question to more clearly convey that the helper\n  functions, and not the Python3 example code, are from the bip-schnorr\n  reference code\n\n- add a link to the reference code in\n  https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr/reference.py",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-12T21:37:47Z"
      },
      "sha": "28f67764ec3d5286e723f25ddaaa217f43157b69"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzY5YTE3YjNiOTM3NzlhYWJiN2NjNTFkMDA5MGI4MTAxZGIzZWYwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/769a17b3b93779aabb7cc51d0090b8101db3ef05",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/769a17b3b93779aabb7cc51d0090b8101db3ef05",
      "tree": {
        "sha": "0a8e4ec55d663579604a3857b5fc1111f0c8f621",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0a8e4ec55d663579604a3857b5fc1111f0c8f621"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/28f67764ec3d5286e723f25ddaaa217f43157b69",
          "sha": "28f67764ec3d5286e723f25ddaaa217f43157b69",
          "html_url": "https://github.com/bitcoin/bips/commit/28f67764ec3d5286e723f25ddaaa217f43157b69"
        }
      ],
      "message": "tapscript: fix minor typo",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Thomas Kerin",
        "email": "me@thomaskerin.io",
        "date": "2019-11-11T02:41:15Z"
      },
      "sha": "769a17b3b93779aabb7cc51d0090b8101db3ef05"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NTQzODRhNTcxMGI0YmYxNjdkZmU2YWM1YzljY2ExMzFmNGM5NTRmNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/54384a5710b4bf167dfe6ac5c9cca131f4c954f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/54384a5710b4bf167dfe6ac5c9cca131f4c954f7",
      "tree": {
        "sha": "59a131a21291e050c0cbb20cf93c40b3b42fa649",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/59a131a21291e050c0cbb20cf93c40b3b42fa649"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/769a17b3b93779aabb7cc51d0090b8101db3ef05",
          "sha": "769a17b3b93779aabb7cc51d0090b8101db3ef05",
          "html_url": "https://github.com/bitcoin/bips/commit/769a17b3b93779aabb7cc51d0090b8101db3ef05"
        }
      ],
      "message": "make clear it's script branch\n\nIn this context we are talking about the script branch, not the Merkle tree branch, right? If so, then this should clear things up a little.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Max Hillebrand",
        "email": "30683012+MaxHillebrand@users.noreply.github.com",
        "date": "2019-11-18T06:56:29Z"
      },
      "sha": "54384a5710b4bf167dfe6ac5c9cca131f4c954f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTcyZmZmYTAyODM0YzQ2ZmE5OTM2MmRhYmM3YzUzODA0OTU1ZDU1ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e72fffa02834c46fa99362dabc7c53804955d55d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e72fffa02834c46fa99362dabc7c53804955d55d",
      "tree": {
        "sha": "9c91570a139a849121b03cb5c06f9e9642120d07",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9c91570a139a849121b03cb5c06f9e9642120d07"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/54384a5710b4bf167dfe6ac5c9cca131f4c954f7",
          "sha": "54384a5710b4bf167dfe6ac5c9cca131f4c954f7",
          "html_url": "https://github.com/bitcoin/bips/commit/54384a5710b4bf167dfe6ac5c9cca131f4c954f7"
        }
      ],
      "message": "Fix typo in schnorr, footnote 2",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-18T14:42:56Z"
      },
      "sha": "e72fffa02834c46fa99362dabc7c53804955d55d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MTY2MWVmYzk5OTMwYzU2Y2NhYTI0Yzk1OWY0ZmU3OTlmY2FmZGFhYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1661efc99930c56ccaa24c959f4fe799fcafdaab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1661efc99930c56ccaa24c959f4fe799fcafdaab",
      "tree": {
        "sha": "090b8ea86c3a9349bd0e710e041a544f8432bdfa",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/090b8ea86c3a9349bd0e710e041a544f8432bdfa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e72fffa02834c46fa99362dabc7c53804955d55d",
          "sha": "e72fffa02834c46fa99362dabc7c53804955d55d",
          "html_url": "https://github.com/bitcoin/bips/commit/e72fffa02834c46fa99362dabc7c53804955d55d"
        }
      ],
      "message": "Add missing quote",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-18T17:00:39Z"
      },
      "sha": "1661efc99930c56ccaa24c959f4fe799fcafdaab"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6N2E0MzRkNGQ3NjlhNGUwYzJmZDk2ODRiZjQ3NGYxOTIyNjRmMTgyZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7a434d4d769a4e0c2fd9684bf474f192264f182f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7a434d4d769a4e0c2fd9684bf474f192264f182f",
      "tree": {
        "sha": "a22978a48439aba42d721c5104b7e35282f1d512",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a22978a48439aba42d721c5104b7e35282f1d512"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1661efc99930c56ccaa24c959f4fe799fcafdaab",
          "sha": "1661efc99930c56ccaa24c959f4fe799fcafdaab",
          "html_url": "https://github.com/bitcoin/bips/commit/1661efc99930c56ccaa24c959f4fe799fcafdaab"
        }
      ],
      "message": "Add missing dots that denote multiplication\n\nThroughout the document, elliptic curve multiplication is denoted with dots,\nas in `d'⋅G` as opposed to `d'G`.\nThis is not the case in one place in the 'Default Signing' section,\nand one place in 'Adaptor Signatures' section\n\nMissing dots are added for consistency.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2019-11-21T09:25:53Z"
      },
      "sha": "7a434d4d769a4e0c2fd9684bf474f192264f182f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2U1YTc5YWY4ODgxNmQxZTIyNGMwOGQ4MjY1NmYyNGI4YTdiZTVjNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3e5a79af88816d1e224c08d82656f24b8a7be5c7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3e5a79af88816d1e224c08d82656f24b8a7be5c7",
      "tree": {
        "sha": "df010dc7f0d912163fd76be6e415549c7f0eff51",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/df010dc7f0d912163fd76be6e415549c7f0eff51"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7a434d4d769a4e0c2fd9684bf474f192264f182f",
          "sha": "7a434d4d769a4e0c2fd9684bf474f192264f182f",
          "html_url": "https://github.com/bitcoin/bips/commit/7a434d4d769a4e0c2fd9684bf474f192264f182f"
        }
      ],
      "message": "Rename is_y_square to is_negated in taproot signing",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-22T20:35:54Z"
      },
      "sha": "3e5a79af88816d1e224c08d82656f24b8a7be5c7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzljNTE1ZWI5ZThiMmE5MjRjN2E3ZjQwYmUzYzQyNTdmYTUyZGFmZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/79c515eb9e8b2a924c7a7f40be3c4257fa52daff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/79c515eb9e8b2a924c7a7f40be3c4257fa52daff",
      "tree": {
        "sha": "5a8958090e36711ced839644e9e9b3dee84e8666",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5a8958090e36711ced839644e9e9b3dee84e8666"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3e5a79af88816d1e224c08d82656f24b8a7be5c7",
          "sha": "3e5a79af88816d1e224c08d82656f24b8a7be5c7",
          "html_url": "https://github.com/bitcoin/bips/commit/3e5a79af88816d1e224c08d82656f24b8a7be5c7"
        }
      ],
      "message": "grammar typo fix: inserted \"be\"",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "stefanwouldgo",
        "email": "stefan@sblbs.de",
        "date": "2019-11-19T09:10:34Z"
      },
      "sha": "79c515eb9e8b2a924c7a7f40be3c4257fa52daff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NTVhMzE1MThiOTc4NjA2NmQ2NzRjOTg1ZWYwZTZkN2ZjZGRhNzkwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/55a31518b9786066d674c985ef0e6d7fcdda7908",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/55a31518b9786066d674c985ef0e6d7fcdda7908",
      "tree": {
        "sha": "81f5a4a8a23a8fccf3dc07bcf0746ab9fc7362f5",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/81f5a4a8a23a8fccf3dc07bcf0746ab9fc7362f5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/79c515eb9e8b2a924c7a7f40be3c4257fa52daff",
          "sha": "79c515eb9e8b2a924c7a7f40be3c4257fa52daff",
          "html_url": "https://github.com/bitcoin/bips/commit/79c515eb9e8b2a924c7a7f40be3c4257fa52daff"
        }
      ],
      "message": "Rephrase \"previous design choice\" to \"list above\"",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-25T12:25:19Z"
      },
      "sha": "55a31518b9786066d674c985ef0e6d7fcdda7908"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmUwMzg4MmE3MmI3MDY0MGRmOTllNzMyZDE0MzcxZDg5YzEwMWZkNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fe03882a72b70640df99e732d14371d89c101fd4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fe03882a72b70640df99e732d14371d89c101fd4",
      "tree": {
        "sha": "9e49aca884b48e32ed5ff5e57f9fb0e47e8af358",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9e49aca884b48e32ed5ff5e57f9fb0e47e8af358"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/55a31518b9786066d674c985ef0e6d7fcdda7908",
          "sha": "55a31518b9786066d674c985ef0e6d7fcdda7908",
          "html_url": "https://github.com/bitcoin/bips/commit/55a31518b9786066d674c985ef0e6d7fcdda7908"
        }
      ],
      "message": "Fix paragraph naming and typo",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-23T19:27:44Z"
      },
      "sha": "fe03882a72b70640df99e732d14371d89c101fd4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NTIzNTc4MWVhNTZiMDU1NGM2NjdiNTdkYWE1MzM4ZWVlOGNjN2UzYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5235781ea56b0554c667b57daa5338eee8cc7e3c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5235781ea56b0554c667b57daa5338eee8cc7e3c",
      "tree": {
        "sha": "8e33d590d64cafa7b937b9c46009cb895b1628ef",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8e33d590d64cafa7b937b9c46009cb895b1628ef"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fe03882a72b70640df99e732d14371d89c101fd4",
          "sha": "fe03882a72b70640df99e732d14371d89c101fd4",
          "html_url": "https://github.com/bitcoin/bips/commit/fe03882a72b70640df99e732d14371d89c101fd4"
        }
      ],
      "message": "Add missing closing parenthesis and comma",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "andrewtoth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-11-29T03:57:00Z"
      },
      "sha": "5235781ea56b0554c667b57daa5338eee8cc7e3c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzcxNzVlODAwNWEwZWIxMDIyZTY4ZjVkOTYxMDVmMGNkY2NjNmRlZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c7175e8005a0eb1022e68f5d96105f0cdccc6def",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c7175e8005a0eb1022e68f5d96105f0cdccc6def",
      "tree": {
        "sha": "fe9f964cfa929a612a64a4447a32f21279929694",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fe9f964cfa929a612a64a4447a32f21279929694"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5235781ea56b0554c667b57daa5338eee8cc7e3c",
          "sha": "5235781ea56b0554c667b57daa5338eee8cc7e3c",
          "html_url": "https://github.com/bitcoin/bips/commit/5235781ea56b0554c667b57daa5338eee8cc7e3c"
        }
      ],
      "message": "Update bip-tapscript.mediawiki",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "andrewtoth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-11-29T04:01:53Z"
      },
      "sha": "c7175e8005a0eb1022e68f5d96105f0cdccc6def"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MmFhODY1YzMzZWVhZTA4NTkxMzJjMGU4NmI5MTk0Y2E0NzFmYTRhYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2aa865c33eeae0859132c0e86b9194ca471fa4aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2aa865c33eeae0859132c0e86b9194ca471fa4aa",
      "tree": {
        "sha": "359cf7645471ab19080963042a269447eca4447a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/359cf7645471ab19080963042a269447eca4447a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c7175e8005a0eb1022e68f5d96105f0cdccc6def",
          "sha": "c7175e8005a0eb1022e68f5d96105f0cdccc6def",
          "html_url": "https://github.com/bitcoin/bips/commit/c7175e8005a0eb1022e68f5d96105f0cdccc6def"
        }
      ],
      "message": "Replace \"both are not\" with \"neither is\"",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-26T12:39:34Z"
      },
      "sha": "2aa865c33eeae0859132c0e86b9194ca471fa4aa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MThkMTc3NGQ4MTI1MzQ1M2QxMDFjOWE3ZTc5ZTIxYWI0Yzk2ZTMzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/18d1774d81253453d101c9a7e79e21ab4c96e331",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/18d1774d81253453d101c9a7e79e21ab4c96e331",
      "tree": {
        "sha": "306dfb5b68b0a6332eff3368e0e1322160dcae5f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/306dfb5b68b0a6332eff3368e0e1322160dcae5f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2aa865c33eeae0859132c0e86b9194ca471fa4aa",
          "sha": "2aa865c33eeae0859132c0e86b9194ca471fa4aa",
          "html_url": "https://github.com/bitcoin/bips/commit/2aa865c33eeae0859132c0e86b9194ca471fa4aa"
        }
      ],
      "message": "Nits",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Kalle Rosenbaum",
        "email": "kalle@rosenbaum.se",
        "date": "2019-12-09T20:20:40Z"
      },
      "sha": "18d1774d81253453d101c9a7e79e21ab4c96e331"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTg5ODNlMTc3ZjIwYTFjMzcyNWVlZjQzZjZlMjFlMDBmOTVhYzQyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/98983e177f20a1c3725eef43f6e21e00f95ac423",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/98983e177f20a1c3725eef43f6e21e00f95ac423",
      "tree": {
        "sha": "b4a9ed07bbce391f0b397c41c41c052f0c788e16",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b4a9ed07bbce391f0b397c41c41c052f0c788e16"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/18d1774d81253453d101c9a7e79e21ab4c96e331",
          "sha": "18d1774d81253453d101c9a7e79e21ab4c96e331",
          "html_url": "https://github.com/bitcoin/bips/commit/18d1774d81253453d101c9a7e79e21ab4c96e331"
        }
      ],
      "message": "Fix @jonasnick's comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Kalle Rosenbaum",
        "email": "kalle@rosenbaum.se",
        "date": "2019-12-10T21:01:43Z"
      },
      "sha": "98983e177f20a1c3725eef43f6e21e00f95ac423"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NWEyNWFkYzQ5MDhkMTg0OTQ0NDgyMWI3OTVhMjVlYjY5ZmRkNGY5Yw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5a25adc4908d1849444821b795a25eb69fdd4f9c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5a25adc4908d1849444821b795a25eb69fdd4f9c",
      "tree": {
        "sha": "3cde66cce486850e495c0c7d6420658a55e67126",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3cde66cce486850e495c0c7d6420658a55e67126"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/98983e177f20a1c3725eef43f6e21e00f95ac423",
          "sha": "98983e177f20a1c3725eef43f6e21e00f95ac423",
          "html_url": "https://github.com/bitcoin/bips/commit/98983e177f20a1c3725eef43f6e21e00f95ac423"
        }
      ],
      "message": "Fix bip-schnorr footnote 7 by specifying that we're referring to P's y coordinate and not some undefined 'x'",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-29T15:42:46Z"
      },
      "sha": "5a25adc4908d1849444821b795a25eb69fdd4f9c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzA4YWVhZGY4NWU5ODNjODVkYWM5NWVjNGUwOTMyY2FjYWM4YTc5ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/708aeadf85e983c85dac95ec4e0932cacac8a79d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/708aeadf85e983c85dac95ec4e0932cacac8a79d",
      "tree": {
        "sha": "1c8ebf63b786f24c37ef7576ae6505810d0cc368",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1c8ebf63b786f24c37ef7576ae6505810d0cc368"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5a25adc4908d1849444821b795a25eb69fdd4f9c",
          "sha": "5a25adc4908d1849444821b795a25eb69fdd4f9c",
          "html_url": "https://github.com/bitcoin/bips/commit/5a25adc4908d1849444821b795a25eb69fdd4f9c"
        }
      ],
      "message": "Replace references to Euler's criterion with Legendre symbol in bip-schnorr",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-29T15:47:33Z"
      },
      "sha": "708aeadf85e983c85dac95ec4e0932cacac8a79d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MWY1YmRiMzA0ZTFmYjc2NjE4OTI2ZDNhZTg0OTcwYzc1NTVkMGQxNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1f5bdb304e1fb76618926d3ae84970c7555d0d14",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1f5bdb304e1fb76618926d3ae84970c7555d0d14",
      "tree": {
        "sha": "5c9918d018aebe56e1b813aa0b0327ff4531fcda",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5c9918d018aebe56e1b813aa0b0327ff4531fcda"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/708aeadf85e983c85dac95ec4e0932cacac8a79d",
          "sha": "708aeadf85e983c85dac95ec4e0932cacac8a79d",
          "html_url": "https://github.com/bitcoin/bips/commit/708aeadf85e983c85dac95ec4e0932cacac8a79d"
        }
      ],
      "message": "Improve clarity of footnotes for lift_x",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-12-04T19:26:06Z"
      },
      "sha": "1f5bdb304e1fb76618926d3ae84970c7555d0d14"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjZlMjkzMWRlMmY1Nzc5ODQ3Y2M0N2NmOWY0MzA5MDg0NzRjZjRlNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/66e2931de2f5779847cc47cf9f430908474cf4e6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/66e2931de2f5779847cc47cf9f430908474cf4e6",
      "tree": {
        "sha": "da23c8ffb39112a980e9e821c64c71f86aa63ec3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/da23c8ffb39112a980e9e821c64c71f86aa63ec3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1f5bdb304e1fb76618926d3ae84970c7555d0d14",
          "sha": "1f5bdb304e1fb76618926d3ae84970c7555d0d14",
          "html_url": "https://github.com/bitcoin/bips/commit/1f5bdb304e1fb76618926d3ae84970c7555d0d14"
        }
      ],
      "message": "Clarify bip-taproot digest difference to bip143 regarding sub-hashes",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-11-29T16:32:44Z"
      },
      "sha": "66e2931de2f5779847cc47cf9f430908474cf4e6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NTkxOGI0NjY2YzRjNGZiZjU0YTJlZjg1NTA4NzdmMDIzMjhhMmFmYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5918b4666c4c4fbf54a2ef8550877f02328a2afc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5918b4666c4c4fbf54a2ef8550877f02328a2afc",
      "tree": {
        "sha": "819e112569dcfc76d8b5eb9c7074363ebe620a48",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/819e112569dcfc76d8b5eb9c7074363ebe620a48"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/66e2931de2f5779847cc47cf9f430908474cf4e6",
          "sha": "66e2931de2f5779847cc47cf9f430908474cf4e6",
          "html_url": "https://github.com/bitcoin/bips/commit/66e2931de2f5779847cc47cf9f430908474cf4e6"
        }
      ],
      "message": "Mention hash_type malleability would change wtxid",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-26T12:43:34Z"
      },
      "sha": "5918b4666c4c4fbf54a2ef8550877f02328a2afc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Y2E0NzJlZDY2M2QzMjAzOTQ0ODU2MGIzNmVjZjFlNjQ2N2JhNDM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ca472ed663d32039448560b36ecf1e6467ba4347",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ca472ed663d32039448560b36ecf1e6467ba4347",
      "tree": {
        "sha": "277d586c7056fdf75beebad16ba8e6c99658ea0b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/277d586c7056fdf75beebad16ba8e6c99658ea0b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5918b4666c4c4fbf54a2ef8550877f02328a2afc",
          "sha": "5918b4666c4c4fbf54a2ef8550877f02328a2afc",
          "html_url": "https://github.com/bitcoin/bips/commit/5918b4666c4c4fbf54a2ef8550877f02328a2afc"
        }
      ],
      "message": "Mention that miners could malleate signatures",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-26T15:30:12Z"
      },
      "sha": "ca472ed663d32039448560b36ecf1e6467ba4347"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Nzk3MzhmMjQxMGM4ZjI2MzI2NWQ5ZGM0ZDc2MDJkYzhkZWE4NDcxMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/79738f2410c8f263265d9dc4d7602dc8dea84713",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/79738f2410c8f263265d9dc4d7602dc8dea84713",
      "tree": {
        "sha": "cf784b989d6116e1e126cc7dec94d3a6771b810c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/cf784b989d6116e1e126cc7dec94d3a6771b810c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ca472ed663d32039448560b36ecf1e6467ba4347",
          "sha": "ca472ed663d32039448560b36ecf1e6467ba4347",
          "html_url": "https://github.com/bitcoin/bips/commit/ca472ed663d32039448560b36ecf1e6467ba4347"
        }
      ],
      "message": "Link to proof sketch of security of implicit Y\n\nThanks to @ajtowns for providing the link",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-18T16:46:10Z"
      },
      "sha": "79738f2410c8f263265d9dc4d7602dc8dea84713"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTY1MTAxZmY2ZDgwM2ZlYjU4MmM4ZjIxNzg4ZmU1MzQxY2JmZjA3ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a65101ff6d803feb582c8f21788fe5341cbff07d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a65101ff6d803feb582c8f21788fe5341cbff07d",
      "tree": {
        "sha": "81a2c3dfc9cc1ec66337286dc6f57292ef396d21",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/81a2c3dfc9cc1ec66337286dc6f57292ef396d21"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/79738f2410c8f263265d9dc4d7602dc8dea84713",
          "sha": "79738f2410c8f263265d9dc4d7602dc8dea84713",
          "html_url": "https://github.com/bitcoin/bips/commit/79738f2410c8f263265d9dc4d7602dc8dea84713"
        }
      ],
      "message": "Replace signing with signature before validation",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-25T16:43:05Z"
      },
      "sha": "a65101ff6d803feb582c8f21788fe5341cbff07d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OGJhZjZmNTk1MmQ0YTFmZTEwMjBkZTA3NWFiOTMxNzllNjIzNmE1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8baf6f5952d4a1fe1020de075ab93179e6236a55",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8baf6f5952d4a1fe1020de075ab93179e6236a55",
      "tree": {
        "sha": "352c1b597401c18ab6aedfc9637a2a2a47fe7e24",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/352c1b597401c18ab6aedfc9637a2a2a47fe7e24"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a65101ff6d803feb582c8f21788fe5341cbff07d",
          "sha": "a65101ff6d803feb582c8f21788fe5341cbff07d",
          "html_url": "https://github.com/bitcoin/bips/commit/a65101ff6d803feb582c8f21788fe5341cbff07d"
        }
      ],
      "message": "fix singular/plural ambiguity",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "stefanwouldgo",
        "email": "stefan@sblbs.de",
        "date": "2019-11-28T12:41:28Z"
      },
      "sha": "8baf6f5952d4a1fe1020de075ab93179e6236a55"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzdiZjIyNWVhNDU4Y2RmYjI4OTMxNTk1OGExYjNkMjI1YmRhYjZiMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/37bf225ea458cdfb289315958a1b3d225bdab6b3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/37bf225ea458cdfb289315958a1b3d225bdab6b3",
      "tree": {
        "sha": "a95259df24611dc11bf7ee28081039966d492b21",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a95259df24611dc11bf7ee28081039966d492b21"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8baf6f5952d4a1fe1020de075ab93179e6236a55",
          "sha": "8baf6f5952d4a1fe1020de075ab93179e6236a55",
          "html_url": "https://github.com/bitcoin/bips/commit/8baf6f5952d4a1fe1020de075ab93179e6236a55"
        }
      ],
      "message": "Replace BIP66 link with BIP146\n\nBIP66 does not mention the inherent ECDSA malleability, but BIP146 does",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-22T11:41:36Z"
      },
      "sha": "37bf225ea458cdfb289315958a1b3d225bdab6b3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZGEzODM3NjM5ZmQ5ODdlNWQyNWEwYWJiMjA5NzAwYzNkN2ZmNTVlZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/da3837639fd987e5d25a0abb209700c3d7ff55ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/da3837639fd987e5d25a0abb209700c3d7ff55ed",
      "tree": {
        "sha": "7a76f73e3c4da68022c4150abb09a58b3c12de40",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7a76f73e3c4da68022c4150abb09a58b3c12de40"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/37bf225ea458cdfb289315958a1b3d225bdab6b3",
          "sha": "37bf225ea458cdfb289315958a1b3d225bdab6b3",
          "html_url": "https://github.com/bitcoin/bips/commit/37bf225ea458cdfb289315958a1b3d225bdab6b3"
        }
      ],
      "message": "Typo: max bytes hashed for sig is 210",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-25T16:25:24Z"
      },
      "sha": "da3837639fd987e5d25a0abb209700c3d7ff55ed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzczMTMzZmI0YTA4NmM0MTI1NmQ1MDVkNzQ0ZDI3NjQ1OTdiZDIyMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/773133fb4a086c41256d505d744d2764597bd222",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/773133fb4a086c41256d505d744d2764597bd222",
      "tree": {
        "sha": "a96bf09ae8bbb0efa1ce5effbe593036becf945f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a96bf09ae8bbb0efa1ce5effbe593036becf945f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/da3837639fd987e5d25a0abb209700c3d7ff55ed",
          "sha": "da3837639fd987e5d25a0abb209700c3d7ff55ed",
          "html_url": "https://github.com/bitcoin/bips/commit/da3837639fd987e5d25a0abb209700c3d7ff55ed"
        }
      ],
      "message": "Typo: script signature max bytes unhashed are 247",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Orfeas Stefanos Thyfronitis Litos",
        "email": "o.thyfronitis@ed.ac.uk",
        "date": "2019-11-25T16:50:11Z"
      },
      "sha": "773133fb4a086c41256d505d744d2764597bd222"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTY2ZWFkY2EzYThmNWVhMTE4Y2E5OGU0NWNmMzdmMTY1YjM5OWYwYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/966eadca3a8f5ea118ca98e45cf37f165b399f0a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/966eadca3a8f5ea118ca98e45cf37f165b399f0a",
      "tree": {
        "sha": "8aa89e717389d66741731c3984beb33a5959c299",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8aa89e717389d66741731c3984beb33a5959c299"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/773133fb4a086c41256d505d744d2764597bd222",
          "sha": "773133fb4a086c41256d505d744d2764597bd222",
          "html_url": "https://github.com/bitcoin/bips/commit/773133fb4a086c41256d505d744d2764597bd222"
        }
      ],
      "message": "Fix reference formatting",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-12-11T13:33:39Z"
      },
      "sha": "966eadca3a8f5ea118ca98e45cf37f165b399f0a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YWQ2YmI2YzFmZjVhODhiMGY5MWY5MzYzOTY0Y2YzOTU4MWQ2NTBhZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ad6bb6c1ff5a88b0f91f9363964cf39581d650ad",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ad6bb6c1ff5a88b0f91f9363964cf39581d650ad",
      "tree": {
        "sha": "536277c76450fef1b6df8690f65f2a1768e30382",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/536277c76450fef1b6df8690f65f2a1768e30382"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/966eadca3a8f5ea118ca98e45cf37f165b399f0a",
          "sha": "966eadca3a8f5ea118ca98e45cf37f165b399f0a",
          "html_url": "https://github.com/bitcoin/bips/commit/966eadca3a8f5ea118ca98e45cf37f165b399f0a"
        }
      ],
      "message": "Clarify why we don't want short hashes\n\nThis is supposed to supersede https://github.com/sipa/bips/pull/158.\r\nI tried to say this carefully. I don't think that multiparty signing is in general broken with short hashes. For example the attack in #158 could be avoided by letting everybody not only commit to the nonce but also to the message. It's just that using a collision-resistant hash just eliminates the problem entirely...",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-12-12T21:49:21Z"
      },
      "sha": "ad6bb6c1ff5a88b0f91f9363964cf39581d650ad"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDE5OWI2ZGZmNjU4YWRiMjY2NjI4MTNlMjY3MmE5MWM0NDgwNzY3YQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d199b6dff658adb26662813e2672a91c4480767a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d199b6dff658adb26662813e2672a91c4480767a",
      "tree": {
        "sha": "4fdfa2be0c99d912765589b3235f2dce7f028d8b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4fdfa2be0c99d912765589b3235f2dce7f028d8b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ad6bb6c1ff5a88b0f91f9363964cf39581d650ad",
          "sha": "ad6bb6c1ff5a88b0f91f9363964cf39581d650ad",
          "html_url": "https://github.com/bitcoin/bips/commit/ad6bb6c1ff5a88b0f91f9363964cf39581d650ad"
        }
      ],
      "message": "Replace private key with secret key",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2019-12-13T13:25:16Z"
      },
      "sha": "d199b6dff658adb26662813e2672a91c4480767a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Njg3ZWM0YmE4ZTM3OGU0ZDVhMDQ5Y2IzODQ2ZTU1YjI0YmNhMDcxZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/687ec4ba8e378e4d5a049cb3846e55b24bca071d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/687ec4ba8e378e4d5a049cb3846e55b24bca071d",
      "tree": {
        "sha": "9c8ec9722dfdd7ca3e57d85e0bc2ea22efdbe412",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9c8ec9722dfdd7ca3e57d85e0bc2ea22efdbe412"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d199b6dff658adb26662813e2672a91c4480767a",
          "sha": "d199b6dff658adb26662813e2672a91c4480767a",
          "html_url": "https://github.com/bitcoin/bips/commit/d199b6dff658adb26662813e2672a91c4480767a"
        }
      ],
      "message": "Low-S ECDSA is non-malleable under nonstandard assumptions",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-13T00:23:20Z"
      },
      "sha": "687ec4ba8e378e4d5a049cb3846e55b24bca071d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2MxZjQ2NjM3MjUzZTIwYjJmMTJkY2FlY2ZiODg4ODFmNzkyYTRjZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3c1f46637253e20b2f12dcaecfb88881f792a4cf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3c1f46637253e20b2f12dcaecfb88881f792a4cf",
      "tree": {
        "sha": "0f448632c25f43ef3a650091ee6878413e05df8f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0f448632c25f43ef3a650091ee6878413e05df8f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/687ec4ba8e378e4d5a049cb3846e55b24bca071d",
          "sha": "687ec4ba8e378e4d5a049cb3846e55b24bca071d",
          "html_url": "https://github.com/bitcoin/bips/commit/687ec4ba8e378e4d5a049cb3846e55b24bca071d"
        }
      ],
      "message": "Completely specified",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-13T03:53:08Z"
      },
      "sha": "3c1f46637253e20b2f12dcaecfb88881f792a4cf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2NjMmQ4ZWQ2ZGYyMzM0NTk0YzI4Yzk0ODQ1NTUwNTQ1OGIxMGZlNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3cc2d8ed6df2334594c28c948455505458b10fe4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3cc2d8ed6df2334594c28c948455505458b10fe4",
      "tree": {
        "sha": "dbf9341cc5fc609eaed05580e0b60f4d81867a87",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dbf9341cc5fc609eaed05580e0b60f4d81867a87"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3c1f46637253e20b2f12dcaecfb88881f792a4cf",
          "sha": "3c1f46637253e20b2f12dcaecfb88881f792a4cf",
          "html_url": "https://github.com/bitcoin/bips/commit/3c1f46637253e20b2f12dcaecfb88881f792a4cf"
        }
      ],
      "message": "Mention that we don't change the hash function",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-12-13T11:11:50Z"
      },
      "sha": "3cc2d8ed6df2334594c28c948455505458b10fe4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MGRkNzQ4OWRmZDQ2NTJjYTQ2YzVhMDBkNzgzY2FkYjMyYjg1YWM4ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0dd7489dfd4652ca46c5a00d783cadb32b85ac8d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0dd7489dfd4652ca46c5a00d783cadb32b85ac8d",
      "tree": {
        "sha": "a8f58e0eb35004022fbb39cd1e0f2e10d5fc9f91",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a8f58e0eb35004022fbb39cd1e0f2e10d5fc9f91"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3cc2d8ed6df2334594c28c948455505458b10fe4",
          "sha": "3cc2d8ed6df2334594c28c948455505458b10fe4",
          "html_url": "https://github.com/bitcoin/bips/commit/3cc2d8ed6df2334594c28c948455505458b10fe4"
        }
      ],
      "message": "Update bip-schnorr.mediawiki",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-12-13T14:28:15Z"
      },
      "sha": "0dd7489dfd4652ca46c5a00d783cadb32b85ac8d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OWM3NmJiNDU3ZjkwYTQ5OWFhODk0YWU2ZDRjMDBmMDVlNTMyOWQ1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9c76bb457f90a499aa894ae6d4c00f05e5329d55",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9c76bb457f90a499aa894ae6d4c00f05e5329d55",
      "tree": {
        "sha": "2ff483f0d56809715baf0939ace1551d623a4fbf",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2ff483f0d56809715baf0939ace1551d623a4fbf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0dd7489dfd4652ca46c5a00d783cadb32b85ac8d",
          "sha": "0dd7489dfd4652ca46c5a00d783cadb32b85ac8d",
          "html_url": "https://github.com/bitcoin/bips/commit/0dd7489dfd4652ca46c5a00d783cadb32b85ac8d"
        }
      ],
      "message": "Linearity makes sign-for-sum-of-keys easier, not possible entirely.\n\nI'm sure it's possible to construct a complex MPC that can sign for the\nsum of keys under ECDSA as well.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-12T03:00:29Z"
      },
      "sha": "9c76bb457f90a499aa894ae6d4c00f05e5329d55"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MmM4ZmViMWNiYjJlNWQ1ZmI5MDkwNzQzYWZlMzJlN2I0MmMwNDZmYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2c8feb1cbb2e5d5fb9090743afe32e7b42c046fa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2c8feb1cbb2e5d5fb9090743afe32e7b42c046fa",
      "tree": {
        "sha": "a8f7c3fdc649fbde13a0e5789d5673983b2cf588",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a8f7c3fdc649fbde13a0e5789d5673983b2cf588"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9c76bb457f90a499aa894ae6d4c00f05e5329d55",
          "sha": "9c76bb457f90a499aa894ae6d4c00f05e5329d55",
          "html_url": "https://github.com/bitcoin/bips/commit/9c76bb457f90a499aa894ae6d4c00f05e5329d55"
        }
      ],
      "message": "Update bip-schnorr.mediawiki\n\nCo-Authored-By: Tim Ruffing <crypto@timruffing.de>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-13T23:35:10Z"
      },
      "sha": "2c8feb1cbb2e5d5fb9090743afe32e7b42c046fa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzM0YTg1OWIyNzgyNzBlMDA4MDAwNTI2OWMyZjU1YWM0NjVmZTY0ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/734a859b278270e0080005269c2f55ac465fe64d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/734a859b278270e0080005269c2f55ac465fe64d",
      "tree": {
        "sha": "9f97f2c8762479e78644f1e9d9be0956547e8ceb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9f97f2c8762479e78644f1e9d9be0956547e8ceb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2c8feb1cbb2e5d5fb9090743afe32e7b42c046fa",
          "sha": "2c8feb1cbb2e5d5fb9090743afe32e7b42c046fa",
          "html_url": "https://github.com/bitcoin/bips/commit/2c8feb1cbb2e5d5fb9090743afe32e7b42c046fa"
        }
      ],
      "message": "bip-taproot: example from diagram",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2019-12-15T15:32:33Z"
      },
      "sha": "734a859b278270e0080005269c2f55ac465fe64d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ODQxNjFlMTg3ZDdmNmYxNGY2YmFmMjU4MmViMGU2MmQ5MzQ1MTk2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/84161e187d7f6f14f6baf2582eb0e62d93451966",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/84161e187d7f6f14f6baf2582eb0e62d93451966",
      "tree": {
        "sha": "342a1a919a750a850be1a4cb2504d2fabb105614",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/342a1a919a750a850be1a4cb2504d2fabb105614"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/734a859b278270e0080005269c2f55ac465fe64d",
          "sha": "734a859b278270e0080005269c2f55ac465fe64d",
          "html_url": "https://github.com/bitcoin/bips/commit/734a859b278270e0080005269c2f55ac465fe64d"
        }
      ],
      "message": "Improve and restructure motivation and design",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-15T00:28:44Z"
      },
      "sha": "84161e187d7f6f14f6baf2582eb0e62d93451966"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTRlOWMwOTI1YTNlMTMyNTgxZjZjYjZkNDQ5MjNjZTNkYzU0MGI0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/94e9c0925a3e132581f6cb6d44923ce3dc540b45",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/94e9c0925a3e132581f6cb6d44923ce3dc540b45",
      "tree": {
        "sha": "a60704eba8f3d7981410be2011476fddb9631b7b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a60704eba8f3d7981410be2011476fddb9631b7b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/84161e187d7f6f14f6baf2582eb0e62d93451966",
          "sha": "84161e187d7f6f14f6baf2582eb0e62d93451966",
          "html_url": "https://github.com/bitcoin/bips/commit/84161e187d7f6f14f6baf2582eb0e62d93451966"
        }
      ],
      "message": "Add an informal summary of the design",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-15T00:28:58Z"
      },
      "sha": "94e9c0925a3e132581f6cb6d44923ce3dc540b45"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDYwMTYzZWUwYjEyNjg4MzRmNzA3MTU0ZjZkNDA1NmRhMDAxZWNlOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/460163ee0b1268834f707154f6d4056da001ece9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/460163ee0b1268834f707154f6d4056da001ece9",
      "tree": {
        "sha": "77cfbf233a85a47040798d1a9f37e0b7b070c694",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/77cfbf233a85a47040798d1a9f37e0b7b070c694"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/94e9c0925a3e132581f6cb6d44923ce3dc540b45",
          "sha": "94e9c0925a3e132581f6cb6d44923ce3dc540b45",
          "html_url": "https://github.com/bitcoin/bips/commit/94e9c0925a3e132581f6cb6d44923ce3dc540b45"
        }
      ],
      "message": "Add rationale on security assumptions",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-15T22:44:39Z"
      },
      "sha": "460163ee0b1268834f707154f6d4056da001ece9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzJjMGY1MGQ3YmFlNGZjOGMxZWViYzRmYjhkMDVhY2ZmODYzY2I4OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/32c0f50d7bae4fc8c1eebc4fb8d05acff863cb88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/32c0f50d7bae4fc8c1eebc4fb8d05acff863cb88",
      "tree": {
        "sha": "90f1dba9a838241a1a99762767a632a7aa5971c4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/90f1dba9a838241a1a99762767a632a7aa5971c4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/460163ee0b1268834f707154f6d4056da001ece9",
          "sha": "460163ee0b1268834f707154f6d4056da001ece9",
          "html_url": "https://github.com/bitcoin/bips/commit/460163ee0b1268834f707154f6d4056da001ece9"
        }
      ],
      "message": "more precise wording on limits\n\nthere are no tx or block size limits (post-Segwit), just block weight limit\n\nbetter wording",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "stefanwouldgo",
        "email": "stefan@sblbs.de",
        "date": "2019-11-28T13:48:20Z"
      },
      "sha": "32c0f50d7bae4fc8c1eebc4fb8d05acff863cb88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZjQyOTc1MDAzNjcwNzNjMmI0NGRjYTEzMTNjYmExY2EyNzk0YTM3Yw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f4297500367073c2b44dca1313cba1ca2794a37c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f4297500367073c2b44dca1313cba1ca2794a37c",
      "tree": {
        "sha": "f4c6721602622327e113ff207d52ef056aad3b51",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f4c6721602622327e113ff207d52ef056aad3b51"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/32c0f50d7bae4fc8c1eebc4fb8d05acff863cb88",
          "sha": "32c0f50d7bae4fc8c1eebc4fb8d05acff863cb88",
          "html_url": "https://github.com/bitcoin/bips/commit/32c0f50d7bae4fc8c1eebc4fb8d05acff863cb88"
        }
      ],
      "message": "Update authors",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-18T01:27:22Z"
      },
      "sha": "f4297500367073c2b44dca1313cba1ca2794a37c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTJlM2Q2Y2E4N2I2NTg4OTVkOWRmNmE1Zjc1YjZjZDllOTU3NDcwNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/92e3d6ca87b658895d9df6a5f75b6cd9e9574704",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/92e3d6ca87b658895d9df6a5f75b6cd9e9574704",
      "tree": {
        "sha": "79b5682070e94d3634cf59b8b33390f67c3bb5b6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/79b5682070e94d3634cf59b8b33390f67c3bb5b6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f4297500367073c2b44dca1313cba1ca2794a37c",
          "sha": "f4297500367073c2b44dca1313cba1ca2794a37c",
          "html_url": "https://github.com/bitcoin/bips/commit/f4297500367073c2b44dca1313cba1ca2794a37c"
        }
      ],
      "message": "Update Post-History field for taproot/tapscript",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-18T01:27:36Z"
      },
      "sha": "92e3d6ca87b658895d9df6a5f75b6cd9e9574704"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDFmODk5M2E0YjU2ODk4OGM4YTkzYWFjZDFkNDBiYTc2NGQ2OGRkMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/41f8993a4b568988c8a93aacd1d40ba764d68dd3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/41f8993a4b568988c8a93aacd1d40ba764d68dd3",
      "tree": {
        "sha": "395a05159c926a1fbe16ec5f9b8a51f66547b202",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/395a05159c926a1fbe16ec5f9b8a51f66547b202"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/92e3d6ca87b658895d9df6a5f75b6cd9e9574704",
          "sha": "92e3d6ca87b658895d9df6a5f75b6cd9e9574704",
          "html_url": "https://github.com/bitcoin/bips/commit/92e3d6ca87b658895d9df6a5f75b6cd9e9574704"
        }
      ],
      "message": "Clarify nonce generation\n\n - Separate nonce generation into getting a random byte string and converting it to a suitable scalar ...\n - ... to make clear that the byte string can be generated differently.\n - Make the warning a little bit more prominent and improve writing",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2019-12-31T13:26:50Z"
      },
      "sha": "41f8993a4b568988c8a93aacd1d40ba764d68dd3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmY4YTM2MjAwYmMyNzBiNTc0OTE2ZTAwZmNjMzNjZThjZGQ4MDdjYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ff8a36200bc270b574916e00fcc33ce8cdd807cb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ff8a36200bc270b574916e00fcc33ce8cdd807cb",
      "tree": {
        "sha": "bc4a5f5487d2f8287ed3380c2ba2ec38c359f7ac",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bc4a5f5487d2f8287ed3380c2ba2ec38c359f7ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/41f8993a4b568988c8a93aacd1d40ba764d68dd3",
          "sha": "41f8993a4b568988c8a93aacd1d40ba764d68dd3",
          "html_url": "https://github.com/bitcoin/bips/commit/41f8993a4b568988c8a93aacd1d40ba764d68dd3"
        }
      ],
      "message": "Redefine leaf versions to be incrementally increasing from 0",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-07T21:17:13Z"
      },
      "sha": "ff8a36200bc270b574916e00fcc33ce8cdd807cb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MWU5OWUyMDVhODRiNzNiNGQ5NTg3MGFhZTA5ZDlkODExNDAwNjVlMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1e99e205a84b73b4d95870aae09d9d81140065e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1e99e205a84b73b4d95870aae09d9d81140065e0",
      "tree": {
        "sha": "3693976e08c4dbbc4563a5bc7d0efcdbf6013865",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3693976e08c4dbbc4563a5bc7d0efcdbf6013865"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ff8a36200bc270b574916e00fcc33ce8cdd807cb",
          "sha": "ff8a36200bc270b574916e00fcc33ce8cdd807cb",
          "html_url": "https://github.com/bitcoin/bips/commit/ff8a36200bc270b574916e00fcc33ce8cdd807cb"
        }
      ],
      "message": "go back to leaf_version but different rationale",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-01-10T11:42:34Z"
      },
      "sha": "1e99e205a84b73b4d95870aae09d9d81140065e0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Y2Q4ZWE4ODk4NzVlNjA3MmRiNWIzOTgyMWFjNGYzZmEwZTEzOWNiNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cd8ea889875e6072db5b39821ac4f3fa0e139cb5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/cd8ea889875e6072db5b39821ac4f3fa0e139cb5",
      "tree": {
        "sha": "069146cb1e9a7e78f17cb5af6fcc32390ec051db",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/069146cb1e9a7e78f17cb5af6fcc32390ec051db"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1e99e205a84b73b4d95870aae09d9d81140065e0",
          "sha": "1e99e205a84b73b4d95870aae09d9d81140065e0",
          "html_url": "https://github.com/bitcoin/bips/commit/1e99e205a84b73b4d95870aae09d9d81140065e0"
        }
      ],
      "message": "Delete precompiled file",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-13T15:27:18Z"
      },
      "sha": "cd8ea889875e6072db5b39821ac4f3fa0e139cb5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDllYzVmNDNkYTRkNmY3OWI5NmQ1ODUyMDRlNjY1MmNjYTcwMTZiNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d9ec5f43da4d6f79b96d585204e6652cca7016b4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d9ec5f43da4d6f79b96d585204e6652cca7016b4",
      "tree": {
        "sha": "ba2f6edb726fd9d30988a51a391dd1f1a1415fe9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ba2f6edb726fd9d30988a51a391dd1f1a1415fe9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cd8ea889875e6072db5b39821ac4f3fa0e139cb5",
          "sha": "cd8ea889875e6072db5b39821ac4f3fa0e139cb5",
          "html_url": "https://github.com/bitcoin/bips/commit/cd8ea889875e6072db5b39821ac4f3fa0e139cb5"
        }
      ],
      "message": "Update acknowledgements, remove authors",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-13T22:39:32Z"
      },
      "sha": "d9ec5f43da4d6f79b96d585204e6652cca7016b4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NTdlZDZjYjM0MmEzNjIwOWI5YWI0NzllZDkwODRlNDdjMjg3YWYzMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/57ed6cb342a36209b9ab479ed9084e47c287af33",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/57ed6cb342a36209b9ab479ed9084e47c287af33",
      "tree": {
        "sha": "8eab450b1c67ace4ea48ae7758d0a2eb8255182d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8eab450b1c67ace4ea48ae7758d0a2eb8255182d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d9ec5f43da4d6f79b96d585204e6652cca7016b4",
          "sha": "d9ec5f43da4d6f79b96d585204e6652cca7016b4",
          "html_url": "https://github.com/bitcoin/bips/commit/d9ec5f43da4d6f79b96d585204e6652cca7016b4"
        }
      ],
      "message": "Abstract out common signature message calculation",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-13T22:10:26Z"
      },
      "sha": "57ed6cb342a36209b9ab479ed9084e47c287af33"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZWI2NDFjYmRiNTBhOTk5MTQwNGNkNjMzYjVjNGNiMDEzOTg0NzIzOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/eb641cbdb50a9991404cd633b5c4cb0139847238",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/eb641cbdb50a9991404cd633b5c4cb0139847238",
      "tree": {
        "sha": "438801e16254da7b60c2c73035f129b7142bc255",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/438801e16254da7b60c2c73035f129b7142bc255"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/57ed6cb342a36209b9ab479ed9084e47c287af33",
          "sha": "57ed6cb342a36209b9ab479ed9084e47c287af33",
          "html_url": "https://github.com/bitcoin/bips/commit/57ed6cb342a36209b9ab479ed9084e47c287af33"
        }
      ],
      "message": "Address jonas' comments",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-14T18:28:49Z"
      },
      "sha": "eb641cbdb50a9991404cd633b5c4cb0139847238"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MWZhYTRiMTliY2ZhZWM0NGE5NjRhNjY1ZjY4YTViZGFiYTg1MzM3ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1faa4b19bcfaec44a964a665f68a5bdaba85337e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1faa4b19bcfaec44a964a665f68a5bdaba85337e",
      "tree": {
        "sha": "f74c8c080010c549d17e869774cd97078819dd3c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f74c8c080010c549d17e869774cd97078819dd3c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/eb641cbdb50a9991404cd633b5c4cb0139847238",
          "sha": "eb641cbdb50a9991404cd633b5c4cb0139847238",
          "html_url": "https://github.com/bitcoin/bips/commit/eb641cbdb50a9991404cd633b5c4cb0139847238"
        }
      ],
      "message": "Rename BIPs",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:47:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:05:36Z"
      },
      "sha": "1faa4b19bcfaec44a964a665f68a5bdaba85337e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTE5MTRiODE3MzExNTI2ZmZmZGRiMjFhZTg0Y2NlNWI5YTdkNWVlZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e1914b817311526fffddb21ae84cce5b9a7d5eed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e1914b817311526fffddb21ae84cce5b9a7d5eed",
      "tree": {
        "sha": "dc02106dcb3f8c7690b1adf68df7163ab40f5a93",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dc02106dcb3f8c7690b1adf68df7163ab40f5a93"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1faa4b19bcfaec44a964a665f68a5bdaba85337e",
          "sha": "1faa4b19bcfaec44a964a665f68a5bdaba85337e",
          "html_url": "https://github.com/bitcoin/bips/commit/1faa4b19bcfaec44a964a665f68a5bdaba85337e"
        }
      ],
      "message": "fixes",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:48:58Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:15:30Z"
      },
      "sha": "e1914b817311526fffddb21ae84cce5b9a7d5eed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmEzMDVlNWFiZGEzYzM5MGFjYzRhMTg2YTQxNWMwYWE1OGI4MWNkNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fa305e5abda3c390acc4a186a415c0aa58b81cd4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fa305e5abda3c390acc4a186a415c0aa58b81cd4",
      "tree": {
        "sha": "797e356b3b886d7be0e390178c124f0e20a447db",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/797e356b3b886d7be0e390178c124f0e20a447db"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e1914b817311526fffddb21ae84cce5b9a7d5eed",
          "sha": "e1914b817311526fffddb21ae84cce5b9a7d5eed",
          "html_url": "https://github.com/bitcoin/bips/commit/e1914b817311526fffddb21ae84cce5b9a7d5eed"
        }
      ],
      "message": "Make buildtable.pl support Requires: field",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:48:58Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:24:30Z"
      },
      "sha": "fa305e5abda3c390acc4a186a415c0aa58b81cd4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzNiOTFkY2MyMmZiYWY5NzZlNjRkMzU5NmM1NjgwZWI3NzhlN2JlOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c3b91dcc22fbaf976e64d3596c5680eb778e7be8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c3b91dcc22fbaf976e64d3596c5680eb778e7be8",
      "tree": {
        "sha": "8f34e90c95ef155bcddacf4d8e3bc63aabc8608c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8f34e90c95ef155bcddacf4d8e3bc63aabc8608c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fa305e5abda3c390acc4a186a415c0aa58b81cd4",
          "sha": "fa305e5abda3c390acc4a186a415c0aa58b81cd4",
          "html_url": "https://github.com/bitcoin/bips/commit/fa305e5abda3c390acc4a186a415c0aa58b81cd4"
        }
      ],
      "message": "Fixes to headers",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:48:58Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:24:47Z"
      },
      "sha": "c3b91dcc22fbaf976e64d3596c5680eb778e7be8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OWRlN2RmY2NmYTk5NmMzNmY5YzdkNDQ2Mjk0ZGNiN2U3NGNkMzFjZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9de7dfccfa996c36f9c7d446294dcb7e74cd31cf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9de7dfccfa996c36f9c7d446294dcb7e74cd31cf",
      "tree": {
        "sha": "cf36f4c6c0253b26245c7fab5b47c4eef8c56ed2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/cf36f4c6c0253b26245c7fab5b47c4eef8c56ed2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c3b91dcc22fbaf976e64d3596c5680eb778e7be8",
          "sha": "c3b91dcc22fbaf976e64d3596c5680eb778e7be8",
          "html_url": "https://github.com/bitcoin/bips/commit/c3b91dcc22fbaf976e64d3596c5680eb778e7be8"
        }
      ],
      "message": "Add to README",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:48:58Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:24:57Z"
      },
      "sha": "9de7dfccfa996c36f9c7d446294dcb7e74cd31cf"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2961215347,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MTIxNTM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961215347",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:49:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2961219671,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MTIxOTY3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961219671",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:56:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2961220516,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MTIyMDUxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2961220516",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T22:58:24Z"
    },
    {
      "event": "commented",
      "id": 576057353,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjA1NzM1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/576057353",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T23:00:33Z",
      "updated_at": "2020-01-19T23:00:33Z",
      "author_association": "MEMBER",
      "body": "Don't merge yet, somehow not all BIP links are rendered correctly. I don't understand why some work and others don't...",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-576057353",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "reviewed",
      "id": 345037324,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDM3MzI0",
      "url": null,
      "actor": null,
      "commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#pullrequestreview-345037324",
      "submitted_at": "2020-01-19T23:58:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/876"
    },
    {
      "event": "mentioned",
      "id": 2962178374,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk2MjE3ODM3NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2962178374",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T09:24:09Z"
    },
    {
      "event": "subscribed",
      "id": 2962178381,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NjIxNzgzODE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2962178381",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T09:24:09Z"
    },
    {
      "event": "reviewed",
      "id": 345170778,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTcwNzc4",
      "url": null,
      "actor": null,
      "commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "junderw",
        "id": 11246316,
        "node_id": "MDQ6VXNlcjExMjQ2MzE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junderw",
        "html_url": "https://github.com/junderw",
        "followers_url": "https://api.github.com/users/junderw/followers",
        "following_url": "https://api.github.com/users/junderw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junderw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junderw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
        "organizations_url": "https://api.github.com/users/junderw/orgs",
        "repos_url": "https://api.github.com/users/junderw/repos",
        "events_url": "https://api.github.com/users/junderw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junderw/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#pullrequestreview-345170778",
      "submitted_at": "2020-01-20T09:24:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/876"
    },
    {
      "event": "mentioned",
      "id": 2962959051,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk2Mjk1OTA1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2962959051",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T13:32:07Z"
    },
    {
      "event": "subscribed",
      "id": 2962959053,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NjI5NTkwNTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2962959053",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T13:32:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2963344598,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MzM0NDU5OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2963344598",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T15:23:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2963371036,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MzM3MTAzNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2963371036",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T15:31:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2963378469,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MzM3ODQ2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2963378469",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T15:33:21Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OWNmNDAzOGYxN2NiNTY2YmRjNzliNWVjMTJkZWU1MzM4YjExMjJkMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "tree": {
        "sha": "f12ffe2d1f78403314cf5a0d7106960435a47cf9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f12ffe2d1f78403314cf5a0d7106960435a47cf9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9de7dfccfa996c36f9c7d446294dcb7e74cd31cf",
          "sha": "9de7dfccfa996c36f9c7d446294dcb7e74cd31cf",
          "html_url": "https://github.com/bitcoin/bips/commit/9de7dfccfa996c36f9c7d446294dcb7e74cd31cf"
        }
      ],
      "message": "fix BIP links",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-20T15:35:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-19T22:52:43Z"
      },
      "sha": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2963385799,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk2MzM4NTc5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2963385799",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T15:35:36Z"
    },
    {
      "event": "commented",
      "id": 576330291,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjMzMDI5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/576330291",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T15:47:00Z",
      "updated_at": "2020-01-20T15:47:00Z",
      "author_association": "MEMBER",
      "body": "All links fixed.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#issuecomment-576330291",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/876"
    },
    {
      "event": "reviewed",
      "id": 346975725,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTc1NzI1",
      "url": null,
      "actor": null,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jimmysong",
        "id": 524761,
        "node_id": "MDQ6VXNlcjUyNDc2MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimmysong",
        "html_url": "https://github.com/jimmysong",
        "followers_url": "https://api.github.com/users/jimmysong/followers",
        "following_url": "https://api.github.com/users/jimmysong/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimmysong/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimmysong/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
        "organizations_url": "https://api.github.com/users/jimmysong/orgs",
        "repos_url": "https://api.github.com/users/jimmysong/repos",
        "events_url": "https://api.github.com/users/jimmysong/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimmysong/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#pullrequestreview-346975725",
      "submitted_at": "2020-01-22T23:28:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/876"
    },
    {
      "event": "reviewed",
      "id": 347682323,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NjgyMzIz",
      "url": null,
      "actor": null,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/876#pullrequestreview-347682323",
      "submitted_at": "2020-01-23T23:47:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/876"
    },
    {
      "event": "merged",
      "id": 2975703763,
      "node_id": "MDExOk1lcmdlZEV2ZW50Mjk3NTcwMzc2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2975703763",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "created_at": "2020-01-24T00:01:33Z"
    },
    {
      "event": "closed",
      "id": 2975703779,
      "node_id": "MDExOkNsb3NlZEV2ZW50Mjk3NTcwMzc3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2975703779",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-24T00:01:34Z"
    },
    {
      "event": "comment_deleted",
      "id": 6924786475,
      "node_id": "CDE_lADOAN28mc4g128JzwAAAAGcv9sr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6924786475",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T04:50:34Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/367696892",
      "pull_request_review_id": 344277144,
      "id": 367696892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5Njg5Mg==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+import hashlib\n+import binascii\n+\n+p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\n+n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n+\n+# Points are tuples of X and Y coordinates and the point at infinity is\n+# represented by the None keyword.\n+G = (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)\n+\n+# This implementation can be sped up by storing the midstate after hashing\n+# tag_hash instead of rehashing it all the time.\n+def tagged_hash(tag, msg):\n+    tag_hash = hashlib.sha256(tag.encode()).digest()\n+    return hashlib.sha256(tag_hash + tag_hash + msg).digest()\n+\n+def is_infinity(P):\n+    return P is None\n+\n+def x(P):\n+    return P[0]\n+\n+def y(P):\n+    return P[1]\n+\n+def point_add(P1, P2):\n+    if (P1 is None):\n+        return P2\n+    if (P2 is None):\n+        return P1\n+    if (x(P1) == x(P2) and y(P1) != y(P2)):\n+        return None\n+    if (P1 == P2):\n+        lam = (3 * x(P1) * x(P1) * pow(2 * y(P1), p - 2, p)) % p\n+    else:\n+        lam = ((y(P2) - y(P1)) * pow(x(P2) - x(P1), p - 2, p)) % p\n+    x3 = (lam * lam - x(P1) - x(P2)) % p\n+    return (x3, (lam * (x(P1) - x3) - y(P1)) % p)\n+\n+def point_mul(P, n):\n+    R = None\n+    for i in range(256):\n+        if ((n >> i) & 1):\n+            R = point_add(R, P)\n+        P = point_add(P, P)\n+    return R\n+\n+def bytes_from_int(x):\n+    return x.to_bytes(32, byteorder=\"big\")\n+\n+def bytes_from_point(P):\n+    return bytes_from_int(x(P))\n+\n+def point_from_bytes(b):\n+    x = int_from_bytes(b)\n+    if x >= p:\n+        return None\n+    y_sq = (pow(x, 3, p) + 7) % p\n+    y = pow(y_sq, (p + 1) // 4, p)\n+    if pow(y, 2, p) != y_sq:\n+        return None\n+    return [x, y]\n+\n+def int_from_bytes(b):\n+    return int.from_bytes(b, byteorder=\"big\")\n+\n+def hash_sha256(b):",
      "path": "bip-schnorr/reference.py",
      "position": null,
      "original_position": 67,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "77b3a03f0e4a15a773f2b16f3e7766f55fee591f",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this function is used anywhere in this script.",
      "created_at": "2020-01-16T23:11:11Z",
      "updated_at": "2020-01-20T15:35:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r367696892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/367696892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368334543",
      "pull_request_review_id": 345037324,
      "id": 368334543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMzNDU0Mw==",
      "diff_hunk": "@@ -62,11 +62,11 @@ encodings and operations.\n \n Since we would like to avoid the fragility that comes with short hashes, the ''e'' variant does not provide significant advantages. We choose the ''R''-option, which supports batch verification. \n \n-'''Key prefixing''' Using the verification rule above directly makes Schnorr signatures vulnerable to \"related-key attacks\" in which a third party can convert a signature ''(R, s)'' for public key ''P'' into a signature ''(R, s + a⋅hash(R || m))'' for public key ''P + a⋅G'' and the same message ''m'', for any given additive tweak ''a'' to the signing key. This would render signatures insecure when keys are generated using [bip-0032.mediawiki#public-parent-key--public-child-key BIP32's unhardened derivation] and other methods that rely on additive tweaks to existing keys such as Taproot.\n+'''Key prefixing''' Using the verification rule above directly makes Schnorr signatures vulnerable to \"related-key attacks\" in which a third party can convert a signature ''(R, s)'' for public key ''P'' into a signature ''(R, s + a⋅hash(R || m))'' for public key ''P + a⋅G'' and the same message ''m'', for any given additive tweak ''a'' to the signing key. This would render signatures insecure when keys are generated using [bip-0032.mediawiki BIP32's unhardened derivation] and other methods that rely on additive tweaks to existing keys such as Taproot.",
      "path": "bip-0340.mediawiki",
      "position": null,
      "original_position": 5,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Internal wiki links are with double-[, e.g: `[[bip-0032.mediawiki|foo]]`",
      "created_at": "2020-01-19T23:58:36Z",
      "updated_at": "2020-01-20T15:35:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r368334543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368334543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368440999",
      "pull_request_review_id": 345170778,
      "id": 368440999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MDk5OQ==",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+<pre>\n+  BIP: 341\n+  Layer: Consensus (soft fork)\n+  Title: Taproot: SegWit version 1 spending rules\n+  Author: Pieter Wuille <pieter.wuille@gmail.com>\n+          Jonas Nick <jonasd.nick@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0341\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2020-01-19\n+  License: BSD-3-Clause\n+  Requires: 340\n+  Post-History: 2019-05-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html [bitcoin-dev] Taproot proposal\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a new SegWit version 1 output type, with spending rules based on Taproot, Schnorr signatures, and Merkle branches.\n+\n+===Copyright===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+===Motivation===\n+\n+This proposal aims to improve privacy, efficiency, and flexibility of Bitcoin's scripting capabilities without adding new security assumptions<ref>'''What does not adding security assumptions mean?''' Unforgeability of signatures is a necessary requirement to prevent theft. At least when treating script execution as a digital signature scheme itself, unforgeability can be [https://github.com/apoelstra/taproot proven] in the Random Oracle Model assuming the Discrete Logarithm problem is hard. A [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 proof] for unforgeability of ECDSA in the current script system needs non-standard assumptions on top of that. Note that it is hard in general to model exactly what security for script means, as it depends on the policies and protocols used by wallet software.</ref>. Specifically, it seeks to minimize how much information about the spendability conditions of a transaction output is revealed on chain at creation or spending time and to add a number of upgrade mechanisms, while fixing a few minor but long-standing issues.\n+\n+==Design==\n+\n+A number of related ideas for improving Bitcoin's scripting capabilities have been previously proposed: Schnorr signatures ([https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki BIP340]), Merkle branches (\"MAST\", [bip-0114.mediawiki BIP114], [bip-0117.mediawiki BIP117]), new sighash modes ([bip-0118.mediawiki BIP118]), new opcodes like CHECKSIGFROMSTACK, [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015614.html Taproot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html Graftroot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016249.html G'root], and [https://bitcointalk.org/index.php?topic=1377298.0 cross-input aggregation].\n+\n+Combining all these ideas in a single proposal would be an extensive change, be hard to review, and likely miss new discoveries that otherwise could have been made along the way. Not all are equally mature as well. For example, cross-input aggregation [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-March/015838.html interacts] in complex ways with upgrade mechanisms, and solutions to that are still [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-October/016461.html in flux]. On the other hand, separating them all into independent upgrades would reduce the efficiency and privacy gains to be had, and wallet and service providers may not be inclined to go through many incremental updates. Therefore, we're faced with a tradeoff between functionality and scope creep. In this design we strike a balance by focusing on the structural script improvements offered by Taproot and Merkle branches, as well as changes necessary to make them usable and efficient. For things like sighashes and opcodes we include fixes for known problems, but exclude new features that can be added independently with no downsides.\n+\n+As a result we choose this combination of technologies:\n+* '''Merkle branches''' let us only reveal the actually executed part of the script to the blockchain, as opposed to all possible ways a script can be executed. Among the various known mechanisms for implementing this, one where the Merkle tree becomes part of the script's structure directly maximizes the space savings, so that approach is chosen.\n+* '''Taproot''' on top of that lets us merge the traditionally separate pay-to-pubkey and pay-to-scripthash policies, making all outputs spendable by either a key or (optionally) a script, and indistinguishable from each other. As long as the key-based spending path is used for spending, it is not revealed whether a script path was permitted as well, resulting in space savings and an increase in scripting privacy at spending time.\n+* Taproot's advantages become apparent under the assumption that most applications involve outputs that could be spent by all parties agreeing. That's where '''Schnorr''' signatures come in, as they permit [https://eprint.iacr.org/2018/068 key aggregation]: a public key can be constructed from multiple participant public keys, and which requires cooperation between all participants to sign for. Such multi-party public keys and signatures are indistinguishable from their single-party equivalents. This means that with taproot most applications can use the key-based spending path, which is both efficient and private. This can be generalized to arbitrary M-of-N policies, as Schnorr signatures support threshold signing, at the cost of more complex setup protocols.\n+* As Schnorr signatures also permit '''batch validation''', allowing multiple signatures to be validated together more efficiently than validating each one independently, we make sure all parts of the design are compatible with this.\n+* Where unused bits appear as a result of the above changes, they are reserved for mechanisms for '''future extensions'''. As a result, every script in the Merkle tree has an associated version such that new script versions can be introduced with a soft fork while remaining compatible with BIP 341. Additionally, future soft forks can make use of the currently unused <code>annex</code> in the witness (see [bip-0341.mediawiki#Rationale BIP341]).\n+* While the core semantics of the '''signature hashing algorithm''' are not changed, a number of improvements are included in this proposal. The new signature hashing algorithm fixes the verification capabilities of offline signing devices by including amount and scriptPubKey in the signature message, avoids unnecessary hashing, uses '''tagged hashes''' and defines a default sighash byte.\n+* The '''public key is directly included in the output''' in contrast to typical earlier constructions which store a hash of the public key or script in the output. This has the same cost for senders and is more space efficient overall if the key-based spending path is taken. <ref>'''Why is the public key directly included in the output?''' While typical earlier constructions store a hash of a script or a public key in the output, this is rather wasteful when a public key is always involved. To guarantee batch verifiability, the public key must be known to every verifier, and thus only revealing its hash as an output would imply adding an additional 32 bytes to the witness. Furthermore, to maintain [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012198.html 128-bit collision security] for outputs, a 256-bit hash would be required anyway, which is comparable in size (and thus in cost for senders) to revealing the public key directly. While the usage of public key hashes is often said to protect against ECDLP breaks or quantum computers, this protection is very weak at best: transactions are not protected while being confirmed, and a very [https://twitter.com/pwuille/status/1108097835365339136 large portion] of the currency's supply is not under such protection regardless. Actual resistance to such systems can be introduced by relying on different cryptographic assumptions, but this proposal focuses on improvements that do not change the security model.</ref>\n+\n+Informally, the resulting design is as follows: a new witness version is added (version 1), whose programs consist of 32-byte encodings of points ''Q''. ''Q'' is computed as ''P + hash(P||m)G'' for a public key ''P'', and the root ''m'' of a Merkle tree whose leaves consist of a version number and a script. These outputs can be spent directly by providing a signature for ''Q'', or indirectly by revealing ''P'', the script and leaf version, inputs that satisfy the script, and a Merkle path that proves ''Q'' committed to that leaf. All hashes in this construction (the hash for computing ''Q'' from ''P'', the hashes inside the Merkle tree's inner nodes, and the signature hashes used) are tagged to guarantee domain separation.\n+\n+== Specification ==\n+\n+This section specifies the Taproot consensus rules. Validity is defined by exclusion: a block or transaction is valid if no condition exists that marks it failed.\n+\n+The notation below follows that of [bip-0340.mediawiki#design BIP340]. This includes the ''hash<sub>tag</sub>(x)'' notation to refer to ''SHA256(SHA256(tag) || SHA256(tag) || x)''. To the best of the authors' knowledge, no existing use of SHA256 in Bitcoin feeds it a message that starts with two single SHA256 outputs, making collisions between ''hash<sub>tag</sub>'' with other hashes extremely unlikely.\n+\n+=== Script validation rules ===\n+\n+A Taproot output is a native SegWit output (see [bip-0141.mediawiki BIP141]) with version number 1, and a 32-byte witness program.\n+The following rules only apply when such an output is being spent. Any other outputs, including version 1 outputs with lengths other than 32 bytes, or P2SH-wrapped version 1 outputs<ref>'''Why is P2SH-wrapping not supported?''' Using P2SH-wrapped outputs only provides 80-bit collision security due to the use of a 160-bit hash. This is considered low, and becomes a security risk whenever the output includes data from more than a single party (public keys, hashes, ...).</ref>, remain unencumbered.\n+\n+* Let ''q'' be the 32-byte array containing the witness program (the second push in the scriptPubKey) which represents a public key according to [bip-0340.mediawiki#design BIP340].\n+* Fail if the witness stack has 0 elements.\n+* If there are at least two witness elements, and the first byte of the last element is 0x50<ref>'''Why is the first byte of the annex <code>0x50</code>?''' The <code>0x50</code> is chosen as it could not be confused with a valid P2WPKH or P2WSH spending. As the control block's initial byte's lowest bit is used to indicate the public key's Y squareness, each leaf version needs an even byte value and the immediately following odd byte value that are both not yet used in P2WPKH or P2WSH spending. To indicate the annex, only an \"unpaired\" available byte is necessary like <code>0x50</code>. This choice maximizes the available options for future script versions.</ref>, this last element is called ''annex'' ''a''<ref>'''What is the purpose of the annex?''' The annex is a reserved space for future extensions, such as indicating the validation costs of computationally expensive new opcodes in a way that is recognizable without knowing the scriptPubKey of the output being spent. Until the meaning of this field is defined by another softfork, users SHOULD NOT include <code>annex</code> in transactions, or it may lead to PERMANENT FUND LOSS.</ref> and is removed from the witness stack. The annex (or the lack of thereof) is always covered by the signature and contributes to transaction weight, but is otherwise ignored during taproot validation.\n+* If there is exactly one element left in the witness stack, key path spending is used:\n+** The single witness stack element is interpreted as the signature and must be valid (see the next section) for the public key ''q'' (see the next subsection).\n+* If there are at least two witness elements left, script path spending is used:\n+** Call the second-to-last stack element ''s'', the script.\n+** The last stack element is called the control block ''c'', and must have length ''33 + 32m'', for a value of ''m'' that is an integer between 0 and 128<ref>'''Why is the Merkle path length limited to 128?''' The optimally space-efficient Merkle tree can be constructed based on the probabilities of the scripts in the leaves, using the Huffman algorithm. This algorithm will construct branches with lengths approximately equal to ''log<sub>2</sub>(1/probability)'', but to have branches longer than 128 you would need to have scripts with an execution chance below 1 in ''2<sup>128</sup>''. As that is our security bound, scripts that truly have such a low chance can probably be removed entirely.</ref>, inclusive. Fail if it does not have such a length.\n+** Let ''p = c[1:33]'' and let ''P = point(p)'' where ''point'' and ''[:]'' are defined as in [bip-0340.mediawiki#design BIP340]. Fail if this point is not on the curve.\n+** Let ''v = c[0] & 0xfe'' and call it the ''leaf version''<ref>'''What constraints are there on the leaf version?''' First, the leaf version cannot be odd as ''c[0] & 0xfe'' will always be even, and cannot be ''0x50'' as that would result in ambiguity with the annex. In addition, in order to support some forms of static analysis that rely on being able to identify script spends without access to the output being spent, it is recommended to avoid using any leaf versions that would conflict with a valid first byte of either a valid P2WPKH pubkey or a valid P2WSH script (that is, both ''v'' and ''v | 1'' should be an undefined, invalid or disabled opcode or an opcode that is not valid as the first opcode). The values that comply to this rule are the 32 even values between ''0xc0'' and ''0xfe'' and also ''0x66'', ''0x7e'', ''0x80'', ''0x84'', ''0x96'', ''0x98'', ''0xba'', ''0xbc'', ''0xbe''. Note also that this constraint implies that leaf versions should be shared amongst different witness versions, as knowing the witness version requires access to the output being spent.</ref>.\n+** Let ''k<sub>0</sub> = hash<sub>TapLeaf</sub>(v || compact_size(size of s) || s)''; also call it the ''tapleaf hash''.\n+** For ''j'' in ''[0,1,...,m-1]'':\n+*** Let ''e<sub>j</sub> = c[33+32j:65+32j]''.\n+*** Let ''k<sub>j+1</sub> depend on whether ''k<sub>j</sub> < e<sub>j</sub>'' (lexicographically)<ref>'''Why are child elements sorted before hashing in the Merkle tree?''' By doing so, it is not necessary to reveal the left/right directions along with the hashes in revealed Merkle branches. This is possible because we do not actually care about the position of specific scripts in the tree; only that they are actually committed to.</ref>:\n+**** If ''k<sub>j</sub> < e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(k<sub>j</sub> || e<sub>j</sub>)''<ref>'''Why not use a more efficient hash construction for inner Merkle nodes?''' The chosen construction does require two invocations of the SHA256 compression functions, one of which can be avoided in theory (see [bip-0098.mediawiki BIP98]). However, it seems preferable to stick to constructions that can be implemented using standard cryptographic primitives, both for implementation simplicity and analyzability. If necessary, a significant part of the second compression function can be optimized out by [https://github.com/bitcoin/bitcoin/pull/13191 specialization] for 64-byte inputs.</ref>.\n+**** If ''k<sub>j</sub> &ge; e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(e<sub>j</sub> || k<sub>j</sub>)''.\n+** Let ''t = hash<sub>TapTweak</sub>(p || k<sub>m</sub>)''.\n+** If ''t &ge; 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141'' (order of secp256k1), fail.\n+** Let ''Q = point(q) if (c[0] & 1) = 1 and -point(q) otherwise''<ref>'''Why is it necessary to reveal a bit to indicate if the point represented by the output public key is negated in a script path spend?''' The ''point'' function (defined in [bip-0340.mediawiki#design BIP340]) always constructs a point with a square Y coordinate, but because ''Q'' is constructed by adding the taproot tweak to the internal public key ''P'', it cannot easily be guaranteed that ''Q'' in fact has such a Y coordinate. Therefore, before verifying the taproot tweak the original point is restored by negating if necessary. We can not ignore the Y coordinate because it would prevent batch verification. Trying out multiple internal keys until there's such a ''Q'' is possible but undesirable and unnecessary since this information about the Y coordinate only consumes an unused bit.</ref>. Fail if this point is not on the curve.\n+** If ''Q &ne; P + int(t)G'', fail.\n+** Execute the script, according to the applicable script rules<ref>'''What are the applicable script rules in script path spends?''' [bip-0342.mediawiki#design BIP342] specifies validity rules that apply for leaf version 0xc0, but future proposals can introduce rules for other leaf versions.</ref>, using the witness stack elements excluding the script ''s'', the control block ''c'', and the annex ''a'' if present, as initial stack.\n+\n+''q'' is referred to as ''taproot output key'' and ''p'' as ''taproot internal key''.\n+\n+=== Signature validation rules ===\n+\n+We first define a reusable common signature message calculation function, followed by the actual signature validation as it's used in key path spending.\n+\n+==== Common signature message ====\n+\n+The function ''SigMsg(hash_type, ext_flag)'' computes the message being signed as a byte array. It is implicitly also a function of the spending transaction and the outputs it spends, but these are not listed to keep notation simple. \n+\n+The parameter ''hash_type'' is an 8-bit unsigned value. The <code>SIGHASH</code> encodings from the legacy script system are reused, including <code>SIGHASH_ALL</code>, <code>SIGHASH_NONE</code>, <code>SIGHASH_SINGLE</code>, and <code>SIGHASH_ANYONECANPAY</code>, plus the default ''hash_type'' value ''0x00'' which results in signing over the whole transaction just as for <code>SIGHASH_ALL</code>. The following restrictions apply, which cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'', ''0x03'', ''0x81'', ''0x82'', or ''0x83''<ref>'''Why reject unknown ''hash_type'' values?''' By doing so, it is easier to reason about the worst case amount of signature hashing an implementation with adequate caching must perform.</ref>).\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+The parameter ''ext_flag'' is an integer in range 0-127, and is used for indicating (in the message) that extensions are added at the end of the message<ref>'''What extensions use the ''ext_flag'' mechanism?''' [bip-0342.mediawiki#design BIP342] reuses the same common signature message algorithm, but adds BIP342-specific data at the end, which is indicated using ''ext_flag = 1''.</ref>.\n+\n+If the parameters take acceptable values, the message is the concatenation of the following data, in order(with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If the ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all input amounts.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+** If ''hash_type & 0x80'' equals <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** ''amount'' (8): value of the previous output spent by this input.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+The total length of ''SigMsg()'' is at most ''209'' bytes<ref>'''What is the output length of ''SigMsg()''?''' The total length of ''SigMsg()'' can be computed using the following formula: ''177 - is_anyonecanpay * 52 - is_none * 32 + has_annex * 32''.</ref>. Note that this does not include the size of sub-hashes such as ''sha_prevouts'', which may be cached across signatures of the same transaction.\n+\n+In summary, the semantics of the [bip-0143.mediawiki BIP143] sighash types remain unchanged, except the following:\n+# The way and order of serialization is changed.<ref>'''Why is the serialization in the signature message changed?''' Hashes that go into the signature message and the message itself are now computed with a single SHA256 invocation instead of double SHA256. There is no expected security improvement by doubling SHA256 because this only protects against length-extension attacks against SHA256 which are not a concern for signature messages because there is no secret data. Therefore doubling SHA256 is a waste of resources. The message computation now follows a logical order with transaction level data first, then input data and output data. This allows to efficiently cache the transaction part of the message across different inputs using the SHA256 midstate. Additionally, sub-hashes can be skipped when calculating the message (for example `sha_prevouts` if <code>SIGHASH_ANYONECANPAY</code> is set) instead of setting them to zero and then hashing them as in BIP143. Despite that, collisions are made impossible by committing to the length of the data (implicit in ''hash_type'' and ''spend_type'') before the variable length data.</ref>\n+# The signature message commits to the ''scriptPubKey''<ref>'''Why does the signature message commit to the ''scriptPubKey''?''' This prevents lying to offline signing devices about output being spent, even when the actually executed script (''scriptCode'' in BIP143) is correct. This means it's possible to compactly prove to a hardware wallet what (unused) execution paths existed.</ref>.\n+# If the <code>SIGHASH_ANYONECANPAY</code> flag is not set, the message commits to the amounts of ''all'' transaction inputs.<ref>'''Why does the signature message commit to the amounts of all transaction inputs?''' This eliminates the possibility to lie to offline signing devices about the fee of a transaction.</ref>\n+# The signature message commits to all input ''nSequence'' if <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code> are set (unless <code>SIGHASH_ANYONECANPAY</code> is set as well).<ref>'''Why does the signature message commit to all input ''nSequence'' if <code>SIGHASH_SINGLE</code> or <code>SIGHASH_NONE</code> are set?''' Because setting them already makes the message commit to the <code>prevouts</code> part of all transaction inputs, it is not useful to treat the ''nSequence'' any different. Moreover, this change makes ''nSequence'' consistent with the view that <code>SIGHASH_SINGLE</code> and <code>SIGHASH_NONE</code> only modify the signature message with respect to transaction outputs and not inputs.</ref>\n+# The signature message includes commitments to the taproot-specific data ''spend_type'' and ''annex'' (if present).\n+\n+==== Taproot key path spending signature validation ====\n+\n+To validate a signature ''sig'' with public key ''q'':\n+* If the ''sig'' is 64 bytes long, return ''Verify(q, hash<sub>TapSigHash</sub>(0x00 || SigMsg(0x00, 0)), sig)''<ref>'''Why is the input to ''hash<sub>TapSigHash</sub>'' prefixed with 0x00?''' This prefix is called the sighash epoch, and allows reusing the ''hash<sub>TapSigHash</sub>'' tagged hash in future signature algorithms that make invasive changes to how hashing is performed (as opposed to the ''ext_flag'' mechanism that is used for incremental extensions). An alternative is having them use a different tag, but supporting a growing number of tags may become undesirable.</ref>, where ''Verify'' is defined in [bip-0340.mediawiki#design BIP340].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00<ref>'''Why can the <code>hash_type</code> not be <code>0x00</code> in 65-byte signatures?''' Permitting that would enable malleating (by third parties, including miners) 64-byte signatures into 65-byte ones, resulting in a different `wtxid` and a different fee rate than the creator intended</ref> and Verify(q, hash<sub>TapSighash</sub>(0x00 || SigMsg(sig[64], 0)), sig[0:64])''.\n+* Otherwise, fail<ref>'''Why permit two signature lengths?''' By making the most common type of <code>hash_type</code> implicit, a byte can often be saved.</ref>.\n+\n+== Constructing and spending Taproot outputs ==\n+\n+This section discusses how to construct and spend Taproot outputs. It only affects wallet software that chooses to implement receiving and spending,\n+and is not consensus critical in any way.\n+\n+Conceptually, every Taproot output corresponds to a combination of a single public key condition (the internal key), and zero or more general conditions encoded in scripts organized in a tree.\n+Satisfying any of these conditions is sufficient to spend the output.\n+\n+'''Initial steps''' The first step is determining what the internal key and the organization of the rest of the scripts should be. The specifics are likely application dependent, but here are some general guidelines:\n+* When deciding between scripts with conditionals (<code>OP_IF</code> etc.) and splitting them up into multiple scripts (each corresponding to one execution path through the original script), it is generally preferable to pick the latter.\n+* When a single condition requires signatures with multiple keys, key aggregation techniques like MuSig can be used to combine them into a single key. The details are out of scope for this document, but note that this may complicate the signing procedure.\n+* If one or more of the spending conditions consist of just a single key (after aggregation), the most likely one should be made the internal key. If no such condition exists, it may be worthwhile adding one that consists of an aggregation of all keys participating in all scripts combined; effectively adding an \"everyone agrees\" branch. If that is inacceptable, pick as internal key a point with unknown discrete logarithm. One example of such a point is ''H = point(0x0250929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0)'' which is [https://github.com/ElementsProject/secp256k1-zkp/blob/11af7015de624b010424273be3d91f117f172c82/src/modules/rangeproof/main_impl.h#L16 constructed] by taking the hash of the standard uncompressed encoding of the [https://www.secg.org/sec2-v2.pdf secp256k1] base point ''G'' as X coordinate. In order to avoid leaking the information that key path spending is not possible it is recommended to pick a fresh integer ''r'' in the range ''0...n-1'' uniformly at random and use ''H + rG'' as internal key. It is possible to prove that this internal key does not have a known discrete logarithm with respect to ''G'' by revealing ''r'' to a verifier who can then reconstruct how the internal key was created.\n+* If the spending conditions do not require a script path, the output key should commit to an unspendable script path instead of having no script path. This can be achieved by computing the output key point as ''Q = P + int(hash<sub>TapTweak</sub>(bytes(P)))G''. <ref>'''Why should the output key always have a taproot commitment, even if there is no script path?'''\n+If the taproot output key is an aggregate of keys, there is the possibility for a malicious party to add a script path without being noticed by the other parties.\n+This allows to bypass the multiparty policy and to steal the coin.\n+MuSig key aggregation does not have this issue because it already causes the internal key to be randomized.\n+\n+The attack works as follows: Assume Alice and Mallory want to aggregate their keys into a taproot output key without a script path.\n+In order to prevent key cancellation and related attacks they use [https://eprint.iacr.org/2018/483.pdf MSDL-pop] instead of MuSig.\n+The MSDL-pop protocol requires all parties to provide a proof of possession of their corresponding secret key and the aggregated key is just the sum of the individual keys.\n+After Mallory receives Alice's key ''A'', Mallory creates ''M = M<sub>0</sub> + int(t)G'' where ''M<sub>0</sub>'' is Mallory's original key and ''t'' allows a script path spend with internal key ''P = A + M<sub>0</sub>'' and a script that only contains Mallory's key.\n+Mallory sends a proof of possession of ''M'' to Alice and both parties compute output key ''Q = A + M = P + int(t)G''.\n+Alice will not be able to notice the script path, but Mallory can unilaterally spend any coin with output key ''Q''.\n+</ref>\n+* The remaining scripts should be organized into the leaves of a binary tree. This can be a balanced tree if each of the conditions these scripts correspond to are equally likely. If probabilities for each condition are known, consider constructing the tree as a Huffman tree.\n+\n+'''Computing the output script''' Once the spending conditions are split into an internal key <code>internal_pubkey</code> and a binary tree whose leaves are (leaf_version, script) tuples, the output script can be computed using the Python3 algorithms below. These algorithms take advantage of helper functions from the [bip-0340/referency.py BIP340 reference code] for integer conversion, point multiplication, and tagged hashes.\n+\n+First, we define <code>taproot_tweak_pubkey</code> for 32-byte [bip-0340.mediawiki#design BIP340] public key arrays.\n+In addition to the tweaked public key byte array, the function returns a boolean indicating whether the public key represents the tweaked point or its negation.\n+This will be required for spending the output with a script path.\n+In order to allow spending with the key path, we define <code>taproot_tweak_seckey</code> to compute the secret key for a tweaked public key.\n+For any byte string <code>h</code> it holds that <code>taproot_tweak_pubkey(pubkey_gen(seckey), h)[0] == pubkey_gen(taproot_tweak_seckey(seckey, h))</code>.\n+\n+<source lang=\"python\">\n+def taproot_tweak_pubkey(pubkey, h):\n+    t = int_from_bytes(tagged_hash(\"TapTweak\", pubkey + h))\n+    if t >= SECP256K1_ORDER:\n+        raise ValueError",
      "path": "bip-0341.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "in_reply_to_id": null,
      "user": {
        "login": "junderw",
        "id": 11246316,
        "node_id": "MDQ6VXNlcjExMjQ2MzE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junderw",
        "html_url": "https://github.com/junderw",
        "followers_url": "https://api.github.com/users/junderw/followers",
        "following_url": "https://api.github.com/users/junderw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junderw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junderw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
        "organizations_url": "https://api.github.com/users/junderw/orgs",
        "repos_url": "https://api.github.com/users/junderw/repos",
        "events_url": "https://api.github.com/users/junderw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junderw/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa I understand it's an extremely rare occurrence, but shouldn't there be some sort of consideration to prevent failure of this nature. (ie. RFC6979 has the last step loop if the resulting nonce doesn't produce valid r and s values)\r\n\r\nPerhaps we can say something like:\r\n\r\n```python\r\n    t = int_from_bytes(tagged_hash(\"TapTweak\", pubkey + h))\r\n    while t >= SECP256K1_ORDER:\r\n        t = int_from_bytes(tagged_hash(\"TapTweak\", bytes_from_int(t)))\r\n```\r\n\r\netc.\r\n\r\nOr would the proper solution be \"generate a new pubkey or tweak\"?",
      "created_at": "2020-01-20T09:24:08Z",
      "updated_at": "2020-01-20T15:35:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r368440999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368440999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368548537",
      "pull_request_review_id": 345308864,
      "id": 368548537,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0ODUzNw==",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+<pre>\n+  BIP: 341\n+  Layer: Consensus (soft fork)\n+  Title: Taproot: SegWit version 1 spending rules\n+  Author: Pieter Wuille <pieter.wuille@gmail.com>\n+          Jonas Nick <jonasd.nick@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0341\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2020-01-19\n+  License: BSD-3-Clause\n+  Requires: 340\n+  Post-History: 2019-05-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html [bitcoin-dev] Taproot proposal\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a new SegWit version 1 output type, with spending rules based on Taproot, Schnorr signatures, and Merkle branches.\n+\n+===Copyright===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+===Motivation===\n+\n+This proposal aims to improve privacy, efficiency, and flexibility of Bitcoin's scripting capabilities without adding new security assumptions<ref>'''What does not adding security assumptions mean?''' Unforgeability of signatures is a necessary requirement to prevent theft. At least when treating script execution as a digital signature scheme itself, unforgeability can be [https://github.com/apoelstra/taproot proven] in the Random Oracle Model assuming the Discrete Logarithm problem is hard. A [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 proof] for unforgeability of ECDSA in the current script system needs non-standard assumptions on top of that. Note that it is hard in general to model exactly what security for script means, as it depends on the policies and protocols used by wallet software.</ref>. Specifically, it seeks to minimize how much information about the spendability conditions of a transaction output is revealed on chain at creation or spending time and to add a number of upgrade mechanisms, while fixing a few minor but long-standing issues.\n+\n+==Design==\n+\n+A number of related ideas for improving Bitcoin's scripting capabilities have been previously proposed: Schnorr signatures ([https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki BIP340]), Merkle branches (\"MAST\", [bip-0114.mediawiki BIP114], [bip-0117.mediawiki BIP117]), new sighash modes ([bip-0118.mediawiki BIP118]), new opcodes like CHECKSIGFROMSTACK, [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015614.html Taproot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html Graftroot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016249.html G'root], and [https://bitcointalk.org/index.php?topic=1377298.0 cross-input aggregation].\n+\n+Combining all these ideas in a single proposal would be an extensive change, be hard to review, and likely miss new discoveries that otherwise could have been made along the way. Not all are equally mature as well. For example, cross-input aggregation [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-March/015838.html interacts] in complex ways with upgrade mechanisms, and solutions to that are still [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-October/016461.html in flux]. On the other hand, separating them all into independent upgrades would reduce the efficiency and privacy gains to be had, and wallet and service providers may not be inclined to go through many incremental updates. Therefore, we're faced with a tradeoff between functionality and scope creep. In this design we strike a balance by focusing on the structural script improvements offered by Taproot and Merkle branches, as well as changes necessary to make them usable and efficient. For things like sighashes and opcodes we include fixes for known problems, but exclude new features that can be added independently with no downsides.\n+\n+As a result we choose this combination of technologies:\n+* '''Merkle branches''' let us only reveal the actually executed part of the script to the blockchain, as opposed to all possible ways a script can be executed. Among the various known mechanisms for implementing this, one where the Merkle tree becomes part of the script's structure directly maximizes the space savings, so that approach is chosen.\n+* '''Taproot''' on top of that lets us merge the traditionally separate pay-to-pubkey and pay-to-scripthash policies, making all outputs spendable by either a key or (optionally) a script, and indistinguishable from each other. As long as the key-based spending path is used for spending, it is not revealed whether a script path was permitted as well, resulting in space savings and an increase in scripting privacy at spending time.\n+* Taproot's advantages become apparent under the assumption that most applications involve outputs that could be spent by all parties agreeing. That's where '''Schnorr''' signatures come in, as they permit [https://eprint.iacr.org/2018/068 key aggregation]: a public key can be constructed from multiple participant public keys, and which requires cooperation between all participants to sign for. Such multi-party public keys and signatures are indistinguishable from their single-party equivalents. This means that with taproot most applications can use the key-based spending path, which is both efficient and private. This can be generalized to arbitrary M-of-N policies, as Schnorr signatures support threshold signing, at the cost of more complex setup protocols.\n+* As Schnorr signatures also permit '''batch validation''', allowing multiple signatures to be validated together more efficiently than validating each one independently, we make sure all parts of the design are compatible with this.\n+* Where unused bits appear as a result of the above changes, they are reserved for mechanisms for '''future extensions'''. As a result, every script in the Merkle tree has an associated version such that new script versions can be introduced with a soft fork while remaining compatible with BIP 341. Additionally, future soft forks can make use of the currently unused <code>annex</code> in the witness (see [bip-0341.mediawiki#Rationale BIP341]).\n+* While the core semantics of the '''signature hashing algorithm''' are not changed, a number of improvements are included in this proposal. The new signature hashing algorithm fixes the verification capabilities of offline signing devices by including amount and scriptPubKey in the signature message, avoids unnecessary hashing, uses '''tagged hashes''' and defines a default sighash byte.\n+* The '''public key is directly included in the output''' in contrast to typical earlier constructions which store a hash of the public key or script in the output. This has the same cost for senders and is more space efficient overall if the key-based spending path is taken. <ref>'''Why is the public key directly included in the output?''' While typical earlier constructions store a hash of a script or a public key in the output, this is rather wasteful when a public key is always involved. To guarantee batch verifiability, the public key must be known to every verifier, and thus only revealing its hash as an output would imply adding an additional 32 bytes to the witness. Furthermore, to maintain [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012198.html 128-bit collision security] for outputs, a 256-bit hash would be required anyway, which is comparable in size (and thus in cost for senders) to revealing the public key directly. While the usage of public key hashes is often said to protect against ECDLP breaks or quantum computers, this protection is very weak at best: transactions are not protected while being confirmed, and a very [https://twitter.com/pwuille/status/1108097835365339136 large portion] of the currency's supply is not under such protection regardless. Actual resistance to such systems can be introduced by relying on different cryptographic assumptions, but this proposal focuses on improvements that do not change the security model.</ref>\n+\n+Informally, the resulting design is as follows: a new witness version is added (version 1), whose programs consist of 32-byte encodings of points ''Q''. ''Q'' is computed as ''P + hash(P||m)G'' for a public key ''P'', and the root ''m'' of a Merkle tree whose leaves consist of a version number and a script. These outputs can be spent directly by providing a signature for ''Q'', or indirectly by revealing ''P'', the script and leaf version, inputs that satisfy the script, and a Merkle path that proves ''Q'' committed to that leaf. All hashes in this construction (the hash for computing ''Q'' from ''P'', the hashes inside the Merkle tree's inner nodes, and the signature hashes used) are tagged to guarantee domain separation.\n+\n+== Specification ==\n+\n+This section specifies the Taproot consensus rules. Validity is defined by exclusion: a block or transaction is valid if no condition exists that marks it failed.\n+\n+The notation below follows that of [bip-0340.mediawiki#design BIP340]. This includes the ''hash<sub>tag</sub>(x)'' notation to refer to ''SHA256(SHA256(tag) || SHA256(tag) || x)''. To the best of the authors' knowledge, no existing use of SHA256 in Bitcoin feeds it a message that starts with two single SHA256 outputs, making collisions between ''hash<sub>tag</sub>'' with other hashes extremely unlikely.\n+\n+=== Script validation rules ===\n+\n+A Taproot output is a native SegWit output (see [bip-0141.mediawiki BIP141]) with version number 1, and a 32-byte witness program.\n+The following rules only apply when such an output is being spent. Any other outputs, including version 1 outputs with lengths other than 32 bytes, or P2SH-wrapped version 1 outputs<ref>'''Why is P2SH-wrapping not supported?''' Using P2SH-wrapped outputs only provides 80-bit collision security due to the use of a 160-bit hash. This is considered low, and becomes a security risk whenever the output includes data from more than a single party (public keys, hashes, ...).</ref>, remain unencumbered.\n+\n+* Let ''q'' be the 32-byte array containing the witness program (the second push in the scriptPubKey) which represents a public key according to [bip-0340.mediawiki#design BIP340].\n+* Fail if the witness stack has 0 elements.\n+* If there are at least two witness elements, and the first byte of the last element is 0x50<ref>'''Why is the first byte of the annex <code>0x50</code>?''' The <code>0x50</code> is chosen as it could not be confused with a valid P2WPKH or P2WSH spending. As the control block's initial byte's lowest bit is used to indicate the public key's Y squareness, each leaf version needs an even byte value and the immediately following odd byte value that are both not yet used in P2WPKH or P2WSH spending. To indicate the annex, only an \"unpaired\" available byte is necessary like <code>0x50</code>. This choice maximizes the available options for future script versions.</ref>, this last element is called ''annex'' ''a''<ref>'''What is the purpose of the annex?''' The annex is a reserved space for future extensions, such as indicating the validation costs of computationally expensive new opcodes in a way that is recognizable without knowing the scriptPubKey of the output being spent. Until the meaning of this field is defined by another softfork, users SHOULD NOT include <code>annex</code> in transactions, or it may lead to PERMANENT FUND LOSS.</ref> and is removed from the witness stack. The annex (or the lack of thereof) is always covered by the signature and contributes to transaction weight, but is otherwise ignored during taproot validation.\n+* If there is exactly one element left in the witness stack, key path spending is used:\n+** The single witness stack element is interpreted as the signature and must be valid (see the next section) for the public key ''q'' (see the next subsection).\n+* If there are at least two witness elements left, script path spending is used:\n+** Call the second-to-last stack element ''s'', the script.\n+** The last stack element is called the control block ''c'', and must have length ''33 + 32m'', for a value of ''m'' that is an integer between 0 and 128<ref>'''Why is the Merkle path length limited to 128?''' The optimally space-efficient Merkle tree can be constructed based on the probabilities of the scripts in the leaves, using the Huffman algorithm. This algorithm will construct branches with lengths approximately equal to ''log<sub>2</sub>(1/probability)'', but to have branches longer than 128 you would need to have scripts with an execution chance below 1 in ''2<sup>128</sup>''. As that is our security bound, scripts that truly have such a low chance can probably be removed entirely.</ref>, inclusive. Fail if it does not have such a length.\n+** Let ''p = c[1:33]'' and let ''P = point(p)'' where ''point'' and ''[:]'' are defined as in [bip-0340.mediawiki#design BIP340]. Fail if this point is not on the curve.\n+** Let ''v = c[0] & 0xfe'' and call it the ''leaf version''<ref>'''What constraints are there on the leaf version?''' First, the leaf version cannot be odd as ''c[0] & 0xfe'' will always be even, and cannot be ''0x50'' as that would result in ambiguity with the annex. In addition, in order to support some forms of static analysis that rely on being able to identify script spends without access to the output being spent, it is recommended to avoid using any leaf versions that would conflict with a valid first byte of either a valid P2WPKH pubkey or a valid P2WSH script (that is, both ''v'' and ''v | 1'' should be an undefined, invalid or disabled opcode or an opcode that is not valid as the first opcode). The values that comply to this rule are the 32 even values between ''0xc0'' and ''0xfe'' and also ''0x66'', ''0x7e'', ''0x80'', ''0x84'', ''0x96'', ''0x98'', ''0xba'', ''0xbc'', ''0xbe''. Note also that this constraint implies that leaf versions should be shared amongst different witness versions, as knowing the witness version requires access to the output being spent.</ref>.\n+** Let ''k<sub>0</sub> = hash<sub>TapLeaf</sub>(v || compact_size(size of s) || s)''; also call it the ''tapleaf hash''.\n+** For ''j'' in ''[0,1,...,m-1]'':\n+*** Let ''e<sub>j</sub> = c[33+32j:65+32j]''.\n+*** Let ''k<sub>j+1</sub> depend on whether ''k<sub>j</sub> < e<sub>j</sub>'' (lexicographically)<ref>'''Why are child elements sorted before hashing in the Merkle tree?''' By doing so, it is not necessary to reveal the left/right directions along with the hashes in revealed Merkle branches. This is possible because we do not actually care about the position of specific scripts in the tree; only that they are actually committed to.</ref>:\n+**** If ''k<sub>j</sub> < e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(k<sub>j</sub> || e<sub>j</sub>)''<ref>'''Why not use a more efficient hash construction for inner Merkle nodes?''' The chosen construction does require two invocations of the SHA256 compression functions, one of which can be avoided in theory (see [bip-0098.mediawiki BIP98]). However, it seems preferable to stick to constructions that can be implemented using standard cryptographic primitives, both for implementation simplicity and analyzability. If necessary, a significant part of the second compression function can be optimized out by [https://github.com/bitcoin/bitcoin/pull/13191 specialization] for 64-byte inputs.</ref>.\n+**** If ''k<sub>j</sub> &ge; e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(e<sub>j</sub> || k<sub>j</sub>)''.\n+** Let ''t = hash<sub>TapTweak</sub>(p || k<sub>m</sub>)''.\n+** If ''t &ge; 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141'' (order of secp256k1), fail.\n+** Let ''Q = point(q) if (c[0] & 1) = 1 and -point(q) otherwise''<ref>'''Why is it necessary to reveal a bit to indicate if the point represented by the output public key is negated in a script path spend?''' The ''point'' function (defined in [bip-0340.mediawiki#design BIP340]) always constructs a point with a square Y coordinate, but because ''Q'' is constructed by adding the taproot tweak to the internal public key ''P'', it cannot easily be guaranteed that ''Q'' in fact has such a Y coordinate. Therefore, before verifying the taproot tweak the original point is restored by negating if necessary. We can not ignore the Y coordinate because it would prevent batch verification. Trying out multiple internal keys until there's such a ''Q'' is possible but undesirable and unnecessary since this information about the Y coordinate only consumes an unused bit.</ref>. Fail if this point is not on the curve.\n+** If ''Q &ne; P + int(t)G'', fail.\n+** Execute the script, according to the applicable script rules<ref>'''What are the applicable script rules in script path spends?''' [bip-0342.mediawiki#design BIP342] specifies validity rules that apply for leaf version 0xc0, but future proposals can introduce rules for other leaf versions.</ref>, using the witness stack elements excluding the script ''s'', the control block ''c'', and the annex ''a'' if present, as initial stack.\n+\n+''q'' is referred to as ''taproot output key'' and ''p'' as ''taproot internal key''.\n+\n+=== Signature validation rules ===\n+\n+We first define a reusable common signature message calculation function, followed by the actual signature validation as it's used in key path spending.\n+\n+==== Common signature message ====\n+\n+The function ''SigMsg(hash_type, ext_flag)'' computes the message being signed as a byte array. It is implicitly also a function of the spending transaction and the outputs it spends, but these are not listed to keep notation simple. \n+\n+The parameter ''hash_type'' is an 8-bit unsigned value. The <code>SIGHASH</code> encodings from the legacy script system are reused, including <code>SIGHASH_ALL</code>, <code>SIGHASH_NONE</code>, <code>SIGHASH_SINGLE</code>, and <code>SIGHASH_ANYONECANPAY</code>, plus the default ''hash_type'' value ''0x00'' which results in signing over the whole transaction just as for <code>SIGHASH_ALL</code>. The following restrictions apply, which cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'', ''0x03'', ''0x81'', ''0x82'', or ''0x83''<ref>'''Why reject unknown ''hash_type'' values?''' By doing so, it is easier to reason about the worst case amount of signature hashing an implementation with adequate caching must perform.</ref>).\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+The parameter ''ext_flag'' is an integer in range 0-127, and is used for indicating (in the message) that extensions are added at the end of the message<ref>'''What extensions use the ''ext_flag'' mechanism?''' [bip-0342.mediawiki#design BIP342] reuses the same common signature message algorithm, but adds BIP342-specific data at the end, which is indicated using ''ext_flag = 1''.</ref>.\n+\n+If the parameters take acceptable values, the message is the concatenation of the following data, in order(with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If the ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all input amounts.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+** If ''hash_type & 0x80'' equals <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** ''amount'' (8): value of the previous output spent by this input.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+The total length of ''SigMsg()'' is at most ''209'' bytes<ref>'''What is the output length of ''SigMsg()''?''' The total length of ''SigMsg()'' can be computed using the following formula: ''177 - is_anyonecanpay * 52 - is_none * 32 + has_annex * 32''.</ref>. Note that this does not include the size of sub-hashes such as ''sha_prevouts'', which may be cached across signatures of the same transaction.\n+\n+In summary, the semantics of the [bip-0143.mediawiki BIP143] sighash types remain unchanged, except the following:\n+# The way and order of serialization is changed.<ref>'''Why is the serialization in the signature message changed?''' Hashes that go into the signature message and the message itself are now computed with a single SHA256 invocation instead of double SHA256. There is no expected security improvement by doubling SHA256 because this only protects against length-extension attacks against SHA256 which are not a concern for signature messages because there is no secret data. Therefore doubling SHA256 is a waste of resources. The message computation now follows a logical order with transaction level data first, then input data and output data. This allows to efficiently cache the transaction part of the message across different inputs using the SHA256 midstate. Additionally, sub-hashes can be skipped when calculating the message (for example `sha_prevouts` if <code>SIGHASH_ANYONECANPAY</code> is set) instead of setting them to zero and then hashing them as in BIP143. Despite that, collisions are made impossible by committing to the length of the data (implicit in ''hash_type'' and ''spend_type'') before the variable length data.</ref>\n+# The signature message commits to the ''scriptPubKey''<ref>'''Why does the signature message commit to the ''scriptPubKey''?''' This prevents lying to offline signing devices about output being spent, even when the actually executed script (''scriptCode'' in BIP143) is correct. This means it's possible to compactly prove to a hardware wallet what (unused) execution paths existed.</ref>.\n+# If the <code>SIGHASH_ANYONECANPAY</code> flag is not set, the message commits to the amounts of ''all'' transaction inputs.<ref>'''Why does the signature message commit to the amounts of all transaction inputs?''' This eliminates the possibility to lie to offline signing devices about the fee of a transaction.</ref>\n+# The signature message commits to all input ''nSequence'' if <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code> are set (unless <code>SIGHASH_ANYONECANPAY</code> is set as well).<ref>'''Why does the signature message commit to all input ''nSequence'' if <code>SIGHASH_SINGLE</code> or <code>SIGHASH_NONE</code> are set?''' Because setting them already makes the message commit to the <code>prevouts</code> part of all transaction inputs, it is not useful to treat the ''nSequence'' any different. Moreover, this change makes ''nSequence'' consistent with the view that <code>SIGHASH_SINGLE</code> and <code>SIGHASH_NONE</code> only modify the signature message with respect to transaction outputs and not inputs.</ref>\n+# The signature message includes commitments to the taproot-specific data ''spend_type'' and ''annex'' (if present).\n+\n+==== Taproot key path spending signature validation ====\n+\n+To validate a signature ''sig'' with public key ''q'':\n+* If the ''sig'' is 64 bytes long, return ''Verify(q, hash<sub>TapSigHash</sub>(0x00 || SigMsg(0x00, 0)), sig)''<ref>'''Why is the input to ''hash<sub>TapSigHash</sub>'' prefixed with 0x00?''' This prefix is called the sighash epoch, and allows reusing the ''hash<sub>TapSigHash</sub>'' tagged hash in future signature algorithms that make invasive changes to how hashing is performed (as opposed to the ''ext_flag'' mechanism that is used for incremental extensions). An alternative is having them use a different tag, but supporting a growing number of tags may become undesirable.</ref>, where ''Verify'' is defined in [bip-0340.mediawiki#design BIP340].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00<ref>'''Why can the <code>hash_type</code> not be <code>0x00</code> in 65-byte signatures?''' Permitting that would enable malleating (by third parties, including miners) 64-byte signatures into 65-byte ones, resulting in a different `wtxid` and a different fee rate than the creator intended</ref> and Verify(q, hash<sub>TapSighash</sub>(0x00 || SigMsg(sig[64], 0)), sig[0:64])''.\n+* Otherwise, fail<ref>'''Why permit two signature lengths?''' By making the most common type of <code>hash_type</code> implicit, a byte can often be saved.</ref>.\n+\n+== Constructing and spending Taproot outputs ==\n+\n+This section discusses how to construct and spend Taproot outputs. It only affects wallet software that chooses to implement receiving and spending,\n+and is not consensus critical in any way.\n+\n+Conceptually, every Taproot output corresponds to a combination of a single public key condition (the internal key), and zero or more general conditions encoded in scripts organized in a tree.\n+Satisfying any of these conditions is sufficient to spend the output.\n+\n+'''Initial steps''' The first step is determining what the internal key and the organization of the rest of the scripts should be. The specifics are likely application dependent, but here are some general guidelines:\n+* When deciding between scripts with conditionals (<code>OP_IF</code> etc.) and splitting them up into multiple scripts (each corresponding to one execution path through the original script), it is generally preferable to pick the latter.\n+* When a single condition requires signatures with multiple keys, key aggregation techniques like MuSig can be used to combine them into a single key. The details are out of scope for this document, but note that this may complicate the signing procedure.\n+* If one or more of the spending conditions consist of just a single key (after aggregation), the most likely one should be made the internal key. If no such condition exists, it may be worthwhile adding one that consists of an aggregation of all keys participating in all scripts combined; effectively adding an \"everyone agrees\" branch. If that is inacceptable, pick as internal key a point with unknown discrete logarithm. One example of such a point is ''H = point(0x0250929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0)'' which is [https://github.com/ElementsProject/secp256k1-zkp/blob/11af7015de624b010424273be3d91f117f172c82/src/modules/rangeproof/main_impl.h#L16 constructed] by taking the hash of the standard uncompressed encoding of the [https://www.secg.org/sec2-v2.pdf secp256k1] base point ''G'' as X coordinate. In order to avoid leaking the information that key path spending is not possible it is recommended to pick a fresh integer ''r'' in the range ''0...n-1'' uniformly at random and use ''H + rG'' as internal key. It is possible to prove that this internal key does not have a known discrete logarithm with respect to ''G'' by revealing ''r'' to a verifier who can then reconstruct how the internal key was created.\n+* If the spending conditions do not require a script path, the output key should commit to an unspendable script path instead of having no script path. This can be achieved by computing the output key point as ''Q = P + int(hash<sub>TapTweak</sub>(bytes(P)))G''. <ref>'''Why should the output key always have a taproot commitment, even if there is no script path?'''\n+If the taproot output key is an aggregate of keys, there is the possibility for a malicious party to add a script path without being noticed by the other parties.\n+This allows to bypass the multiparty policy and to steal the coin.\n+MuSig key aggregation does not have this issue because it already causes the internal key to be randomized.\n+\n+The attack works as follows: Assume Alice and Mallory want to aggregate their keys into a taproot output key without a script path.\n+In order to prevent key cancellation and related attacks they use [https://eprint.iacr.org/2018/483.pdf MSDL-pop] instead of MuSig.\n+The MSDL-pop protocol requires all parties to provide a proof of possession of their corresponding secret key and the aggregated key is just the sum of the individual keys.\n+After Mallory receives Alice's key ''A'', Mallory creates ''M = M<sub>0</sub> + int(t)G'' where ''M<sub>0</sub>'' is Mallory's original key and ''t'' allows a script path spend with internal key ''P = A + M<sub>0</sub>'' and a script that only contains Mallory's key.\n+Mallory sends a proof of possession of ''M'' to Alice and both parties compute output key ''Q = A + M = P + int(t)G''.\n+Alice will not be able to notice the script path, but Mallory can unilaterally spend any coin with output key ''Q''.\n+</ref>\n+* The remaining scripts should be organized into the leaves of a binary tree. This can be a balanced tree if each of the conditions these scripts correspond to are equally likely. If probabilities for each condition are known, consider constructing the tree as a Huffman tree.\n+\n+'''Computing the output script''' Once the spending conditions are split into an internal key <code>internal_pubkey</code> and a binary tree whose leaves are (leaf_version, script) tuples, the output script can be computed using the Python3 algorithms below. These algorithms take advantage of helper functions from the [bip-0340/referency.py BIP340 reference code] for integer conversion, point multiplication, and tagged hashes.\n+\n+First, we define <code>taproot_tweak_pubkey</code> for 32-byte [bip-0340.mediawiki#design BIP340] public key arrays.\n+In addition to the tweaked public key byte array, the function returns a boolean indicating whether the public key represents the tweaked point or its negation.\n+This will be required for spending the output with a script path.\n+In order to allow spending with the key path, we define <code>taproot_tweak_seckey</code> to compute the secret key for a tweaked public key.\n+For any byte string <code>h</code> it holds that <code>taproot_tweak_pubkey(pubkey_gen(seckey), h)[0] == pubkey_gen(taproot_tweak_seckey(seckey, h))</code>.\n+\n+<source lang=\"python\">\n+def taproot_tweak_pubkey(pubkey, h):\n+    t = int_from_bytes(tagged_hash(\"TapTweak\", pubkey + h))\n+    if t >= SECP256K1_ORDER:\n+        raise ValueError",
      "path": "bip-0341.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "in_reply_to_id": 368440999,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "arghh meant to edit not delete,\r\nI originally wrote that this is somewhat equivalent to breaking SHA256 or guessing Satoshi's private keys(probably easier). \r\nbut then I realized that in schnorr signing we do mod order to \"solve this\". so I'm not sure why the difference @sipa ?",
      "created_at": "2020-01-20T13:32:07Z",
      "updated_at": "2020-01-20T15:35:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r368548537",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368548537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368610697",
      "pull_request_review_id": 345390448,
      "id": 368610697,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMDY5Nw==",
      "diff_hunk": "@@ -62,11 +62,11 @@ encodings and operations.\n \n Since we would like to avoid the fragility that comes with short hashes, the ''e'' variant does not provide significant advantages. We choose the ''R''-option, which supports batch verification. \n \n-'''Key prefixing''' Using the verification rule above directly makes Schnorr signatures vulnerable to \"related-key attacks\" in which a third party can convert a signature ''(R, s)'' for public key ''P'' into a signature ''(R, s + a⋅hash(R || m))'' for public key ''P + a⋅G'' and the same message ''m'', for any given additive tweak ''a'' to the signing key. This would render signatures insecure when keys are generated using [bip-0032.mediawiki#public-parent-key--public-child-key BIP32's unhardened derivation] and other methods that rely on additive tweaks to existing keys such as Taproot.\n+'''Key prefixing''' Using the verification rule above directly makes Schnorr signatures vulnerable to \"related-key attacks\" in which a third party can convert a signature ''(R, s)'' for public key ''P'' into a signature ''(R, s + a⋅hash(R || m))'' for public key ''P + a⋅G'' and the same message ''m'', for any given additive tweak ''a'' to the signing key. This would render signatures insecure when keys are generated using [bip-0032.mediawiki BIP32's unhardened derivation] and other methods that rely on additive tweaks to existing keys such as Taproot.",
      "path": "bip-0340.mediawiki",
      "position": null,
      "original_position": 5,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "in_reply_to_id": 368334543,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed.",
      "created_at": "2020-01-20T15:38:45Z",
      "updated_at": "2020-01-20T15:38:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r368610697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368610697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368613090",
      "pull_request_review_id": 345393516,
      "id": 368613090,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMzA5MA==",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+<pre>\n+  BIP: 341\n+  Layer: Consensus (soft fork)\n+  Title: Taproot: SegWit version 1 spending rules\n+  Author: Pieter Wuille <pieter.wuille@gmail.com>\n+          Jonas Nick <jonasd.nick@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0341\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2020-01-19\n+  License: BSD-3-Clause\n+  Requires: 340\n+  Post-History: 2019-05-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html [bitcoin-dev] Taproot proposal\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a new SegWit version 1 output type, with spending rules based on Taproot, Schnorr signatures, and Merkle branches.\n+\n+===Copyright===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+===Motivation===\n+\n+This proposal aims to improve privacy, efficiency, and flexibility of Bitcoin's scripting capabilities without adding new security assumptions<ref>'''What does not adding security assumptions mean?''' Unforgeability of signatures is a necessary requirement to prevent theft. At least when treating script execution as a digital signature scheme itself, unforgeability can be [https://github.com/apoelstra/taproot proven] in the Random Oracle Model assuming the Discrete Logarithm problem is hard. A [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 proof] for unforgeability of ECDSA in the current script system needs non-standard assumptions on top of that. Note that it is hard in general to model exactly what security for script means, as it depends on the policies and protocols used by wallet software.</ref>. Specifically, it seeks to minimize how much information about the spendability conditions of a transaction output is revealed on chain at creation or spending time and to add a number of upgrade mechanisms, while fixing a few minor but long-standing issues.\n+\n+==Design==\n+\n+A number of related ideas for improving Bitcoin's scripting capabilities have been previously proposed: Schnorr signatures ([https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki BIP340]), Merkle branches (\"MAST\", [bip-0114.mediawiki BIP114], [bip-0117.mediawiki BIP117]), new sighash modes ([bip-0118.mediawiki BIP118]), new opcodes like CHECKSIGFROMSTACK, [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015614.html Taproot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html Graftroot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016249.html G'root], and [https://bitcointalk.org/index.php?topic=1377298.0 cross-input aggregation].\n+\n+Combining all these ideas in a single proposal would be an extensive change, be hard to review, and likely miss new discoveries that otherwise could have been made along the way. Not all are equally mature as well. For example, cross-input aggregation [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-March/015838.html interacts] in complex ways with upgrade mechanisms, and solutions to that are still [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-October/016461.html in flux]. On the other hand, separating them all into independent upgrades would reduce the efficiency and privacy gains to be had, and wallet and service providers may not be inclined to go through many incremental updates. Therefore, we're faced with a tradeoff between functionality and scope creep. In this design we strike a balance by focusing on the structural script improvements offered by Taproot and Merkle branches, as well as changes necessary to make them usable and efficient. For things like sighashes and opcodes we include fixes for known problems, but exclude new features that can be added independently with no downsides.\n+\n+As a result we choose this combination of technologies:\n+* '''Merkle branches''' let us only reveal the actually executed part of the script to the blockchain, as opposed to all possible ways a script can be executed. Among the various known mechanisms for implementing this, one where the Merkle tree becomes part of the script's structure directly maximizes the space savings, so that approach is chosen.\n+* '''Taproot''' on top of that lets us merge the traditionally separate pay-to-pubkey and pay-to-scripthash policies, making all outputs spendable by either a key or (optionally) a script, and indistinguishable from each other. As long as the key-based spending path is used for spending, it is not revealed whether a script path was permitted as well, resulting in space savings and an increase in scripting privacy at spending time.\n+* Taproot's advantages become apparent under the assumption that most applications involve outputs that could be spent by all parties agreeing. That's where '''Schnorr''' signatures come in, as they permit [https://eprint.iacr.org/2018/068 key aggregation]: a public key can be constructed from multiple participant public keys, and which requires cooperation between all participants to sign for. Such multi-party public keys and signatures are indistinguishable from their single-party equivalents. This means that with taproot most applications can use the key-based spending path, which is both efficient and private. This can be generalized to arbitrary M-of-N policies, as Schnorr signatures support threshold signing, at the cost of more complex setup protocols.\n+* As Schnorr signatures also permit '''batch validation''', allowing multiple signatures to be validated together more efficiently than validating each one independently, we make sure all parts of the design are compatible with this.\n+* Where unused bits appear as a result of the above changes, they are reserved for mechanisms for '''future extensions'''. As a result, every script in the Merkle tree has an associated version such that new script versions can be introduced with a soft fork while remaining compatible with BIP 341. Additionally, future soft forks can make use of the currently unused <code>annex</code> in the witness (see [bip-0341.mediawiki#Rationale BIP341]).\n+* While the core semantics of the '''signature hashing algorithm''' are not changed, a number of improvements are included in this proposal. The new signature hashing algorithm fixes the verification capabilities of offline signing devices by including amount and scriptPubKey in the signature message, avoids unnecessary hashing, uses '''tagged hashes''' and defines a default sighash byte.\n+* The '''public key is directly included in the output''' in contrast to typical earlier constructions which store a hash of the public key or script in the output. This has the same cost for senders and is more space efficient overall if the key-based spending path is taken. <ref>'''Why is the public key directly included in the output?''' While typical earlier constructions store a hash of a script or a public key in the output, this is rather wasteful when a public key is always involved. To guarantee batch verifiability, the public key must be known to every verifier, and thus only revealing its hash as an output would imply adding an additional 32 bytes to the witness. Furthermore, to maintain [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012198.html 128-bit collision security] for outputs, a 256-bit hash would be required anyway, which is comparable in size (and thus in cost for senders) to revealing the public key directly. While the usage of public key hashes is often said to protect against ECDLP breaks or quantum computers, this protection is very weak at best: transactions are not protected while being confirmed, and a very [https://twitter.com/pwuille/status/1108097835365339136 large portion] of the currency's supply is not under such protection regardless. Actual resistance to such systems can be introduced by relying on different cryptographic assumptions, but this proposal focuses on improvements that do not change the security model.</ref>\n+\n+Informally, the resulting design is as follows: a new witness version is added (version 1), whose programs consist of 32-byte encodings of points ''Q''. ''Q'' is computed as ''P + hash(P||m)G'' for a public key ''P'', and the root ''m'' of a Merkle tree whose leaves consist of a version number and a script. These outputs can be spent directly by providing a signature for ''Q'', or indirectly by revealing ''P'', the script and leaf version, inputs that satisfy the script, and a Merkle path that proves ''Q'' committed to that leaf. All hashes in this construction (the hash for computing ''Q'' from ''P'', the hashes inside the Merkle tree's inner nodes, and the signature hashes used) are tagged to guarantee domain separation.\n+\n+== Specification ==\n+\n+This section specifies the Taproot consensus rules. Validity is defined by exclusion: a block or transaction is valid if no condition exists that marks it failed.\n+\n+The notation below follows that of [bip-0340.mediawiki#design BIP340]. This includes the ''hash<sub>tag</sub>(x)'' notation to refer to ''SHA256(SHA256(tag) || SHA256(tag) || x)''. To the best of the authors' knowledge, no existing use of SHA256 in Bitcoin feeds it a message that starts with two single SHA256 outputs, making collisions between ''hash<sub>tag</sub>'' with other hashes extremely unlikely.\n+\n+=== Script validation rules ===\n+\n+A Taproot output is a native SegWit output (see [bip-0141.mediawiki BIP141]) with version number 1, and a 32-byte witness program.\n+The following rules only apply when such an output is being spent. Any other outputs, including version 1 outputs with lengths other than 32 bytes, or P2SH-wrapped version 1 outputs<ref>'''Why is P2SH-wrapping not supported?''' Using P2SH-wrapped outputs only provides 80-bit collision security due to the use of a 160-bit hash. This is considered low, and becomes a security risk whenever the output includes data from more than a single party (public keys, hashes, ...).</ref>, remain unencumbered.\n+\n+* Let ''q'' be the 32-byte array containing the witness program (the second push in the scriptPubKey) which represents a public key according to [bip-0340.mediawiki#design BIP340].\n+* Fail if the witness stack has 0 elements.\n+* If there are at least two witness elements, and the first byte of the last element is 0x50<ref>'''Why is the first byte of the annex <code>0x50</code>?''' The <code>0x50</code> is chosen as it could not be confused with a valid P2WPKH or P2WSH spending. As the control block's initial byte's lowest bit is used to indicate the public key's Y squareness, each leaf version needs an even byte value and the immediately following odd byte value that are both not yet used in P2WPKH or P2WSH spending. To indicate the annex, only an \"unpaired\" available byte is necessary like <code>0x50</code>. This choice maximizes the available options for future script versions.</ref>, this last element is called ''annex'' ''a''<ref>'''What is the purpose of the annex?''' The annex is a reserved space for future extensions, such as indicating the validation costs of computationally expensive new opcodes in a way that is recognizable without knowing the scriptPubKey of the output being spent. Until the meaning of this field is defined by another softfork, users SHOULD NOT include <code>annex</code> in transactions, or it may lead to PERMANENT FUND LOSS.</ref> and is removed from the witness stack. The annex (or the lack of thereof) is always covered by the signature and contributes to transaction weight, but is otherwise ignored during taproot validation.\n+* If there is exactly one element left in the witness stack, key path spending is used:\n+** The single witness stack element is interpreted as the signature and must be valid (see the next section) for the public key ''q'' (see the next subsection).\n+* If there are at least two witness elements left, script path spending is used:\n+** Call the second-to-last stack element ''s'', the script.\n+** The last stack element is called the control block ''c'', and must have length ''33 + 32m'', for a value of ''m'' that is an integer between 0 and 128<ref>'''Why is the Merkle path length limited to 128?''' The optimally space-efficient Merkle tree can be constructed based on the probabilities of the scripts in the leaves, using the Huffman algorithm. This algorithm will construct branches with lengths approximately equal to ''log<sub>2</sub>(1/probability)'', but to have branches longer than 128 you would need to have scripts with an execution chance below 1 in ''2<sup>128</sup>''. As that is our security bound, scripts that truly have such a low chance can probably be removed entirely.</ref>, inclusive. Fail if it does not have such a length.\n+** Let ''p = c[1:33]'' and let ''P = point(p)'' where ''point'' and ''[:]'' are defined as in [bip-0340.mediawiki#design BIP340]. Fail if this point is not on the curve.\n+** Let ''v = c[0] & 0xfe'' and call it the ''leaf version''<ref>'''What constraints are there on the leaf version?''' First, the leaf version cannot be odd as ''c[0] & 0xfe'' will always be even, and cannot be ''0x50'' as that would result in ambiguity with the annex. In addition, in order to support some forms of static analysis that rely on being able to identify script spends without access to the output being spent, it is recommended to avoid using any leaf versions that would conflict with a valid first byte of either a valid P2WPKH pubkey or a valid P2WSH script (that is, both ''v'' and ''v | 1'' should be an undefined, invalid or disabled opcode or an opcode that is not valid as the first opcode). The values that comply to this rule are the 32 even values between ''0xc0'' and ''0xfe'' and also ''0x66'', ''0x7e'', ''0x80'', ''0x84'', ''0x96'', ''0x98'', ''0xba'', ''0xbc'', ''0xbe''. Note also that this constraint implies that leaf versions should be shared amongst different witness versions, as knowing the witness version requires access to the output being spent.</ref>.\n+** Let ''k<sub>0</sub> = hash<sub>TapLeaf</sub>(v || compact_size(size of s) || s)''; also call it the ''tapleaf hash''.\n+** For ''j'' in ''[0,1,...,m-1]'':\n+*** Let ''e<sub>j</sub> = c[33+32j:65+32j]''.\n+*** Let ''k<sub>j+1</sub> depend on whether ''k<sub>j</sub> < e<sub>j</sub>'' (lexicographically)<ref>'''Why are child elements sorted before hashing in the Merkle tree?''' By doing so, it is not necessary to reveal the left/right directions along with the hashes in revealed Merkle branches. This is possible because we do not actually care about the position of specific scripts in the tree; only that they are actually committed to.</ref>:\n+**** If ''k<sub>j</sub> < e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(k<sub>j</sub> || e<sub>j</sub>)''<ref>'''Why not use a more efficient hash construction for inner Merkle nodes?''' The chosen construction does require two invocations of the SHA256 compression functions, one of which can be avoided in theory (see [bip-0098.mediawiki BIP98]). However, it seems preferable to stick to constructions that can be implemented using standard cryptographic primitives, both for implementation simplicity and analyzability. If necessary, a significant part of the second compression function can be optimized out by [https://github.com/bitcoin/bitcoin/pull/13191 specialization] for 64-byte inputs.</ref>.\n+**** If ''k<sub>j</sub> &ge; e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(e<sub>j</sub> || k<sub>j</sub>)''.\n+** Let ''t = hash<sub>TapTweak</sub>(p || k<sub>m</sub>)''.\n+** If ''t &ge; 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141'' (order of secp256k1), fail.\n+** Let ''Q = point(q) if (c[0] & 1) = 1 and -point(q) otherwise''<ref>'''Why is it necessary to reveal a bit to indicate if the point represented by the output public key is negated in a script path spend?''' The ''point'' function (defined in [bip-0340.mediawiki#design BIP340]) always constructs a point with a square Y coordinate, but because ''Q'' is constructed by adding the taproot tweak to the internal public key ''P'', it cannot easily be guaranteed that ''Q'' in fact has such a Y coordinate. Therefore, before verifying the taproot tweak the original point is restored by negating if necessary. We can not ignore the Y coordinate because it would prevent batch verification. Trying out multiple internal keys until there's such a ''Q'' is possible but undesirable and unnecessary since this information about the Y coordinate only consumes an unused bit.</ref>. Fail if this point is not on the curve.\n+** If ''Q &ne; P + int(t)G'', fail.\n+** Execute the script, according to the applicable script rules<ref>'''What are the applicable script rules in script path spends?''' [bip-0342.mediawiki#design BIP342] specifies validity rules that apply for leaf version 0xc0, but future proposals can introduce rules for other leaf versions.</ref>, using the witness stack elements excluding the script ''s'', the control block ''c'', and the annex ''a'' if present, as initial stack.\n+\n+''q'' is referred to as ''taproot output key'' and ''p'' as ''taproot internal key''.\n+\n+=== Signature validation rules ===\n+\n+We first define a reusable common signature message calculation function, followed by the actual signature validation as it's used in key path spending.\n+\n+==== Common signature message ====\n+\n+The function ''SigMsg(hash_type, ext_flag)'' computes the message being signed as a byte array. It is implicitly also a function of the spending transaction and the outputs it spends, but these are not listed to keep notation simple. \n+\n+The parameter ''hash_type'' is an 8-bit unsigned value. The <code>SIGHASH</code> encodings from the legacy script system are reused, including <code>SIGHASH_ALL</code>, <code>SIGHASH_NONE</code>, <code>SIGHASH_SINGLE</code>, and <code>SIGHASH_ANYONECANPAY</code>, plus the default ''hash_type'' value ''0x00'' which results in signing over the whole transaction just as for <code>SIGHASH_ALL</code>. The following restrictions apply, which cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'', ''0x03'', ''0x81'', ''0x82'', or ''0x83''<ref>'''Why reject unknown ''hash_type'' values?''' By doing so, it is easier to reason about the worst case amount of signature hashing an implementation with adequate caching must perform.</ref>).\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+The parameter ''ext_flag'' is an integer in range 0-127, and is used for indicating (in the message) that extensions are added at the end of the message<ref>'''What extensions use the ''ext_flag'' mechanism?''' [bip-0342.mediawiki#design BIP342] reuses the same common signature message algorithm, but adds BIP342-specific data at the end, which is indicated using ''ext_flag = 1''.</ref>.\n+\n+If the parameters take acceptable values, the message is the concatenation of the following data, in order(with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If the ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all input amounts.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+** If ''hash_type & 0x80'' equals <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** ''amount'' (8): value of the previous output spent by this input.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+The total length of ''SigMsg()'' is at most ''209'' bytes<ref>'''What is the output length of ''SigMsg()''?''' The total length of ''SigMsg()'' can be computed using the following formula: ''177 - is_anyonecanpay * 52 - is_none * 32 + has_annex * 32''.</ref>. Note that this does not include the size of sub-hashes such as ''sha_prevouts'', which may be cached across signatures of the same transaction.\n+\n+In summary, the semantics of the [bip-0143.mediawiki BIP143] sighash types remain unchanged, except the following:\n+# The way and order of serialization is changed.<ref>'''Why is the serialization in the signature message changed?''' Hashes that go into the signature message and the message itself are now computed with a single SHA256 invocation instead of double SHA256. There is no expected security improvement by doubling SHA256 because this only protects against length-extension attacks against SHA256 which are not a concern for signature messages because there is no secret data. Therefore doubling SHA256 is a waste of resources. The message computation now follows a logical order with transaction level data first, then input data and output data. This allows to efficiently cache the transaction part of the message across different inputs using the SHA256 midstate. Additionally, sub-hashes can be skipped when calculating the message (for example `sha_prevouts` if <code>SIGHASH_ANYONECANPAY</code> is set) instead of setting them to zero and then hashing them as in BIP143. Despite that, collisions are made impossible by committing to the length of the data (implicit in ''hash_type'' and ''spend_type'') before the variable length data.</ref>\n+# The signature message commits to the ''scriptPubKey''<ref>'''Why does the signature message commit to the ''scriptPubKey''?''' This prevents lying to offline signing devices about output being spent, even when the actually executed script (''scriptCode'' in BIP143) is correct. This means it's possible to compactly prove to a hardware wallet what (unused) execution paths existed.</ref>.\n+# If the <code>SIGHASH_ANYONECANPAY</code> flag is not set, the message commits to the amounts of ''all'' transaction inputs.<ref>'''Why does the signature message commit to the amounts of all transaction inputs?''' This eliminates the possibility to lie to offline signing devices about the fee of a transaction.</ref>\n+# The signature message commits to all input ''nSequence'' if <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code> are set (unless <code>SIGHASH_ANYONECANPAY</code> is set as well).<ref>'''Why does the signature message commit to all input ''nSequence'' if <code>SIGHASH_SINGLE</code> or <code>SIGHASH_NONE</code> are set?''' Because setting them already makes the message commit to the <code>prevouts</code> part of all transaction inputs, it is not useful to treat the ''nSequence'' any different. Moreover, this change makes ''nSequence'' consistent with the view that <code>SIGHASH_SINGLE</code> and <code>SIGHASH_NONE</code> only modify the signature message with respect to transaction outputs and not inputs.</ref>\n+# The signature message includes commitments to the taproot-specific data ''spend_type'' and ''annex'' (if present).\n+\n+==== Taproot key path spending signature validation ====\n+\n+To validate a signature ''sig'' with public key ''q'':\n+* If the ''sig'' is 64 bytes long, return ''Verify(q, hash<sub>TapSigHash</sub>(0x00 || SigMsg(0x00, 0)), sig)''<ref>'''Why is the input to ''hash<sub>TapSigHash</sub>'' prefixed with 0x00?''' This prefix is called the sighash epoch, and allows reusing the ''hash<sub>TapSigHash</sub>'' tagged hash in future signature algorithms that make invasive changes to how hashing is performed (as opposed to the ''ext_flag'' mechanism that is used for incremental extensions). An alternative is having them use a different tag, but supporting a growing number of tags may become undesirable.</ref>, where ''Verify'' is defined in [bip-0340.mediawiki#design BIP340].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00<ref>'''Why can the <code>hash_type</code> not be <code>0x00</code> in 65-byte signatures?''' Permitting that would enable malleating (by third parties, including miners) 64-byte signatures into 65-byte ones, resulting in a different `wtxid` and a different fee rate than the creator intended</ref> and Verify(q, hash<sub>TapSighash</sub>(0x00 || SigMsg(sig[64], 0)), sig[0:64])''.\n+* Otherwise, fail<ref>'''Why permit two signature lengths?''' By making the most common type of <code>hash_type</code> implicit, a byte can often be saved.</ref>.\n+\n+== Constructing and spending Taproot outputs ==\n+\n+This section discusses how to construct and spend Taproot outputs. It only affects wallet software that chooses to implement receiving and spending,\n+and is not consensus critical in any way.\n+\n+Conceptually, every Taproot output corresponds to a combination of a single public key condition (the internal key), and zero or more general conditions encoded in scripts organized in a tree.\n+Satisfying any of these conditions is sufficient to spend the output.\n+\n+'''Initial steps''' The first step is determining what the internal key and the organization of the rest of the scripts should be. The specifics are likely application dependent, but here are some general guidelines:\n+* When deciding between scripts with conditionals (<code>OP_IF</code> etc.) and splitting them up into multiple scripts (each corresponding to one execution path through the original script), it is generally preferable to pick the latter.\n+* When a single condition requires signatures with multiple keys, key aggregation techniques like MuSig can be used to combine them into a single key. The details are out of scope for this document, but note that this may complicate the signing procedure.\n+* If one or more of the spending conditions consist of just a single key (after aggregation), the most likely one should be made the internal key. If no such condition exists, it may be worthwhile adding one that consists of an aggregation of all keys participating in all scripts combined; effectively adding an \"everyone agrees\" branch. If that is inacceptable, pick as internal key a point with unknown discrete logarithm. One example of such a point is ''H = point(0x0250929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0)'' which is [https://github.com/ElementsProject/secp256k1-zkp/blob/11af7015de624b010424273be3d91f117f172c82/src/modules/rangeproof/main_impl.h#L16 constructed] by taking the hash of the standard uncompressed encoding of the [https://www.secg.org/sec2-v2.pdf secp256k1] base point ''G'' as X coordinate. In order to avoid leaking the information that key path spending is not possible it is recommended to pick a fresh integer ''r'' in the range ''0...n-1'' uniformly at random and use ''H + rG'' as internal key. It is possible to prove that this internal key does not have a known discrete logarithm with respect to ''G'' by revealing ''r'' to a verifier who can then reconstruct how the internal key was created.\n+* If the spending conditions do not require a script path, the output key should commit to an unspendable script path instead of having no script path. This can be achieved by computing the output key point as ''Q = P + int(hash<sub>TapTweak</sub>(bytes(P)))G''. <ref>'''Why should the output key always have a taproot commitment, even if there is no script path?'''\n+If the taproot output key is an aggregate of keys, there is the possibility for a malicious party to add a script path without being noticed by the other parties.\n+This allows to bypass the multiparty policy and to steal the coin.\n+MuSig key aggregation does not have this issue because it already causes the internal key to be randomized.\n+\n+The attack works as follows: Assume Alice and Mallory want to aggregate their keys into a taproot output key without a script path.\n+In order to prevent key cancellation and related attacks they use [https://eprint.iacr.org/2018/483.pdf MSDL-pop] instead of MuSig.\n+The MSDL-pop protocol requires all parties to provide a proof of possession of their corresponding secret key and the aggregated key is just the sum of the individual keys.\n+After Mallory receives Alice's key ''A'', Mallory creates ''M = M<sub>0</sub> + int(t)G'' where ''M<sub>0</sub>'' is Mallory's original key and ''t'' allows a script path spend with internal key ''P = A + M<sub>0</sub>'' and a script that only contains Mallory's key.\n+Mallory sends a proof of possession of ''M'' to Alice and both parties compute output key ''Q = A + M = P + int(t)G''.\n+Alice will not be able to notice the script path, but Mallory can unilaterally spend any coin with output key ''Q''.\n+</ref>\n+* The remaining scripts should be organized into the leaves of a binary tree. This can be a balanced tree if each of the conditions these scripts correspond to are equally likely. If probabilities for each condition are known, consider constructing the tree as a Huffman tree.\n+\n+'''Computing the output script''' Once the spending conditions are split into an internal key <code>internal_pubkey</code> and a binary tree whose leaves are (leaf_version, script) tuples, the output script can be computed using the Python3 algorithms below. These algorithms take advantage of helper functions from the [bip-0340/referency.py BIP340 reference code] for integer conversion, point multiplication, and tagged hashes.\n+\n+First, we define <code>taproot_tweak_pubkey</code> for 32-byte [bip-0340.mediawiki#design BIP340] public key arrays.\n+In addition to the tweaked public key byte array, the function returns a boolean indicating whether the public key represents the tweaked point or its negation.\n+This will be required for spending the output with a script path.\n+In order to allow spending with the key path, we define <code>taproot_tweak_seckey</code> to compute the secret key for a tweaked public key.\n+For any byte string <code>h</code> it holds that <code>taproot_tweak_pubkey(pubkey_gen(seckey), h)[0] == pubkey_gen(taproot_tweak_seckey(seckey, h))</code>.\n+\n+<source lang=\"python\">\n+def taproot_tweak_pubkey(pubkey, h):\n+    t = int_from_bytes(tagged_hash(\"TapTweak\", pubkey + h))\n+    if t >= SECP256K1_ORDER:\n+        raise ValueError",
      "path": "bip-0341.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "in_reply_to_id": 368440999,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't care about this condition. The probability of this overflow occurring is 1 in 2^127.65 - similar to our security level (the number of operations an attacker is expected to need to break ECDLP), so we can treat it as effectively impossible.\r\n\r\nMy view is that a specification shouldn't be burdened by addressing impossible events, or at least, it should specify the easiest way of dealing with it that remains correct - anything else is likely very hard or impossible to test anyway. For nonce creation we use a modulo operation, as that is likely how you'd naively implement it if you weren't aware this overflow was possible at all. For the tweak here, the spec mimics the behavior of BIP32 additive key tweaking.\r\n\r\nNote that this way of addressing it is specific to secp256k1, whose order is negligibly close to 2^256. This is not the case for other curves. E.g. on P256, you'd have a 1 in 2^32 chance of overflow, and a more involved way of avoiding it would be warranted.",
      "created_at": "2020-01-20T15:43:37Z",
      "updated_at": "2020-01-20T15:46:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r368613090",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368613090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368615939",
      "pull_request_review_id": 345397181,
      "id": 368615939,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNTkzOQ==",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+<pre>\n+  BIP: 341\n+  Layer: Consensus (soft fork)\n+  Title: Taproot: SegWit version 1 spending rules\n+  Author: Pieter Wuille <pieter.wuille@gmail.com>\n+          Jonas Nick <jonasd.nick@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0341\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2020-01-19\n+  License: BSD-3-Clause\n+  Requires: 340\n+  Post-History: 2019-05-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html [bitcoin-dev] Taproot proposal\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a new SegWit version 1 output type, with spending rules based on Taproot, Schnorr signatures, and Merkle branches.\n+\n+===Copyright===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+===Motivation===\n+\n+This proposal aims to improve privacy, efficiency, and flexibility of Bitcoin's scripting capabilities without adding new security assumptions<ref>'''What does not adding security assumptions mean?''' Unforgeability of signatures is a necessary requirement to prevent theft. At least when treating script execution as a digital signature scheme itself, unforgeability can be [https://github.com/apoelstra/taproot proven] in the Random Oracle Model assuming the Discrete Logarithm problem is hard. A [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 proof] for unforgeability of ECDSA in the current script system needs non-standard assumptions on top of that. Note that it is hard in general to model exactly what security for script means, as it depends on the policies and protocols used by wallet software.</ref>. Specifically, it seeks to minimize how much information about the spendability conditions of a transaction output is revealed on chain at creation or spending time and to add a number of upgrade mechanisms, while fixing a few minor but long-standing issues.\n+\n+==Design==\n+\n+A number of related ideas for improving Bitcoin's scripting capabilities have been previously proposed: Schnorr signatures ([https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki BIP340]), Merkle branches (\"MAST\", [bip-0114.mediawiki BIP114], [bip-0117.mediawiki BIP117]), new sighash modes ([bip-0118.mediawiki BIP118]), new opcodes like CHECKSIGFROMSTACK, [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015614.html Taproot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html Graftroot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016249.html G'root], and [https://bitcointalk.org/index.php?topic=1377298.0 cross-input aggregation].\n+\n+Combining all these ideas in a single proposal would be an extensive change, be hard to review, and likely miss new discoveries that otherwise could have been made along the way. Not all are equally mature as well. For example, cross-input aggregation [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-March/015838.html interacts] in complex ways with upgrade mechanisms, and solutions to that are still [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-October/016461.html in flux]. On the other hand, separating them all into independent upgrades would reduce the efficiency and privacy gains to be had, and wallet and service providers may not be inclined to go through many incremental updates. Therefore, we're faced with a tradeoff between functionality and scope creep. In this design we strike a balance by focusing on the structural script improvements offered by Taproot and Merkle branches, as well as changes necessary to make them usable and efficient. For things like sighashes and opcodes we include fixes for known problems, but exclude new features that can be added independently with no downsides.\n+\n+As a result we choose this combination of technologies:\n+* '''Merkle branches''' let us only reveal the actually executed part of the script to the blockchain, as opposed to all possible ways a script can be executed. Among the various known mechanisms for implementing this, one where the Merkle tree becomes part of the script's structure directly maximizes the space savings, so that approach is chosen.\n+* '''Taproot''' on top of that lets us merge the traditionally separate pay-to-pubkey and pay-to-scripthash policies, making all outputs spendable by either a key or (optionally) a script, and indistinguishable from each other. As long as the key-based spending path is used for spending, it is not revealed whether a script path was permitted as well, resulting in space savings and an increase in scripting privacy at spending time.\n+* Taproot's advantages become apparent under the assumption that most applications involve outputs that could be spent by all parties agreeing. That's where '''Schnorr''' signatures come in, as they permit [https://eprint.iacr.org/2018/068 key aggregation]: a public key can be constructed from multiple participant public keys, and which requires cooperation between all participants to sign for. Such multi-party public keys and signatures are indistinguishable from their single-party equivalents. This means that with taproot most applications can use the key-based spending path, which is both efficient and private. This can be generalized to arbitrary M-of-N policies, as Schnorr signatures support threshold signing, at the cost of more complex setup protocols.\n+* As Schnorr signatures also permit '''batch validation''', allowing multiple signatures to be validated together more efficiently than validating each one independently, we make sure all parts of the design are compatible with this.\n+* Where unused bits appear as a result of the above changes, they are reserved for mechanisms for '''future extensions'''. As a result, every script in the Merkle tree has an associated version such that new script versions can be introduced with a soft fork while remaining compatible with BIP 341. Additionally, future soft forks can make use of the currently unused <code>annex</code> in the witness (see [bip-0341.mediawiki#Rationale BIP341]).\n+* While the core semantics of the '''signature hashing algorithm''' are not changed, a number of improvements are included in this proposal. The new signature hashing algorithm fixes the verification capabilities of offline signing devices by including amount and scriptPubKey in the signature message, avoids unnecessary hashing, uses '''tagged hashes''' and defines a default sighash byte.\n+* The '''public key is directly included in the output''' in contrast to typical earlier constructions which store a hash of the public key or script in the output. This has the same cost for senders and is more space efficient overall if the key-based spending path is taken. <ref>'''Why is the public key directly included in the output?''' While typical earlier constructions store a hash of a script or a public key in the output, this is rather wasteful when a public key is always involved. To guarantee batch verifiability, the public key must be known to every verifier, and thus only revealing its hash as an output would imply adding an additional 32 bytes to the witness. Furthermore, to maintain [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012198.html 128-bit collision security] for outputs, a 256-bit hash would be required anyway, which is comparable in size (and thus in cost for senders) to revealing the public key directly. While the usage of public key hashes is often said to protect against ECDLP breaks or quantum computers, this protection is very weak at best: transactions are not protected while being confirmed, and a very [https://twitter.com/pwuille/status/1108097835365339136 large portion] of the currency's supply is not under such protection regardless. Actual resistance to such systems can be introduced by relying on different cryptographic assumptions, but this proposal focuses on improvements that do not change the security model.</ref>\n+\n+Informally, the resulting design is as follows: a new witness version is added (version 1), whose programs consist of 32-byte encodings of points ''Q''. ''Q'' is computed as ''P + hash(P||m)G'' for a public key ''P'', and the root ''m'' of a Merkle tree whose leaves consist of a version number and a script. These outputs can be spent directly by providing a signature for ''Q'', or indirectly by revealing ''P'', the script and leaf version, inputs that satisfy the script, and a Merkle path that proves ''Q'' committed to that leaf. All hashes in this construction (the hash for computing ''Q'' from ''P'', the hashes inside the Merkle tree's inner nodes, and the signature hashes used) are tagged to guarantee domain separation.\n+\n+== Specification ==\n+\n+This section specifies the Taproot consensus rules. Validity is defined by exclusion: a block or transaction is valid if no condition exists that marks it failed.\n+\n+The notation below follows that of [bip-0340.mediawiki#design BIP340]. This includes the ''hash<sub>tag</sub>(x)'' notation to refer to ''SHA256(SHA256(tag) || SHA256(tag) || x)''. To the best of the authors' knowledge, no existing use of SHA256 in Bitcoin feeds it a message that starts with two single SHA256 outputs, making collisions between ''hash<sub>tag</sub>'' with other hashes extremely unlikely.\n+\n+=== Script validation rules ===\n+\n+A Taproot output is a native SegWit output (see [bip-0141.mediawiki BIP141]) with version number 1, and a 32-byte witness program.\n+The following rules only apply when such an output is being spent. Any other outputs, including version 1 outputs with lengths other than 32 bytes, or P2SH-wrapped version 1 outputs<ref>'''Why is P2SH-wrapping not supported?''' Using P2SH-wrapped outputs only provides 80-bit collision security due to the use of a 160-bit hash. This is considered low, and becomes a security risk whenever the output includes data from more than a single party (public keys, hashes, ...).</ref>, remain unencumbered.\n+\n+* Let ''q'' be the 32-byte array containing the witness program (the second push in the scriptPubKey) which represents a public key according to [bip-0340.mediawiki#design BIP340].\n+* Fail if the witness stack has 0 elements.\n+* If there are at least two witness elements, and the first byte of the last element is 0x50<ref>'''Why is the first byte of the annex <code>0x50</code>?''' The <code>0x50</code> is chosen as it could not be confused with a valid P2WPKH or P2WSH spending. As the control block's initial byte's lowest bit is used to indicate the public key's Y squareness, each leaf version needs an even byte value and the immediately following odd byte value that are both not yet used in P2WPKH or P2WSH spending. To indicate the annex, only an \"unpaired\" available byte is necessary like <code>0x50</code>. This choice maximizes the available options for future script versions.</ref>, this last element is called ''annex'' ''a''<ref>'''What is the purpose of the annex?''' The annex is a reserved space for future extensions, such as indicating the validation costs of computationally expensive new opcodes in a way that is recognizable without knowing the scriptPubKey of the output being spent. Until the meaning of this field is defined by another softfork, users SHOULD NOT include <code>annex</code> in transactions, or it may lead to PERMANENT FUND LOSS.</ref> and is removed from the witness stack. The annex (or the lack of thereof) is always covered by the signature and contributes to transaction weight, but is otherwise ignored during taproot validation.\n+* If there is exactly one element left in the witness stack, key path spending is used:\n+** The single witness stack element is interpreted as the signature and must be valid (see the next section) for the public key ''q'' (see the next subsection).\n+* If there are at least two witness elements left, script path spending is used:\n+** Call the second-to-last stack element ''s'', the script.\n+** The last stack element is called the control block ''c'', and must have length ''33 + 32m'', for a value of ''m'' that is an integer between 0 and 128<ref>'''Why is the Merkle path length limited to 128?''' The optimally space-efficient Merkle tree can be constructed based on the probabilities of the scripts in the leaves, using the Huffman algorithm. This algorithm will construct branches with lengths approximately equal to ''log<sub>2</sub>(1/probability)'', but to have branches longer than 128 you would need to have scripts with an execution chance below 1 in ''2<sup>128</sup>''. As that is our security bound, scripts that truly have such a low chance can probably be removed entirely.</ref>, inclusive. Fail if it does not have such a length.\n+** Let ''p = c[1:33]'' and let ''P = point(p)'' where ''point'' and ''[:]'' are defined as in [bip-0340.mediawiki#design BIP340]. Fail if this point is not on the curve.\n+** Let ''v = c[0] & 0xfe'' and call it the ''leaf version''<ref>'''What constraints are there on the leaf version?''' First, the leaf version cannot be odd as ''c[0] & 0xfe'' will always be even, and cannot be ''0x50'' as that would result in ambiguity with the annex. In addition, in order to support some forms of static analysis that rely on being able to identify script spends without access to the output being spent, it is recommended to avoid using any leaf versions that would conflict with a valid first byte of either a valid P2WPKH pubkey or a valid P2WSH script (that is, both ''v'' and ''v | 1'' should be an undefined, invalid or disabled opcode or an opcode that is not valid as the first opcode). The values that comply to this rule are the 32 even values between ''0xc0'' and ''0xfe'' and also ''0x66'', ''0x7e'', ''0x80'', ''0x84'', ''0x96'', ''0x98'', ''0xba'', ''0xbc'', ''0xbe''. Note also that this constraint implies that leaf versions should be shared amongst different witness versions, as knowing the witness version requires access to the output being spent.</ref>.\n+** Let ''k<sub>0</sub> = hash<sub>TapLeaf</sub>(v || compact_size(size of s) || s)''; also call it the ''tapleaf hash''.\n+** For ''j'' in ''[0,1,...,m-1]'':\n+*** Let ''e<sub>j</sub> = c[33+32j:65+32j]''.\n+*** Let ''k<sub>j+1</sub> depend on whether ''k<sub>j</sub> < e<sub>j</sub>'' (lexicographically)<ref>'''Why are child elements sorted before hashing in the Merkle tree?''' By doing so, it is not necessary to reveal the left/right directions along with the hashes in revealed Merkle branches. This is possible because we do not actually care about the position of specific scripts in the tree; only that they are actually committed to.</ref>:\n+**** If ''k<sub>j</sub> < e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(k<sub>j</sub> || e<sub>j</sub>)''<ref>'''Why not use a more efficient hash construction for inner Merkle nodes?''' The chosen construction does require two invocations of the SHA256 compression functions, one of which can be avoided in theory (see [bip-0098.mediawiki BIP98]). However, it seems preferable to stick to constructions that can be implemented using standard cryptographic primitives, both for implementation simplicity and analyzability. If necessary, a significant part of the second compression function can be optimized out by [https://github.com/bitcoin/bitcoin/pull/13191 specialization] for 64-byte inputs.</ref>.\n+**** If ''k<sub>j</sub> &ge; e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(e<sub>j</sub> || k<sub>j</sub>)''.\n+** Let ''t = hash<sub>TapTweak</sub>(p || k<sub>m</sub>)''.\n+** If ''t &ge; 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141'' (order of secp256k1), fail.\n+** Let ''Q = point(q) if (c[0] & 1) = 1 and -point(q) otherwise''<ref>'''Why is it necessary to reveal a bit to indicate if the point represented by the output public key is negated in a script path spend?''' The ''point'' function (defined in [bip-0340.mediawiki#design BIP340]) always constructs a point with a square Y coordinate, but because ''Q'' is constructed by adding the taproot tweak to the internal public key ''P'', it cannot easily be guaranteed that ''Q'' in fact has such a Y coordinate. Therefore, before verifying the taproot tweak the original point is restored by negating if necessary. We can not ignore the Y coordinate because it would prevent batch verification. Trying out multiple internal keys until there's such a ''Q'' is possible but undesirable and unnecessary since this information about the Y coordinate only consumes an unused bit.</ref>. Fail if this point is not on the curve.\n+** If ''Q &ne; P + int(t)G'', fail.\n+** Execute the script, according to the applicable script rules<ref>'''What are the applicable script rules in script path spends?''' [bip-0342.mediawiki#design BIP342] specifies validity rules that apply for leaf version 0xc0, but future proposals can introduce rules for other leaf versions.</ref>, using the witness stack elements excluding the script ''s'', the control block ''c'', and the annex ''a'' if present, as initial stack.\n+\n+''q'' is referred to as ''taproot output key'' and ''p'' as ''taproot internal key''.\n+\n+=== Signature validation rules ===\n+\n+We first define a reusable common signature message calculation function, followed by the actual signature validation as it's used in key path spending.\n+\n+==== Common signature message ====\n+\n+The function ''SigMsg(hash_type, ext_flag)'' computes the message being signed as a byte array. It is implicitly also a function of the spending transaction and the outputs it spends, but these are not listed to keep notation simple. \n+\n+The parameter ''hash_type'' is an 8-bit unsigned value. The <code>SIGHASH</code> encodings from the legacy script system are reused, including <code>SIGHASH_ALL</code>, <code>SIGHASH_NONE</code>, <code>SIGHASH_SINGLE</code>, and <code>SIGHASH_ANYONECANPAY</code>, plus the default ''hash_type'' value ''0x00'' which results in signing over the whole transaction just as for <code>SIGHASH_ALL</code>. The following restrictions apply, which cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'', ''0x03'', ''0x81'', ''0x82'', or ''0x83''<ref>'''Why reject unknown ''hash_type'' values?''' By doing so, it is easier to reason about the worst case amount of signature hashing an implementation with adequate caching must perform.</ref>).\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+The parameter ''ext_flag'' is an integer in range 0-127, and is used for indicating (in the message) that extensions are added at the end of the message<ref>'''What extensions use the ''ext_flag'' mechanism?''' [bip-0342.mediawiki#design BIP342] reuses the same common signature message algorithm, but adds BIP342-specific data at the end, which is indicated using ''ext_flag = 1''.</ref>.\n+\n+If the parameters take acceptable values, the message is the concatenation of the following data, in order(with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If the ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all input amounts.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+** If ''hash_type & 0x80'' equals <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** ''amount'' (8): value of the previous output spent by this input.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+The total length of ''SigMsg()'' is at most ''209'' bytes<ref>'''What is the output length of ''SigMsg()''?''' The total length of ''SigMsg()'' can be computed using the following formula: ''177 - is_anyonecanpay * 52 - is_none * 32 + has_annex * 32''.</ref>. Note that this does not include the size of sub-hashes such as ''sha_prevouts'', which may be cached across signatures of the same transaction.\n+\n+In summary, the semantics of the [bip-0143.mediawiki BIP143] sighash types remain unchanged, except the following:\n+# The way and order of serialization is changed.<ref>'''Why is the serialization in the signature message changed?''' Hashes that go into the signature message and the message itself are now computed with a single SHA256 invocation instead of double SHA256. There is no expected security improvement by doubling SHA256 because this only protects against length-extension attacks against SHA256 which are not a concern for signature messages because there is no secret data. Therefore doubling SHA256 is a waste of resources. The message computation now follows a logical order with transaction level data first, then input data and output data. This allows to efficiently cache the transaction part of the message across different inputs using the SHA256 midstate. Additionally, sub-hashes can be skipped when calculating the message (for example `sha_prevouts` if <code>SIGHASH_ANYONECANPAY</code> is set) instead of setting them to zero and then hashing them as in BIP143. Despite that, collisions are made impossible by committing to the length of the data (implicit in ''hash_type'' and ''spend_type'') before the variable length data.</ref>\n+# The signature message commits to the ''scriptPubKey''<ref>'''Why does the signature message commit to the ''scriptPubKey''?''' This prevents lying to offline signing devices about output being spent, even when the actually executed script (''scriptCode'' in BIP143) is correct. This means it's possible to compactly prove to a hardware wallet what (unused) execution paths existed.</ref>.\n+# If the <code>SIGHASH_ANYONECANPAY</code> flag is not set, the message commits to the amounts of ''all'' transaction inputs.<ref>'''Why does the signature message commit to the amounts of all transaction inputs?''' This eliminates the possibility to lie to offline signing devices about the fee of a transaction.</ref>\n+# The signature message commits to all input ''nSequence'' if <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code> are set (unless <code>SIGHASH_ANYONECANPAY</code> is set as well).<ref>'''Why does the signature message commit to all input ''nSequence'' if <code>SIGHASH_SINGLE</code> or <code>SIGHASH_NONE</code> are set?''' Because setting them already makes the message commit to the <code>prevouts</code> part of all transaction inputs, it is not useful to treat the ''nSequence'' any different. Moreover, this change makes ''nSequence'' consistent with the view that <code>SIGHASH_SINGLE</code> and <code>SIGHASH_NONE</code> only modify the signature message with respect to transaction outputs and not inputs.</ref>\n+# The signature message includes commitments to the taproot-specific data ''spend_type'' and ''annex'' (if present).\n+\n+==== Taproot key path spending signature validation ====\n+\n+To validate a signature ''sig'' with public key ''q'':\n+* If the ''sig'' is 64 bytes long, return ''Verify(q, hash<sub>TapSigHash</sub>(0x00 || SigMsg(0x00, 0)), sig)''<ref>'''Why is the input to ''hash<sub>TapSigHash</sub>'' prefixed with 0x00?''' This prefix is called the sighash epoch, and allows reusing the ''hash<sub>TapSigHash</sub>'' tagged hash in future signature algorithms that make invasive changes to how hashing is performed (as opposed to the ''ext_flag'' mechanism that is used for incremental extensions). An alternative is having them use a different tag, but supporting a growing number of tags may become undesirable.</ref>, where ''Verify'' is defined in [bip-0340.mediawiki#design BIP340].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00<ref>'''Why can the <code>hash_type</code> not be <code>0x00</code> in 65-byte signatures?''' Permitting that would enable malleating (by third parties, including miners) 64-byte signatures into 65-byte ones, resulting in a different `wtxid` and a different fee rate than the creator intended</ref> and Verify(q, hash<sub>TapSighash</sub>(0x00 || SigMsg(sig[64], 0)), sig[0:64])''.\n+* Otherwise, fail<ref>'''Why permit two signature lengths?''' By making the most common type of <code>hash_type</code> implicit, a byte can often be saved.</ref>.\n+\n+== Constructing and spending Taproot outputs ==\n+\n+This section discusses how to construct and spend Taproot outputs. It only affects wallet software that chooses to implement receiving and spending,\n+and is not consensus critical in any way.\n+\n+Conceptually, every Taproot output corresponds to a combination of a single public key condition (the internal key), and zero or more general conditions encoded in scripts organized in a tree.\n+Satisfying any of these conditions is sufficient to spend the output.\n+\n+'''Initial steps''' The first step is determining what the internal key and the organization of the rest of the scripts should be. The specifics are likely application dependent, but here are some general guidelines:\n+* When deciding between scripts with conditionals (<code>OP_IF</code> etc.) and splitting them up into multiple scripts (each corresponding to one execution path through the original script), it is generally preferable to pick the latter.\n+* When a single condition requires signatures with multiple keys, key aggregation techniques like MuSig can be used to combine them into a single key. The details are out of scope for this document, but note that this may complicate the signing procedure.\n+* If one or more of the spending conditions consist of just a single key (after aggregation), the most likely one should be made the internal key. If no such condition exists, it may be worthwhile adding one that consists of an aggregation of all keys participating in all scripts combined; effectively adding an \"everyone agrees\" branch. If that is inacceptable, pick as internal key a point with unknown discrete logarithm. One example of such a point is ''H = point(0x0250929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0)'' which is [https://github.com/ElementsProject/secp256k1-zkp/blob/11af7015de624b010424273be3d91f117f172c82/src/modules/rangeproof/main_impl.h#L16 constructed] by taking the hash of the standard uncompressed encoding of the [https://www.secg.org/sec2-v2.pdf secp256k1] base point ''G'' as X coordinate. In order to avoid leaking the information that key path spending is not possible it is recommended to pick a fresh integer ''r'' in the range ''0...n-1'' uniformly at random and use ''H + rG'' as internal key. It is possible to prove that this internal key does not have a known discrete logarithm with respect to ''G'' by revealing ''r'' to a verifier who can then reconstruct how the internal key was created.\n+* If the spending conditions do not require a script path, the output key should commit to an unspendable script path instead of having no script path. This can be achieved by computing the output key point as ''Q = P + int(hash<sub>TapTweak</sub>(bytes(P)))G''. <ref>'''Why should the output key always have a taproot commitment, even if there is no script path?'''\n+If the taproot output key is an aggregate of keys, there is the possibility for a malicious party to add a script path without being noticed by the other parties.\n+This allows to bypass the multiparty policy and to steal the coin.\n+MuSig key aggregation does not have this issue because it already causes the internal key to be randomized.\n+\n+The attack works as follows: Assume Alice and Mallory want to aggregate their keys into a taproot output key without a script path.\n+In order to prevent key cancellation and related attacks they use [https://eprint.iacr.org/2018/483.pdf MSDL-pop] instead of MuSig.\n+The MSDL-pop protocol requires all parties to provide a proof of possession of their corresponding secret key and the aggregated key is just the sum of the individual keys.\n+After Mallory receives Alice's key ''A'', Mallory creates ''M = M<sub>0</sub> + int(t)G'' where ''M<sub>0</sub>'' is Mallory's original key and ''t'' allows a script path spend with internal key ''P = A + M<sub>0</sub>'' and a script that only contains Mallory's key.\n+Mallory sends a proof of possession of ''M'' to Alice and both parties compute output key ''Q = A + M = P + int(t)G''.\n+Alice will not be able to notice the script path, but Mallory can unilaterally spend any coin with output key ''Q''.\n+</ref>\n+* The remaining scripts should be organized into the leaves of a binary tree. This can be a balanced tree if each of the conditions these scripts correspond to are equally likely. If probabilities for each condition are known, consider constructing the tree as a Huffman tree.\n+\n+'''Computing the output script''' Once the spending conditions are split into an internal key <code>internal_pubkey</code> and a binary tree whose leaves are (leaf_version, script) tuples, the output script can be computed using the Python3 algorithms below. These algorithms take advantage of helper functions from the [bip-0340/referency.py BIP340 reference code] for integer conversion, point multiplication, and tagged hashes.\n+\n+First, we define <code>taproot_tweak_pubkey</code> for 32-byte [bip-0340.mediawiki#design BIP340] public key arrays.\n+In addition to the tweaked public key byte array, the function returns a boolean indicating whether the public key represents the tweaked point or its negation.\n+This will be required for spending the output with a script path.\n+In order to allow spending with the key path, we define <code>taproot_tweak_seckey</code> to compute the secret key for a tweaked public key.\n+For any byte string <code>h</code> it holds that <code>taproot_tweak_pubkey(pubkey_gen(seckey), h)[0] == pubkey_gen(taproot_tweak_seckey(seckey, h))</code>.\n+\n+<source lang=\"python\">\n+def taproot_tweak_pubkey(pubkey, h):\n+    t = int_from_bytes(tagged_hash(\"TapTweak\", pubkey + h))\n+    if t >= SECP256K1_ORDER:\n+        raise ValueError",
      "path": "bip-0341.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "in_reply_to_id": 368440999,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(nit, we also do e mod order, not just the nonce)",
      "created_at": "2020-01-20T15:49:27Z",
      "updated_at": "2020-01-20T15:49:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r368615939",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368615939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368764578",
      "pull_request_review_id": 345579609,
      "id": 368764578,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc2NDU3OA==",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+<pre>\n+  BIP: 341\n+  Layer: Consensus (soft fork)\n+  Title: Taproot: SegWit version 1 spending rules\n+  Author: Pieter Wuille <pieter.wuille@gmail.com>\n+          Jonas Nick <jonasd.nick@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0341\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2020-01-19\n+  License: BSD-3-Clause\n+  Requires: 340\n+  Post-History: 2019-05-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html [bitcoin-dev] Taproot proposal\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a new SegWit version 1 output type, with spending rules based on Taproot, Schnorr signatures, and Merkle branches.\n+\n+===Copyright===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+===Motivation===\n+\n+This proposal aims to improve privacy, efficiency, and flexibility of Bitcoin's scripting capabilities without adding new security assumptions<ref>'''What does not adding security assumptions mean?''' Unforgeability of signatures is a necessary requirement to prevent theft. At least when treating script execution as a digital signature scheme itself, unforgeability can be [https://github.com/apoelstra/taproot proven] in the Random Oracle Model assuming the Discrete Logarithm problem is hard. A [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 proof] for unforgeability of ECDSA in the current script system needs non-standard assumptions on top of that. Note that it is hard in general to model exactly what security for script means, as it depends on the policies and protocols used by wallet software.</ref>. Specifically, it seeks to minimize how much information about the spendability conditions of a transaction output is revealed on chain at creation or spending time and to add a number of upgrade mechanisms, while fixing a few minor but long-standing issues.\n+\n+==Design==\n+\n+A number of related ideas for improving Bitcoin's scripting capabilities have been previously proposed: Schnorr signatures ([https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki BIP340]), Merkle branches (\"MAST\", [bip-0114.mediawiki BIP114], [bip-0117.mediawiki BIP117]), new sighash modes ([bip-0118.mediawiki BIP118]), new opcodes like CHECKSIGFROMSTACK, [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015614.html Taproot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html Graftroot], [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016249.html G'root], and [https://bitcointalk.org/index.php?topic=1377298.0 cross-input aggregation].\n+\n+Combining all these ideas in a single proposal would be an extensive change, be hard to review, and likely miss new discoveries that otherwise could have been made along the way. Not all are equally mature as well. For example, cross-input aggregation [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-March/015838.html interacts] in complex ways with upgrade mechanisms, and solutions to that are still [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-October/016461.html in flux]. On the other hand, separating them all into independent upgrades would reduce the efficiency and privacy gains to be had, and wallet and service providers may not be inclined to go through many incremental updates. Therefore, we're faced with a tradeoff between functionality and scope creep. In this design we strike a balance by focusing on the structural script improvements offered by Taproot and Merkle branches, as well as changes necessary to make them usable and efficient. For things like sighashes and opcodes we include fixes for known problems, but exclude new features that can be added independently with no downsides.\n+\n+As a result we choose this combination of technologies:\n+* '''Merkle branches''' let us only reveal the actually executed part of the script to the blockchain, as opposed to all possible ways a script can be executed. Among the various known mechanisms for implementing this, one where the Merkle tree becomes part of the script's structure directly maximizes the space savings, so that approach is chosen.\n+* '''Taproot''' on top of that lets us merge the traditionally separate pay-to-pubkey and pay-to-scripthash policies, making all outputs spendable by either a key or (optionally) a script, and indistinguishable from each other. As long as the key-based spending path is used for spending, it is not revealed whether a script path was permitted as well, resulting in space savings and an increase in scripting privacy at spending time.\n+* Taproot's advantages become apparent under the assumption that most applications involve outputs that could be spent by all parties agreeing. That's where '''Schnorr''' signatures come in, as they permit [https://eprint.iacr.org/2018/068 key aggregation]: a public key can be constructed from multiple participant public keys, and which requires cooperation between all participants to sign for. Such multi-party public keys and signatures are indistinguishable from their single-party equivalents. This means that with taproot most applications can use the key-based spending path, which is both efficient and private. This can be generalized to arbitrary M-of-N policies, as Schnorr signatures support threshold signing, at the cost of more complex setup protocols.\n+* As Schnorr signatures also permit '''batch validation''', allowing multiple signatures to be validated together more efficiently than validating each one independently, we make sure all parts of the design are compatible with this.\n+* Where unused bits appear as a result of the above changes, they are reserved for mechanisms for '''future extensions'''. As a result, every script in the Merkle tree has an associated version such that new script versions can be introduced with a soft fork while remaining compatible with BIP 341. Additionally, future soft forks can make use of the currently unused <code>annex</code> in the witness (see [bip-0341.mediawiki#Rationale BIP341]).\n+* While the core semantics of the '''signature hashing algorithm''' are not changed, a number of improvements are included in this proposal. The new signature hashing algorithm fixes the verification capabilities of offline signing devices by including amount and scriptPubKey in the signature message, avoids unnecessary hashing, uses '''tagged hashes''' and defines a default sighash byte.\n+* The '''public key is directly included in the output''' in contrast to typical earlier constructions which store a hash of the public key or script in the output. This has the same cost for senders and is more space efficient overall if the key-based spending path is taken. <ref>'''Why is the public key directly included in the output?''' While typical earlier constructions store a hash of a script or a public key in the output, this is rather wasteful when a public key is always involved. To guarantee batch verifiability, the public key must be known to every verifier, and thus only revealing its hash as an output would imply adding an additional 32 bytes to the witness. Furthermore, to maintain [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012198.html 128-bit collision security] for outputs, a 256-bit hash would be required anyway, which is comparable in size (and thus in cost for senders) to revealing the public key directly. While the usage of public key hashes is often said to protect against ECDLP breaks or quantum computers, this protection is very weak at best: transactions are not protected while being confirmed, and a very [https://twitter.com/pwuille/status/1108097835365339136 large portion] of the currency's supply is not under such protection regardless. Actual resistance to such systems can be introduced by relying on different cryptographic assumptions, but this proposal focuses on improvements that do not change the security model.</ref>\n+\n+Informally, the resulting design is as follows: a new witness version is added (version 1), whose programs consist of 32-byte encodings of points ''Q''. ''Q'' is computed as ''P + hash(P||m)G'' for a public key ''P'', and the root ''m'' of a Merkle tree whose leaves consist of a version number and a script. These outputs can be spent directly by providing a signature for ''Q'', or indirectly by revealing ''P'', the script and leaf version, inputs that satisfy the script, and a Merkle path that proves ''Q'' committed to that leaf. All hashes in this construction (the hash for computing ''Q'' from ''P'', the hashes inside the Merkle tree's inner nodes, and the signature hashes used) are tagged to guarantee domain separation.\n+\n+== Specification ==\n+\n+This section specifies the Taproot consensus rules. Validity is defined by exclusion: a block or transaction is valid if no condition exists that marks it failed.\n+\n+The notation below follows that of [bip-0340.mediawiki#design BIP340]. This includes the ''hash<sub>tag</sub>(x)'' notation to refer to ''SHA256(SHA256(tag) || SHA256(tag) || x)''. To the best of the authors' knowledge, no existing use of SHA256 in Bitcoin feeds it a message that starts with two single SHA256 outputs, making collisions between ''hash<sub>tag</sub>'' with other hashes extremely unlikely.\n+\n+=== Script validation rules ===\n+\n+A Taproot output is a native SegWit output (see [bip-0141.mediawiki BIP141]) with version number 1, and a 32-byte witness program.\n+The following rules only apply when such an output is being spent. Any other outputs, including version 1 outputs with lengths other than 32 bytes, or P2SH-wrapped version 1 outputs<ref>'''Why is P2SH-wrapping not supported?''' Using P2SH-wrapped outputs only provides 80-bit collision security due to the use of a 160-bit hash. This is considered low, and becomes a security risk whenever the output includes data from more than a single party (public keys, hashes, ...).</ref>, remain unencumbered.\n+\n+* Let ''q'' be the 32-byte array containing the witness program (the second push in the scriptPubKey) which represents a public key according to [bip-0340.mediawiki#design BIP340].\n+* Fail if the witness stack has 0 elements.\n+* If there are at least two witness elements, and the first byte of the last element is 0x50<ref>'''Why is the first byte of the annex <code>0x50</code>?''' The <code>0x50</code> is chosen as it could not be confused with a valid P2WPKH or P2WSH spending. As the control block's initial byte's lowest bit is used to indicate the public key's Y squareness, each leaf version needs an even byte value and the immediately following odd byte value that are both not yet used in P2WPKH or P2WSH spending. To indicate the annex, only an \"unpaired\" available byte is necessary like <code>0x50</code>. This choice maximizes the available options for future script versions.</ref>, this last element is called ''annex'' ''a''<ref>'''What is the purpose of the annex?''' The annex is a reserved space for future extensions, such as indicating the validation costs of computationally expensive new opcodes in a way that is recognizable without knowing the scriptPubKey of the output being spent. Until the meaning of this field is defined by another softfork, users SHOULD NOT include <code>annex</code> in transactions, or it may lead to PERMANENT FUND LOSS.</ref> and is removed from the witness stack. The annex (or the lack of thereof) is always covered by the signature and contributes to transaction weight, but is otherwise ignored during taproot validation.\n+* If there is exactly one element left in the witness stack, key path spending is used:\n+** The single witness stack element is interpreted as the signature and must be valid (see the next section) for the public key ''q'' (see the next subsection).\n+* If there are at least two witness elements left, script path spending is used:\n+** Call the second-to-last stack element ''s'', the script.\n+** The last stack element is called the control block ''c'', and must have length ''33 + 32m'', for a value of ''m'' that is an integer between 0 and 128<ref>'''Why is the Merkle path length limited to 128?''' The optimally space-efficient Merkle tree can be constructed based on the probabilities of the scripts in the leaves, using the Huffman algorithm. This algorithm will construct branches with lengths approximately equal to ''log<sub>2</sub>(1/probability)'', but to have branches longer than 128 you would need to have scripts with an execution chance below 1 in ''2<sup>128</sup>''. As that is our security bound, scripts that truly have such a low chance can probably be removed entirely.</ref>, inclusive. Fail if it does not have such a length.\n+** Let ''p = c[1:33]'' and let ''P = point(p)'' where ''point'' and ''[:]'' are defined as in [bip-0340.mediawiki#design BIP340]. Fail if this point is not on the curve.\n+** Let ''v = c[0] & 0xfe'' and call it the ''leaf version''<ref>'''What constraints are there on the leaf version?''' First, the leaf version cannot be odd as ''c[0] & 0xfe'' will always be even, and cannot be ''0x50'' as that would result in ambiguity with the annex. In addition, in order to support some forms of static analysis that rely on being able to identify script spends without access to the output being spent, it is recommended to avoid using any leaf versions that would conflict with a valid first byte of either a valid P2WPKH pubkey or a valid P2WSH script (that is, both ''v'' and ''v | 1'' should be an undefined, invalid or disabled opcode or an opcode that is not valid as the first opcode). The values that comply to this rule are the 32 even values between ''0xc0'' and ''0xfe'' and also ''0x66'', ''0x7e'', ''0x80'', ''0x84'', ''0x96'', ''0x98'', ''0xba'', ''0xbc'', ''0xbe''. Note also that this constraint implies that leaf versions should be shared amongst different witness versions, as knowing the witness version requires access to the output being spent.</ref>.\n+** Let ''k<sub>0</sub> = hash<sub>TapLeaf</sub>(v || compact_size(size of s) || s)''; also call it the ''tapleaf hash''.\n+** For ''j'' in ''[0,1,...,m-1]'':\n+*** Let ''e<sub>j</sub> = c[33+32j:65+32j]''.\n+*** Let ''k<sub>j+1</sub> depend on whether ''k<sub>j</sub> < e<sub>j</sub>'' (lexicographically)<ref>'''Why are child elements sorted before hashing in the Merkle tree?''' By doing so, it is not necessary to reveal the left/right directions along with the hashes in revealed Merkle branches. This is possible because we do not actually care about the position of specific scripts in the tree; only that they are actually committed to.</ref>:\n+**** If ''k<sub>j</sub> < e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(k<sub>j</sub> || e<sub>j</sub>)''<ref>'''Why not use a more efficient hash construction for inner Merkle nodes?''' The chosen construction does require two invocations of the SHA256 compression functions, one of which can be avoided in theory (see [bip-0098.mediawiki BIP98]). However, it seems preferable to stick to constructions that can be implemented using standard cryptographic primitives, both for implementation simplicity and analyzability. If necessary, a significant part of the second compression function can be optimized out by [https://github.com/bitcoin/bitcoin/pull/13191 specialization] for 64-byte inputs.</ref>.\n+**** If ''k<sub>j</sub> &ge; e<sub>j</sub>'': ''k<sub>j+1</sub> = hash<sub>TapBranch</sub>(e<sub>j</sub> || k<sub>j</sub>)''.\n+** Let ''t = hash<sub>TapTweak</sub>(p || k<sub>m</sub>)''.\n+** If ''t &ge; 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141'' (order of secp256k1), fail.\n+** Let ''Q = point(q) if (c[0] & 1) = 1 and -point(q) otherwise''<ref>'''Why is it necessary to reveal a bit to indicate if the point represented by the output public key is negated in a script path spend?''' The ''point'' function (defined in [bip-0340.mediawiki#design BIP340]) always constructs a point with a square Y coordinate, but because ''Q'' is constructed by adding the taproot tweak to the internal public key ''P'', it cannot easily be guaranteed that ''Q'' in fact has such a Y coordinate. Therefore, before verifying the taproot tweak the original point is restored by negating if necessary. We can not ignore the Y coordinate because it would prevent batch verification. Trying out multiple internal keys until there's such a ''Q'' is possible but undesirable and unnecessary since this information about the Y coordinate only consumes an unused bit.</ref>. Fail if this point is not on the curve.\n+** If ''Q &ne; P + int(t)G'', fail.\n+** Execute the script, according to the applicable script rules<ref>'''What are the applicable script rules in script path spends?''' [bip-0342.mediawiki#design BIP342] specifies validity rules that apply for leaf version 0xc0, but future proposals can introduce rules for other leaf versions.</ref>, using the witness stack elements excluding the script ''s'', the control block ''c'', and the annex ''a'' if present, as initial stack.\n+\n+''q'' is referred to as ''taproot output key'' and ''p'' as ''taproot internal key''.\n+\n+=== Signature validation rules ===\n+\n+We first define a reusable common signature message calculation function, followed by the actual signature validation as it's used in key path spending.\n+\n+==== Common signature message ====\n+\n+The function ''SigMsg(hash_type, ext_flag)'' computes the message being signed as a byte array. It is implicitly also a function of the spending transaction and the outputs it spends, but these are not listed to keep notation simple. \n+\n+The parameter ''hash_type'' is an 8-bit unsigned value. The <code>SIGHASH</code> encodings from the legacy script system are reused, including <code>SIGHASH_ALL</code>, <code>SIGHASH_NONE</code>, <code>SIGHASH_SINGLE</code>, and <code>SIGHASH_ANYONECANPAY</code>, plus the default ''hash_type'' value ''0x00'' which results in signing over the whole transaction just as for <code>SIGHASH_ALL</code>. The following restrictions apply, which cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'', ''0x03'', ''0x81'', ''0x82'', or ''0x83''<ref>'''Why reject unknown ''hash_type'' values?''' By doing so, it is easier to reason about the worst case amount of signature hashing an implementation with adequate caching must perform.</ref>).\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+The parameter ''ext_flag'' is an integer in range 0-127, and is used for indicating (in the message) that extensions are added at the end of the message<ref>'''What extensions use the ''ext_flag'' mechanism?''' [bip-0342.mediawiki#design BIP342] reuses the same common signature message algorithm, but adds BIP342-specific data at the end, which is indicated using ''ext_flag = 1''.</ref>.\n+\n+If the parameters take acceptable values, the message is the concatenation of the following data, in order(with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If the ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all input amounts.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+** If ''hash_type & 0x80'' equals <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** ''amount'' (8): value of the previous output spent by this input.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0x80'' does not equal <code>SIGHASH_ANYONECANPAY</code>:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+The total length of ''SigMsg()'' is at most ''209'' bytes<ref>'''What is the output length of ''SigMsg()''?''' The total length of ''SigMsg()'' can be computed using the following formula: ''177 - is_anyonecanpay * 52 - is_none * 32 + has_annex * 32''.</ref>. Note that this does not include the size of sub-hashes such as ''sha_prevouts'', which may be cached across signatures of the same transaction.\n+\n+In summary, the semantics of the [bip-0143.mediawiki BIP143] sighash types remain unchanged, except the following:\n+# The way and order of serialization is changed.<ref>'''Why is the serialization in the signature message changed?''' Hashes that go into the signature message and the message itself are now computed with a single SHA256 invocation instead of double SHA256. There is no expected security improvement by doubling SHA256 because this only protects against length-extension attacks against SHA256 which are not a concern for signature messages because there is no secret data. Therefore doubling SHA256 is a waste of resources. The message computation now follows a logical order with transaction level data first, then input data and output data. This allows to efficiently cache the transaction part of the message across different inputs using the SHA256 midstate. Additionally, sub-hashes can be skipped when calculating the message (for example `sha_prevouts` if <code>SIGHASH_ANYONECANPAY</code> is set) instead of setting them to zero and then hashing them as in BIP143. Despite that, collisions are made impossible by committing to the length of the data (implicit in ''hash_type'' and ''spend_type'') before the variable length data.</ref>\n+# The signature message commits to the ''scriptPubKey''<ref>'''Why does the signature message commit to the ''scriptPubKey''?''' This prevents lying to offline signing devices about output being spent, even when the actually executed script (''scriptCode'' in BIP143) is correct. This means it's possible to compactly prove to a hardware wallet what (unused) execution paths existed.</ref>.\n+# If the <code>SIGHASH_ANYONECANPAY</code> flag is not set, the message commits to the amounts of ''all'' transaction inputs.<ref>'''Why does the signature message commit to the amounts of all transaction inputs?''' This eliminates the possibility to lie to offline signing devices about the fee of a transaction.</ref>\n+# The signature message commits to all input ''nSequence'' if <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code> are set (unless <code>SIGHASH_ANYONECANPAY</code> is set as well).<ref>'''Why does the signature message commit to all input ''nSequence'' if <code>SIGHASH_SINGLE</code> or <code>SIGHASH_NONE</code> are set?''' Because setting them already makes the message commit to the <code>prevouts</code> part of all transaction inputs, it is not useful to treat the ''nSequence'' any different. Moreover, this change makes ''nSequence'' consistent with the view that <code>SIGHASH_SINGLE</code> and <code>SIGHASH_NONE</code> only modify the signature message with respect to transaction outputs and not inputs.</ref>\n+# The signature message includes commitments to the taproot-specific data ''spend_type'' and ''annex'' (if present).\n+\n+==== Taproot key path spending signature validation ====\n+\n+To validate a signature ''sig'' with public key ''q'':\n+* If the ''sig'' is 64 bytes long, return ''Verify(q, hash<sub>TapSigHash</sub>(0x00 || SigMsg(0x00, 0)), sig)''<ref>'''Why is the input to ''hash<sub>TapSigHash</sub>'' prefixed with 0x00?''' This prefix is called the sighash epoch, and allows reusing the ''hash<sub>TapSigHash</sub>'' tagged hash in future signature algorithms that make invasive changes to how hashing is performed (as opposed to the ''ext_flag'' mechanism that is used for incremental extensions). An alternative is having them use a different tag, but supporting a growing number of tags may become undesirable.</ref>, where ''Verify'' is defined in [bip-0340.mediawiki#design BIP340].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00<ref>'''Why can the <code>hash_type</code> not be <code>0x00</code> in 65-byte signatures?''' Permitting that would enable malleating (by third parties, including miners) 64-byte signatures into 65-byte ones, resulting in a different `wtxid` and a different fee rate than the creator intended</ref> and Verify(q, hash<sub>TapSighash</sub>(0x00 || SigMsg(sig[64], 0)), sig[0:64])''.\n+* Otherwise, fail<ref>'''Why permit two signature lengths?''' By making the most common type of <code>hash_type</code> implicit, a byte can often be saved.</ref>.\n+\n+== Constructing and spending Taproot outputs ==\n+\n+This section discusses how to construct and spend Taproot outputs. It only affects wallet software that chooses to implement receiving and spending,\n+and is not consensus critical in any way.\n+\n+Conceptually, every Taproot output corresponds to a combination of a single public key condition (the internal key), and zero or more general conditions encoded in scripts organized in a tree.\n+Satisfying any of these conditions is sufficient to spend the output.\n+\n+'''Initial steps''' The first step is determining what the internal key and the organization of the rest of the scripts should be. The specifics are likely application dependent, but here are some general guidelines:\n+* When deciding between scripts with conditionals (<code>OP_IF</code> etc.) and splitting them up into multiple scripts (each corresponding to one execution path through the original script), it is generally preferable to pick the latter.\n+* When a single condition requires signatures with multiple keys, key aggregation techniques like MuSig can be used to combine them into a single key. The details are out of scope for this document, but note that this may complicate the signing procedure.\n+* If one or more of the spending conditions consist of just a single key (after aggregation), the most likely one should be made the internal key. If no such condition exists, it may be worthwhile adding one that consists of an aggregation of all keys participating in all scripts combined; effectively adding an \"everyone agrees\" branch. If that is inacceptable, pick as internal key a point with unknown discrete logarithm. One example of such a point is ''H = point(0x0250929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0)'' which is [https://github.com/ElementsProject/secp256k1-zkp/blob/11af7015de624b010424273be3d91f117f172c82/src/modules/rangeproof/main_impl.h#L16 constructed] by taking the hash of the standard uncompressed encoding of the [https://www.secg.org/sec2-v2.pdf secp256k1] base point ''G'' as X coordinate. In order to avoid leaking the information that key path spending is not possible it is recommended to pick a fresh integer ''r'' in the range ''0...n-1'' uniformly at random and use ''H + rG'' as internal key. It is possible to prove that this internal key does not have a known discrete logarithm with respect to ''G'' by revealing ''r'' to a verifier who can then reconstruct how the internal key was created.\n+* If the spending conditions do not require a script path, the output key should commit to an unspendable script path instead of having no script path. This can be achieved by computing the output key point as ''Q = P + int(hash<sub>TapTweak</sub>(bytes(P)))G''. <ref>'''Why should the output key always have a taproot commitment, even if there is no script path?'''\n+If the taproot output key is an aggregate of keys, there is the possibility for a malicious party to add a script path without being noticed by the other parties.\n+This allows to bypass the multiparty policy and to steal the coin.\n+MuSig key aggregation does not have this issue because it already causes the internal key to be randomized.\n+\n+The attack works as follows: Assume Alice and Mallory want to aggregate their keys into a taproot output key without a script path.\n+In order to prevent key cancellation and related attacks they use [https://eprint.iacr.org/2018/483.pdf MSDL-pop] instead of MuSig.\n+The MSDL-pop protocol requires all parties to provide a proof of possession of their corresponding secret key and the aggregated key is just the sum of the individual keys.\n+After Mallory receives Alice's key ''A'', Mallory creates ''M = M<sub>0</sub> + int(t)G'' where ''M<sub>0</sub>'' is Mallory's original key and ''t'' allows a script path spend with internal key ''P = A + M<sub>0</sub>'' and a script that only contains Mallory's key.\n+Mallory sends a proof of possession of ''M'' to Alice and both parties compute output key ''Q = A + M = P + int(t)G''.\n+Alice will not be able to notice the script path, but Mallory can unilaterally spend any coin with output key ''Q''.\n+</ref>\n+* The remaining scripts should be organized into the leaves of a binary tree. This can be a balanced tree if each of the conditions these scripts correspond to are equally likely. If probabilities for each condition are known, consider constructing the tree as a Huffman tree.\n+\n+'''Computing the output script''' Once the spending conditions are split into an internal key <code>internal_pubkey</code> and a binary tree whose leaves are (leaf_version, script) tuples, the output script can be computed using the Python3 algorithms below. These algorithms take advantage of helper functions from the [bip-0340/referency.py BIP340 reference code] for integer conversion, point multiplication, and tagged hashes.\n+\n+First, we define <code>taproot_tweak_pubkey</code> for 32-byte [bip-0340.mediawiki#design BIP340] public key arrays.\n+In addition to the tweaked public key byte array, the function returns a boolean indicating whether the public key represents the tweaked point or its negation.\n+This will be required for spending the output with a script path.\n+In order to allow spending with the key path, we define <code>taproot_tweak_seckey</code> to compute the secret key for a tweaked public key.\n+For any byte string <code>h</code> it holds that <code>taproot_tweak_pubkey(pubkey_gen(seckey), h)[0] == pubkey_gen(taproot_tweak_seckey(seckey, h))</code>.\n+\n+<source lang=\"python\">\n+def taproot_tweak_pubkey(pubkey, h):\n+    t = int_from_bytes(tagged_hash(\"TapTweak\", pubkey + h))\n+    if t >= SECP256K1_ORDER:\n+        raise ValueError",
      "path": "bip-0341.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "a92523e57c252ca9e69ab8b84ce67c07c5ed0dc1",
      "in_reply_to_id": 368440999,
      "user": {
        "login": "junderw",
        "id": 11246316,
        "node_id": "MDQ6VXNlcjExMjQ2MzE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junderw",
        "html_url": "https://github.com/junderw",
        "followers_url": "https://api.github.com/users/junderw/followers",
        "following_url": "https://api.github.com/users/junderw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junderw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junderw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
        "organizations_url": "https://api.github.com/users/junderw/orgs",
        "repos_url": "https://api.github.com/users/junderw/repos",
        "events_url": "https://api.github.com/users/junderw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junderw/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, sounds reasonable.",
      "created_at": "2020-01-21T00:15:39Z",
      "updated_at": "2020-01-21T00:15:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r368764578",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/368764578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/369862037",
      "pull_request_review_id": 346975725,
      "id": 369862037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjAzNw==",
      "diff_hunk": "@@ -0,0 +1,263 @@\n+<pre>\n+  BIP: 340\n+  Title: Schnorr Signatures for secp256k1\n+  Author: Pieter Wuille <pieter.wuille@gmail.com>\n+          Jonas Nick <Jonas Nick <jonasd.nick@gmail.com>\n+          Tim Ruffing <crypto@timruffing.de>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0340\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-2-Clause\n+  Created: 2020-01-19\n+  Post-History: 2018-07-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016203.html [bitcoin-dev] Schnorr signatures BIP\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a standard for 64-byte Schnorr signatures over the elliptic curve ''secp256k1''.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 2-clause BSD license.\n+\n+=== Motivation ===\n+\n+Bitcoin has traditionally used\n+[https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm ECDSA] signatures over the [https://www.secg.org/sec2-v2.pdf secp256k1 curve] with [https://en.wikipedia.org/wiki/SHA-2 SHA256] hashes for authenticating\n+transactions. These are [https://www.secg.org/sec1-v2.pdf standardized], but have a number of downsides\n+compared to [http://publikationen.ub.uni-frankfurt.de/opus4/files/4280/schnorr.pdf Schnorr signatures] over the same curve:\n+\n+* '''Provable security''': Schnorr signatures are provably secure. In more detail, they are ''strongly unforgeable under chosen message attack (SUF-CMA)''<ref>Informally, this means that without knowledge of the secret key but given valid signatures of arbitrary messages, it is not possible to come up with further valid signatures.</ref> [https://www.di.ens.fr/~pointche/Documents/Papers/2000_joc.pdf in the random oracle model assuming the hardness of the elliptic curve discrete logarithm problem (ECDLP)] and [http://www.neven.org/papers/schnorr.pdf in the generic group model assuming variants of preimage and second preimage resistance of the used hash function]<ref>A detailed security proof in the random oracle model, which essentially restates [https://www.di.ens.fr/~pointche/Documents/Papers/2000_joc.pdf the original security proof by Pointcheval and Stern] more explicitly, can be found in [https://eprint.iacr.org/2016/191 a paper by Kiltz, Masny and Pan]. All these security proofs assume a variant of Schnorr signatures that use ''(e,s)'' instead of ''(R,s)'' (see Design above). Since we use a unique encoding of ''R'', there is an efficiently computable bijection that maps ''(R,s)'' to ''(e,s)'', which allows to convert a successful SUF-CMA attacker for the ''(e,s)'' variant to a successful SUF-CMA attacker for the ''(R,s)'' variant (and vice-versa). Furthermore, the proofs consider a variant of Schnorr signatures without key prefixing (see Design above), but it can be verified that the proofs are also correct for the variant with key prefixing. As a result, all the aforementioned security proofs apply to the variant of Schnorr signatures proposed in this document.</ref>. In contrast, the [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 best known results for the provable security of ECDSA] rely on stronger assumptions.\n+* '''Non-malleability''': The SUF-CMA security of Schnorr signatures implies that they are non-malleable. On the other hand, ECDSA signatures are inherently malleable<ref>If ''(r,s)'' is a valid ECDSA signature for a given message and key, then ''(r,n-s)'' is also valid for the same message and key. If ECDSA is restricted to only permit one of the two variants (as Bitcoin does through a policy rule on the network), it can be [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 proven] non-malleable under stronger than usual assumptions.</ref>; a third party without access to the secret key can alter an existing valid signature for a given public key and message into another signature that is valid for the same key and message. This issue is discussed in [[bip-0062.mediawiki|BIP62]] and [[bip-0146.mediawiki|BIP146]].\n+* '''Linearity''': Schnorr signatures provide a simple and efficient method that enables multiple collaborating parties to produce a signature that is valid for the sum of their public keys. This is the building block for various higher-level constructions that improve efficiency and privacy, such as multisignatures and others (see Applications below).\n+\n+For all these advantages, there are virtually no disadvantages, apart\n+from not being standardized. This document seeks to change that. As we\n+propose a new standard, a number of improvements not specific to Schnorr signatures can be\n+made:\n+\n+* '''Signature encoding''': Instead of using [https://en.wikipedia.org/wiki/X.690#DER_encoding DER]-encoding for signatures (which are variable size, and up to 72 bytes), we can use a simple fixed 64-byte format.\n+* '''Public key encoding''': Instead of using ''compressed'' 33-byte encodings of elliptic curve points which are common in Bitcoin today, public keys in this proposal are encoded as 32 bytes.\n+* '''Batch verification''': The specific formulation of ECDSA signatures that is standardized cannot be verified more efficiently in batch compared to individually, unless additional witness data is added. Changing the signature scheme offers an opportunity to address this.\n+* '''Completely specified''': To be safe for usage in consensus systems, the verification algorithm must be completely specified at the byte level. This guarantees that nobody can construct a signature that is valid to some verifiers but not all. This is traditionally not a requirement for digital signature schemes, and the lack of exact specification for the DER parsing of ECDSA signatures has caused problems for Bitcoin [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009697.html in the past], needing [[bip-0066.mediawiki|BIP66]] to address it. In this document we aim to meet this property by design. For batch verification, which is inherently non-deterministic as the verifier can choose their batches, this property implies that the outcome of verification may only differ from individual verifications with negligible probability, even to an attacker who intentionally tries to make batch- and non-batch verification differ.\n+\n+By reusing the same curve and hash function as Bitcoin uses for ECDSA, we are able to retain existing mechanisms for choosing secret and public keys, and we avoid introducing new assumptions about the security of elliptic curves and hash functions.\n+\n+== Description ==\n+\n+We first build up the algebraic formulation of the signature scheme by\n+going through the design choices. Afterwards, we specify the exact\n+encodings and operations.\n+\n+=== Design ===\n+\n+'''Schnorr signature variant''' Elliptic Curve Schnorr signatures for message ''m'' and public key ''P'' generally involve a point ''R'', integers ''e'' and ''s'' picked by the signer, and the base point ''G'' which satisfy ''e = hash(R || m)'' and ''s⋅G = R + e⋅P''. Two formulations exist, depending on whether the signer reveals ''e'' or ''R'':\n+# Signatures are pairs ''(e, s)'' that satisfy ''e = hash(s⋅G - e⋅P || m)''. This variant avoids minor complexity introduced by the encoding of the point ''R'' in the signature (see paragraphs \"Encoding R and public key point P\" and \"Implicit Y coordinates\" further below in this subsection). Moreover, revealing ''e'' instead of ''R'' allows for potentially shorter signatures: Whereas an encoding of ''R'' inherently needs about 32 bytes, the hash ''e'' can be tuned to be shorter than 32 bytes, and [http://www.neven.org/papers/schnorr.pdf a short hash of only 16 bytes suffices to provide SUF-CMA security at the target security level of 128 bits]. However, a major drawback of this optimization is that finding collisions in a short hash function is easy. This complicates the implementation of secure signing protocols in scenarios in which a group of mutually distrusting signers work together to produce a single joint signature (see Applications below). In these scenarios, which are not captured by the SUF-CMA model due its assumption of a single honest signer, a promising attack strategy for malicious co-signers is to find a collision in the hash function in order to obtain a valid signature on a message that an honest co-signer did not intent to sign.",
      "path": "bip-0340.mediawiki",
      "position": 58,
      "original_position": 58,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "in_reply_to_id": null,
      "user": {
        "login": "jimmysong",
        "id": 524761,
        "node_id": "MDQ6VXNlcjUyNDc2MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimmysong",
        "html_url": "https://github.com/jimmysong",
        "followers_url": "https://api.github.com/users/jimmysong/followers",
        "following_url": "https://api.github.com/users/jimmysong/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimmysong/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimmysong/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
        "organizations_url": "https://api.github.com/users/jimmysong/orgs",
        "repos_url": "https://api.github.com/users/jimmysong/repos",
        "events_url": "https://api.github.com/users/jimmysong/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimmysong/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"did not intend to sign\"",
      "created_at": "2020-01-22T23:28:36Z",
      "updated_at": "2020-01-22T23:28:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r369862037",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/369862037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/370414046",
      "pull_request_review_id": 347682323,
      "id": 370414046,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxNDA0Ng==",
      "diff_hunk": "@@ -0,0 +1,263 @@\n+<pre>\n+  BIP: 340\n+  Title: Schnorr Signatures for secp256k1\n+  Author: Pieter Wuille <pieter.wuille@gmail.com>\n+          Jonas Nick <Jonas Nick <jonasd.nick@gmail.com>\n+          Tim Ruffing <crypto@timruffing.de>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0340\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-2-Clause\n+  Created: 2020-01-19\n+  Post-History: 2018-07-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016203.html [bitcoin-dev] Schnorr signatures BIP\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a standard for 64-byte Schnorr signatures over the elliptic curve ''secp256k1''.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 2-clause BSD license.\n+\n+=== Motivation ===\n+\n+Bitcoin has traditionally used\n+[https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm ECDSA] signatures over the [https://www.secg.org/sec2-v2.pdf secp256k1 curve] with [https://en.wikipedia.org/wiki/SHA-2 SHA256] hashes for authenticating\n+transactions. These are [https://www.secg.org/sec1-v2.pdf standardized], but have a number of downsides\n+compared to [http://publikationen.ub.uni-frankfurt.de/opus4/files/4280/schnorr.pdf Schnorr signatures] over the same curve:\n+\n+* '''Provable security''': Schnorr signatures are provably secure. In more detail, they are ''strongly unforgeable under chosen message attack (SUF-CMA)''<ref>Informally, this means that without knowledge of the secret key but given valid signatures of arbitrary messages, it is not possible to come up with further valid signatures.</ref> [https://www.di.ens.fr/~pointche/Documents/Papers/2000_joc.pdf in the random oracle model assuming the hardness of the elliptic curve discrete logarithm problem (ECDLP)] and [http://www.neven.org/papers/schnorr.pdf in the generic group model assuming variants of preimage and second preimage resistance of the used hash function]<ref>A detailed security proof in the random oracle model, which essentially restates [https://www.di.ens.fr/~pointche/Documents/Papers/2000_joc.pdf the original security proof by Pointcheval and Stern] more explicitly, can be found in [https://eprint.iacr.org/2016/191 a paper by Kiltz, Masny and Pan]. All these security proofs assume a variant of Schnorr signatures that use ''(e,s)'' instead of ''(R,s)'' (see Design above). Since we use a unique encoding of ''R'', there is an efficiently computable bijection that maps ''(R,s)'' to ''(e,s)'', which allows to convert a successful SUF-CMA attacker for the ''(e,s)'' variant to a successful SUF-CMA attacker for the ''(R,s)'' variant (and vice-versa). Furthermore, the proofs consider a variant of Schnorr signatures without key prefixing (see Design above), but it can be verified that the proofs are also correct for the variant with key prefixing. As a result, all the aforementioned security proofs apply to the variant of Schnorr signatures proposed in this document.</ref>. In contrast, the [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 best known results for the provable security of ECDSA] rely on stronger assumptions.\n+* '''Non-malleability''': The SUF-CMA security of Schnorr signatures implies that they are non-malleable. On the other hand, ECDSA signatures are inherently malleable<ref>If ''(r,s)'' is a valid ECDSA signature for a given message and key, then ''(r,n-s)'' is also valid for the same message and key. If ECDSA is restricted to only permit one of the two variants (as Bitcoin does through a policy rule on the network), it can be [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 proven] non-malleable under stronger than usual assumptions.</ref>; a third party without access to the secret key can alter an existing valid signature for a given public key and message into another signature that is valid for the same key and message. This issue is discussed in [[bip-0062.mediawiki|BIP62]] and [[bip-0146.mediawiki|BIP146]].\n+* '''Linearity''': Schnorr signatures provide a simple and efficient method that enables multiple collaborating parties to produce a signature that is valid for the sum of their public keys. This is the building block for various higher-level constructions that improve efficiency and privacy, such as multisignatures and others (see Applications below).\n+\n+For all these advantages, there are virtually no disadvantages, apart\n+from not being standardized. This document seeks to change that. As we\n+propose a new standard, a number of improvements not specific to Schnorr signatures can be\n+made:\n+\n+* '''Signature encoding''': Instead of using [https://en.wikipedia.org/wiki/X.690#DER_encoding DER]-encoding for signatures (which are variable size, and up to 72 bytes), we can use a simple fixed 64-byte format.\n+* '''Public key encoding''': Instead of using ''compressed'' 33-byte encodings of elliptic curve points which are common in Bitcoin today, public keys in this proposal are encoded as 32 bytes.\n+* '''Batch verification''': The specific formulation of ECDSA signatures that is standardized cannot be verified more efficiently in batch compared to individually, unless additional witness data is added. Changing the signature scheme offers an opportunity to address this.\n+* '''Completely specified''': To be safe for usage in consensus systems, the verification algorithm must be completely specified at the byte level. This guarantees that nobody can construct a signature that is valid to some verifiers but not all. This is traditionally not a requirement for digital signature schemes, and the lack of exact specification for the DER parsing of ECDSA signatures has caused problems for Bitcoin [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009697.html in the past], needing [[bip-0066.mediawiki|BIP66]] to address it. In this document we aim to meet this property by design. For batch verification, which is inherently non-deterministic as the verifier can choose their batches, this property implies that the outcome of verification may only differ from individual verifications with negligible probability, even to an attacker who intentionally tries to make batch- and non-batch verification differ.\n+\n+By reusing the same curve and hash function as Bitcoin uses for ECDSA, we are able to retain existing mechanisms for choosing secret and public keys, and we avoid introducing new assumptions about the security of elliptic curves and hash functions.\n+\n+== Description ==\n+\n+We first build up the algebraic formulation of the signature scheme by\n+going through the design choices. Afterwards, we specify the exact\n+encodings and operations.\n+\n+=== Design ===\n+\n+'''Schnorr signature variant''' Elliptic Curve Schnorr signatures for message ''m'' and public key ''P'' generally involve a point ''R'', integers ''e'' and ''s'' picked by the signer, and the base point ''G'' which satisfy ''e = hash(R || m)'' and ''s⋅G = R + e⋅P''. Two formulations exist, depending on whether the signer reveals ''e'' or ''R'':\n+# Signatures are pairs ''(e, s)'' that satisfy ''e = hash(s⋅G - e⋅P || m)''. This variant avoids minor complexity introduced by the encoding of the point ''R'' in the signature (see paragraphs \"Encoding R and public key point P\" and \"Implicit Y coordinates\" further below in this subsection). Moreover, revealing ''e'' instead of ''R'' allows for potentially shorter signatures: Whereas an encoding of ''R'' inherently needs about 32 bytes, the hash ''e'' can be tuned to be shorter than 32 bytes, and [http://www.neven.org/papers/schnorr.pdf a short hash of only 16 bytes suffices to provide SUF-CMA security at the target security level of 128 bits]. However, a major drawback of this optimization is that finding collisions in a short hash function is easy. This complicates the implementation of secure signing protocols in scenarios in which a group of mutually distrusting signers work together to produce a single joint signature (see Applications below). In these scenarios, which are not captured by the SUF-CMA model due its assumption of a single honest signer, a promising attack strategy for malicious co-signers is to find a collision in the hash function in order to obtain a valid signature on a message that an honest co-signer did not intent to sign.\n+# Signatures are pairs ''(R, s)'' that satisfy ''s⋅G = R + hash(R || m)⋅P''. This supports batch verification, as there are no elliptic curve operations inside the hashes. Batch verification enables significant speedups.\n+\n+[[File:bip-0340/speedup-batch.png|center|frame|This graph shows the ratio between the time it takes to verify ''n'' signatures individually and to verify a batch of ''n'' signatures. This ratio goes up logarithmically with the number of signatures, or in other words: the total time to verify ''n'' signatures grows with ''O(n / log n)''.]]\n+\n+Since we would like to avoid the fragility that comes with short hashes, the ''e'' variant does not provide significant advantages. We choose the ''R''-option, which supports batch verification. \n+\n+'''Key prefixing''' Using the verification rule above directly makes Schnorr signatures vulnerable to \"related-key attacks\" in which a third party can convert a signature ''(R, s)'' for public key ''P'' into a signature ''(R, s + a⋅hash(R || m))'' for public key ''P + a⋅G'' and the same message ''m'', for any given additive tweak ''a'' to the signing key. This would render signatures insecure when keys are generated using [[bip-0032.mediawiki#public-parent-key--public-child-key|BIP32's unhardened derivation]] and other methods that rely on additive tweaks to existing keys such as Taproot.\n+\n+To protect against these attacks, we choose ''key prefixed''<ref>A limitation of committing to the public key (rather than to a short hash of it, or not at all) is that it removes the ability for public key recovery or verifying signatures against a short public key hash. These constructions are generally incompatible with batch verification.</ref> Schnorr signatures; changing the equation to ''s⋅G = R + hash(R || P || m)⋅P''. [https://eprint.iacr.org/2015/1135.pdf It can be shown] that key prefixing protects against related-key attacks with additive tweaks. In general, key prefixing increases robustness in multi-user settings, e.g., it seems to be a requirement for proving the MuSig multisignature scheme secure (see Applications below).\n+\n+We note that key prefixing is not strictly necessary for transaction signatures as used in Bitcoin currently, because signed transactions indirectly commit to the public keys already, i.e., ''m'' contains a commitment to ''pk''. However, this indirect commitment should not be relied upon because it may change with proposals such as SIGHASH_NOINPUT ([[bip-0118.mediawiki|BIP118]]), and would render the signature scheme unsuitable for other purposes than signing transactions, e.g., [https://bitcoin.org/en/developer-reference#signmessage signing ordinary messages].\n+\n+'''Encoding R and public key point P''' There exist several possibilities for encoding elliptic curve points:\n+# Encoding the full X and Y coordinates of ''P'' and ''R'', resulting in a 64-byte public key and a 96-byte signature.\n+# Encoding the full X coordinate and one bit of the Y coordinate to determine one of the two possible Y coordinates. This would result in 33-byte public keys and 65-byte signatures.\n+# Encoding only the X coordinate, resulting in 32-byte public keys and 64-byte signatures.\n+\n+Using the first option would be slightly more efficient for verification (around 10%), but we prioritize compactness, and therefore choose option 3.\n+\n+'''Implicit Y coordinates''' In order to support efficient verification and batch verification, the Y coordinate of ''P'' and of ''R'' cannot be ambiguous (every valid X coordinate has two possible Y coordinates). We have a choice between several options for symmetry breaking:\n+# Implicitly choosing the Y coordinate that is in the lower half.\n+# Implicitly choosing the Y coordinate that is even<ref>Since ''p'' is odd, negation modulo ''p'' will map even numbers to odd numbers and the other way around. This means that for a valid X coordinate, one of the corresponding Y coordinates will be even, and the other will be odd.</ref>.\n+# Implicitly choosing the Y coordinate that is a quadratic residue (has a square root modulo the field size, or \"is a square\" for short)<ref>A product of two numbers is a square when either both or none of the factors are squares. As ''-1'' is not a square modulo secp256k1's field size ''p'', and the two Y coordinates corresponding to a given X coordinate are each other's negation, this means exactly one of the two must be a square.</ref>.\n+\n+In the case of ''R'' the third option is slower at signing time but a bit faster to verify, as it is possible to directly compute whether the Y coordinate is a square when the points are represented in\n+[https://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates Jacobian coordinates] (a common optimization to avoid modular inverses\n+for elliptic curve operations). The two other options require a possibly\n+expensive conversion to affine coordinates first. This would even be the case if the sign or oddness were explicitly coded (option 2 in the list above). We therefore choose option 3.\n+\n+For ''P'' the speed of signing and verification does not significantly differ between any of the three options because affine coordinates of the point have to be computed anyway. For consistency reasons we choose the same option as for ''R''. The signing algorithm ensures that the signature is valid under the correct public key by negating the secret key if necessary.\n+\n+Implicit Y coordinates are not a reduction in security when expressed as the number of elliptic curve operations an attacker is expected to perform to compute the secret key. An attacker can normalize any given public key to a point whose Y coordinate is a square by negating the point if necessary. This is just a subtraction of field elements and not an elliptic curve operation<ref>This can be formalized by a simple reduction that reduces an attack on Schnorr signatures with implicit Y coordinates to an attack to Schnorr signatures with explicit Y coordinates. The reduction works by reencoding public keys and negating the result of the hash function, which is modeled as random oracle, whenever the challenge public key has an explicit Y coordinate that is not a square. A proof sketch can be found [https://medium.com/blockstream/reducing-bitcoin-transaction-sizes-with-x-only-pubkeys-f86476af05d7 here].</ref>.\n+\n+'''Tagged Hashes''' Cryptographic hash functions are used for multiple purposes in the specification below and in Bitcoin in general. To make sure hashes used in one context can't be reinterpreted in another one, hash functions can be tweaked with a context-dependent tag name, in such a way that collisions across contexts can be assumed to be infeasible. Such collisions obviously can not be ruled out completely, but only for schemes using tagging with a unique name. As for other schemes collisions are at least less likely with tagging than without.\n+\n+For example, without tagged hashing a BIP340 signature could also be valid for a signature scheme where the only difference is that the arguments to the hash function are reordered. Worse, if the BIP340 nonce derivation function was copied or independently created, then the nonce could be accidentally reused in the other scheme leaking the secret key.\n+\n+This proposal suggests to include the tag by prefixing the hashed data with ''SHA256(tag) || SHA256(tag)''. Because this is a 64-byte long context-specific constant and the ''SHA256'' block size is also 64 bytes, optimized implementations are possible (identical to SHA256 itself, but with a modified initial state). Using SHA256 of the tag name itself is reasonably simple and efficient for implementations that don't choose to use the optimization.\n+\n+'''Final scheme''' As a result, our final scheme ends up using public key ''pk'' which is the X coordinate of a point ''P'' on the curve whose Y coordinate is a square and signatures ''(r,s)'' where ''r'' is the X coordinate of a point ''R'' whose Y coordinate is a square. The signature satisfies ''s⋅G = R + tagged_hash(r || pk || m)⋅P''.\n+\n+=== Specification ===\n+\n+The following conventions are used, with constants as defined for [https://www.secg.org/sec2-v2.pdf secp256k1]:\n+* Lowercase variables represent integers or byte arrays.\n+** The constant ''p'' refers to the field size, ''0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F''.\n+** The constant ''n'' refers to the curve order, ''0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141''.\n+* Uppercase variables refer to points on the curve with equation ''y<sup>2</sup> = x<sup>3</sup> + 7'' over the integers modulo ''p''.\n+** ''is_infinite(P)'' returns whether or not ''P'' is the point at infinity.\n+** ''x(P)'' and ''y(P)'' are integers in the range ''0..p-1'' and refer to the X and Y coordinates of a point ''P'' (assuming it is not infinity).\n+** The constant ''G'' refers to the base point, for which ''x(G) = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798'' and ''y(G) = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8''.\n+** Addition of points refers to the usual [https://en.wikipedia.org/wiki/Elliptic_curve#The_group_law elliptic curve group operation].\n+** [https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication Multiplication (⋅) of an integer and a point] refers to the repeated application of the group operation.\n+* Functions and operations:\n+** ''||'' refers to byte array concatenation.\n+** The function ''x[i:j]'', where ''x'' is a byte array, returns a ''(j - i)''-byte array with a copy of the ''i''-th byte (inclusive) to the ''j''-th byte (exclusive) of ''x''.\n+** The function ''bytes(x)'', where ''x'' is an integer, returns the 32-byte encoding of ''x'', most significant byte first.\n+** The function ''bytes(P)'', where ''P'' is a point, returns ''bytes(x(P))''.\n+** The function ''int(x)'', where ''x'' is a 32-byte array, returns the 256-bit unsigned integer whose most significant byte first encoding is ''x''.\n+** The function ''is_square(x)'', where ''x'' is an integer, returns whether or not ''x'' is a quadratic residue modulo ''p''. Since ''p'' is prime, it is equivalent to the [https://en.wikipedia.org/wiki/Legendre_symbol Legendre symbol] ''(x / p) = x<sup>(p-1)/2</sup> mod p'' being equal to ''1''<ref>For points ''P'' on the secp256k1 curve it holds that ''y(P)<sup>(p-1)/2</sup> &ne; 0 mod p''.</ref>.\n+** The function ''has_square_y(P)'', where ''P'' is a point, is defined as ''not is_infinite(P) and is_square(y(P))''<ref>For points ''P'' on the secp256k1 curve it holds that ''has_square_y(P) = not has_square_y(-P)''.</ref>.\n+** The function ''lift_x(x)'', where ''x'' is an integer in range ''0..p-1'', returns the point ''P'' for which ''x(P) = x''<ref>\n+    Given a candidate X coordinate ''x'' in the range ''0..p-1'', there exist either exactly two or exactly zero valid Y coordinates. If no valid Y coordinate exists, then ''x'' is not a valid X coordinate either, i.e., no point ''P'' exists for which ''x(P) = x''. The valid Y coordinates for a given candidate ''x'' are the square roots of ''c = x<sup>3</sup> + 7 mod p'' and they can be computed as ''y = &plusmn;c<sup>(p+1)/4</sup> mod p'' (see [https://en.wikipedia.org/wiki/Quadratic_residue#Prime_or_prime_power_modulus Quadratic residue]) if they exist, which can be checked by squaring and comparing with ''c''.\n+</ref> and ''has_square_y(P)''<ref>\n+    If ''P := lift_x(x)'' does not fail, then ''y := y(P) = c<sup>(p+1)/4</sup> mod p'' is square. Proof: If ''lift_x'' does not fail, ''y'' is a square root of ''c'' and therefore the [https://en.wikipedia.org/wiki/Legendre_symbol Legendre symbol] ''(c / p)'' is ''c<sup>(p-1)/2</sup> = 1 mod p''. Because the Legendre symbol ''(y / p)'' is ''y<sup>(p-1)/2</sup> mod p = c<sup>((p+1)/4)((p-1)/2)</sup> mod p = 1<sup>((p+1)/4)</sup> mod p = 1 mod p'', ''y'' is square.\n+</ref>, or fails if no such point exists. The function ''lift_x(x)'' is equivalent to the following pseudocode:\n+*** Let ''c = x<sup>3</sup> + 7 mod p''.",
      "path": "bip-0340.mediawiki",
      "position": 125,
      "original_position": 125,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "in_reply_to_id": null,
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this be `''c = (x<sup>3</sup> + 7) mod p''`?",
      "created_at": "2020-01-23T23:47:45Z",
      "updated_at": "2020-01-23T23:47:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r370414046",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/370414046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/370422609",
      "pull_request_review_id": 347692722,
      "id": 370422609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyMjYwOQ==",
      "diff_hunk": "@@ -0,0 +1,263 @@\n+<pre>\n+  BIP: 340\n+  Title: Schnorr Signatures for secp256k1\n+  Author: Pieter Wuille <pieter.wuille@gmail.com>\n+          Jonas Nick <Jonas Nick <jonasd.nick@gmail.com>\n+          Tim Ruffing <crypto@timruffing.de>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0340\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-2-Clause\n+  Created: 2020-01-19\n+  Post-History: 2018-07-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016203.html [bitcoin-dev] Schnorr signatures BIP\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a standard for 64-byte Schnorr signatures over the elliptic curve ''secp256k1''.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 2-clause BSD license.\n+\n+=== Motivation ===\n+\n+Bitcoin has traditionally used\n+[https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm ECDSA] signatures over the [https://www.secg.org/sec2-v2.pdf secp256k1 curve] with [https://en.wikipedia.org/wiki/SHA-2 SHA256] hashes for authenticating\n+transactions. These are [https://www.secg.org/sec1-v2.pdf standardized], but have a number of downsides\n+compared to [http://publikationen.ub.uni-frankfurt.de/opus4/files/4280/schnorr.pdf Schnorr signatures] over the same curve:\n+\n+* '''Provable security''': Schnorr signatures are provably secure. In more detail, they are ''strongly unforgeable under chosen message attack (SUF-CMA)''<ref>Informally, this means that without knowledge of the secret key but given valid signatures of arbitrary messages, it is not possible to come up with further valid signatures.</ref> [https://www.di.ens.fr/~pointche/Documents/Papers/2000_joc.pdf in the random oracle model assuming the hardness of the elliptic curve discrete logarithm problem (ECDLP)] and [http://www.neven.org/papers/schnorr.pdf in the generic group model assuming variants of preimage and second preimage resistance of the used hash function]<ref>A detailed security proof in the random oracle model, which essentially restates [https://www.di.ens.fr/~pointche/Documents/Papers/2000_joc.pdf the original security proof by Pointcheval and Stern] more explicitly, can be found in [https://eprint.iacr.org/2016/191 a paper by Kiltz, Masny and Pan]. All these security proofs assume a variant of Schnorr signatures that use ''(e,s)'' instead of ''(R,s)'' (see Design above). Since we use a unique encoding of ''R'', there is an efficiently computable bijection that maps ''(R,s)'' to ''(e,s)'', which allows to convert a successful SUF-CMA attacker for the ''(e,s)'' variant to a successful SUF-CMA attacker for the ''(R,s)'' variant (and vice-versa). Furthermore, the proofs consider a variant of Schnorr signatures without key prefixing (see Design above), but it can be verified that the proofs are also correct for the variant with key prefixing. As a result, all the aforementioned security proofs apply to the variant of Schnorr signatures proposed in this document.</ref>. In contrast, the [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 best known results for the provable security of ECDSA] rely on stronger assumptions.\n+* '''Non-malleability''': The SUF-CMA security of Schnorr signatures implies that they are non-malleable. On the other hand, ECDSA signatures are inherently malleable<ref>If ''(r,s)'' is a valid ECDSA signature for a given message and key, then ''(r,n-s)'' is also valid for the same message and key. If ECDSA is restricted to only permit one of the two variants (as Bitcoin does through a policy rule on the network), it can be [https://nbn-resolving.de/urn:nbn:de:hbz:294-60803 proven] non-malleable under stronger than usual assumptions.</ref>; a third party without access to the secret key can alter an existing valid signature for a given public key and message into another signature that is valid for the same key and message. This issue is discussed in [[bip-0062.mediawiki|BIP62]] and [[bip-0146.mediawiki|BIP146]].\n+* '''Linearity''': Schnorr signatures provide a simple and efficient method that enables multiple collaborating parties to produce a signature that is valid for the sum of their public keys. This is the building block for various higher-level constructions that improve efficiency and privacy, such as multisignatures and others (see Applications below).\n+\n+For all these advantages, there are virtually no disadvantages, apart\n+from not being standardized. This document seeks to change that. As we\n+propose a new standard, a number of improvements not specific to Schnorr signatures can be\n+made:\n+\n+* '''Signature encoding''': Instead of using [https://en.wikipedia.org/wiki/X.690#DER_encoding DER]-encoding for signatures (which are variable size, and up to 72 bytes), we can use a simple fixed 64-byte format.\n+* '''Public key encoding''': Instead of using ''compressed'' 33-byte encodings of elliptic curve points which are common in Bitcoin today, public keys in this proposal are encoded as 32 bytes.\n+* '''Batch verification''': The specific formulation of ECDSA signatures that is standardized cannot be verified more efficiently in batch compared to individually, unless additional witness data is added. Changing the signature scheme offers an opportunity to address this.\n+* '''Completely specified''': To be safe for usage in consensus systems, the verification algorithm must be completely specified at the byte level. This guarantees that nobody can construct a signature that is valid to some verifiers but not all. This is traditionally not a requirement for digital signature schemes, and the lack of exact specification for the DER parsing of ECDSA signatures has caused problems for Bitcoin [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009697.html in the past], needing [[bip-0066.mediawiki|BIP66]] to address it. In this document we aim to meet this property by design. For batch verification, which is inherently non-deterministic as the verifier can choose their batches, this property implies that the outcome of verification may only differ from individual verifications with negligible probability, even to an attacker who intentionally tries to make batch- and non-batch verification differ.\n+\n+By reusing the same curve and hash function as Bitcoin uses for ECDSA, we are able to retain existing mechanisms for choosing secret and public keys, and we avoid introducing new assumptions about the security of elliptic curves and hash functions.\n+\n+== Description ==\n+\n+We first build up the algebraic formulation of the signature scheme by\n+going through the design choices. Afterwards, we specify the exact\n+encodings and operations.\n+\n+=== Design ===\n+\n+'''Schnorr signature variant''' Elliptic Curve Schnorr signatures for message ''m'' and public key ''P'' generally involve a point ''R'', integers ''e'' and ''s'' picked by the signer, and the base point ''G'' which satisfy ''e = hash(R || m)'' and ''s⋅G = R + e⋅P''. Two formulations exist, depending on whether the signer reveals ''e'' or ''R'':\n+# Signatures are pairs ''(e, s)'' that satisfy ''e = hash(s⋅G - e⋅P || m)''. This variant avoids minor complexity introduced by the encoding of the point ''R'' in the signature (see paragraphs \"Encoding R and public key point P\" and \"Implicit Y coordinates\" further below in this subsection). Moreover, revealing ''e'' instead of ''R'' allows for potentially shorter signatures: Whereas an encoding of ''R'' inherently needs about 32 bytes, the hash ''e'' can be tuned to be shorter than 32 bytes, and [http://www.neven.org/papers/schnorr.pdf a short hash of only 16 bytes suffices to provide SUF-CMA security at the target security level of 128 bits]. However, a major drawback of this optimization is that finding collisions in a short hash function is easy. This complicates the implementation of secure signing protocols in scenarios in which a group of mutually distrusting signers work together to produce a single joint signature (see Applications below). In these scenarios, which are not captured by the SUF-CMA model due its assumption of a single honest signer, a promising attack strategy for malicious co-signers is to find a collision in the hash function in order to obtain a valid signature on a message that an honest co-signer did not intent to sign.\n+# Signatures are pairs ''(R, s)'' that satisfy ''s⋅G = R + hash(R || m)⋅P''. This supports batch verification, as there are no elliptic curve operations inside the hashes. Batch verification enables significant speedups.\n+\n+[[File:bip-0340/speedup-batch.png|center|frame|This graph shows the ratio between the time it takes to verify ''n'' signatures individually and to verify a batch of ''n'' signatures. This ratio goes up logarithmically with the number of signatures, or in other words: the total time to verify ''n'' signatures grows with ''O(n / log n)''.]]\n+\n+Since we would like to avoid the fragility that comes with short hashes, the ''e'' variant does not provide significant advantages. We choose the ''R''-option, which supports batch verification. \n+\n+'''Key prefixing''' Using the verification rule above directly makes Schnorr signatures vulnerable to \"related-key attacks\" in which a third party can convert a signature ''(R, s)'' for public key ''P'' into a signature ''(R, s + a⋅hash(R || m))'' for public key ''P + a⋅G'' and the same message ''m'', for any given additive tweak ''a'' to the signing key. This would render signatures insecure when keys are generated using [[bip-0032.mediawiki#public-parent-key--public-child-key|BIP32's unhardened derivation]] and other methods that rely on additive tweaks to existing keys such as Taproot.\n+\n+To protect against these attacks, we choose ''key prefixed''<ref>A limitation of committing to the public key (rather than to a short hash of it, or not at all) is that it removes the ability for public key recovery or verifying signatures against a short public key hash. These constructions are generally incompatible with batch verification.</ref> Schnorr signatures; changing the equation to ''s⋅G = R + hash(R || P || m)⋅P''. [https://eprint.iacr.org/2015/1135.pdf It can be shown] that key prefixing protects against related-key attacks with additive tweaks. In general, key prefixing increases robustness in multi-user settings, e.g., it seems to be a requirement for proving the MuSig multisignature scheme secure (see Applications below).\n+\n+We note that key prefixing is not strictly necessary for transaction signatures as used in Bitcoin currently, because signed transactions indirectly commit to the public keys already, i.e., ''m'' contains a commitment to ''pk''. However, this indirect commitment should not be relied upon because it may change with proposals such as SIGHASH_NOINPUT ([[bip-0118.mediawiki|BIP118]]), and would render the signature scheme unsuitable for other purposes than signing transactions, e.g., [https://bitcoin.org/en/developer-reference#signmessage signing ordinary messages].\n+\n+'''Encoding R and public key point P''' There exist several possibilities for encoding elliptic curve points:\n+# Encoding the full X and Y coordinates of ''P'' and ''R'', resulting in a 64-byte public key and a 96-byte signature.\n+# Encoding the full X coordinate and one bit of the Y coordinate to determine one of the two possible Y coordinates. This would result in 33-byte public keys and 65-byte signatures.\n+# Encoding only the X coordinate, resulting in 32-byte public keys and 64-byte signatures.\n+\n+Using the first option would be slightly more efficient for verification (around 10%), but we prioritize compactness, and therefore choose option 3.\n+\n+'''Implicit Y coordinates''' In order to support efficient verification and batch verification, the Y coordinate of ''P'' and of ''R'' cannot be ambiguous (every valid X coordinate has two possible Y coordinates). We have a choice between several options for symmetry breaking:\n+# Implicitly choosing the Y coordinate that is in the lower half.\n+# Implicitly choosing the Y coordinate that is even<ref>Since ''p'' is odd, negation modulo ''p'' will map even numbers to odd numbers and the other way around. This means that for a valid X coordinate, one of the corresponding Y coordinates will be even, and the other will be odd.</ref>.\n+# Implicitly choosing the Y coordinate that is a quadratic residue (has a square root modulo the field size, or \"is a square\" for short)<ref>A product of two numbers is a square when either both or none of the factors are squares. As ''-1'' is not a square modulo secp256k1's field size ''p'', and the two Y coordinates corresponding to a given X coordinate are each other's negation, this means exactly one of the two must be a square.</ref>.\n+\n+In the case of ''R'' the third option is slower at signing time but a bit faster to verify, as it is possible to directly compute whether the Y coordinate is a square when the points are represented in\n+[https://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates Jacobian coordinates] (a common optimization to avoid modular inverses\n+for elliptic curve operations). The two other options require a possibly\n+expensive conversion to affine coordinates first. This would even be the case if the sign or oddness were explicitly coded (option 2 in the list above). We therefore choose option 3.\n+\n+For ''P'' the speed of signing and verification does not significantly differ between any of the three options because affine coordinates of the point have to be computed anyway. For consistency reasons we choose the same option as for ''R''. The signing algorithm ensures that the signature is valid under the correct public key by negating the secret key if necessary.\n+\n+Implicit Y coordinates are not a reduction in security when expressed as the number of elliptic curve operations an attacker is expected to perform to compute the secret key. An attacker can normalize any given public key to a point whose Y coordinate is a square by negating the point if necessary. This is just a subtraction of field elements and not an elliptic curve operation<ref>This can be formalized by a simple reduction that reduces an attack on Schnorr signatures with implicit Y coordinates to an attack to Schnorr signatures with explicit Y coordinates. The reduction works by reencoding public keys and negating the result of the hash function, which is modeled as random oracle, whenever the challenge public key has an explicit Y coordinate that is not a square. A proof sketch can be found [https://medium.com/blockstream/reducing-bitcoin-transaction-sizes-with-x-only-pubkeys-f86476af05d7 here].</ref>.\n+\n+'''Tagged Hashes''' Cryptographic hash functions are used for multiple purposes in the specification below and in Bitcoin in general. To make sure hashes used in one context can't be reinterpreted in another one, hash functions can be tweaked with a context-dependent tag name, in such a way that collisions across contexts can be assumed to be infeasible. Such collisions obviously can not be ruled out completely, but only for schemes using tagging with a unique name. As for other schemes collisions are at least less likely with tagging than without.\n+\n+For example, without tagged hashing a BIP340 signature could also be valid for a signature scheme where the only difference is that the arguments to the hash function are reordered. Worse, if the BIP340 nonce derivation function was copied or independently created, then the nonce could be accidentally reused in the other scheme leaking the secret key.\n+\n+This proposal suggests to include the tag by prefixing the hashed data with ''SHA256(tag) || SHA256(tag)''. Because this is a 64-byte long context-specific constant and the ''SHA256'' block size is also 64 bytes, optimized implementations are possible (identical to SHA256 itself, but with a modified initial state). Using SHA256 of the tag name itself is reasonably simple and efficient for implementations that don't choose to use the optimization.\n+\n+'''Final scheme''' As a result, our final scheme ends up using public key ''pk'' which is the X coordinate of a point ''P'' on the curve whose Y coordinate is a square and signatures ''(r,s)'' where ''r'' is the X coordinate of a point ''R'' whose Y coordinate is a square. The signature satisfies ''s⋅G = R + tagged_hash(r || pk || m)⋅P''.\n+\n+=== Specification ===\n+\n+The following conventions are used, with constants as defined for [https://www.secg.org/sec2-v2.pdf secp256k1]:\n+* Lowercase variables represent integers or byte arrays.\n+** The constant ''p'' refers to the field size, ''0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F''.\n+** The constant ''n'' refers to the curve order, ''0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141''.\n+* Uppercase variables refer to points on the curve with equation ''y<sup>2</sup> = x<sup>3</sup> + 7'' over the integers modulo ''p''.\n+** ''is_infinite(P)'' returns whether or not ''P'' is the point at infinity.\n+** ''x(P)'' and ''y(P)'' are integers in the range ''0..p-1'' and refer to the X and Y coordinates of a point ''P'' (assuming it is not infinity).\n+** The constant ''G'' refers to the base point, for which ''x(G) = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798'' and ''y(G) = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8''.\n+** Addition of points refers to the usual [https://en.wikipedia.org/wiki/Elliptic_curve#The_group_law elliptic curve group operation].\n+** [https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication Multiplication (⋅) of an integer and a point] refers to the repeated application of the group operation.\n+* Functions and operations:\n+** ''||'' refers to byte array concatenation.\n+** The function ''x[i:j]'', where ''x'' is a byte array, returns a ''(j - i)''-byte array with a copy of the ''i''-th byte (inclusive) to the ''j''-th byte (exclusive) of ''x''.\n+** The function ''bytes(x)'', where ''x'' is an integer, returns the 32-byte encoding of ''x'', most significant byte first.\n+** The function ''bytes(P)'', where ''P'' is a point, returns ''bytes(x(P))''.\n+** The function ''int(x)'', where ''x'' is a 32-byte array, returns the 256-bit unsigned integer whose most significant byte first encoding is ''x''.\n+** The function ''is_square(x)'', where ''x'' is an integer, returns whether or not ''x'' is a quadratic residue modulo ''p''. Since ''p'' is prime, it is equivalent to the [https://en.wikipedia.org/wiki/Legendre_symbol Legendre symbol] ''(x / p) = x<sup>(p-1)/2</sup> mod p'' being equal to ''1''<ref>For points ''P'' on the secp256k1 curve it holds that ''y(P)<sup>(p-1)/2</sup> &ne; 0 mod p''.</ref>.\n+** The function ''has_square_y(P)'', where ''P'' is a point, is defined as ''not is_infinite(P) and is_square(y(P))''<ref>For points ''P'' on the secp256k1 curve it holds that ''has_square_y(P) = not has_square_y(-P)''.</ref>.\n+** The function ''lift_x(x)'', where ''x'' is an integer in range ''0..p-1'', returns the point ''P'' for which ''x(P) = x''<ref>\n+    Given a candidate X coordinate ''x'' in the range ''0..p-1'', there exist either exactly two or exactly zero valid Y coordinates. If no valid Y coordinate exists, then ''x'' is not a valid X coordinate either, i.e., no point ''P'' exists for which ''x(P) = x''. The valid Y coordinates for a given candidate ''x'' are the square roots of ''c = x<sup>3</sup> + 7 mod p'' and they can be computed as ''y = &plusmn;c<sup>(p+1)/4</sup> mod p'' (see [https://en.wikipedia.org/wiki/Quadratic_residue#Prime_or_prime_power_modulus Quadratic residue]) if they exist, which can be checked by squaring and comparing with ''c''.\n+</ref> and ''has_square_y(P)''<ref>\n+    If ''P := lift_x(x)'' does not fail, then ''y := y(P) = c<sup>(p+1)/4</sup> mod p'' is square. Proof: If ''lift_x'' does not fail, ''y'' is a square root of ''c'' and therefore the [https://en.wikipedia.org/wiki/Legendre_symbol Legendre symbol] ''(c / p)'' is ''c<sup>(p-1)/2</sup> = 1 mod p''. Because the Legendre symbol ''(y / p)'' is ''y<sup>(p-1)/2</sup> mod p = c<sup>((p+1)/4)((p-1)/2)</sup> mod p = 1<sup>((p+1)/4)</sup> mod p = 1 mod p'', ''y'' is square.\n+</ref>, or fails if no such point exists. The function ''lift_x(x)'' is equivalent to the following pseudocode:\n+*** Let ''c = x<sup>3</sup> + 7 mod p''.",
      "path": "bip-0340.mediawiki",
      "position": 125,
      "original_position": 125,
      "commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "original_commit_id": "9cf4038f17cb566bdc79b5ec12dee5338b1122d1",
      "in_reply_to_id": 370414046,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Generally when a \"mod a\" is written after an expression it means all operations are mod a.",
      "created_at": "2020-01-24T00:20:33Z",
      "updated_at": "2020-01-24T00:20:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/876#discussion_r370422609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/370422609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/876"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    }
  ]
}