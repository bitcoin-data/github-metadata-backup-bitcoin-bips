{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/2017",
    "id": 2946101330,
    "node_id": "PR_kwDOAN28mc6vmfBS",
    "html_url": "https://github.com/bitcoin/bips/pull/2017",
    "diff_url": "https://github.com/bitcoin/bips/pull/2017.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/2017.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/2017/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/3c718237072c107ced8c3531a487354fbdae55df",
    "number": 2017,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Reduced Data Temporary Softfork",
    "user": {
      "login": "dathonohm",
      "id": 239863417,
      "node_id": "U_kgDODkwGeQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dathonohm",
      "html_url": "https://github.com/dathonohm",
      "followers_url": "https://api.github.com/users/dathonohm/followers",
      "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
      "organizations_url": "https://api.github.com/users/dathonohm/orgs",
      "repos_url": "https://api.github.com/users/dathonohm/repos",
      "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dathonohm/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Due to Bitcoin Core v30 gaining in popularity, it has become necessary to move forward on [@luke-jr's ML proposal](https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6) to temporarily limit arbitrary data at the consensus level, which so far has 3 weeks with no objections.\r\n\r\nImplementation for the \"proactive deployment\" is under construction, while the \"reactive deployment\" is feature complete but lacks tests.\r\n\r\nMailing list thread at https://groups.google.com/g/bitcoindev/c/nOZim6FbuF8\r\n\r\n---\r\n\r\nEditor note: please post conceptual feedback and meta-commentary on the mailing list [thread](https://groups.google.com/g/bitcoindev/c/nOZim6FbuF8), and focus here on:\r\n\r\n- expert technical review of the specification\r\n- specific, concrete, helpful proposals for the other sections\r\n\r\n(Please refrain from personal or heated commentary, pedantry, and repeating yourself in both venues.)",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2025-10-24T21:28:07Z",
    "updated_at": "2025-10-27T00:30:05Z",
    "mergeable": true,
    "mergeable_state": "unstable",
    "merged": false,
    "merge_commit_sha": "5be55d0947521146cecc9d36aa8117f64ca9d2bd",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "dathonohm:reduced-data",
      "ref": "reduced-data",
      "sha": "3c718237072c107ced8c3531a487354fbdae55df",
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1082252356,
        "node_id": "R_kgDOQIHcRA",
        "name": "bips",
        "full_name": "dathonohm/bips",
        "owner": {
          "login": "dathonohm",
          "id": 239863417,
          "node_id": "U_kgDODkwGeQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dathonohm",
          "html_url": "https://github.com/dathonohm",
          "followers_url": "https://api.github.com/users/dathonohm/followers",
          "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
          "organizations_url": "https://api.github.com/users/dathonohm/orgs",
          "repos_url": "https://api.github.com/users/dathonohm/repos",
          "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dathonohm/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/dathonohm/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/dathonohm/bips",
        "archive_url": "https://api.github.com/repos/dathonohm/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dathonohm/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dathonohm/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dathonohm/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dathonohm/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dathonohm/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dathonohm/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dathonohm/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dathonohm/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dathonohm/bips/contributors",
        "deployments_url": "https://api.github.com/repos/dathonohm/bips/deployments",
        "downloads_url": "https://api.github.com/repos/dathonohm/bips/downloads",
        "events_url": "https://api.github.com/repos/dathonohm/bips/events",
        "forks_url": "https://api.github.com/repos/dathonohm/bips/forks",
        "git_commits_url": "https://api.github.com/repos/dathonohm/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dathonohm/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dathonohm/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dathonohm/bips.git",
        "issue_comment_url": "https://api.github.com/repos/dathonohm/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dathonohm/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dathonohm/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dathonohm/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dathonohm/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dathonohm/bips/languages",
        "merges_url": "https://api.github.com/repos/dathonohm/bips/merges",
        "milestones_url": "https://api.github.com/repos/dathonohm/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dathonohm/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dathonohm/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dathonohm/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:dathonohm/bips.git",
        "stargazers_url": "https://api.github.com/repos/dathonohm/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/dathonohm/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dathonohm/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/dathonohm/bips/subscription",
        "tags_url": "https://api.github.com/repos/dathonohm/bips/tags",
        "teams_url": "https://api.github.com/repos/dathonohm/bips/teams",
        "trees_url": "https://api.github.com/repos/dathonohm/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dathonohm/bips.git",
        "hooks_url": "https://api.github.com/repos/dathonohm/bips/hooks",
        "svn_url": "https://github.com/dathonohm/bips",
        "homepage": "",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 16699,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-25T02:58:32Z",
        "created_at": "2025-10-24T00:55:03Z",
        "updated_at": "2025-10-24T00:55:04Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "fd7fe26a7ea279439d2633b4ce833b8b48112b4c",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5799,
        "stargazers_count": 10293,
        "watchers_count": 10293,
        "size": 16713,
        "default_branch": "master",
        "open_issues_count": 59,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-26T21:54:14Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-10-26T21:54:19Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 437,
    "deletions": 0,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 170,
    "comments": 11
  },
  "events": [
    {
      "event": "labeled",
      "id": 20494586478,
      "node_id": "LE_lADOAN28mc7TqOo1zwAAAATFkpJu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20494586478",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T22:14:32Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 3379308659,
      "node_id": "PRR_kwDOAN28mc7JbChz",
      "url": null,
      "actor": null,
      "commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-25T01:32:20Z",
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3379308659",
      "submitted_at": "2025-10-25T01:32:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNjNzE4MjM3MDcyYzEwN2NlZDhjMzUzMWE0ODczNTRmYmRhZTU1ZGY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3c718237072c107ced8c3531a487354fbdae55df",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3c718237072c107ced8c3531a487354fbdae55df",
      "tree": {
        "sha": "922e01980529d350a57c769961421272680da1e8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/922e01980529d350a57c769961421272680da1e8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fd7fe26a7ea279439d2633b4ce833b8b48112b4c",
          "sha": "fd7fe26a7ea279439d2633b4ce833b8b48112b4c",
          "html_url": "https://github.com/bitcoin/bips/commit/fd7fe26a7ea279439d2633b4ce833b8b48112b4c"
        }
      ],
      "message": "Reduced Data Temporary Softfork",
      "committer": {
        "name": "Dathon Ohm",
        "email": "dathonohm@proton.me",
        "date": "2025-10-25T02:57:38Z"
      },
      "author": {
        "name": "Dathon Ohm",
        "email": "dathonohm@proton.me",
        "date": "2025-10-24T20:36:58Z"
      },
      "sha": "3c718237072c107ced8c3531a487354fbdae55df"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20496984764,
      "node_id": "HRFPE_lADOAN28mc7TqOo1zwAAAATFtyq8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20496984764",
      "actor": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": "https://api.github.com/repos/dathonohm/bips/commits/3c718237072c107ced8c3531a487354fbdae55df",
      "created_at": "2025-10-25T02:58:33Z"
    },
    {
      "event": "commented",
      "id": 3446685330,
      "node_id": "IC_kwDOAN28mc7NcD6S",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3446685330",
      "actor": {
        "login": "rot13maxi",
        "id": 115941166,
        "node_id": "U_kgDOBukfLg",
        "avatar_url": "https://avatars.githubusercontent.com/u/115941166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rot13maxi",
        "html_url": "https://github.com/rot13maxi",
        "followers_url": "https://api.github.com/users/rot13maxi/followers",
        "following_url": "https://api.github.com/users/rot13maxi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rot13maxi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rot13maxi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rot13maxi/subscriptions",
        "organizations_url": "https://api.github.com/users/rot13maxi/orgs",
        "repos_url": "https://api.github.com/users/rot13maxi/repos",
        "events_url": "https://api.github.com/users/rot13maxi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rot13maxi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-25T13:08:03Z",
      "updated_at": "2025-10-25T13:08:03Z",
      "author_association": "NONE",
      "body": "I suggest you add an FAQ item for “why block 987424“. If the intent is to have it be a year out, the height might actually move during discussion, and right now its just a magic number in the document. ",
      "user": {
        "login": "rot13maxi",
        "id": 115941166,
        "node_id": "U_kgDOBukfLg",
        "avatar_url": "https://avatars.githubusercontent.com/u/115941166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rot13maxi",
        "html_url": "https://github.com/rot13maxi",
        "followers_url": "https://api.github.com/users/rot13maxi/followers",
        "following_url": "https://api.github.com/users/rot13maxi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rot13maxi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rot13maxi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rot13maxi/subscriptions",
        "organizations_url": "https://api.github.com/users/rot13maxi/orgs",
        "repos_url": "https://api.github.com/users/rot13maxi/repos",
        "events_url": "https://api.github.com/users/rot13maxi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rot13maxi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3446685330",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "commented",
      "id": 3446830606,
      "node_id": "IC_kwDOAN28mc7NcnYO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3446830606",
      "actor": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-25T15:16:33Z",
      "updated_at": "2025-10-25T15:16:33Z",
      "author_association": "NONE",
      "body": "@rot13maxi see the deployment section\r\n\r\n<img width=\"1288\" height=\"494\" alt=\"Screenshot 2025-10-25 at 09 14 55\" src=\"https://github.com/user-attachments/assets/0fb99835-ccfb-4484-af49-4cde5ed3c55c\" />\r\n",
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3446830606",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "mentioned",
      "id": 20503077141,
      "node_id": "MEE_lADOAN28mc7TqOo1zwAAAATGFCEV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20503077141",
      "actor": {
        "login": "rot13maxi",
        "id": 115941166,
        "node_id": "U_kgDOBukfLg",
        "avatar_url": "https://avatars.githubusercontent.com/u/115941166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rot13maxi",
        "html_url": "https://github.com/rot13maxi",
        "followers_url": "https://api.github.com/users/rot13maxi/followers",
        "following_url": "https://api.github.com/users/rot13maxi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rot13maxi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rot13maxi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rot13maxi/subscriptions",
        "organizations_url": "https://api.github.com/users/rot13maxi/orgs",
        "repos_url": "https://api.github.com/users/rot13maxi/repos",
        "events_url": "https://api.github.com/users/rot13maxi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rot13maxi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-25T15:16:35Z"
    },
    {
      "event": "subscribed",
      "id": 20503077148,
      "node_id": "SE_lADOAN28mc7TqOo1zwAAAATGFCEc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20503077148",
      "actor": {
        "login": "rot13maxi",
        "id": 115941166,
        "node_id": "U_kgDOBukfLg",
        "avatar_url": "https://avatars.githubusercontent.com/u/115941166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rot13maxi",
        "html_url": "https://github.com/rot13maxi",
        "followers_url": "https://api.github.com/users/rot13maxi/followers",
        "following_url": "https://api.github.com/users/rot13maxi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rot13maxi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rot13maxi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rot13maxi/subscriptions",
        "organizations_url": "https://api.github.com/users/rot13maxi/orgs",
        "repos_url": "https://api.github.com/users/rot13maxi/repos",
        "events_url": "https://api.github.com/users/rot13maxi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rot13maxi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-25T15:16:35Z"
    },
    {
      "event": "commented",
      "id": 3447036717,
      "node_id": "IC_kwDOAN28mc7NdZst",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3447036717",
      "actor": {
        "login": "portlandhodl",
        "id": 3104223,
        "node_id": "MDQ6VXNlcjMxMDQyMjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3104223?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/portlandhodl",
        "html_url": "https://github.com/portlandhodl",
        "followers_url": "https://api.github.com/users/portlandhodl/followers",
        "following_url": "https://api.github.com/users/portlandhodl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/portlandhodl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/portlandhodl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/portlandhodl/subscriptions",
        "organizations_url": "https://api.github.com/users/portlandhodl/orgs",
        "repos_url": "https://api.github.com/users/portlandhodl/repos",
        "events_url": "https://api.github.com/users/portlandhodl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/portlandhodl/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-25T18:29:44Z",
      "updated_at": "2025-10-25T18:29:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "There is opportunity to also discuss the effect on DoS blocks and the scope of legacy script as a DoS vector.",
      "user": {
        "login": "portlandhodl",
        "id": 3104223,
        "node_id": "MDQ6VXNlcjMxMDQyMjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3104223?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/portlandhodl",
        "html_url": "https://github.com/portlandhodl",
        "followers_url": "https://api.github.com/users/portlandhodl/followers",
        "following_url": "https://api.github.com/users/portlandhodl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/portlandhodl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/portlandhodl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/portlandhodl/subscriptions",
        "organizations_url": "https://api.github.com/users/portlandhodl/orgs",
        "repos_url": "https://api.github.com/users/portlandhodl/repos",
        "events_url": "https://api.github.com/users/portlandhodl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/portlandhodl/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3447036717",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "reviewed",
      "id": 3380379661,
      "node_id": "PRR_kwDOAN28mc7JfIAN",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T03:55:21Z",
      "author_association": "NONE",
      "body": ".",
      "user": {
        "login": "danielsam",
        "id": 6363142,
        "node_id": "MDQ6VXNlcjYzNjMxNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6363142?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielsam",
        "html_url": "https://github.com/danielsam",
        "followers_url": "https://api.github.com/users/danielsam/followers",
        "following_url": "https://api.github.com/users/danielsam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielsam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielsam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielsam/subscriptions",
        "organizations_url": "https://api.github.com/users/danielsam/orgs",
        "repos_url": "https://api.github.com/users/danielsam/repos",
        "events_url": "https://api.github.com/users/danielsam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielsam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3380379661",
      "submitted_at": "2025-10-26T01:28:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "comment_deleted",
      "id": 20506149518,
      "node_id": "CDE_lADOAN28mc7TqOo1zwAAAATGQwKO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20506149518",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T03:56:39Z"
    },
    {
      "event": "reviewed",
      "id": 3380403152,
      "node_id": "PRR_kwDOAN28mc7JfNvQ",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T04:00:51Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3380403152",
      "submitted_at": "2025-10-26T04:00:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3380795542,
      "node_id": "PRR_kwDOAN28mc7JgtiW",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T09:40:23Z",
      "author_association": "NONE",
      "user": {
        "login": "GregTonoski",
        "id": 111286121,
        "node_id": "U_kgDOBqIXaQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/111286121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GregTonoski",
        "html_url": "https://github.com/GregTonoski",
        "followers_url": "https://api.github.com/users/GregTonoski/followers",
        "following_url": "https://api.github.com/users/GregTonoski/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GregTonoski/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GregTonoski/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GregTonoski/subscriptions",
        "organizations_url": "https://api.github.com/users/GregTonoski/orgs",
        "repos_url": "https://api.github.com/users/GregTonoski/repos",
        "events_url": "https://api.github.com/users/GregTonoski/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GregTonoski/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3380795542",
      "submitted_at": "2025-10-26T09:40:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "commented",
      "id": 3448450452,
      "node_id": "IC_kwDOAN28mc7Niy2U",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3448450452",
      "actor": {
        "login": "ekzyis",
        "id": 27162016,
        "node_id": "MDQ6VXNlcjI3MTYyMDE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27162016?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekzyis",
        "html_url": "https://github.com/ekzyis",
        "followers_url": "https://api.github.com/users/ekzyis/followers",
        "following_url": "https://api.github.com/users/ekzyis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ekzyis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ekzyis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ekzyis/subscriptions",
        "organizations_url": "https://api.github.com/users/ekzyis/orgs",
        "repos_url": "https://api.github.com/users/ekzyis/repos",
        "events_url": "https://api.github.com/users/ekzyis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ekzyis/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T11:48:47Z",
      "updated_at": "2025-10-26T12:42:16Z",
      "author_association": "NONE",
      "body": "Will or can this softfork affect lightning or currently planned upgrades of it?\r\n\r\n<sub>btw, fwiw, there's also some discussion at https://stacker.news/items/1265553 (sorry for the shameless plug, I work at SN)</sub>",
      "user": {
        "login": "ekzyis",
        "id": 27162016,
        "node_id": "MDQ6VXNlcjI3MTYyMDE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27162016?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekzyis",
        "html_url": "https://github.com/ekzyis",
        "followers_url": "https://api.github.com/users/ekzyis/followers",
        "following_url": "https://api.github.com/users/ekzyis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ekzyis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ekzyis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ekzyis/subscriptions",
        "organizations_url": "https://api.github.com/users/ekzyis/orgs",
        "repos_url": "https://api.github.com/users/ekzyis/repos",
        "events_url": "https://api.github.com/users/ekzyis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ekzyis/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3448450452",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "reviewed",
      "id": 3381038157,
      "node_id": "PRR_kwDOAN28mc7JhoxN",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T12:18:59Z",
      "author_association": "NONE",
      "user": {
        "login": "ekzyis",
        "id": 27162016,
        "node_id": "MDQ6VXNlcjI3MTYyMDE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27162016?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekzyis",
        "html_url": "https://github.com/ekzyis",
        "followers_url": "https://api.github.com/users/ekzyis/followers",
        "following_url": "https://api.github.com/users/ekzyis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ekzyis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ekzyis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ekzyis/subscriptions",
        "organizations_url": "https://api.github.com/users/ekzyis/orgs",
        "repos_url": "https://api.github.com/users/ekzyis/repos",
        "events_url": "https://api.github.com/users/ekzyis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ekzyis/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381038157",
      "submitted_at": "2025-10-26T12:18:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3381139443,
      "node_id": "PRR_kwDOAN28mc7JiBfz",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T14:16:32Z",
      "author_association": "NONE",
      "user": {
        "login": "mononaut",
        "id": 83316221,
        "node_id": "MDQ6VXNlcjgzMzE2MjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/83316221?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mononaut",
        "html_url": "https://github.com/mononaut",
        "followers_url": "https://api.github.com/users/mononaut/followers",
        "following_url": "https://api.github.com/users/mononaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mononaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mononaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mononaut/subscriptions",
        "organizations_url": "https://api.github.com/users/mononaut/orgs",
        "repos_url": "https://api.github.com/users/mononaut/repos",
        "events_url": "https://api.github.com/users/mononaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mononaut/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381139443",
      "submitted_at": "2025-10-26T14:16:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "commented",
      "id": 3448601772,
      "node_id": "IC_kwDOAN28mc7NjXys",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3448601772",
      "actor": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T14:47:40Z",
      "updated_at": "2025-10-26T14:47:40Z",
      "author_association": "NONE",
      "body": "According to [BIP-2](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki):\r\n\r\n> Once the champion has asked the Bitcoin community as to whether an idea has any chance of acceptance, a draft BIP should be presented to the [Bitcoin development mailing list](https://groups.google.com/g/bitcoindev).\r\n\r\nWhen will this be posted to the mailing list as its own thread so it can get greater attention & review?",
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3448601772",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "reviewed",
      "id": 3381160993,
      "node_id": "PRR_kwDOAN28mc7JiGwh",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T15:03:13Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381160993",
      "submitted_at": "2025-10-26T15:03:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "commented",
      "id": 3448628387,
      "node_id": "IC_kwDOAN28mc7NjeSj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3448628387",
      "actor": {
        "login": "00w1",
        "id": 225624275,
        "node_id": "U_kgDODXLA0w",
        "avatar_url": "https://avatars.githubusercontent.com/u/225624275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/00w1",
        "html_url": "https://github.com/00w1",
        "followers_url": "https://api.github.com/users/00w1/followers",
        "following_url": "https://api.github.com/users/00w1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/00w1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/00w1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/00w1/subscriptions",
        "organizations_url": "https://api.github.com/users/00w1/orgs",
        "repos_url": "https://api.github.com/users/00w1/repos",
        "events_url": "https://api.github.com/users/00w1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/00w1/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T15:25:33Z",
      "updated_at": "2025-10-26T16:19:06Z",
      "author_association": "NONE",
      "body": "> Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\r\n\r\n> New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\r\n> OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\r\n> Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\r\n> Witness stacks with a Taproot annex are invalid.\r\n> Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\r\n> Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\r\n> Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\r\n\r\nIt is possible to write the motivation, rationale etc. for these proposed changes without legality non sense. That would make it easier for reviewers and reduce the noise in the pull request.",
      "user": {
        "login": "00w1",
        "id": 225624275,
        "node_id": "U_kgDODXLA0w",
        "avatar_url": "https://avatars.githubusercontent.com/u/225624275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/00w1",
        "html_url": "https://github.com/00w1",
        "followers_url": "https://api.github.com/users/00w1/followers",
        "following_url": "https://api.github.com/users/00w1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/00w1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/00w1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/00w1/subscriptions",
        "organizations_url": "https://api.github.com/users/00w1/orgs",
        "repos_url": "https://api.github.com/users/00w1/repos",
        "events_url": "https://api.github.com/users/00w1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/00w1/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3448628387",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "commented",
      "id": 3448644814,
      "node_id": "IC_kwDOAN28mc7NjiTO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3448644814",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T15:50:01Z",
      "updated_at": "2025-10-26T15:51:01Z",
      "author_association": "MEMBER",
      "body": "> When will this be posted to the mailing list as its own thread so it can get greater attention & review?\n\nI reached out yesterday to suggest this and apparently the post is currently in the ML queue for acceptance/publication.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3448644814",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "reviewed",
      "id": 3381201265,
      "node_id": "PRR_kwDOAN28mc7JiQlx",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T16:14:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "why no limit on witness or tx size?",
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381201265",
      "submitted_at": "2025-10-26T16:14:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "subscribed",
      "id": 20510616332,
      "node_id": "SE_lADOAN28mc7TqOo1zwAAAATGhysM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20510616332",
      "actor": {
        "login": "BTCnazgul",
        "id": 240339722,
        "node_id": "U_kgDODlNLCg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240339722?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BTCnazgul",
        "html_url": "https://github.com/BTCnazgul",
        "followers_url": "https://api.github.com/users/BTCnazgul/followers",
        "following_url": "https://api.github.com/users/BTCnazgul/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BTCnazgul/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BTCnazgul/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BTCnazgul/subscriptions",
        "organizations_url": "https://api.github.com/users/BTCnazgul/orgs",
        "repos_url": "https://api.github.com/users/BTCnazgul/repos",
        "events_url": "https://api.github.com/users/BTCnazgul/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BTCnazgul/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T16:32:42Z"
    },
    {
      "event": "reviewed",
      "id": 3381226801,
      "node_id": "PRR_kwDOAN28mc7JiW0x",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T17:14:27Z",
      "author_association": "NONE",
      "user": {
        "login": "Jeremy-coding",
        "id": 5083663,
        "node_id": "MDQ6VXNlcjUwODM2NjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5083663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jeremy-coding",
        "html_url": "https://github.com/Jeremy-coding",
        "followers_url": "https://api.github.com/users/Jeremy-coding/followers",
        "following_url": "https://api.github.com/users/Jeremy-coding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Jeremy-coding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Jeremy-coding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Jeremy-coding/subscriptions",
        "organizations_url": "https://api.github.com/users/Jeremy-coding/orgs",
        "repos_url": "https://api.github.com/users/Jeremy-coding/repos",
        "events_url": "https://api.github.com/users/Jeremy-coding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Jeremy-coding/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381226801",
      "submitted_at": "2025-10-26T17:14:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3381047761,
      "node_id": "PRR_kwDOAN28mc7JhrHR",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T17:17:45Z",
      "author_association": "NONE",
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381047761",
      "submitted_at": "2025-10-26T17:17:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3381220094,
      "node_id": "PRR_kwDOAN28mc7JiVL-",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T17:18:48Z",
      "author_association": "NONE",
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381220094",
      "submitted_at": "2025-10-26T17:18:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3381229458,
      "node_id": "PRR_kwDOAN28mc7JiXeS",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T17:22:38Z",
      "author_association": "NONE",
      "user": {
        "login": "Jeremy-coding",
        "id": 5083663,
        "node_id": "MDQ6VXNlcjUwODM2NjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5083663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jeremy-coding",
        "html_url": "https://github.com/Jeremy-coding",
        "followers_url": "https://api.github.com/users/Jeremy-coding/followers",
        "following_url": "https://api.github.com/users/Jeremy-coding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Jeremy-coding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Jeremy-coding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Jeremy-coding/subscriptions",
        "organizations_url": "https://api.github.com/users/Jeremy-coding/orgs",
        "repos_url": "https://api.github.com/users/Jeremy-coding/repos",
        "events_url": "https://api.github.com/users/Jeremy-coding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Jeremy-coding/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381229458",
      "submitted_at": "2025-10-26T17:22:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3381231860,
      "node_id": "PRR_kwDOAN28mc7JiYD0",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T17:30:50Z",
      "author_association": "MEMBER",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381231860",
      "submitted_at": "2025-10-26T17:30:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3381235754,
      "node_id": "PRR_kwDOAN28mc7JiZAq",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T17:45:39Z",
      "author_association": "NONE",
      "body": "I don't think it's a good idea to outright prevent content or actions that are not 100% certain spam",
      "user": {
        "login": "thewrlck",
        "id": 138235209,
        "node_id": "U_kgDOCD1NSQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/138235209?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thewrlck",
        "html_url": "https://github.com/thewrlck",
        "followers_url": "https://api.github.com/users/thewrlck/followers",
        "following_url": "https://api.github.com/users/thewrlck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thewrlck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thewrlck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thewrlck/subscriptions",
        "organizations_url": "https://api.github.com/users/thewrlck/orgs",
        "repos_url": "https://api.github.com/users/thewrlck/repos",
        "events_url": "https://api.github.com/users/thewrlck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thewrlck/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381235754",
      "submitted_at": "2025-10-26T17:45:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3381131682,
      "node_id": "PRR_kwDOAN28mc7Jh_mi",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T17:50:11Z",
      "author_association": "NONE",
      "user": {
        "login": "arejula27",
        "id": 46299278,
        "node_id": "MDQ6VXNlcjQ2Mjk5Mjc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/46299278?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arejula27",
        "html_url": "https://github.com/arejula27",
        "followers_url": "https://api.github.com/users/arejula27/followers",
        "following_url": "https://api.github.com/users/arejula27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arejula27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arejula27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arejula27/subscriptions",
        "organizations_url": "https://api.github.com/users/arejula27/orgs",
        "repos_url": "https://api.github.com/users/arejula27/repos",
        "events_url": "https://api.github.com/users/arejula27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arejula27/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381131682",
      "submitted_at": "2025-10-26T17:50:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "reviewed",
      "id": 3381240750,
      "node_id": "PRR_kwDOAN28mc7JiaOu",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T17:54:26Z",
      "author_association": "NONE",
      "user": {
        "login": "shocknet-justin",
        "id": 34176400,
        "node_id": "MDQ6VXNlcjM0MTc2NDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/34176400?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shocknet-justin",
        "html_url": "https://github.com/shocknet-justin",
        "followers_url": "https://api.github.com/users/shocknet-justin/followers",
        "following_url": "https://api.github.com/users/shocknet-justin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shocknet-justin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shocknet-justin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shocknet-justin/subscriptions",
        "organizations_url": "https://api.github.com/users/shocknet-justin/orgs",
        "repos_url": "https://api.github.com/users/shocknet-justin/repos",
        "events_url": "https://api.github.com/users/shocknet-justin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shocknet-justin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381240750",
      "submitted_at": "2025-10-26T17:54:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "comment_deleted",
      "id": 20511493557,
      "node_id": "CDE_lADOAN28mc7TqOo1zwAAAATGlI21",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20511493557",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T19:38:25Z"
    },
    {
      "event": "comment_deleted",
      "id": 20511558263,
      "node_id": "CDE_lADOAN28mc7TqOo1zwAAAATGlYp3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20511558263",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T19:43:18Z"
    },
    {
      "event": "commented",
      "id": 3448911491,
      "node_id": "IC_kwDOAN28mc7NkjaD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3448911491",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T20:43:14Z",
      "updated_at": "2025-10-26T20:43:14Z",
      "author_association": "MEMBER",
      "body": "> When will this be posted to the mailing list as its own thread so it can get greater attention & review?\r\n\r\nHi all, a mailing list post by has been published by the BIP author at https://groups.google.com/g/bitcoindev/c/nOZim6FbuF8.\r\n\r\nPost conceptual feedback and meta-commentary there, and focus here on:\r\n\r\n- expert technical review of the specification\r\n- specific, concrete, helpful proposals for the other sections\r\n\r\nPlease refrain from personal or heated commentary in both venues. I've attempted some minor moderation here above.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3448911491",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "reviewed",
      "id": 3381435070,
      "node_id": "PRR_kwDOAN28mc7JjJq-",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T20:47:57Z",
      "author_association": "NONE",
      "user": {
        "login": "Ali2kCom",
        "id": 109131572,
        "node_id": "U_kgDOBoE3NA",
        "avatar_url": "https://avatars.githubusercontent.com/u/109131572?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ali2kCom",
        "html_url": "https://github.com/Ali2kCom",
        "followers_url": "https://api.github.com/users/Ali2kCom/followers",
        "following_url": "https://api.github.com/users/Ali2kCom/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ali2kCom/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ali2kCom/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ali2kCom/subscriptions",
        "organizations_url": "https://api.github.com/users/Ali2kCom/orgs",
        "repos_url": "https://api.github.com/users/Ali2kCom/repos",
        "events_url": "https://api.github.com/users/Ali2kCom/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ali2kCom/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381435070",
      "submitted_at": "2025-10-26T20:47:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "subscribed",
      "id": 20512197215,
      "node_id": "SE_lADOAN28mc7TqOo1zwAAAATGn0pf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20512197215",
      "actor": {
        "login": "GarlandKey",
        "id": 3108516,
        "node_id": "MDQ6VXNlcjMxMDg1MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3108516?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GarlandKey",
        "html_url": "https://github.com/GarlandKey",
        "followers_url": "https://api.github.com/users/GarlandKey/followers",
        "following_url": "https://api.github.com/users/GarlandKey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GarlandKey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GarlandKey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GarlandKey/subscriptions",
        "organizations_url": "https://api.github.com/users/GarlandKey/orgs",
        "repos_url": "https://api.github.com/users/GarlandKey/repos",
        "events_url": "https://api.github.com/users/GarlandKey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GarlandKey/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T21:44:36Z"
    },
    {
      "event": "subscribed",
      "id": 20512301650,
      "node_id": "SE_lADOAN28mc7TqOo1zwAAAATGoOJS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20512301650",
      "actor": {
        "login": "boonbabysoup",
        "id": 121552198,
        "node_id": "U_kgDOBz69Rg",
        "avatar_url": "https://avatars.githubusercontent.com/u/121552198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/boonbabysoup",
        "html_url": "https://github.com/boonbabysoup",
        "followers_url": "https://api.github.com/users/boonbabysoup/followers",
        "following_url": "https://api.github.com/users/boonbabysoup/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/boonbabysoup/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/boonbabysoup/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/boonbabysoup/subscriptions",
        "organizations_url": "https://api.github.com/users/boonbabysoup/orgs",
        "repos_url": "https://api.github.com/users/boonbabysoup/repos",
        "events_url": "https://api.github.com/users/boonbabysoup/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/boonbabysoup/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T22:10:49Z"
    },
    {
      "event": "subscribed",
      "id": 20512350101,
      "node_id": "SE_lADOAN28mc7TqOo1zwAAAATGoZ-V",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20512350101",
      "actor": {
        "login": "boonbabysoup",
        "id": 121552198,
        "node_id": "U_kgDOBz69Rg",
        "avatar_url": "https://avatars.githubusercontent.com/u/121552198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/boonbabysoup",
        "html_url": "https://github.com/boonbabysoup",
        "followers_url": "https://api.github.com/users/boonbabysoup/followers",
        "following_url": "https://api.github.com/users/boonbabysoup/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/boonbabysoup/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/boonbabysoup/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/boonbabysoup/subscriptions",
        "organizations_url": "https://api.github.com/users/boonbabysoup/orgs",
        "repos_url": "https://api.github.com/users/boonbabysoup/repos",
        "events_url": "https://api.github.com/users/boonbabysoup/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/boonbabysoup/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T22:24:01Z"
    },
    {
      "event": "unsubscribed",
      "id": 20512350219,
      "node_id": "UE_lADOAN28mc7TqOo1zwAAAATGoaAL",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20512350219",
      "actor": {
        "login": "boonbabysoup",
        "id": 121552198,
        "node_id": "U_kgDOBz69Rg",
        "avatar_url": "https://avatars.githubusercontent.com/u/121552198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/boonbabysoup",
        "html_url": "https://github.com/boonbabysoup",
        "followers_url": "https://api.github.com/users/boonbabysoup/followers",
        "following_url": "https://api.github.com/users/boonbabysoup/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/boonbabysoup/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/boonbabysoup/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/boonbabysoup/subscriptions",
        "organizations_url": "https://api.github.com/users/boonbabysoup/orgs",
        "repos_url": "https://api.github.com/users/boonbabysoup/repos",
        "events_url": "https://api.github.com/users/boonbabysoup/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/boonbabysoup/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T22:24:03Z"
    },
    {
      "event": "commented",
      "id": 3448970886,
      "node_id": "IC_kwDOAN28mc7Nkx6G",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3448970886",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T22:25:33Z",
      "updated_at": "2025-10-26T22:25:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "NACK\r\n\r\nThe fact that transaction txid [8e2ee13d2a19951c2777bb3a54f0cb69a2f76dae8baa954cd86149ed1138cb6c](https://mempool.space/tx/8e2ee13d2a19951c2777bb3a54f0cb69a2f76dae8baa954cd86149ed1138cb6c) contains the [full text of this BIP as of writing](https://github.com/bitcoin/bips/blob/3c718237072c107ced8c3531a487354fbdae55df/bip-%3F%3F%3F%3F.mediawiki), while also being compliant with this BIP shows how utterly ineffective this approach is.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3448970886",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "reviewed",
      "id": 3381466827,
      "node_id": "PRR_kwDOAN28mc7JjRbL",
      "url": null,
      "actor": null,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-26T22:29:17Z",
      "author_association": "NONE",
      "user": {
        "login": "pakovm-git",
        "id": 17749198,
        "node_id": "MDQ6VXNlcjE3NzQ5MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/17749198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pakovm-git",
        "html_url": "https://github.com/pakovm-git",
        "followers_url": "https://api.github.com/users/pakovm-git/followers",
        "following_url": "https://api.github.com/users/pakovm-git/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pakovm-git/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pakovm-git/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pakovm-git/subscriptions",
        "organizations_url": "https://api.github.com/users/pakovm-git/orgs",
        "repos_url": "https://api.github.com/users/pakovm-git/repos",
        "events_url": "https://api.github.com/users/pakovm-git/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pakovm-git/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#pullrequestreview-3381466827",
      "submitted_at": "2025-10-26T22:29:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
    },
    {
      "event": "commented",
      "id": 3448992712,
      "node_id": "IC_kwDOAN28mc7Nk3PI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3448992712",
      "actor": {
        "login": "saltduck",
        "id": 1237249,
        "node_id": "MDQ6VXNlcjEyMzcyNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1237249?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/saltduck",
        "html_url": "https://github.com/saltduck",
        "followers_url": "https://api.github.com/users/saltduck/followers",
        "following_url": "https://api.github.com/users/saltduck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/saltduck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/saltduck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/saltduck/subscriptions",
        "organizations_url": "https://api.github.com/users/saltduck/orgs",
        "repos_url": "https://api.github.com/users/saltduck/repos",
        "events_url": "https://api.github.com/users/saltduck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/saltduck/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T23:02:55Z",
      "updated_at": "2025-10-26T23:02:55Z",
      "author_association": "NONE",
      "body": "Concept ACK",
      "user": {
        "login": "saltduck",
        "id": 1237249,
        "node_id": "MDQ6VXNlcjEyMzcyNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1237249?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/saltduck",
        "html_url": "https://github.com/saltduck",
        "followers_url": "https://api.github.com/users/saltduck/followers",
        "following_url": "https://api.github.com/users/saltduck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/saltduck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/saltduck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/saltduck/subscriptions",
        "organizations_url": "https://api.github.com/users/saltduck/orgs",
        "repos_url": "https://api.github.com/users/saltduck/repos",
        "events_url": "https://api.github.com/users/saltduck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/saltduck/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3448992712",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    },
    {
      "event": "commented",
      "id": 3449016967,
      "node_id": "IC_kwDOAN28mc7Nk9KH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3449016967",
      "actor": {
        "login": "NEEDcreations",
        "id": 142443937,
        "node_id": "U_kgDOCH2FoQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/142443937?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NEEDcreations",
        "html_url": "https://github.com/NEEDcreations",
        "followers_url": "https://api.github.com/users/NEEDcreations/followers",
        "following_url": "https://api.github.com/users/NEEDcreations/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NEEDcreations/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NEEDcreations/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NEEDcreations/subscriptions",
        "organizations_url": "https://api.github.com/users/NEEDcreations/orgs",
        "repos_url": "https://api.github.com/users/NEEDcreations/repos",
        "events_url": "https://api.github.com/users/NEEDcreations/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NEEDcreations/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-26T23:38:40Z",
      "updated_at": "2025-10-27T00:15:17Z",
      "author_association": "NONE",
      "body": "Bitcoin is money!",
      "user": {
        "login": "NEEDcreations",
        "id": 142443937,
        "node_id": "U_kgDOCH2FoQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/142443937?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NEEDcreations",
        "html_url": "https://github.com/NEEDcreations",
        "followers_url": "https://api.github.com/users/NEEDcreations/followers",
        "following_url": "https://api.github.com/users/NEEDcreations/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NEEDcreations/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NEEDcreations/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NEEDcreations/subscriptions",
        "organizations_url": "https://api.github.com/users/NEEDcreations/orgs",
        "repos_url": "https://api.github.com/users/NEEDcreations/repos",
        "events_url": "https://api.github.com/users/NEEDcreations/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NEEDcreations/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/2017#issuecomment-3449016967",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/2017"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462333228",
      "pull_request_review_id": 3379308659,
      "id": 2462333228,
      "node_id": "PRRC_kwDOAN28mc6SxDks",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Data fields are size-limited at the consensus level temporarily.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===",
      "path": "bip-????.mediawiki",
      "position": 187,
      "original_position": 187,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's not clear to me why have these two headers, Proactive Deployment and Reactive Deployment, both here under Activation and below under Deployment.",
      "created_at": "2025-10-25T01:28:51Z",
      "updated_at": "2025-10-25T01:32:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2462333228",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462333228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462333412",
      "pull_request_review_id": 3379308659,
      "id": 2462333412,
      "node_id": "PRRC_kwDOAN28mc6SxDnk",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Data fields are size-limited at the consensus level temporarily.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawls until a single, stable chain has been decisively established with significant proof-of-work.",
      "path": "bip-????.mediawiki",
      "position": 1,
      "original_position": 219,
      "commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "original_commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\r\n```\r\n\r\nEdit: will update the spelling linter for the other two false negatives.",
      "created_at": "2025-10-25T01:29:18Z",
      "updated_at": "2025-10-25T01:34:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2462333412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462333412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462333897",
      "pull_request_review_id": 3379308659,
      "id": 2462333897,
      "node_id": "PRRC_kwDOAN28mc6SxDvJ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Data fields are size-limited at the consensus level temporarily.",
      "path": "bip-????.mediawiki",
      "position": 1,
      "original_position": 17,
      "commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "original_commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nTemporarily limit the size of data fields at the consensus level.\n```",
      "created_at": "2025-10-25T01:30:56Z",
      "updated_at": "2025-10-25T01:32:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2462333897",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462333897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462338803",
      "pull_request_review_id": 3379336405,
      "id": 2462338803,
      "node_id": "PRRC_kwDOAN28mc6SxE7z",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Data fields are size-limited at the consensus level temporarily.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===",
      "path": "bip-????.mediawiki",
      "position": 187,
      "original_position": 187,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "in_reply_to_id": 2462333228,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There is a \"rationale\" section here, which is more of an FAQ, and a \"deployment\" section below, which seems customary on softfork bips. I could consolidate these if you like.",
      "created_at": "2025-10-25T01:44:11Z",
      "updated_at": "2025-10-25T01:44:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2462338803",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462338803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462375379",
      "pull_request_review_id": 3379390551,
      "id": 2462375379,
      "node_id": "PRRC_kwDOAN28mc6SxN3T",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Data fields are size-limited at the consensus level temporarily.",
      "path": "bip-????.mediawiki",
      "position": 1,
      "original_position": 17,
      "commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "original_commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "in_reply_to_id": 2462333897,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-10-25T02:59:01Z",
      "updated_at": "2025-10-25T02:59:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2462375379",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462375379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462375462",
      "pull_request_review_id": 3379390632,
      "id": 2462375462,
      "node_id": "PRRC_kwDOAN28mc6SxN4m",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Data fields are size-limited at the consensus level temporarily.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawls until a single, stable chain has been decisively established with significant proof-of-work.",
      "path": "bip-????.mediawiki",
      "position": 1,
      "original_position": 219,
      "commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "original_commit_id": "53146356eaa96cd495385cce1e115e167fd2a6ad",
      "in_reply_to_id": 2462333412,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-10-25T02:59:14Z",
      "updated_at": "2025-10-25T02:59:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2462375462",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2462375462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463178126",
      "pull_request_review_id": 3380403152,
      "id": 2463178126,
      "node_id": "PRRC_kwDOAN28mc6S0R2O",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I suspect many would disagree that there is any such thing as an \"official sanction\" given that there are no authorities on the Bitcoin network.",
      "created_at": "2025-10-26T03:33:09Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463178126",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463178126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463178595",
      "pull_request_review_id": 3380403152,
      "id": 2463178595,
      "node_id": "PRRC_kwDOAN28mc6S0R9j",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"illegal or universally abhorrent content\" is poorly defined; there are a multitude of legal jurisdictions and a multitude of subjective views on content; Bitcoin as a system does not recognize any of them.",
      "created_at": "2025-10-26T03:35:49Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463178595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463178595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463178868",
      "pull_request_review_id": 3380403152,
      "id": 2463178868,
      "node_id": "PRRC_kwDOAN28mc6S0SB0",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.",
      "path": "bip-????.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Again, \"legal and moral risks\" could use much more precise definition.",
      "created_at": "2025-10-26T03:37:13Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463178868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463178868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463179026",
      "pull_request_review_id": 3380403152,
      "id": 2463179026,
      "node_id": "PRRC_kwDOAN28mc6S0SES",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This has always been the case.",
      "created_at": "2025-10-26T03:37:57Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463179026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463179026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463179176",
      "pull_request_review_id": 3380403152,
      "id": 2463179176,
      "node_id": "PRRC_kwDOAN28mc6S0SGo",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.",
      "path": "bip-????.mediawiki",
      "position": 50,
      "original_position": 50,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But this has always been the case...",
      "created_at": "2025-10-26T03:38:43Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463179176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463179176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463179292",
      "pull_request_review_id": 3380403152,
      "id": 2463179292,
      "node_id": "PRRC_kwDOAN28mc6S0SIc",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.",
      "path": "bip-????.mediawiki",
      "position": 52,
      "original_position": 52,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But it doesn't stop aforementioned content from ending up on node operator's machines, so the dilemma remains.",
      "created_at": "2025-10-26T03:39:17Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463179292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463179292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463179673",
      "pull_request_review_id": 3380403152,
      "id": 2463179673,
      "node_id": "PRRC_kwDOAN28mc6S0SOZ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.",
      "path": "bip-????.mediawiki",
      "position": 144,
      "original_position": 144,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This sounds like a massive assumption; if the default is to relax the rules again, then you are simply re-introducing the \"dilemma / vulnerability\" by default, which should be unconscionable, correct?",
      "created_at": "2025-10-26T03:40:49Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463179673",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463179673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463181222",
      "pull_request_review_id": 3380403152,
      "id": 2463181222,
      "node_id": "PRRC_kwDOAN28mc6S0Smm",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It sounds like this actually introduces a vulnerability of its own. If an attacker wishes to double spend their coins, they could:\r\n\r\n1. Embed a sufficiently controversial piece of data to the blockchain.\r\n2. Make a transaction, wait for it to confirm and receive something in return.\r\n3. Reveal to the world that there is controversial data that requires the chain to be invalidated\r\n4. Upon chain invalidation, RBF their now-unconfirmed transaction to send the funds back to themselves",
      "created_at": "2025-10-26T03:46:44Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463181222",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463181222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463182249",
      "pull_request_review_id": 3380403152,
      "id": 2463182249,
      "node_id": "PRRC_kwDOAN28mc6S0S2p",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "According to Citizens United v. Federal Election Commission, 558 U.S. 310, money is speech.\r\n\r\nNormally it would be irrelevant to reference legal rulings in the context of the protocol, but this BIP seems to rely heavily on legality.",
      "created_at": "2025-10-26T03:50:54Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463182249",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463182249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463183272",
      "pull_request_review_id": 3380403152,
      "id": 2463183272,
      "node_id": "PRRC_kwDOAN28mc6S0TGo",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.",
      "path": "bip-????.mediawiki",
      "position": 321,
      "original_position": 321,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The veracity of this claim is highly disputed. https://protos.com/exclusive-lawyers-call-bitcoin-core-v30-csam-concerns-overblown/",
      "created_at": "2025-10-26T03:54:56Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463183272",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463183272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463183707",
      "pull_request_review_id": 3380403152,
      "id": 2463183707,
      "node_id": "PRRC_kwDOAN28mc6S0TNb",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.",
      "path": "bip-????.mediawiki",
      "position": 350,
      "original_position": 350,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"moral liability\" and \"moral burden\" are poorly defined.",
      "created_at": "2025-10-26T03:56:36Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463183707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463183707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463183973",
      "pull_request_review_id": 3380403152,
      "id": 2463183973,
      "node_id": "PRRC_kwDOAN28mc6S0TRl",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.",
      "path": "bip-????.mediawiki",
      "position": 352,
      "original_position": 352,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "By running a node you consent to the consensus rules of the network. If you don't consent, you can simply not run a node.",
      "created_at": "2025-10-26T03:57:52Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463183973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463183973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 352,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463184439",
      "pull_request_review_id": 3380403152,
      "id": 2463184439,
      "node_id": "PRRC_kwDOAN28mc6S0TY3",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.",
      "path": "bip-????.mediawiki",
      "position": 390,
      "original_position": 390,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Needs further rationale as to why it's safe to automatically remove protections that are supposedly needed to stop an existential crisis.",
      "created_at": "2025-10-26T04:00:06Z",
      "updated_at": "2025-10-26T04:00:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463184439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463184439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 390,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463189219",
      "pull_request_review_id": 3380413246,
      "id": 2463189219,
      "node_id": "PRRC_kwDOAN28mc6S0Ujj",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Change of default relay policy settings in the super-majority node client as sanctioned by the official policy maintainer can easily be seen as an official sanction.",
      "created_at": "2025-10-26T04:23:36Z",
      "updated_at": "2025-10-26T04:23:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463189219",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463189219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463191919",
      "pull_request_review_id": 3380416518,
      "id": 2463191919,
      "node_id": "PRRC_kwDOAN28mc6S0VNv",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The motivation section only seeks to outline potential avenues for new risks allowed by Bitcoin Core 30. It is enough to recognize that there is an overlap of illegal data and universally abhorrent data which will put average node operators at unneeded risk. A specific outlining of the content in question is not needed, only a recognition that the risks are there. ",
      "created_at": "2025-10-26T04:37:45Z",
      "updated_at": "2025-10-26T04:37:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463191919",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463191919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463192430",
      "pull_request_review_id": 3380417235,
      "id": 2463192430,
      "node_id": "PRRC_kwDOAN28mc6S0VVu",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What makes it \"official\" - some node clients like libbitcoin don't even have such policies. Is is not official from them because they have little adoption?\r\n\r\nIf it's the level of adoption that makes something official, consider that adoption is voluntary and opt-in, thus the \"sanctioning\" comes from many independent actors deciding to run the code that enforces said policies.",
      "created_at": "2025-10-26T04:40:27Z",
      "updated_at": "2025-10-26T04:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463192430",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463192430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463192702",
      "pull_request_review_id": 3380417405,
      "id": 2463192702,
      "node_id": "PRRC_kwDOAN28mc6S0VZ-",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "An acknowledgement that the risks are present should be sufficient to encourage mitigation of risks which exacerbate this risk vector such as those introduced by Core 30.",
      "created_at": "2025-10-26T04:41:30Z",
      "updated_at": "2025-10-26T04:41:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463192702",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463192702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463192887",
      "pull_request_review_id": 3380417544,
      "id": 2463192887,
      "node_id": "PRRC_kwDOAN28mc6S0Vc3",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.",
      "path": "bip-????.mediawiki",
      "position": 50,
      "original_position": 50,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179176,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Doesn't mean it needs to stay that way, or that we need to make the situation worse.",
      "created_at": "2025-10-26T04:42:14Z",
      "updated_at": "2025-10-26T04:42:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463192887",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463192887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463202064",
      "pull_request_review_id": 3380426812,
      "id": 2463202064,
      "node_id": "PRRC_kwDOAN28mc6S0XsQ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree with Blake. Precise definitions were never proposed nor required.",
      "created_at": "2025-10-26T05:23:57Z",
      "updated_at": "2025-10-26T19:46:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463202064",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463202064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463202285",
      "pull_request_review_id": 3380426981,
      "id": 2463202285,
      "node_id": "PRRC_kwDOAN28mc6S0Xvt",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.",
      "path": "bip-????.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178868,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Again, precise definitions were never proposed nor required. ",
      "created_at": "2025-10-26T05:24:52Z",
      "updated_at": "2025-10-26T05:24:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463202285",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463202285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463202526",
      "pull_request_review_id": 3380427121,
      "id": 2463202526,
      "node_id": "PRRC_kwDOAN28mc6S0Xze",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.",
      "path": "bip-????.mediawiki",
      "position": 352,
      "original_position": 352,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183973,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Wouldn't such an approach lead to more node centralization a reduce Bitcoin's network effects?",
      "created_at": "2025-10-26T05:25:48Z",
      "updated_at": "2025-10-26T06:09:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463202526",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463202526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 352,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463202849",
      "pull_request_review_id": 3380427341,
      "id": 2463202849,
      "node_id": "PRRC_kwDOAN28mc6S0X4h",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.",
      "path": "bip-????.mediawiki",
      "position": 50,
      "original_position": 50,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179176,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There is general consensus that sketchy content should not be on bitcoin, and that most node operator would support this change.",
      "created_at": "2025-10-26T05:27:16Z",
      "updated_at": "2025-10-26T05:27:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463202849",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463202849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463203150",
      "pull_request_review_id": 3380427612,
      "id": 2463203150,
      "node_id": "PRRC_kwDOAN28mc6S0X9O",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.",
      "path": "bip-????.mediawiki",
      "position": 52,
      "original_position": 52,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179292,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Dilemma might remain, but the a serious effort in the right direction would be supported by most node operators.",
      "created_at": "2025-10-26T05:28:41Z",
      "updated_at": "2025-10-26T05:28:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463203150",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463203150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463203245",
      "pull_request_review_id": 3380427685,
      "id": 2463203245,
      "node_id": "PRRC_kwDOAN28mc6S0X-t",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.",
      "path": "bip-????.mediawiki",
      "position": 144,
      "original_position": 144,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179673,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Incorrect.",
      "created_at": "2025-10-26T05:29:07Z",
      "updated_at": "2025-10-26T05:29:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463203245",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463203245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463203733",
      "pull_request_review_id": 3380428442,
      "id": 2463203733,
      "node_id": "PRRC_kwDOAN28mc6S0YGV",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "money is speech, but not all speech is money. You must understand the difference, making this comment clearly in bad faith.",
      "created_at": "2025-10-26T05:31:21Z",
      "updated_at": "2025-10-26T05:31:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463203733",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463203733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463203966",
      "pull_request_review_id": 3380428599,
      "id": 2463203966,
      "node_id": "PRRC_kwDOAN28mc6S0YJ-",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.",
      "path": "bip-????.mediawiki",
      "position": 350,
      "original_position": 350,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183707,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Again, precise definitions were never proposed nor required.",
      "created_at": "2025-10-26T05:32:09Z",
      "updated_at": "2025-10-26T05:32:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463203966",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463203966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463204080",
      "pull_request_review_id": 3380428714,
      "id": 2463204080,
      "node_id": "PRRC_kwDOAN28mc6S0YLw",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.",
      "path": "bip-????.mediawiki",
      "position": 352,
      "original_position": 352,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183973,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This applies to both pro and con arguments of this BIP and therefore an irrelevant comment.",
      "created_at": "2025-10-26T05:32:45Z",
      "updated_at": "2025-10-26T05:32:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463204080",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463204080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 352,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463204508",
      "pull_request_review_id": 3380429156,
      "id": 2463204508,
      "node_id": "PRRC_kwDOAN28mc6S0YSc",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.",
      "path": "bip-????.mediawiki",
      "position": 390,
      "original_position": 390,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463184439,
      "user": {
        "login": "Bitcoinfinity",
        "id": 240265346,
        "node_id": "U_kgDODlIogg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240265346?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bitcoinfinity",
        "html_url": "https://github.com/Bitcoinfinity",
        "followers_url": "https://api.github.com/users/Bitcoinfinity/followers",
        "following_url": "https://api.github.com/users/Bitcoinfinity/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bitcoinfinity/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bitcoinfinity/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bitcoinfinity/subscriptions",
        "organizations_url": "https://api.github.com/users/Bitcoinfinity/orgs",
        "repos_url": "https://api.github.com/users/Bitcoinfinity/repos",
        "events_url": "https://api.github.com/users/Bitcoinfinity/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bitcoinfinity/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Disagree.",
      "created_at": "2025-10-26T05:35:14Z",
      "updated_at": "2025-10-26T05:35:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463204508",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463204508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 390,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463204555",
      "pull_request_review_id": 3380427121,
      "id": 2463204555,
      "node_id": "PRRC_kwDOAN28mc6S0YTL",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "100kb OP_RETURN is officially sanctioned by Bitcoin Core with the release of v30 as evidenced by their changing of default settings and accompanying release notes.",
      "created_at": "2025-10-26T05:35:33Z",
      "updated_at": "2025-10-26T06:09:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463204555",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463204555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463208585",
      "pull_request_review_id": 3380427121,
      "id": 2463208585,
      "node_id": "PRRC_kwDOAN28mc6S0ZSJ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I guess that would depend on how quickly the retroactive method could be implemented after it is deemed necessary. As long as the vulnerabilities created by Core v30 remain in place it would behoove a receiver waiting on L1 transaction finality to give it some extra time. The 2013 hardfork was resolved in 24 blocks, about 6 hours. \r\n\r\nWhere would an attacker hide such data for long enough that they could pull off this double spend attack? ",
      "created_at": "2025-10-26T05:53:42Z",
      "updated_at": "2025-10-26T06:09:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463208585",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463208585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463216344",
      "pull_request_review_id": 3380439969,
      "id": 2463216344,
      "node_id": "PRRC_kwDOAN28mc6S0bLY",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.",
      "path": "bip-????.mediawiki",
      "position": 321,
      "original_position": 321,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183272,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "From your cited article: “It is already an issue, yes, and the fact that this kind of attack hasn’t happened yet is a question of luck rather than capability,” they said. “It would be safer for Bitcoin to optimize for content-addressable links to offchain content like an IPFS hash.\"\r\n\r\nThe time provided by this temporary softfork would allow for optimization as recommended by your source.",
      "created_at": "2025-10-26T06:24:59Z",
      "updated_at": "2025-10-26T06:24:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463216344",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463216344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463230738",
      "pull_request_review_id": 3380452738,
      "id": 2463230738,
      "node_id": "PRRC_kwDOAN28mc6S0esS",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.",
      "path": "bip-????.mediawiki",
      "position": 144,
      "original_position": 144,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179673,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Feel free to explain why relaxing the rules would not reintroduce the claimed problem.",
      "created_at": "2025-10-26T07:17:03Z",
      "updated_at": "2025-10-26T07:17:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463230738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463230738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463231186",
      "pull_request_review_id": 3380453139,
      "id": 2463231186,
      "node_id": "PRRC_kwDOAN28mc6S0ezS",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hiding the data would not be a requirement; an attacker could literally publish said data and then transact in the same block or the next block.",
      "created_at": "2025-10-26T07:18:22Z",
      "updated_at": "2025-10-26T07:18:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463231186",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463231186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463232318",
      "pull_request_review_id": 3380454001,
      "id": 2463232318,
      "node_id": "PRRC_kwDOAN28mc6S0fE-",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.",
      "path": "bip-????.mediawiki",
      "position": 321,
      "original_position": 321,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183272,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, you quote the only 1 of 7 attorneys cited who agrees with your view and they were not even willing to put their name and reputation on the line.",
      "created_at": "2025-10-26T07:21:32Z",
      "updated_at": "2025-10-26T07:21:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463232318",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463232318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463236593",
      "pull_request_review_id": 3380457638,
      "id": 2463236593,
      "node_id": "PRRC_kwDOAN28mc6S0gHx",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, an \"official sanction\" is thus (fairly awkwardly) defined as \"The default standardness policies of the node software run by the vast majority of the network.\"\r\n\r\nSimply, if there is relatively little adoption of Core 30 then what it has attempted to invite into mempools/the blockchain are not representative of Bitcoin.",
      "created_at": "2025-10-26T07:36:01Z",
      "updated_at": "2025-10-26T07:36:01Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463236593",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463236593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463253341",
      "pull_request_review_id": 3380468604,
      "id": 2463253341,
      "node_id": "PRRC_kwDOAN28mc6S0kNd",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Without wanting to be crass or sicken anyone with specifics, of course there are files that all decent people would make an effort to not download/store on their devices regardless of their legal status.\r\n\r\nThe general attempt to widen the scope of Bitcoin from \"All financial activity must be treated as equal\" to \"Thus we must treat all files as just ones and zeroes\" has been perplexing to watch as not only is it indefensible, it's completely unnecessary. Bitcoin can continue to eschew non-financial activity in general and thus not encumber its users with the problems that begin with soliciting it and then either having to attempt to moderate based on file contents or failing to do so and then ultimately getting used as a garbage dump for the world's most shunned files.",
      "created_at": "2025-10-26T07:44:55Z",
      "updated_at": "2025-10-26T07:44:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463253341",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463253341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463266828",
      "pull_request_review_id": 3380480741,
      "id": 2463266828,
      "node_id": "PRRC_kwDOAN28mc6S0ngM",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.",
      "path": "bip-????.mediawiki",
      "position": 50,
      "original_position": 50,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179176,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">This has always been the case\r\n\r\nThe point is not to make an issue (arbitrary illegality making life harder for nodes) worse by engaging in activity we have no business defending (the uploading/downloading/storage of arbitrary data).",
      "created_at": "2025-10-26T07:51:23Z",
      "updated_at": "2025-10-26T07:51:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463266828",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463266828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463267203",
      "pull_request_review_id": 3380481083,
      "id": 2463267203,
      "node_id": "PRRC_kwDOAN28mc6S0nmD",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See below",
      "created_at": "2025-10-26T07:51:32Z",
      "updated_at": "2025-10-26T07:51:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463267203",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463267203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463270498",
      "pull_request_review_id": 3380484443,
      "id": 2463270498,
      "node_id": "PRRC_kwDOAN28mc6S0oZi",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.",
      "path": "bip-????.mediawiki",
      "position": 52,
      "original_position": 52,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179292,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could you please explain how it would be possible for the content we are generally alluding to to make it onto node operator's machines should these new rules be enforced?",
      "created_at": "2025-10-26T07:53:41Z",
      "updated_at": "2025-10-26T07:53:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463270498",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463270498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463275426",
      "pull_request_review_id": 3380489605,
      "id": 2463275426,
      "node_id": "PRRC_kwDOAN28mc6S0pmi",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.",
      "path": "bip-????.mediawiki",
      "position": 144,
      "original_position": 144,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179673,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Because during the period of temporary restriction, we can elect to extend the period or make it (or some subset of it) permanent should it not prove too restrictive for something beneficial.",
      "created_at": "2025-10-26T07:56:52Z",
      "updated_at": "2025-10-26T07:56:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463275426",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463275426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463281503",
      "pull_request_review_id": 3380496702,
      "id": 2463281503,
      "node_id": "PRRC_kwDOAN28mc6S0rFf",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@jlopp You're correct but that's a scenario in which alternatives are clearly worse which is why I agree that the preferred approach of the two outlined in this BIP is prophylactic rather than reactive.",
      "created_at": "2025-10-26T08:01:10Z",
      "updated_at": "2025-10-26T08:01:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463281503",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463281503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463284849",
      "pull_request_review_id": 3380500975,
      "id": 2463284849,
      "node_id": "PRRC_kwDOAN28mc6S0r5x",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Bitcoin is a monetary protocol. The protocol treats non-monetary usage with appropriate hostility. The pressure to do otherwise is met with insincere appeals to \"free speech\" which is what L296-L298 addresses. This is not related to legality.",
      "created_at": "2025-10-26T08:04:14Z",
      "updated_at": "2025-10-26T08:04:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463284849",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463284849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463301246",
      "pull_request_review_id": 3380520897,
      "id": 2463301246,
      "node_id": "PRRC_kwDOAN28mc6S0v5-",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.",
      "path": "bip-????.mediawiki",
      "position": 321,
      "original_position": 321,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183272,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I assert that the perspective of those lawyers is lacking and that they do not understand what Bitcoin requires in order to function. Pressure placed on nodes to defend the activity mentioned multiple times in other responses above can only weaken Bitcoin as it serves as a disincentive to run one.\r\n\r\nFor comparison - it is not illegal to consume electricity either, but the framing that \"Bitcoin is bad for the environment\" has been incredibly harmful and exhausting to counter. The stigma that can be created around running nodes can cause immense damage as people can continue to use Bitcoin without needing to run nodes - ultimately leading to centralization at the enforcement layer which is unquestionably fatal to Bitcoin.\r\n\r\nThe intent is simple: do not put pressure on people to not run nodes.",
      "created_at": "2025-10-26T08:16:24Z",
      "updated_at": "2025-10-26T08:16:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463301246",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463301246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463309981",
      "pull_request_review_id": 3380531006,
      "id": 2463309981,
      "node_id": "PRRC_kwDOAN28mc6S0yCd",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "MalachiRevolts",
        "id": 236233321,
        "node_id": "U_kgDODhSiaQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/236233321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MalachiRevolts",
        "html_url": "https://github.com/MalachiRevolts",
        "followers_url": "https://api.github.com/users/MalachiRevolts/followers",
        "following_url": "https://api.github.com/users/MalachiRevolts/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MalachiRevolts/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MalachiRevolts/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MalachiRevolts/subscriptions",
        "organizations_url": "https://api.github.com/users/MalachiRevolts/orgs",
        "repos_url": "https://api.github.com/users/MalachiRevolts/repos",
        "events_url": "https://api.github.com/users/MalachiRevolts/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MalachiRevolts/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is not censorship to preserve the intended use-case of Bitcoin, which is monetary.\r\n\r\nIt looks like some refuse to discourage spam on consensus level because of selfish opportunistic endeavours.\r\n\r\nBy engaging in opportunistic use-cases which neglect the risk of illegal content they are putting the reputation of Bitcoin on the line and introducing censorship implicitly themselves.\r\n\r\nI'll explain: If Bitcoins reputation would become so bad that regulatory authorities in e.g. Europe take a look at it, exchanges could be forced to close on/off ramps to Bitcoin. Businesses and institutions would not be able to legally buy Bitcoin anymore. _**That**_ would be censorship.\r\n\r\n\r\n",
      "created_at": "2025-10-26T08:22:26Z",
      "updated_at": "2025-10-26T08:22:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463309981",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463309981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463317410",
      "pull_request_review_id": 3380539514,
      "id": 2463317410,
      "node_id": "PRRC_kwDOAN28mc6S0z2i",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "zndtoshi",
        "id": 47448562,
        "node_id": "MDQ6VXNlcjQ3NDQ4NTYy",
        "avatar_url": "https://avatars.githubusercontent.com/u/47448562?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zndtoshi",
        "html_url": "https://github.com/zndtoshi",
        "followers_url": "https://api.github.com/users/zndtoshi/followers",
        "following_url": "https://api.github.com/users/zndtoshi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zndtoshi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zndtoshi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zndtoshi/subscriptions",
        "organizations_url": "https://api.github.com/users/zndtoshi/orgs",
        "repos_url": "https://api.github.com/users/zndtoshi/repos",
        "events_url": "https://api.github.com/users/zndtoshi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zndtoshi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't the retroactive activation a 51% attack from miners? Wouldn't such a BIP standardize and make official and endorsed by Bitcoin Core the 51% attacks?",
      "created_at": "2025-10-26T08:27:27Z",
      "updated_at": "2025-10-26T08:50:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463317410",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463317410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463322091",
      "pull_request_review_id": 3380544850,
      "id": 2463322091,
      "node_id": "PRRC_kwDOAN28mc6S00_r",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.",
      "path": "bip-????.mediawiki",
      "position": 352,
      "original_position": 352,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183973,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@jlopp Not sure the relevance? This fork changes consensus rules.",
      "created_at": "2025-10-26T08:30:28Z",
      "updated_at": "2025-10-26T08:30:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463322091",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463322091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 352,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463329504",
      "pull_request_review_id": 3380554452,
      "id": 2463329504,
      "node_id": "PRRC_kwDOAN28mc6S02zg",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.",
      "path": "bip-????.mediawiki",
      "position": 390,
      "original_position": 390,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463184439,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Making the new rules permanent immediately creates the need for a hardfork to ever undo them. It makes sense to do this temporarily for reasons explained elsewhere as they (or a subset of them) can be extended/made permanent if not proven undesirable during the temporary period.",
      "created_at": "2025-10-26T08:34:32Z",
      "updated_at": "2025-10-26T08:34:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463329504",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463329504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 390,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463376716",
      "pull_request_review_id": 3380609121,
      "id": 2463376716,
      "node_id": "PRRC_kwDOAN28mc6S1CVM",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.",
      "path": "bip-????.mediawiki",
      "position": 352,
      "original_position": 352,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183973,
      "user": {
        "login": "krynne",
        "id": 18610634,
        "node_id": "MDQ6VXNlcjE4NjEwNjM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18610634?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/krynne",
        "html_url": "https://github.com/krynne",
        "followers_url": "https://api.github.com/users/krynne/followers",
        "following_url": "https://api.github.com/users/krynne/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/krynne/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/krynne/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/krynne/subscriptions",
        "organizations_url": "https://api.github.com/users/krynne/orgs",
        "repos_url": "https://api.github.com/users/krynne/repos",
        "events_url": "https://api.github.com/users/krynne/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/krynne/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "By running a node, I am not consenting to the consensus rules of the network, I'm enforcing them. It's the network's nodes that determine what the consensus rules are. If you remove all the nodes, there's no consensus left and no rules to enforce. ",
      "created_at": "2025-10-26T08:49:27Z",
      "updated_at": "2025-10-26T08:49:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463376716",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463376716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 352,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463491698",
      "pull_request_review_id": 3380738523,
      "id": 2463491698,
      "node_id": "PRRC_kwDOAN28mc6S1eZy",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "zndtoshi",
        "id": 47448562,
        "node_id": "MDQ6VXNlcjQ3NDQ4NTYy",
        "avatar_url": "https://avatars.githubusercontent.com/u/47448562?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zndtoshi",
        "html_url": "https://github.com/zndtoshi",
        "followers_url": "https://api.github.com/users/zndtoshi/followers",
        "following_url": "https://api.github.com/users/zndtoshi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zndtoshi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zndtoshi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zndtoshi/subscriptions",
        "organizations_url": "https://api.github.com/users/zndtoshi/orgs",
        "repos_url": "https://api.github.com/users/zndtoshi/repos",
        "events_url": "https://api.github.com/users/zndtoshi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zndtoshi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nack\r\nThis change is motivated on outside factors and interpretation of the data (legal and political) and not on how the software functions. ",
      "created_at": "2025-10-26T09:28:06Z",
      "updated_at": "2025-10-26T09:28:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463491698",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463491698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463544166",
      "pull_request_review_id": 3380795542,
      "id": 2463544166,
      "node_id": "PRRC_kwDOAN28mc6S1rNm",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.",
      "path": "bip-????.mediawiki",
      "position": 73,
      "original_position": 73,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "GregTonoski",
        "id": 111286121,
        "node_id": "U_kgDOBqIXaQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/111286121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GregTonoski",
        "html_url": "https://github.com/GregTonoski",
        "followers_url": "https://api.github.com/users/GregTonoski/followers",
        "following_url": "https://api.github.com/users/GregTonoski/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GregTonoski/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GregTonoski/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GregTonoski/subscriptions",
        "organizations_url": "https://api.github.com/users/GregTonoski/orgs",
        "repos_url": "https://api.github.com/users/GregTonoski/repos",
        "events_url": "https://api.github.com/users/GregTonoski/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GregTonoski/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also I am raising objection to the fragment of the proposal. I think that the presumption of existence of \"legacy protocols\" is false. There isn't any BIP of such a protocol. Also, I haven't seen any implementation of a hypothetical undocumented one. Last, but not least - arbitrary data storage doesn't belong to Bitcoin and the \"OP_RETURN\" bug that is exploited by abusers must be fixed.",
      "created_at": "2025-10-26T09:40:23Z",
      "updated_at": "2025-10-26T09:44:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463544166",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463544166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463704764",
      "pull_request_review_id": 3380973927,
      "id": 2463704764,
      "node_id": "PRRC_kwDOAN28mc6S2Sa8",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "ArmanTheParman",
        "id": 77603167,
        "node_id": "MDQ6VXNlcjc3NjAzMTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/77603167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ArmanTheParman",
        "html_url": "https://github.com/ArmanTheParman",
        "followers_url": "https://api.github.com/users/ArmanTheParman/followers",
        "following_url": "https://api.github.com/users/ArmanTheParman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ArmanTheParman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ArmanTheParman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ArmanTheParman/subscriptions",
        "organizations_url": "https://api.github.com/users/ArmanTheParman/orgs",
        "repos_url": "https://api.github.com/users/ArmanTheParman/repos",
        "events_url": "https://api.github.com/users/ArmanTheParman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ArmanTheParman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How about... There should be no subjective assessment of arbitrary data's content/meaning, all arbitrary data (extra data not contributing to the movement of sats on layer 1) can just be rejected indiscriminately based on some limit, eg zero.\r\n\r\nI acknowledge not all arbitrary data can be, or needs to be, eliminated, but the principle is objective, and rules based off that can be made. If some arbitrary data cannot be interpreted as being arbitrary, then so be it, it gets on chain. \r\n\r\nBut having a FIELD dedicated to arbitrary data can easily be objectively blocked.",
      "created_at": "2025-10-26T10:38:08Z",
      "updated_at": "2025-10-26T10:43:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463704764",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463704764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463733791",
      "pull_request_review_id": 3381003171,
      "id": 2463733791,
      "node_id": "PRRC_kwDOAN28mc6S2Zgf",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "csuwildcat",
        "id": 131786,
        "node_id": "MDQ6VXNlcjEzMTc4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/131786?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/csuwildcat",
        "html_url": "https://github.com/csuwildcat",
        "followers_url": "https://api.github.com/users/csuwildcat/followers",
        "following_url": "https://api.github.com/users/csuwildcat/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/csuwildcat/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/csuwildcat/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/csuwildcat/subscriptions",
        "organizations_url": "https://api.github.com/users/csuwildcat/orgs",
        "repos_url": "https://api.github.com/users/csuwildcat/repos",
        "events_url": "https://api.github.com/users/csuwildcat/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/csuwildcat/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's a very bad idea to put text suggesting legal liability into the implementation. Please talk to legal folks as to why, because even elaborating here via discussion of that particular aspect is hazardous.",
      "created_at": "2025-10-26T11:05:03Z",
      "updated_at": "2025-10-26T11:05:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463733791",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463733791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463735851",
      "pull_request_review_id": 3381006172,
      "id": 2463735851,
      "node_id": "PRRC_kwDOAN28mc6S2aAr",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "csuwildcat",
        "id": 131786,
        "node_id": "MDQ6VXNlcjEzMTc4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/131786?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/csuwildcat",
        "html_url": "https://github.com/csuwildcat",
        "followers_url": "https://api.github.com/users/csuwildcat/followers",
        "following_url": "https://api.github.com/users/csuwildcat/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/csuwildcat/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/csuwildcat/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/csuwildcat/subscriptions",
        "organizations_url": "https://api.github.com/users/csuwildcat/orgs",
        "repos_url": "https://api.github.com/users/csuwildcat/repos",
        "events_url": "https://api.github.com/users/csuwildcat/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/csuwildcat/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The generalized invocation of the ominous need for Bitcoin to 'follow the law or else' is concerning, because law can change, and in many places laws are enacted that run against the very principles Bitcoin represents. The open ended 'appeal to legality' and its implicit urging to act at the behest of government is something I hope folks reconsider.",
      "created_at": "2025-10-26T11:09:39Z",
      "updated_at": "2025-10-26T11:09:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463735851",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463735851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463744133",
      "pull_request_review_id": 3381016930,
      "id": 2463744133,
      "node_id": "PRRC_kwDOAN28mc6S2cCF",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Nack This change is motivated on outside factors and interpretation of the data (legal and political) and not on how the software functions.\r\n\r\nNo it is not. The point is to limit arbitrary data in general and thus the exact opposite: prevent having to start performing the analysis you (and I) do not want.",
      "created_at": "2025-10-26T11:25:13Z",
      "updated_at": "2025-10-26T11:25:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463744133",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463744133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463745089",
      "pull_request_review_id": 3381017651,
      "id": 2463745089,
      "node_id": "PRRC_kwDOAN28mc6S2cRB",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "zndtoshi",
        "id": 47448562,
        "node_id": "MDQ6VXNlcjQ3NDQ4NTYy",
        "avatar_url": "https://avatars.githubusercontent.com/u/47448562?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zndtoshi",
        "html_url": "https://github.com/zndtoshi",
        "followers_url": "https://api.github.com/users/zndtoshi/followers",
        "following_url": "https://api.github.com/users/zndtoshi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zndtoshi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zndtoshi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zndtoshi/subscriptions",
        "organizations_url": "https://api.github.com/users/zndtoshi/orgs",
        "repos_url": "https://api.github.com/users/zndtoshi/repos",
        "events_url": "https://api.github.com/users/zndtoshi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zndtoshi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Who decides which op_return is bad enough to require an invalidation of the said block?",
      "created_at": "2025-10-26T11:27:20Z",
      "updated_at": "2025-10-26T11:27:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463745089",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463745089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463745541",
      "pull_request_review_id": 3381018031,
      "id": 2463745541,
      "node_id": "PRRC_kwDOAN28mc6S2cYF",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Legal liability exists regardless.\r\n\r\nThe point is that some files being illegal and others not makes laws essentially arbitrary and thus we should seek to discourage *all* arbitrary file storage specifically to reject this inevitable issue entirely.",
      "created_at": "2025-10-26T11:28:28Z",
      "updated_at": "2025-10-26T11:28:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463745541",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463745541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463746280",
      "pull_request_review_id": 3381018761,
      "id": 2463746280,
      "node_id": "PRRC_kwDOAN28mc6S2cjo",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Who decides which op_return is bad enough to require an invalidation of the said block?\r\n\r\nThat is not a decision that can be unilaterally made by anyone. It would presumably be something sufficiently terrible enough to cause enough people to come to the same conclusion.\r\n\r\nAs mentioned above, this is a terrible scenario with no ideal solutions.",
      "created_at": "2025-10-26T11:30:54Z",
      "updated_at": "2025-10-26T11:30:54Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463746280",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463746280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463752666",
      "pull_request_review_id": 3381024511,
      "id": 2463752666,
      "node_id": "PRRC_kwDOAN28mc6S2eHa",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "ekzyis",
        "id": 27162016,
        "node_id": "MDQ6VXNlcjI3MTYyMDE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27162016?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekzyis",
        "html_url": "https://github.com/ekzyis",
        "followers_url": "https://api.github.com/users/ekzyis/followers",
        "following_url": "https://api.github.com/users/ekzyis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ekzyis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ekzyis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ekzyis/subscriptions",
        "organizations_url": "https://api.github.com/users/ekzyis/orgs",
        "repos_url": "https://api.github.com/users/ekzyis/repos",
        "events_url": "https://api.github.com/users/ekzyis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ekzyis/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> of course there are files that all decent people would make an effort to not download/store\r\n\r\nThe \"decent\" is doing a lot of work in that sentence. Care to define \"decent people\"? Is bitcoin not for the other ones?",
      "created_at": "2025-10-26T11:46:28Z",
      "updated_at": "2025-10-26T11:47:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463752666",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463752666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463764938",
      "pull_request_review_id": 3381037039,
      "id": 2463764938,
      "node_id": "PRRC_kwDOAN28mc6S2hHK",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > of course there are files that all decent people would make an effort to not download/store\r\n> \r\n> The \"decent\" is doing a lot of work in that sentence. Care to define \"decent people\"? Is bitcoin not for the other ones?\r\n\r\nBitcoin is not for arbitrary file storage period. In designing it that way, we get the added benefit of not having to store data that is universally disliked.",
      "created_at": "2025-10-26T12:15:49Z",
      "updated_at": "2025-10-26T12:15:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463764938",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463764938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463765982",
      "pull_request_review_id": 3381038157,
      "id": 2463765982,
      "node_id": "PRRC_kwDOAN28mc6S2hXe",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:",
      "path": "bip-????.mediawiki",
      "position": 230,
      "original_position": 230,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "ekzyis",
        "id": 27162016,
        "node_id": "MDQ6VXNlcjI3MTYyMDE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27162016?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekzyis",
        "html_url": "https://github.com/ekzyis",
        "followers_url": "https://api.github.com/users/ekzyis/followers",
        "following_url": "https://api.github.com/users/ekzyis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ekzyis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ekzyis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ekzyis/subscriptions",
        "organizations_url": "https://api.github.com/users/ekzyis/orgs",
        "repos_url": "https://api.github.com/users/ekzyis/repos",
        "events_url": "https://api.github.com/users/ekzyis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ekzyis/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there an emergency regarding spam on-chain? If there was an emergency, wouldn't fees be very high? \r\n\r\n<details>\r\n<summary>However, fees seem to be at all time lows</summary>\r\n\r\n<img width=\"1854\" height=\"811\" alt=\"2025-10-26-172910_1854x811_scrot\" src=\"https://github.com/user-attachments/assets/4375ebcb-3398-4fb4-ad87-631ae861468e\" />\r\n\r\n<img width=\"557\" height=\"173\" alt=\"2025-10-26-132209_557x173_scrot\" src=\"https://github.com/user-attachments/assets/ac8c6015-6761-4b36-8da1-00a81f304344\" />\r\n\r\n<img width=\"778\" height=\"230\" alt=\"2025-10-26-132345_778x230_scrot\" src=\"https://github.com/user-attachments/assets/7b25a484-7355-4d93-ae45-80bf150f82ad\" />\r\n\r\n</details>\r\n\r\nWhat am I missing?\r\n\r\nOr is this softfork only motivated by legal concerns, not spam?\r\n",
      "created_at": "2025-10-26T12:18:59Z",
      "updated_at": "2025-10-26T16:29:54Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463765982",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463765982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463775313",
      "pull_request_review_id": 3381047761,
      "id": 2463775313,
      "node_id": "PRRC_kwDOAN28mc6S2jpR",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.",
      "path": "bip-????.mediawiki",
      "position": 255,
      "original_position": 255,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How is a counter soft fork required?\n\nI'm not following how following existing consensus would require an additional code change to reject this proposal.\n\nMaybe it will become clear when there is code?",
      "created_at": "2025-10-26T12:40:59Z",
      "updated_at": "2025-10-26T17:17:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463775313",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463775313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463775739",
      "pull_request_review_id": 3381048168,
      "id": 2463775739,
      "node_id": "PRRC_kwDOAN28mc6S2jv7",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:",
      "path": "bip-????.mediawiki",
      "position": 230,
      "original_position": 230,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463765982,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to be motivated by both legal concerns and spam. This is not necessarily something that would be reflected in fees.",
      "created_at": "2025-10-26T12:42:02Z",
      "updated_at": "2025-10-26T12:42:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463775739",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463775739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463777707",
      "pull_request_review_id": 3381050373,
      "id": 2463777707,
      "node_id": "PRRC_kwDOAN28mc6S2kOr",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.",
      "path": "bip-????.mediawiki",
      "position": 390,
      "original_position": 390,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463184439,
      "user": {
        "login": "ekzyis",
        "id": 27162016,
        "node_id": "MDQ6VXNlcjI3MTYyMDE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27162016?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekzyis",
        "html_url": "https://github.com/ekzyis",
        "followers_url": "https://api.github.com/users/ekzyis/followers",
        "following_url": "https://api.github.com/users/ekzyis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ekzyis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ekzyis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ekzyis/subscriptions",
        "organizations_url": "https://api.github.com/users/ekzyis/orgs",
        "repos_url": "https://api.github.com/users/ekzyis/repos",
        "events_url": "https://api.github.com/users/ekzyis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ekzyis/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What could be undesirable effects of this temporary softfork?",
      "created_at": "2025-10-26T12:45:47Z",
      "updated_at": "2025-10-26T12:45:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463777707",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463777707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 390,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463783466",
      "pull_request_review_id": 3381058136,
      "id": 2463783466,
      "node_id": "PRRC_kwDOAN28mc6S2loq",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:",
      "path": "bip-????.mediawiki",
      "position": 230,
      "original_position": 230,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463765982,
      "user": {
        "login": "MalachiRevolts",
        "id": 236233321,
        "node_id": "U_kgDODhSiaQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/236233321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MalachiRevolts",
        "html_url": "https://github.com/MalachiRevolts",
        "followers_url": "https://api.github.com/users/MalachiRevolts/followers",
        "following_url": "https://api.github.com/users/MalachiRevolts/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MalachiRevolts/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MalachiRevolts/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MalachiRevolts/subscriptions",
        "organizations_url": "https://api.github.com/users/MalachiRevolts/orgs",
        "repos_url": "https://api.github.com/users/MalachiRevolts/repos",
        "events_url": "https://api.github.com/users/MalachiRevolts/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MalachiRevolts/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Or is this softfork only motivated by legal concerns, not spam?\r\n\r\nI wouldn't minimize the legal aspect. \r\nIf you want:\r\n- exchanges not to be forced by regulators to close off/on ramps\r\n- businesses and institutes to be able to hold Bitcoin on their balances\r\n\r\nYou should want to support every proposal that protects Bitcoin from regulatory strain or worse.\r\n\r\n**Why address it now at consensus level?** \r\n=> Because you don't want regulatory bodies to get the impression you are just allowing something to happen.\r\n\r\n**What about money laundering?** \r\n=> You can defend money but you can't defend illegal files.\r\n\r\n**Bitcoin isn't designed for files, so it's no issue** \r\n=> If you allow contiguous file storage, in Bitcoin's current state, it would be use of the protocol. \r\nIf, however, you discourage contiguous file storage, and spam happens, it's abuse of the protocol.\r\nRegulatory bodies make the distinction. The social layer also makes that distinction.\r\nYou don't want Bitcoin to get a bad reputation if you want more adoption.\r\n\r\n**There is already bad stuff on the blockchain**\r\n=> Yet another reason to address further use of the blockchain in that way. Times have changed and regulatory actions against platforms that host data happen daily. Saying Bitcoin is immutable wouldn't help. They'd just go to the exchanges and close the off/on ramp. Nobody should want to risk this.",
      "created_at": "2025-10-26T12:55:30Z",
      "updated_at": "2025-10-26T12:55:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463783466",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463783466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463803278",
      "pull_request_review_id": 3381081577,
      "id": 2463803278,
      "node_id": "PRRC_kwDOAN28mc6S2qeO",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:",
      "path": "bip-????.mediawiki",
      "position": 230,
      "original_position": 230,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463765982,
      "user": {
        "login": "ekzyis",
        "id": 27162016,
        "node_id": "MDQ6VXNlcjI3MTYyMDE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27162016?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ekzyis",
        "html_url": "https://github.com/ekzyis",
        "followers_url": "https://api.github.com/users/ekzyis/followers",
        "following_url": "https://api.github.com/users/ekzyis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ekzyis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ekzyis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ekzyis/subscriptions",
        "organizations_url": "https://api.github.com/users/ekzyis/orgs",
        "repos_url": "https://api.github.com/users/ekzyis/repos",
        "events_url": "https://api.github.com/users/ekzyis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ekzyis/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> This is not necessarily something that would be reflected in fees.\r\n\r\nWhy would spam not reflect itself in fees?\r\n\r\n> Because you don't want regulatory bodies to get the impression you are just allowing something to happen.\r\n\r\nI don't want to give regulatory bodies the impression developers are responsible for what happens on the network",
      "created_at": "2025-10-26T13:10:32Z",
      "updated_at": "2025-10-26T13:11:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463803278",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463803278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463809909",
      "pull_request_review_id": 3381090241,
      "id": 2463809909,
      "node_id": "PRRC_kwDOAN28mc6S2sF1",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "ArmanTheParman",
        "id": 77603167,
        "node_id": "MDQ6VXNlcjc3NjAzMTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/77603167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ArmanTheParman",
        "html_url": "https://github.com/ArmanTheParman",
        "followers_url": "https://api.github.com/users/ArmanTheParman/followers",
        "following_url": "https://api.github.com/users/ArmanTheParman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ArmanTheParman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ArmanTheParman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ArmanTheParman/subscriptions",
        "organizations_url": "https://api.github.com/users/ArmanTheParman/orgs",
        "repos_url": "https://api.github.com/users/ArmanTheParman/repos",
        "events_url": "https://api.github.com/users/ArmanTheParman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ArmanTheParman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Arbitrary data, by definition, is not part of money, in the same way that drawing pictures on a bank cheque is not part of the purpose of the cheque.",
      "created_at": "2025-10-26T13:18:22Z",
      "updated_at": "2025-10-26T13:18:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463809909",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463809909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463816439",
      "pull_request_review_id": 3381096679,
      "id": 2463816439,
      "node_id": "PRRC_kwDOAN28mc6S2tr3",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:",
      "path": "bip-????.mediawiki",
      "position": 230,
      "original_position": 230,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463765982,
      "user": {
        "login": "MalachiRevolts",
        "id": 236233321,
        "node_id": "U_kgDODhSiaQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/236233321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MalachiRevolts",
        "html_url": "https://github.com/MalachiRevolts",
        "followers_url": "https://api.github.com/users/MalachiRevolts/followers",
        "following_url": "https://api.github.com/users/MalachiRevolts/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MalachiRevolts/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MalachiRevolts/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MalachiRevolts/subscriptions",
        "organizations_url": "https://api.github.com/users/MalachiRevolts/orgs",
        "repos_url": "https://api.github.com/users/MalachiRevolts/repos",
        "events_url": "https://api.github.com/users/MalachiRevolts/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MalachiRevolts/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't want to give regulatory bodies the impression developers are responsible for what happens on the network\r\n\r\nThey wouldn't take that path. As I said, they'd go to exchanges and lawmakers to enforce their regulation at that level.\r\nSo, it's about navigating Bitcoin through the real world and protect it.\r\n\r\nDo we rather want to give opportunists the impression we can make developers do their bidding? Lately it's going that way and that also ain't the good path forward.",
      "created_at": "2025-10-26T13:28:29Z",
      "updated_at": "2025-10-26T13:29:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463816439",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463816439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463816718",
      "pull_request_review_id": 3381097247,
      "id": 2463816718,
      "node_id": "PRRC_kwDOAN28mc6S2twO",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.",
      "path": "bip-????.mediawiki",
      "position": 352,
      "original_position": 352,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183973,
      "user": {
        "login": "ArmanTheParman",
        "id": 77603167,
        "node_id": "MDQ6VXNlcjc3NjAzMTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/77603167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ArmanTheParman",
        "html_url": "https://github.com/ArmanTheParman",
        "followers_url": "https://api.github.com/users/ArmanTheParman/followers",
        "following_url": "https://api.github.com/users/ArmanTheParman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ArmanTheParman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ArmanTheParman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ArmanTheParman/subscriptions",
        "organizations_url": "https://api.github.com/users/ArmanTheParman/orgs",
        "repos_url": "https://api.github.com/users/ArmanTheParman/repos",
        "events_url": "https://api.github.com/users/ArmanTheParman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ArmanTheParman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> By running a node you consent to the consensus rules of the network. If you don't consent, you can simply not run a node.\r\n\r\nRunning a node is not \"consenting\", this is the wrong framing; it is drawing a line in the sand about what rules YOU apply to your own money. Consensus forms FROM it, it's not \"enforced\", and there is no \"compliance\". This is not Ethereum. If the rules of the networks are wrong and do not reflect the will of the majority, the rules can eventually change.\r\n\r\nThe PEOPLE decide what their money rules are; the code follows.\r\n\r\nIt's not the other way around. Ideology of money is a higher priority than code. Code \"codefies\" the ideology, and sometimes it's not precise enough and needs modification.\r\n\r\nBitcoin is money, not an arbitrary data transfer protocol. If arbitrary data happens to tag along, it might not be an issue, so be it - it doesn't necessarily have to be 100% eliminated, but when it's becoming an issue, it's not \"censorship\" to stop it. This is valid because the purpose of Bitcoin is NOT speech (nor arbitrary data transfer) - instead, free speech protects Bitcoin. These are different things.\r\n\r\nIt's exactly the case in law - if the law is wrong, it changes (when the system is working, of course).",
      "created_at": "2025-10-26T13:29:00Z",
      "updated_at": "2025-10-26T13:29:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463816718",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463816718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 352,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463832964",
      "pull_request_review_id": 3381125385,
      "id": 2463832964,
      "node_id": "PRRC_kwDOAN28mc6S2xuE",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.",
      "path": "bip-????.mediawiki",
      "position": 321,
      "original_position": 321,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183272,
      "user": {
        "login": "BlakeJones9449",
        "id": 240260750,
        "node_id": "U_kgDODlIWjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/240260750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BlakeJones9449",
        "html_url": "https://github.com/BlakeJones9449",
        "followers_url": "https://api.github.com/users/BlakeJones9449/followers",
        "following_url": "https://api.github.com/users/BlakeJones9449/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BlakeJones9449/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BlakeJones9449/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BlakeJones9449/subscriptions",
        "organizations_url": "https://api.github.com/users/BlakeJones9449/orgs",
        "repos_url": "https://api.github.com/users/BlakeJones9449/repos",
        "events_url": "https://api.github.com/users/BlakeJones9449/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BlakeJones9449/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Yes, you quote the only 1 of 7 attorneys cited who agrees with your view and they were not even willing to put their name and reputation on the line.\r\n\r\nI didn't think a complete breakdown of that article is needed. If people read it they will find that most of the lawyers cited who say they don't think this will be a problem base their opinion on the fact that it hasn't been a problem yet. This seems to be the \"fingers crossed\" method of legal risk analysis. \r\n\r\nBut assuming the legal concerns are overblown, the social risk of stigma remains. Nakamoto consensus should not be structured such that node runners are required to host large amounts of permissionless, immutable, pseudonymous, non-currency data in order to send and verify their bitcoin transactions.\r\n\r\nThis BIP allows time to consider ways to address these issues.",
      "created_at": "2025-10-26T13:51:31Z",
      "updated_at": "2025-10-26T13:51:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463832964",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463832964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463839303",
      "pull_request_review_id": 3381131682,
      "id": 2463839303,
      "node_id": "PRRC_kwDOAN28mc6S2zRH",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "arejula27",
        "id": 46299278,
        "node_id": "MDQ6VXNlcjQ2Mjk5Mjc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/46299278?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arejula27",
        "html_url": "https://github.com/arejula27",
        "followers_url": "https://api.github.com/users/arejula27/followers",
        "following_url": "https://api.github.com/users/arejula27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arejula27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arejula27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arejula27/subscriptions",
        "organizations_url": "https://api.github.com/users/arejula27/orgs",
        "repos_url": "https://api.github.com/users/arejula27/repos",
        "events_url": "https://api.github.com/users/arejula27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arejula27/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">Yes, an \"official sanction\" is thus (fairly awkwardly) defined as \"The default standardness policies of the node software run by the vast majority of the network.\"\r\n\r\nAt what moment? If the policies of the core 30 are the standard in 6 months, then this proposal would be outdated. Should we modify the consensus again, cuz the policies have changed?",
      "created_at": "2025-10-26T14:02:34Z",
      "updated_at": "2025-10-26T17:50:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463839303",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463839303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463842078",
      "pull_request_review_id": 3381134737,
      "id": 2463842078,
      "node_id": "PRRC_kwDOAN28mc6S2z8e",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.",
      "path": "bip-????.mediawiki",
      "position": 350,
      "original_position": 350,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183707,
      "user": {
        "login": "BitcoinMonk",
        "id": 240311069,
        "node_id": "U_kgDODlLbHQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/240311069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMonk",
        "html_url": "https://github.com/BitcoinMonk",
        "followers_url": "https://api.github.com/users/BitcoinMonk/followers",
        "following_url": "https://api.github.com/users/BitcoinMonk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMonk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMonk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMonk/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMonk/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMonk/repos",
        "events_url": "https://api.github.com/users/BitcoinMonk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMonk/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Regardless of how poorly defined they are it is obvious what that means. Where the line is drawn is irrelevant. Does increasing 'moral liability' and 'moral burden' help bitcoin in any way? \r\n\r\nI would argue not.\r\n\r\nI see this proposal as a way to reduce those factors which objectively helps bitcoin by removing that moral dilemma for potential node runners.\r\n\r\nACK",
      "created_at": "2025-10-26T14:08:58Z",
      "updated_at": "2025-10-26T14:08:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463842078",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463842078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463846177",
      "pull_request_review_id": 3381139443,
      "id": 2463846177,
      "node_id": "PRRC_kwDOAN28mc6S208h",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.",
      "path": "bip-????.mediawiki",
      "position": 31,
      "original_position": 31,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "mononaut",
        "id": 83316221,
        "node_id": "MDQ6VXNlcjgzMzE2MjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/83316221?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mononaut",
        "html_url": "https://github.com/mononaut",
        "followers_url": "https://api.github.com/users/mononaut/followers",
        "following_url": "https://api.github.com/users/mononaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mononaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mononaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mononaut/subscriptions",
        "organizations_url": "https://api.github.com/users/mononaut/orgs",
        "repos_url": "https://api.github.com/users/mononaut/repos",
        "events_url": "https://api.github.com/users/mononaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mononaut/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This would be confiscatory, as there are coins known to be secured by taproot script trees with greater depth, e.g. https://mempool.space/address/bc1pxmvwu0rv0vx6l8m7l5x5fxyjcyypch42d2pym0fuepjkzd0p34nslx2vhh",
      "created_at": "2025-10-26T14:16:32Z",
      "updated_at": "2025-10-26T14:16:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463846177",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463846177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463847283",
      "pull_request_review_id": 3381140629,
      "id": 2463847283,
      "node_id": "PRRC_kwDOAN28mc6S21Nz",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "zndtoshi",
        "id": 47448562,
        "node_id": "MDQ6VXNlcjQ3NDQ4NTYy",
        "avatar_url": "https://avatars.githubusercontent.com/u/47448562?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zndtoshi",
        "html_url": "https://github.com/zndtoshi",
        "followers_url": "https://api.github.com/users/zndtoshi/followers",
        "following_url": "https://api.github.com/users/zndtoshi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zndtoshi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zndtoshi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zndtoshi/subscriptions",
        "organizations_url": "https://api.github.com/users/zndtoshi/orgs",
        "repos_url": "https://api.github.com/users/zndtoshi/repos",
        "events_url": "https://api.github.com/users/zndtoshi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zndtoshi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would this reorg cover also op_return containing illegal text for example enticing to violence against a certain group of people?",
      "created_at": "2025-10-26T14:19:08Z",
      "updated_at": "2025-10-26T14:19:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463847283",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463847283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463853359",
      "pull_request_review_id": 3381146962,
      "id": 2463853359,
      "node_id": "PRRC_kwDOAN28mc6S22sv",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.",
      "path": "bip-????.mediawiki",
      "position": 31,
      "original_position": 31,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463846177,
      "user": {
        "login": "BitcoinMonk",
        "id": 240311069,
        "node_id": "U_kgDODlLbHQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/240311069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMonk",
        "html_url": "https://github.com/BitcoinMonk",
        "followers_url": "https://api.github.com/users/BitcoinMonk/followers",
        "following_url": "https://api.github.com/users/BitcoinMonk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMonk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMonk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMonk/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMonk/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMonk/repos",
        "events_url": "https://api.github.com/users/BitcoinMonk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMonk/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed on the confiscation risk. How about a height-based exemption for pre-activation UTXOs? Wouldn't it be as simple as 'if (input_height < activation_height) skip_size_limit'?",
      "created_at": "2025-10-26T14:32:26Z",
      "updated_at": "2025-10-26T14:33:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463853359",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463853359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463867856",
      "pull_request_review_id": 3381160993,
      "id": 2463867856,
      "node_id": "PRRC_kwDOAN28mc6S26PQ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.",
      "path": "bip-????.mediawiki",
      "position": 27,
      "original_position": 27,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this basically does nothing unless you limit the number of op returns on a tx. you would however probably want to make a carve out for the coinbase tx",
      "created_at": "2025-10-26T15:03:13Z",
      "updated_at": "2025-10-26T15:03:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463867856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463867856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463871053",
      "pull_request_review_id": 3381167367,
      "id": 2463871053,
      "node_id": "PRRC_kwDOAN28mc6S27BN",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "csuwildcat",
        "id": 131786,
        "node_id": "MDQ6VXNlcjEzMTc4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/131786?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/csuwildcat",
        "html_url": "https://github.com/csuwildcat",
        "followers_url": "https://api.github.com/users/csuwildcat/followers",
        "following_url": "https://api.github.com/users/csuwildcat/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/csuwildcat/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/csuwildcat/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/csuwildcat/subscriptions",
        "organizations_url": "https://api.github.com/users/csuwildcat/orgs",
        "repos_url": "https://api.github.com/users/csuwildcat/repos",
        "events_url": "https://api.github.com/users/csuwildcat/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/csuwildcat/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Legal liability exists regardless.\r\n> \r\n> The point is that some files being illegal and others not makes laws essentially arbitrary and thus we should seek to discourage _all_ arbitrary file storage specifically to reject this inevitable issue entirely.\r\n\r\nThere are already images in the chain that violate laws, and even text snippets under the former OP_RETURN policy limit can violate laws in many jurisdictions, so the idea we must do this to dodge government's wrath just isn't compelling, given a State actor who feels this is a serious vector to attack Bitcoin would do so using what they already have. This notion gover-daddy is going to be so happy that Bitcoin is trying to signal compliance ('signal', because bad content is virtually unstoppable, regardless of OP_RETURN limits), it'll 'do us a solid' by kindly withholding harms it desires to do is the most wishful of thinking.\r\n\r\nAdding an explicit declaration that 'Bitcoin must comply with laws and won't if you don't run version __._', creates other long-term hazards for the project, as it signals it is responsive to government compelled action.\r\n\r\nPlease do not add statements like this to Bitcoin's codebase, it is not the right path for the project to go down.",
      "created_at": "2025-10-26T15:11:03Z",
      "updated_at": "2025-10-26T15:30:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463871053",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463871053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463878016",
      "pull_request_review_id": 3381174880,
      "id": 2463878016,
      "node_id": "PRRC_kwDOAN28mc6S28uA",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.",
      "path": "bip-????.mediawiki",
      "position": 27,
      "original_position": 27,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463867856,
      "user": {
        "login": "00w1",
        "id": 225624275,
        "node_id": "U_kgDODXLA0w",
        "avatar_url": "https://avatars.githubusercontent.com/u/225624275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/00w1",
        "html_url": "https://github.com/00w1",
        "followers_url": "https://api.github.com/users/00w1/followers",
        "following_url": "https://api.github.com/users/00w1/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/00w1/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/00w1/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/00w1/subscriptions",
        "organizations_url": "https://api.github.com/users/00w1/orgs",
        "repos_url": "https://api.github.com/users/00w1/repos",
        "events_url": "https://api.github.com/users/00w1/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/00w1/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It increases the cost (multiple outputs) and discourage the use of OP_RETURN for arbitrary data.",
      "created_at": "2025-10-26T15:26:47Z",
      "updated_at": "2025-10-26T15:26:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463878016",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463878016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463886127",
      "pull_request_review_id": 3381188139,
      "id": 2463886127,
      "node_id": "PRRC_kwDOAN28mc6S2-sv",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "rencryptofish",
        "id": 84360463,
        "node_id": "MDQ6VXNlcjg0MzYwNDYz",
        "avatar_url": "https://avatars.githubusercontent.com/u/84360463?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rencryptofish",
        "html_url": "https://github.com/rencryptofish",
        "followers_url": "https://api.github.com/users/rencryptofish/followers",
        "following_url": "https://api.github.com/users/rencryptofish/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rencryptofish/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rencryptofish/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rencryptofish/subscriptions",
        "organizations_url": "https://api.github.com/users/rencryptofish/orgs",
        "repos_url": "https://api.github.com/users/rencryptofish/repos",
        "events_url": "https://api.github.com/users/rencryptofish/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rencryptofish/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "curious if you can point to an opinion from counsel that expands on the legal risks described in the bip",
      "created_at": "2025-10-26T15:43:20Z",
      "updated_at": "2025-10-26T15:43:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463886127",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463886127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463904363",
      "pull_request_review_id": 3381204941,
      "id": 2463904363,
      "node_id": "PRRC_kwDOAN28mc6S3DJr",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "ModusB",
        "id": 126612941,
        "node_id": "U_kgDOB4v1zQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/126612941?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ModusB",
        "html_url": "https://github.com/ModusB",
        "followers_url": "https://api.github.com/users/ModusB/followers",
        "following_url": "https://api.github.com/users/ModusB/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ModusB/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ModusB/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ModusB/subscriptions",
        "organizations_url": "https://api.github.com/users/ModusB/orgs",
        "repos_url": "https://api.github.com/users/ModusB/repos",
        "events_url": "https://api.github.com/users/ModusB/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ModusB/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"The default standardness policies of the node software run by the vast majority of the network.\"\r\n\r\nShould this verbiage be added into the BIP, for clarity?",
      "created_at": "2025-10-26T16:23:48Z",
      "updated_at": "2025-10-26T16:23:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463904363",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463904363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463912025",
      "pull_request_review_id": 3381047761,
      "id": 2463912025,
      "node_id": "PRRC_kwDOAN28mc6S3FBZ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.",
      "path": "bip-????.mediawiki",
      "position": 32,
      "original_position": 32,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This effectively prevents any other soft fork functionality for tap script to occur while this fork is active.",
      "created_at": "2025-10-26T16:37:14Z",
      "updated_at": "2025-10-26T17:17:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463912025",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463912025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463919470",
      "pull_request_review_id": 3381220094,
      "id": 2463919470,
      "node_id": "PRRC_kwDOAN28mc6S3G1u",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">This has always been the case.\r\n\r\nYes, the risk has always existed, but Core v30 transforms it from a \"system being abused via exploits\" to a \"system officially supporting this use case\". There's a crucial difference between someone finding a clever workaround (80-byte limit for years) vs. the reference implementation saying \"100 KB is fine\". Consensus rules send a clear message about protocol intent that policy alone cannot.",
      "created_at": "2025-10-26T16:55:35Z",
      "updated_at": "2025-10-26T17:21:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463919470",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463919470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463919731",
      "pull_request_review_id": 3381220094,
      "id": 2463919731,
      "node_id": "PRRC_kwDOAN28mc6S3G5z",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">\"illegal or universally abhorrent content\" is poorly defined; there are a multitude of legal jurisdictions and a multitude of subjective views on content; Bitcoin as a system does not recognize any of them.\r\n\r\nThe point is precisely to avoid having to define or judge specific content. By limiting arbitrary data storage at the protocol level, we sidestep the entire problem. Bitcoin doesn't need to become a content moderation system. The goal is to preserve Bitcoin's identity as a monetary network, not to police what data is \"bad enough\". This is about protocol purpose, not content judgment.",
      "created_at": "2025-10-26T16:56:18Z",
      "updated_at": "2025-10-26T17:21:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463919731",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463919731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463921400",
      "pull_request_review_id": 3381220094,
      "id": 2463921400,
      "node_id": "PRRC_kwDOAN28mc6S3HT4",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:",
      "path": "bip-????.mediawiki",
      "position": 230,
      "original_position": 230,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463765982,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">Is there an emergency regarding spam on-chain? If there was an emergency, wouldn't fees be very high?\r\n\r\nThe emergency is existential, not economic. Low fees make the attack cheaper, since a malicious actor can embed illegal content for under $10 in fees. Once in the blockchain, it's permanent and every single node operator is forced to store+distribute it. Ultimately this is not about fee-market spam, it's about how a single bad actor is able to create legal/reputational liability for every single node operator. That's a fundamentally different threat model.",
      "created_at": "2025-10-26T17:00:24Z",
      "updated_at": "2025-10-26T17:23:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463921400",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463921400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463922598",
      "pull_request_review_id": 3381220094,
      "id": 2463922598,
      "node_id": "PRRC_kwDOAN28mc6S3Hmm",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">Who decides which op_return is bad enough to require an invalidation of the said block?\r\n\r\nNo one decides unilaterally, which is the whole point. This would only activate reactively if content is severe enough that the community converges on the need to respond (similar to the 2010 inflation bug). The better question is whether we should wait until that happens, or should we close the gap proactively? This BIP does both through a proactive path (Feb 2026) with reactive fallback. The existence of this proposal likely prevents the need for reactive deployment.",
      "created_at": "2025-10-26T17:03:18Z",
      "updated_at": "2025-10-26T17:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463922598",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463922598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463923424",
      "pull_request_review_id": 3381220094,
      "id": 2463923424,
      "node_id": "PRRC_kwDOAN28mc6S3Hzg",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">According to Citizens United v. Federal Election Commission, 558 U.S. 310, money is speech.\r\n\r\nThis conflates Bitcoin-the-monetary-protocol with Bitcoin-the-arbitrary-data-layer. Citizens United doesn't say the Federal Reserve must accept crayon drawings on dollar bills. Bitcoin script supports complex financial arrangements (HTLCs, multisig, etc), which is monetary speech. Random JPEGs and videos aren't monetary expression, they're an abuse of a monetary system's infrastructure. The protocol can enforce its intended purpose without violating free speech principles.",
      "created_at": "2025-10-26T17:05:22Z",
      "updated_at": "2025-10-26T17:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463923424",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463923424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463924552",
      "pull_request_review_id": 3381220094,
      "id": 2463924552,
      "node_id": "PRRC_kwDOAN28mc6S3IFI",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.",
      "path": "bip-????.mediawiki",
      "position": 52,
      "original_position": 52,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179292,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "With these rules enforced, contiguous data >256 bytes becomes consensus-invalid. An attacker could theoretically steganographically encode data across multiple fields, but: \r\n\r\n1. It's non-contiguous and obfuscated\r\n2. External code would be needed to reassemble it (making that code responsible, not Bitcoin)\r\n3. It signals Bitcoin doesn't support this use case. The difference between \"exploit despite protections\" vs. \"official feature\" is crucial for Bitcoin's reputation and legal standing.",
      "created_at": "2025-10-26T17:08:31Z",
      "updated_at": "2025-10-26T17:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463924552",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463924552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463925172",
      "pull_request_review_id": 3381220094,
      "id": 2463925172,
      "node_id": "PRRC_kwDOAN28mc6S3IO0",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.",
      "path": "bip-????.mediawiki",
      "position": 321,
      "original_position": 321,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183272,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Even if legal risk is debatable, the reputational risk is clear. Bitcoin's value proposition is \"money for enemies\": neutral, apolitical, monetary infrastructure. \r\n\r\nOnce Bitcoin becomes known as \"a network where people store illegal content\", we lose that neutrality. We've spent years fighting \"Bitcoin wastes energy\", so imagine fighting \"Bitcoin distributes CSAM\". Node operators shouldn't have to defend hosting arbitrary data just to participate in a monetary network. The stigma alone is a centralization pressure.",
      "created_at": "2025-10-26T17:10:07Z",
      "updated_at": "2025-10-26T17:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463925172",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463925172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463926196",
      "pull_request_review_id": 3381220094,
      "id": 2463926196,
      "node_id": "PRRC_kwDOAN28mc6S3Ie0",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.",
      "path": "bip-????.mediawiki",
      "position": 390,
      "original_position": 390,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463184439,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The temporary nature allows three things:\r\n\r\n1. Immediate protection while better long-term solutions are developed (avoiding \"perfect is the enemy of good\")\r\n2. Evaluation period to see if these limits harm legitimate use cases (if they don't, make it permanent; if they do, refine)\r\n3. Avoids forcing future softforks to be hardforks by allowing the community to extend and/or make permanent, otherwise it expires. This is prudent given the BitVM tradeoff and upgrade hook limitations.",
      "created_at": "2025-10-26T17:12:41Z",
      "updated_at": "2025-10-26T17:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463926196",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463926196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 390,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463926836",
      "pull_request_review_id": 3381226801,
      "id": 2463926836,
      "node_id": "PRRC_kwDOAN28mc6S3Io0",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "Jeremy-coding",
        "id": 5083663,
        "node_id": "MDQ6VXNlcjUwODM2NjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5083663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jeremy-coding",
        "html_url": "https://github.com/Jeremy-coding",
        "followers_url": "https://api.github.com/users/Jeremy-coding/followers",
        "following_url": "https://api.github.com/users/Jeremy-coding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Jeremy-coding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Jeremy-coding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Jeremy-coding/subscriptions",
        "organizations_url": "https://api.github.com/users/Jeremy-coding/orgs",
        "repos_url": "https://api.github.com/users/Jeremy-coding/repos",
        "events_url": "https://api.github.com/users/Jeremy-coding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Jeremy-coding/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This \"reactive method\" is essentially a preplanned 51% attack, to initiate at an unknown time and according to very vaguely specified triggers?\r\n\r\nWhat data can be produced showing miners will actually support or agree to such a chaotic rollback - especially given their history of apathy/unpredictable behaviour around other previous contentious forks?",
      "created_at": "2025-10-26T17:14:27Z",
      "updated_at": "2025-10-26T17:14:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463926836",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463926836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463927415",
      "pull_request_review_id": 3381220094,
      "id": 2463927415,
      "node_id": "PRRC_kwDOAN28mc6S3Ix3",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:",
      "path": "bip-????.mediawiki",
      "position": 25,
      "original_position": 25,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "May want to add some language along the lines of:\r\n\r\n>These rules apply to all transactions equally, regardless of sender, receiver, or content. Enforcement is automatic and content-agnostic.\r\n\r\nThis preempts \"selective censorship\" arguments.",
      "created_at": "2025-10-26T17:16:11Z",
      "updated_at": "2025-10-26T17:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463927415",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463927415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463927832",
      "pull_request_review_id": 3381047761,
      "id": 2463927832,
      "node_id": "PRRC_kwDOAN28mc6S3I4Y",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463926836,
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also - what are the conditions of the \"reactive method\"? Organizing on something that isn't block height or BIP-113 MTP is hard to coordinate.\r\n\r\nAre we relying on one person to give the signal to then have the fork enforcement happen at a moments notice?",
      "created_at": "2025-10-26T17:17:26Z",
      "updated_at": "2025-10-26T17:17:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463927832",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463927832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463929987",
      "pull_request_review_id": 3381229458,
      "id": 2463929987,
      "node_id": "PRRC_kwDOAN28mc6S3JaD",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.",
      "path": "bip-????.mediawiki",
      "position": 271,
      "original_position": 271,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "Jeremy-coding",
        "id": 5083663,
        "node_id": "MDQ6VXNlcjUwODM2NjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5083663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jeremy-coding",
        "html_url": "https://github.com/Jeremy-coding",
        "followers_url": "https://api.github.com/users/Jeremy-coding/followers",
        "following_url": "https://api.github.com/users/Jeremy-coding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Jeremy-coding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Jeremy-coding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Jeremy-coding/subscriptions",
        "organizations_url": "https://api.github.com/users/Jeremy-coding/orgs",
        "repos_url": "https://api.github.com/users/Jeremy-coding/repos",
        "events_url": "https://api.github.com/users/Jeremy-coding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Jeremy-coding/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Suggest \"Bcash\" -> \"Bitcoin Cash (BCH)\"",
      "created_at": "2025-10-26T17:22:37Z",
      "updated_at": "2025-10-26T21:28:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463929987",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463929987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 271,
      "original_line": 271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463933146",
      "pull_request_review_id": 3381231860,
      "id": 2463933146,
      "node_id": "PRRC_kwDOAN28mc6S3KLa",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''",
      "path": "bip-????.mediawiki",
      "position": 68,
      "original_position": 68,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "OPRETURN is a required component of Segregated Witness:\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure",
      "created_at": "2025-10-26T17:30:42Z",
      "updated_at": "2025-10-26T17:30:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463933146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463933146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463935036",
      "pull_request_review_id": 3381233474,
      "id": 2463935036,
      "node_id": "PRRC_kwDOAN28mc6S3Ko8",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463926836,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">This \"reactive method\" is essentially a preplanned 51% attack, to initiate at an unknown time and according to very vaguely specified triggers?\r\n\r\nThis isn't a 51% attack, it's an emergency consensus change with historical precedent: examples being the 2010 inflation bug (16 hour rollback) and the 2013 accidental hardfork (5-day reorg). The trigger here isn't vague, it's illegal content creating immediate legal liability for node operators (specific block hash would be identified when/if it occurs). The BIP's existence likely deters such attacks, likely making reactive deployment unnecessary. The proactive path (Feb 2026 flag day) is primary, while reactive is backup if illegal content appears first. The alternative, which is abandoning node operators facing legal jeopardy, is unacceptable.\r\n\r\n>what are the conditions of the \"reactive method\"?\r\n\r\nReactive activation could trigger when: \r\n\r\n1. Contiguous data >10KB (not steganographic)\r\n2. Severe legal risk (CSAM being clearest example)\r\n3. Broad community consensus for reorg observed on mailing lists/social media.\r\n\r\nThis is necessarily subjective since this would be a content-based adversarial attack. Objectivity comes from nodes voluntarily choosing to enforce, and no one can force reorganization.\r\n",
      "created_at": "2025-10-26T17:35:31Z",
      "updated_at": "2025-10-26T17:35:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463935036",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463935036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463935712",
      "pull_request_review_id": 3381234011,
      "id": 2463935712,
      "node_id": "PRRC_kwDOAN28mc6S3Kzg",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.",
      "path": "bip-????.mediawiki",
      "position": 255,
      "original_position": 255,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463775313,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">How is a counter soft fork required?\r\n\r\nOld nodes follow the chain with the most proof-of-work. If upgraded miners build a longer chain enforcing new rules, old nodes automatically follow. To resist requires active counter-measures, such as checkpointing the data-storage chain OR running code that rejects blocks signaling this softfork (URSF). Simply \"doing nothing\" isn't enough, same dynamics as BIP148.",
      "created_at": "2025-10-26T17:37:14Z",
      "updated_at": "2025-10-26T17:37:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463935712",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463935712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463936461",
      "pull_request_review_id": 3381234670,
      "id": 2463936461,
      "node_id": "PRRC_kwDOAN28mc6S3K_N",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.",
      "path": "bip-????.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178868,
      "user": {
        "login": "jeremyburr",
        "id": 15147445,
        "node_id": "MDQ6VXNlcjE1MTQ3NDQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15147445?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jeremyburr",
        "html_url": "https://github.com/jeremyburr",
        "followers_url": "https://api.github.com/users/jeremyburr/followers",
        "following_url": "https://api.github.com/users/jeremyburr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jeremyburr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jeremyburr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jeremyburr/subscriptions",
        "organizations_url": "https://api.github.com/users/jeremyburr/orgs",
        "repos_url": "https://api.github.com/users/jeremyburr/repos",
        "events_url": "https://api.github.com/users/jeremyburr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jeremyburr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Again, \"legal and moral risks\" could use much more precise definition.\r\n\r\nThe very goal of this proposal is to limit the need to interpret law——not encourage it. ",
      "created_at": "2025-10-26T17:39:09Z",
      "updated_at": "2025-10-26T17:39:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463936461",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463936461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463937695",
      "pull_request_review_id": 3381235754,
      "id": 2463937695,
      "node_id": "PRRC_kwDOAN28mc6S3LSf",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.",
      "path": "bip-????.mediawiki",
      "position": 86,
      "original_position": 86,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "thewrlck",
        "id": 138235209,
        "node_id": "U_kgDOCD1NSQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/138235209?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thewrlck",
        "html_url": "https://github.com/thewrlck",
        "followers_url": "https://api.github.com/users/thewrlck/followers",
        "following_url": "https://api.github.com/users/thewrlck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thewrlck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thewrlck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thewrlck/subscriptions",
        "organizations_url": "https://api.github.com/users/thewrlck/orgs",
        "repos_url": "https://api.github.com/users/thewrlck/repos",
        "events_url": "https://api.github.com/users/thewrlck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thewrlck/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I’m not convinced that restricting or discouraging non-transactional data is the right approach. While limiting data size may reduce certain abuses, it also constrains legitimate use cases that leverage Bitcoin’s data-carrying capabilities (e.g. commitments, metadata, or novel protocols). From a consensus-layer perspective, Bitcoin should remain neutral about how data is interpreted or used, as long as it follows the defined rules and pays the required fees. Imposing normative judgments about \"spam\" risks introducing subjective policy where objective validation should suffice.",
      "created_at": "2025-10-26T17:42:39Z",
      "updated_at": "2025-10-26T17:45:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463937695",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463937695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": 75,
      "original_start_line": 75,
      "start_side": "RIGHT",
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463937736",
      "pull_request_review_id": 3381235803,
      "id": 2463937736,
      "node_id": "PRRC_kwDOAN28mc6S3LTI",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463926836,
      "user": {
        "login": "Jeremy-coding",
        "id": 5083663,
        "node_id": "MDQ6VXNlcjUwODM2NjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5083663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jeremy-coding",
        "html_url": "https://github.com/Jeremy-coding",
        "followers_url": "https://api.github.com/users/Jeremy-coding/followers",
        "following_url": "https://api.github.com/users/Jeremy-coding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Jeremy-coding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Jeremy-coding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Jeremy-coding/subscriptions",
        "organizations_url": "https://api.github.com/users/Jeremy-coding/orgs",
        "repos_url": "https://api.github.com/users/Jeremy-coding/repos",
        "events_url": "https://api.github.com/users/Jeremy-coding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Jeremy-coding/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> This isn't a 51% attack, it's an emergency consensus change with historical precedent\r\n\r\nPotato, PoTAHto.  What you believe is an \"emergency consensus change\" is someone else's 51% attack.  Both require sudden intervention of a coordinated majority of hashrate under chaotic conditions.\r\n\r\n> 3. Broad community consensus for reorg observed on mailing lists/social media.\r\n\r\nHaven't altcoin communities been heavily mocked for making use of such \"proof of social media\" decision making? This seems quite ludicrous for a segment of the BTC community to feel like social-media based polling is ok for determining consensus upgrades (\"when we do it, it's ok/justified/necessary - otherwise it's centralised shitcoining\").",
      "created_at": "2025-10-26T17:42:49Z",
      "updated_at": "2025-10-26T17:42:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463937736",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463937736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463940049",
      "pull_request_review_id": 3381238009,
      "id": 2463940049,
      "node_id": "PRRC_kwDOAN28mc6S3L3R",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463926836,
      "user": {
        "login": "kwsantiago",
        "id": 44934418,
        "node_id": "MDQ6VXNlcjQ0OTM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/44934418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kwsantiago",
        "html_url": "https://github.com/kwsantiago",
        "followers_url": "https://api.github.com/users/kwsantiago/followers",
        "following_url": "https://api.github.com/users/kwsantiago/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kwsantiago/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kwsantiago/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kwsantiago/subscriptions",
        "organizations_url": "https://api.github.com/users/kwsantiago/orgs",
        "repos_url": "https://api.github.com/users/kwsantiago/repos",
        "events_url": "https://api.github.com/users/kwsantiago/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kwsantiago/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">Haven't altcoin communities been heavily mocked for making use of such \"proof of social media\" decision making? This seems quite ludicrous for a segment of the BTC community to feel like social-media based polling is ok for determining consensus upgrades (\"when we do it, it's ok/justified/necessary - otherwise it's centralised shitcoining\").\r\n\r\nFalse equivalence. Altcoins use social consensus for governance decisions (features, monetary policy). This is about coordinating an emergency response to content that's objectively illegal to possess in virtually all jurisdictions (CSAM). Not \"should we add this feature?\" but \"there's illegal content creating immediate legal liability, do we respond?\"\r\n\r\nThe same coordination mechanism was used when the community faced the 2010 inflation bug (IRC/forums) and 2013 chain split (mailing lists). Emergency response always requires rapid coordination, the alternative is paralysis while node operators face prosecution.",
      "created_at": "2025-10-26T17:48:53Z",
      "updated_at": "2025-10-26T17:48:54Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463940049",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463940049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463940610",
      "pull_request_review_id": 3381131682,
      "id": 2463940610,
      "node_id": "PRRC_kwDOAN28mc6S3MAC",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''",
      "path": "bip-????.mediawiki",
      "position": 189,
      "original_position": 189,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "arejula27",
        "id": 46299278,
        "node_id": "MDQ6VXNlcjQ2Mjk5Mjc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/46299278?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arejula27",
        "html_url": "https://github.com/arejula27",
        "followers_url": "https://api.github.com/users/arejula27/followers",
        "following_url": "https://api.github.com/users/arejula27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arejula27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arejula27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arejula27/subscriptions",
        "organizations_url": "https://api.github.com/users/arejula27/orgs",
        "repos_url": "https://api.github.com/users/arejula27/repos",
        "events_url": "https://api.github.com/users/arejula27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arejula27/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It has deep implications for Tapscript and should be reviewed carefully before merging. Doing things hastily and following predictions from developers without allowing the whole community to analyze the implications is not prudent and should not be done. The BIP does not clearly explain what would happen to current scripts on the chain (as @mononaut pointed out before) or to future Tapscript updates. All implications should be studied and explained to the community instead of trying to quickly propose a soft fork because of developer pressure or perceived urgency",
      "created_at": "2025-10-26T17:50:04Z",
      "updated_at": "2025-10-26T17:50:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463940610",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463940610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 189,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463942255",
      "pull_request_review_id": 3381240571,
      "id": 2463942255,
      "node_id": "PRRC_kwDOAN28mc6S3MZv",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463926836,
      "user": {
        "login": "Jeremy-coding",
        "id": 5083663,
        "node_id": "MDQ6VXNlcjUwODM2NjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5083663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jeremy-coding",
        "html_url": "https://github.com/Jeremy-coding",
        "followers_url": "https://api.github.com/users/Jeremy-coding/followers",
        "following_url": "https://api.github.com/users/Jeremy-coding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Jeremy-coding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Jeremy-coding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Jeremy-coding/subscriptions",
        "organizations_url": "https://api.github.com/users/Jeremy-coding/orgs",
        "repos_url": "https://api.github.com/users/Jeremy-coding/repos",
        "events_url": "https://api.github.com/users/Jeremy-coding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Jeremy-coding/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Altcoins use social consensus for governance decisions (features, monetary policy). This is about coordinating an emergency response to content that's objectively illegal to possess in virtually all jurisdictions (CSAM). Not \"should we add this feature?\" but \"there's illegal content creating immediate legal liability, do we respond?\"\r\n\r\nThis isn't a real distinction though. The scope of proposed change would certainly impact on BTC's \"features\". I'm not defending those features, I'm not really a fan of them myself (even the ones for supposedly \"legitimate Layer 2s\"), but it's undeniable that this change materially impacts elements of BTC outside of CSAM prevention. BitVM is even mentioned in the document as potentially being affected, no doubt there are others too.\r\n\r\nSo really this is proof of social media.",
      "created_at": "2025-10-26T17:53:48Z",
      "updated_at": "2025-10-26T19:50:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463942255",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463942255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463942534",
      "pull_request_review_id": 3381240750,
      "id": 2463942534,
      "node_id": "PRRC_kwDOAN28mc6S3MeG",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "shocknet-justin",
        "id": 34176400,
        "node_id": "MDQ6VXNlcjM0MTc2NDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/34176400?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shocknet-justin",
        "html_url": "https://github.com/shocknet-justin",
        "followers_url": "https://api.github.com/users/shocknet-justin/followers",
        "following_url": "https://api.github.com/users/shocknet-justin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shocknet-justin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shocknet-justin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shocknet-justin/subscriptions",
        "organizations_url": "https://api.github.com/users/shocknet-justin/orgs",
        "repos_url": "https://api.github.com/users/shocknet-justin/repos",
        "events_url": "https://api.github.com/users/shocknet-justin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shocknet-justin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This minority comment is backhanded and misleading. CTV has no monetary purpose, it's only achieves delegation to centralized applications and therefore application stack \"Bithereum\" use-cases, not monetary ones. The overwhelming majority of the community sees Bitcoin as money, consistent with this BIP. ",
      "created_at": "2025-10-26T17:54:26Z",
      "updated_at": "2025-10-26T17:54:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463942534",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463942534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463942592",
      "pull_request_review_id": 3381240785,
      "id": 2463942592,
      "node_id": "PRRC_kwDOAN28mc6S3MfA",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > Yes, an \"official sanction\" is thus (fairly awkwardly) defined as \"The default standardness policies of the node software run by the vast majority of the network.\"\r\n> \r\n> At what moment? If the policies of the core 30 are the standard in 6 months, then this proposal would be outdated. Should we modify the consensus again, cuz the policies have changed?\r\n\r\nNo? This proposal is basically working with the assumption that that is what will happen.",
      "created_at": "2025-10-26T17:54:34Z",
      "updated_at": "2025-10-26T17:54:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463942592",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463942592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463943642",
      "pull_request_review_id": 3381241640,
      "id": 2463943642,
      "node_id": "PRRC_kwDOAN28mc6S3Mva",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463926836,
      "user": {
        "login": "arejula27",
        "id": 46299278,
        "node_id": "MDQ6VXNlcjQ2Mjk5Mjc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/46299278?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arejula27",
        "html_url": "https://github.com/arejula27",
        "followers_url": "https://api.github.com/users/arejula27/followers",
        "following_url": "https://api.github.com/users/arejula27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arejula27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arejula27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arejula27/subscriptions",
        "organizations_url": "https://api.github.com/users/arejula27/orgs",
        "repos_url": "https://api.github.com/users/arejula27/repos",
        "events_url": "https://api.github.com/users/arejula27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arejula27/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Still none defined ilegal content on bitcoin, it should be at least a clear definition not just \"everyone knows what is illegal\" because people has different ideologies and ethics.",
      "created_at": "2025-10-26T17:57:09Z",
      "updated_at": "2025-10-26T17:57:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463943642",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463943642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463945824",
      "pull_request_review_id": 3381243409,
      "id": 2463945824,
      "node_id": "PRRC_kwDOAN28mc6S3NRg",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "arejula27",
        "id": 46299278,
        "node_id": "MDQ6VXNlcjQ2Mjk5Mjc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/46299278?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arejula27",
        "html_url": "https://github.com/arejula27",
        "followers_url": "https://api.github.com/users/arejula27/followers",
        "following_url": "https://api.github.com/users/arejula27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arejula27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arejula27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arejula27/subscriptions",
        "organizations_url": "https://api.github.com/users/arejula27/orgs",
        "repos_url": "https://api.github.com/users/arejula27/repos",
        "events_url": "https://api.github.com/users/arejula27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arejula27/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You define standardness based on the current policy and propose a consensus change to match it. But if the definition of standardness changes later, why shouldn’t the consensus rules be changed again?",
      "created_at": "2025-10-26T18:02:37Z",
      "updated_at": "2025-10-26T18:02:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463945824",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463945824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463950246",
      "pull_request_review_id": 3381249122,
      "id": 2463950246,
      "node_id": "PRRC_kwDOAN28mc6S3OWm",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.",
      "path": "bip-????.mediawiki",
      "position": 86,
      "original_position": 86,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463937695,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It should suffice, but clearly doesn't.",
      "created_at": "2025-10-26T18:13:52Z",
      "updated_at": "2025-10-26T18:13:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463950246",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463950246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": 75,
      "original_start_line": 75,
      "start_side": "RIGHT",
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463957641",
      "pull_request_review_id": 3381255996,
      "id": 2463957641,
      "node_id": "PRRC_kwDOAN28mc6S3QKJ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Factually incorrect, as CTV can be used for vaulting.",
      "created_at": "2025-10-26T18:27:02Z",
      "updated_at": "2025-10-26T18:27:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463957641",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463957641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463961160",
      "pull_request_review_id": 3381260750,
      "id": 2463961160,
      "node_id": "PRRC_kwDOAN28mc6S3RBI",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "BitcoinMechanic",
        "id": 45926711,
        "node_id": "MDQ6VXNlcjQ1OTI2NzEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/45926711?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinMechanic",
        "html_url": "https://github.com/BitcoinMechanic",
        "followers_url": "https://api.github.com/users/BitcoinMechanic/followers",
        "following_url": "https://api.github.com/users/BitcoinMechanic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinMechanic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinMechanic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinMechanic/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinMechanic/orgs",
        "repos_url": "https://api.github.com/users/BitcoinMechanic/repos",
        "events_url": "https://api.github.com/users/BitcoinMechanic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinMechanic/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "CTV certainly has monetary uses.",
      "created_at": "2025-10-26T18:36:26Z",
      "updated_at": "2025-10-26T18:36:26Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463961160",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463961160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463964057",
      "pull_request_review_id": 3381263306,
      "id": 2463964057,
      "node_id": "PRRC_kwDOAN28mc6S3RuZ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "shocknet-justin",
        "id": 34176400,
        "node_id": "MDQ6VXNlcjM0MTc2NDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/34176400?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shocknet-justin",
        "html_url": "https://github.com/shocknet-justin",
        "followers_url": "https://api.github.com/users/shocknet-justin/followers",
        "following_url": "https://api.github.com/users/shocknet-justin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shocknet-justin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shocknet-justin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shocknet-justin/subscriptions",
        "organizations_url": "https://api.github.com/users/shocknet-justin/orgs",
        "repos_url": "https://api.github.com/users/shocknet-justin/repos",
        "events_url": "https://api.github.com/users/shocknet-justin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shocknet-justin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Factually incorrect, as CTV can be used for vaulting.\r\n\r\nVaults are applications, not money.",
      "created_at": "2025-10-26T18:44:40Z",
      "updated_at": "2025-10-26T18:44:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463964057",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463964057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463964318",
      "pull_request_review_id": 3381263553,
      "id": 2463964318,
      "node_id": "PRRC_kwDOAN28mc6S3Rye",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "shocknet-justin",
        "id": 34176400,
        "node_id": "MDQ6VXNlcjM0MTc2NDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/34176400?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shocknet-justin",
        "html_url": "https://github.com/shocknet-justin",
        "followers_url": "https://api.github.com/users/shocknet-justin/followers",
        "following_url": "https://api.github.com/users/shocknet-justin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shocknet-justin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shocknet-justin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shocknet-justin/subscriptions",
        "organizations_url": "https://api.github.com/users/shocknet-justin/orgs",
        "repos_url": "https://api.github.com/users/shocknet-justin/repos",
        "events_url": "https://api.github.com/users/shocknet-justin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shocknet-justin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> CTV certainly has monetary uses.\r\n\r\nNot a single one, the entire premise is delegation to apps.",
      "created_at": "2025-10-26T18:45:25Z",
      "updated_at": "2025-10-26T18:45:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463964318",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463964318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463964758",
      "pull_request_review_id": 3381264009,
      "id": 2463964758,
      "node_id": "PRRC_kwDOAN28mc6S3R5W",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n\r\n> > Factually incorrect, as CTV can be used for vaulting.\r\n> \r\n> Vaults are applications, not money.\r\n\r\nIn the sense that lightning isn't money, but an application of money, and that multisig is an application of money doing joint custody, and in that sense the definition isn't useful at all.\r\n",
      "created_at": "2025-10-26T18:46:58Z",
      "updated_at": "2025-10-26T18:46:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463964758",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463964758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463985047",
      "pull_request_review_id": 3381287632,
      "id": 2463985047,
      "node_id": "PRRC_kwDOAN28mc6S3W2X",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "arejula27",
        "id": 46299278,
        "node_id": "MDQ6VXNlcjQ2Mjk5Mjc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/46299278?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arejula27",
        "html_url": "https://github.com/arejula27",
        "followers_url": "https://api.github.com/users/arejula27/followers",
        "following_url": "https://api.github.com/users/arejula27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arejula27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arejula27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arejula27/subscriptions",
        "organizations_url": "https://api.github.com/users/arejula27/orgs",
        "repos_url": "https://api.github.com/users/arejula27/repos",
        "events_url": "https://api.github.com/users/arejula27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arejula27/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same es rollups and side chains",
      "created_at": "2025-10-26T18:52:59Z",
      "updated_at": "2025-10-26T18:52:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463985047",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463985047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463998137",
      "pull_request_review_id": 3381304188,
      "id": 2463998137,
      "node_id": "PRRC_kwDOAN28mc6S3aC5",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.",
      "path": "bip-????.mediawiki",
      "position": 86,
      "original_position": 86,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463937695,
      "user": {
        "login": "thewrlck",
        "id": 138235209,
        "node_id": "U_kgDOCD1NSQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/138235209?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thewrlck",
        "html_url": "https://github.com/thewrlck",
        "followers_url": "https://api.github.com/users/thewrlck/followers",
        "following_url": "https://api.github.com/users/thewrlck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thewrlck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thewrlck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thewrlck/subscriptions",
        "organizations_url": "https://api.github.com/users/thewrlck/orgs",
        "repos_url": "https://api.github.com/users/thewrlck/repos",
        "events_url": "https://api.github.com/users/thewrlck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thewrlck/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consensus validity plus the fee market are the intended mechanisms for resource allocation. If that model now seems insufficient, the problem may not be with neutrality itself, but with participants expecting consensus to enforce policy preferences.",
      "created_at": "2025-10-26T18:57:23Z",
      "updated_at": "2025-10-26T18:57:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2463998137",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2463998137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": 75,
      "original_start_line": 75,
      "start_side": "RIGHT",
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464000257",
      "pull_request_review_id": 3381306835,
      "id": 2464000257,
      "node_id": "PRRC_kwDOAN28mc6S3akB",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "shocknet-justin",
        "id": 34176400,
        "node_id": "MDQ6VXNlcjM0MTc2NDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/34176400?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shocknet-justin",
        "html_url": "https://github.com/shocknet-justin",
        "followers_url": "https://api.github.com/users/shocknet-justin/followers",
        "following_url": "https://api.github.com/users/shocknet-justin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shocknet-justin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shocknet-justin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shocknet-justin/subscriptions",
        "organizations_url": "https://api.github.com/users/shocknet-justin/orgs",
        "repos_url": "https://api.github.com/users/shocknet-justin/repos",
        "events_url": "https://api.github.com/users/shocknet-justin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shocknet-justin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In the sense that lightning isn't money, but an application of money, and that multisig is an application of money doing joint custody, and in that sense the definition isn't useful at all.\r\n\r\nIf your implication is that ancient past changes justify any and all future changes that's a logical fallacy. Lightning and multisig are also not centralized applications requiring delegation, a user with control of their own funds has no use for covenants, they are merely a boundary for _remote_ control.",
      "created_at": "2025-10-26T18:58:01Z",
      "updated_at": "2025-10-26T18:58:01Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464000257",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464000257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464008904",
      "pull_request_review_id": 3381317522,
      "id": 2464008904,
      "node_id": "PRRC_kwDOAN28mc6S3crI",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "Rob1Ham",
        "id": 6456095,
        "node_id": "MDQ6VXNlcjY0NTYwOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6456095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rob1Ham",
        "html_url": "https://github.com/Rob1Ham",
        "followers_url": "https://api.github.com/users/Rob1Ham/followers",
        "following_url": "https://api.github.com/users/Rob1Ham/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rob1Ham/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rob1Ham/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rob1Ham/subscriptions",
        "organizations_url": "https://api.github.com/users/Rob1Ham/orgs",
        "repos_url": "https://api.github.com/users/Rob1Ham/repos",
        "events_url": "https://api.github.com/users/Rob1Ham/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rob1Ham/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > In the sense that lightning isn't money, but an application of money, and that multisig is an application of money doing joint custody, and in that sense the definition isn't useful at all.\r\n> \r\n> If your implication is that ancient past changes justify any and all future changes that's a logical fallacy. Lightning and multisig are also not centralized applications requiring delegation, a user with control of their own funds has no use for covenants, they are merely a boundary for _remote_ control.\r\n\r\nThat also is untrue, as you can be in control of all keys within a CTV vault.",
      "created_at": "2025-10-26T19:01:45Z",
      "updated_at": "2025-10-26T20:12:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464008904",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464008904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464010520",
      "pull_request_review_id": 3381319758,
      "id": 2464010520,
      "node_id": "PRRC_kwDOAN28mc6S3dEY",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "JackTyler4444",
        "id": 8444850,
        "node_id": "MDQ6VXNlcjg0NDQ4NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8444850?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JackTyler4444",
        "html_url": "https://github.com/JackTyler4444",
        "followers_url": "https://api.github.com/users/JackTyler4444/followers",
        "following_url": "https://api.github.com/users/JackTyler4444/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JackTyler4444/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JackTyler4444/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JackTyler4444/subscriptions",
        "organizations_url": "https://api.github.com/users/JackTyler4444/orgs",
        "repos_url": "https://api.github.com/users/JackTyler4444/repos",
        "events_url": "https://api.github.com/users/JackTyler4444/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JackTyler4444/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is 'money' is an extremely subjective definition. We can see this by considering the history of it. ",
      "created_at": "2025-10-26T19:02:36Z",
      "updated_at": "2025-10-26T19:02:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464010520",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464010520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464018035",
      "pull_request_review_id": 3381329016,
      "id": 2464018035,
      "node_id": "PRRC_kwDOAN28mc6S3e5z",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "shocknet-justin",
        "id": 34176400,
        "node_id": "MDQ6VXNlcjM0MTc2NDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/34176400?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shocknet-justin",
        "html_url": "https://github.com/shocknet-justin",
        "followers_url": "https://api.github.com/users/shocknet-justin/followers",
        "following_url": "https://api.github.com/users/shocknet-justin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shocknet-justin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shocknet-justin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shocknet-justin/subscriptions",
        "organizations_url": "https://api.github.com/users/shocknet-justin/orgs",
        "repos_url": "https://api.github.com/users/shocknet-justin/repos",
        "events_url": "https://api.github.com/users/shocknet-justin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shocknet-justin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> That also is untrue, as you can be in control of all keys within a CTV vault. \r\n\r\nThe premise of vaults is clawing back unauthorized remote control, which either complicates Bitcoin's use as payment or the conditions for accepting it as payment also apply to attackers thereby undermining the vault.",
      "created_at": "2025-10-26T19:07:25Z",
      "updated_at": "2025-10-26T20:13:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464018035",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464018035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464019348",
      "pull_request_review_id": 3381330152,
      "id": 2464019348,
      "node_id": "PRRC_kwDOAN28mc6S3fOU",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "shocknet-justin",
        "id": 34176400,
        "node_id": "MDQ6VXNlcjM0MTc2NDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/34176400?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shocknet-justin",
        "html_url": "https://github.com/shocknet-justin",
        "followers_url": "https://api.github.com/users/shocknet-justin/followers",
        "following_url": "https://api.github.com/users/shocknet-justin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shocknet-justin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shocknet-justin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shocknet-justin/subscriptions",
        "organizations_url": "https://api.github.com/users/shocknet-justin/orgs",
        "repos_url": "https://api.github.com/users/shocknet-justin/repos",
        "events_url": "https://api.github.com/users/shocknet-justin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shocknet-justin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Same es rollups and side chains\r\n\r\nCentralized apps. Not money.",
      "created_at": "2025-10-26T19:10:41Z",
      "updated_at": "2025-10-26T19:10:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464019348",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464019348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464026970",
      "pull_request_review_id": 3381337442,
      "id": 2464026970,
      "node_id": "PRRC_kwDOAN28mc6S3hFa",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "Jeremy-coding",
        "id": 5083663,
        "node_id": "MDQ6VXNlcjUwODM2NjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5083663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jeremy-coding",
        "html_url": "https://github.com/Jeremy-coding",
        "followers_url": "https://api.github.com/users/Jeremy-coding/followers",
        "following_url": "https://api.github.com/users/Jeremy-coding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Jeremy-coding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Jeremy-coding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Jeremy-coding/subscriptions",
        "organizations_url": "https://api.github.com/users/Jeremy-coding/orgs",
        "repos_url": "https://api.github.com/users/Jeremy-coding/repos",
        "events_url": "https://api.github.com/users/Jeremy-coding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Jeremy-coding/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's absolutely incredible to find so many people adamant on this PR that their definition of \"monetary network\" is the objectively correct one for Bitcoin, while they would simultaneously tell you that Bitcoin is NOT a \"peer to peer electronic cash system\" for \"small casual transactions\" as outlined in the Bitcoin whitepaper (that was the argument of the big blockers in the Blocksize War).\r\n\r\nPeople are very subjective with their interpretation of definitions to fit their current mood or belief.",
      "created_at": "2025-10-26T19:30:43Z",
      "updated_at": "2025-10-26T20:24:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464026970",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464026970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464027690",
      "pull_request_review_id": 3381338016,
      "id": 2464027690,
      "node_id": "PRRC_kwDOAN28mc6S3hQq",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "jeremyburr",
        "id": 15147445,
        "node_id": "MDQ6VXNlcjE1MTQ3NDQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15147445?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jeremyburr",
        "html_url": "https://github.com/jeremyburr",
        "followers_url": "https://api.github.com/users/jeremyburr/followers",
        "following_url": "https://api.github.com/users/jeremyburr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jeremyburr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jeremyburr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jeremyburr/subscriptions",
        "organizations_url": "https://api.github.com/users/jeremyburr/orgs",
        "repos_url": "https://api.github.com/users/jeremyburr/repos",
        "events_url": "https://api.github.com/users/jeremyburr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jeremyburr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Legal liability exists regardless.\r\n> \r\n> The point is that some files being illegal and others not makes laws essentially arbitrary and thus we should seek to discourage _all_ arbitrary file storage specifically to reject this inevitable issue entirely.\r\n\r\nThe justification is sound, but the wording is problematic. Explicit calls to avoid illegal content signal intent to comply with the law. It weakens the objective of the proposal itself—to be legally agnostic.",
      "created_at": "2025-10-26T19:32:32Z",
      "updated_at": "2025-10-26T19:38:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464027690",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464027690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464088643",
      "pull_request_review_id": 3381421864,
      "id": 2464088643,
      "node_id": "PRRC_kwDOAN28mc6S3wJD",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Within the consensus rules, it is true that there are no authorities.\r\n\r\nHowever, Bitcoin Core has been seen as an authority since the very beginning, and if it officially sanctions data storage as a supported function of the blockchain, and if such data storage is allowed at the consensus level, then it's difficult to make the case that it's not a supported use case, and this massively increases liability for those running Bitcoin nodes, for absolutely no benefit.\r\n\r\nThe best way to call the authority of Bitcoin Core 30 into question is to move quickly to explicitly softfork in order to distance ourselves as much as possible from the data storage use case. This BIP, just by its very existence, accomplishes this. But we must follow through with activation if we want the world to take us seriously when we say Bitcoin is not for data storage.\r\n\r\nI doubt a court of law would accept the argument that a node runner storing and distributing abhorrent content is somehow not liable because \"there are no authorities on the Bitcoin network\". The node runner him- or herself needs to have a credible claim to not intending to perform such activity.\r\n\r\nFully supporting this BIP, publicly, could even make a difference.",
      "created_at": "2025-10-26T20:02:48Z",
      "updated_at": "2025-10-26T20:02:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464088643",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464088643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464093193",
      "pull_request_review_id": 3381425797,
      "id": 2464093193,
      "node_id": "PRRC_kwDOAN28mc6S3xQJ",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178595,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There are categories of content that practically all of humanity finds objectionable, and that carry harsh penalties for distributors, including long prison sentences and possibly even execution in some jurisdictions.\r\n\r\nI think it is sufficient to acknowledge that such content exists, and that the penalties are sufficiently harsh in at least a few jurisdictions, to recognize that this increased liability will be more than enough to discourage many users from running their own Bitcoin nodes, in order to serve a function that has no relation to permissionless global money.\r\n\r\nBitcoin _as a system_ may not espouse any particular legal or moral code (other than the consensus rules), but individual Bitcoin _users_ absolutely do. This BIP represents a way for the entire bitcoin network to take a meaningful stance regarding the data use case, both collectively and individually.",
      "created_at": "2025-10-26T20:16:17Z",
      "updated_at": "2025-10-26T20:16:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464093193",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464093193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464093446",
      "pull_request_review_id": 3381426040,
      "id": 2464093446,
      "node_id": "PRRC_kwDOAN28mc6S3xUG",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.",
      "path": "bip-????.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178868,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See https://github.com/bitcoin/bips/pull/2017#discussion_r2464093193",
      "created_at": "2025-10-26T20:17:04Z",
      "updated_at": "2025-10-26T20:17:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464093446",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464093446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464094159",
      "pull_request_review_id": 3381426582,
      "id": 2464094159,
      "node_id": "PRRC_kwDOAN28mc6S3xfP",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, but up until Bitcoin Core 30, there was always plausible deniability for users who chose to run nodes, since data storage for more than 80 bytes was always considered an abuse of the system rather than officially sanctioned. Core 30 represents a significant departure from this long-established anti-data stance.",
      "created_at": "2025-10-26T20:19:13Z",
      "updated_at": "2025-10-26T20:19:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464094159",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464094159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464094531",
      "pull_request_review_id": 3381426809,
      "id": 2464094531,
      "node_id": "PRRC_kwDOAN28mc6S3xlD",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.",
      "path": "bip-????.mediawiki",
      "position": 50,
      "original_position": 50,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179176,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Bitcoin Core 30 meaningfully changes the situation. See: https://github.com/bitcoin/bips/pull/2017#discussion_r2464094159",
      "created_at": "2025-10-26T20:19:58Z",
      "updated_at": "2025-10-26T20:19:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464094531",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464094531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464094690",
      "pull_request_review_id": 3381426901,
      "id": 2464094690,
      "node_id": "PRRC_kwDOAN28mc6S3xni",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.",
      "path": "bip-????.mediawiki",
      "position": 42,
      "original_position": 42,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178126,
      "user": {
        "login": "arejula27",
        "id": 46299278,
        "node_id": "MDQ6VXNlcjQ2Mjk5Mjc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/46299278?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arejula27",
        "html_url": "https://github.com/arejula27",
        "followers_url": "https://api.github.com/users/arejula27/followers",
        "following_url": "https://api.github.com/users/arejula27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/arejula27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/arejula27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/arejula27/subscriptions",
        "organizations_url": "https://api.github.com/users/arejula27/orgs",
        "repos_url": "https://api.github.com/users/arejula27/repos",
        "events_url": "https://api.github.com/users/arejula27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/arejula27/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Knots has spent the past year defending policy-level filters, which makes it seem contradictory that they’re now proposing to alter the consensus rules. If policy is what truly matters and not enough people choose to run their policy, that suggests they don’t have sufficient pleb support. Trying to force a soft fork by convincing miners instead of users doesn’t seem consistent with following pleb community feeling",
      "created_at": "2025-10-26T20:20:21Z",
      "updated_at": "2025-10-26T20:23:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464094690",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464094690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464098199",
      "pull_request_review_id": 3381429603,
      "id": 2464098199,
      "node_id": "PRRC_kwDOAN28mc6S3yeX",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.",
      "path": "bip-????.mediawiki",
      "position": 144,
      "original_position": 144,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179673,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> This sounds like a massive assumption; if the default is to relax the rules again, then you are simply re-introducing the \"dilemma / vulnerability\" by default, which should be unconscionable, correct?\r\n\r\nYes, presumably in a year we would either fork to extend the rules indefinitely, or we would implement something more elegant that allows for some of the use cases this BIP handicaps, such as BitVM, while re-affirming our commitment to prevent block space from being used for data storage.\r\n\r\nAs the BIP mentions, that could also be a good time to propose activation for output-restriction covenants such as CTV or TEMPLATEHASH, which appear to have broad support among the developer community and could gather sufficient consensus to activate by then.",
      "created_at": "2025-10-26T20:29:54Z",
      "updated_at": "2025-10-26T20:29:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464098199",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464098199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464103313",
      "pull_request_review_id": 3381433946,
      "id": 2464103313,
      "node_id": "PRRC_kwDOAN28mc6S3zuR",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@jlopp There will indeed be much risk for vendors over the next few months of a sudden \"reactive\" activation of this BIP. Merchants should be prepared to stop accepting on-chain Bitcoin payments and wait for at least a few confirmations, maybe even 100 or so for large payments.\r\n\r\nThis could be a bumpy ride, but I don't see a better way.\r\n\r\nIdeally we could achieve a BIP8 early activation if miners are eager to activate (if I were running a mining pool, I would be). But there's a good chance that BIP8 activation code wouldn't be production-ready fast enough to make a difference, unless we can get a lot of developer support. So the \"proactive\" deployment of this BIP is a flag day for now.",
      "created_at": "2025-10-26T20:44:02Z",
      "updated_at": "2025-10-26T20:44:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464103313",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464103313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464104636",
      "pull_request_review_id": 3381435070,
      "id": 2464104636,
      "node_id": "PRRC_kwDOAN28mc6S30C8",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.",
      "path": "bip-????.mediawiki",
      "position": 179,
      "original_position": 179,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "Ali2kCom",
        "id": 109131572,
        "node_id": "U_kgDOBoE3NA",
        "avatar_url": "https://avatars.githubusercontent.com/u/109131572?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ali2kCom",
        "html_url": "https://github.com/Ali2kCom",
        "followers_url": "https://api.github.com/users/Ali2kCom/followers",
        "following_url": "https://api.github.com/users/Ali2kCom/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ali2kCom/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ali2kCom/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ali2kCom/subscriptions",
        "organizations_url": "https://api.github.com/users/Ali2kCom/orgs",
        "repos_url": "https://api.github.com/users/Ali2kCom/repos",
        "events_url": "https://api.github.com/users/Ali2kCom/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ali2kCom/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe that if this softfork is deployed as a Proactive Deployment with a mandatory Flag Day signaling, we would no longer need to worry about the risk of a chain split in the event of a CSAM incident (or any other large data payload abuse).",
      "created_at": "2025-10-26T20:47:48Z",
      "updated_at": "2025-10-26T20:47:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464104636",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464104636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464106260",
      "pull_request_review_id": 3381436344,
      "id": 2464106260,
      "node_id": "PRRC_kwDOAN28mc6S30cU",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.",
      "path": "bip-????.mediawiki",
      "position": 211,
      "original_position": 211,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463181222,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As for who will be the authority that will let everyone know which block has objectionable data, I can only say that each node runner should decide for him- or herself whether to reject the block and immediately follow the new rules. I would caution against viewing the material directly, as this could legally implicate the user. But also: don't trust, verify. Personally I will probably just follow the new chain once it has enough hashpower. Accidental early activation via the \"reactive\" method would not be the worst thing to happen.",
      "created_at": "2025-10-26T20:52:00Z",
      "updated_at": "2025-10-26T20:52:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464106260",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464106260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464106567",
      "pull_request_review_id": 3381436672,
      "id": 2464106567,
      "node_id": "PRRC_kwDOAN28mc6S30hH",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@jlopp I'm not sure why you think that's relevant. Speech is not money, and Citizens United does nothing to change this.",
      "created_at": "2025-10-26T20:52:48Z",
      "updated_at": "2025-10-26T21:14:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464106567",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464106567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464111269",
      "pull_request_review_id": 3381440529,
      "id": 2464111269,
      "node_id": "PRRC_kwDOAN28mc6S31ql",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.",
      "path": "bip-????.mediawiki",
      "position": 321,
      "original_position": 321,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183272,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My understanding is that these lawyers are mostly not criminal lawyers and have no relevant experience. But also, note that a majority of the 7 lawyers said there is indeed reason for concern.",
      "created_at": "2025-10-26T21:05:39Z",
      "updated_at": "2025-10-26T21:05:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464111269",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464111269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464111480",
      "pull_request_review_id": 3381440749,
      "id": 2464111480,
      "node_id": "PRRC_kwDOAN28mc6S31t4",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.",
      "path": "bip-????.mediawiki",
      "position": 350,
      "original_position": 350,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183707,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See https://github.com/bitcoin/bips/pull/2017#discussion_r2464093193",
      "created_at": "2025-10-26T21:06:22Z",
      "updated_at": "2025-10-26T21:06:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464111480",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464111480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464111771",
      "pull_request_review_id": 3381441086,
      "id": 2464111771,
      "node_id": "PRRC_kwDOAN28mc6S31yb",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.",
      "path": "bip-????.mediawiki",
      "position": 352,
      "original_position": 352,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183973,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think we should be creating even more barriers to running a node when so many already exist.",
      "created_at": "2025-10-26T21:07:25Z",
      "updated_at": "2025-10-26T21:07:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464111771",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464111771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 352,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464111997",
      "pull_request_review_id": 3381441299,
      "id": 2464111997,
      "node_id": "PRRC_kwDOAN28mc6S3119",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.",
      "path": "bip-????.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178868,
      "user": {
        "login": "donaldevine",
        "id": 5518040,
        "node_id": "MDQ6VXNlcjU1MTgwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5518040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaldevine",
        "html_url": "https://github.com/donaldevine",
        "followers_url": "https://api.github.com/users/donaldevine/followers",
        "following_url": "https://api.github.com/users/donaldevine/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaldevine/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaldevine/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaldevine/subscriptions",
        "organizations_url": "https://api.github.com/users/donaldevine/orgs",
        "repos_url": "https://api.github.com/users/donaldevine/repos",
        "events_url": "https://api.github.com/users/donaldevine/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaldevine/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Again, \"legal and moral risks\" could use much more precise definition.\r\n\r\nIt could be argued that @jlopp is attempting to prevent progress on this BIP by being overly pedantic. To placate him, the BIP could contain detailed definitions of the terms he is questioning. However, I suspect this would not satisfy him and he would continue to find issues with definitions in an attempt to delay this proposal.",
      "created_at": "2025-10-26T21:08:02Z",
      "updated_at": "2025-10-26T21:16:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464111997",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464111997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464112433",
      "pull_request_review_id": 3381441774,
      "id": 2464112433,
      "node_id": "PRRC_kwDOAN28mc6S318x",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.",
      "path": "bip-????.mediawiki",
      "position": 390,
      "original_position": 390,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463184439,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If this BIP gains consensus and activates, it seems likely that, when it expires, there would be consensus at least for extending the restrictions, if no better solutions are found.",
      "created_at": "2025-10-26T21:09:25Z",
      "updated_at": "2025-10-26T21:09:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464112433",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464112433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 390,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464117130",
      "pull_request_review_id": 3381446110,
      "id": 2464117130,
      "node_id": "PRRC_kwDOAN28mc6S33GK",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.",
      "path": "bip-????.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178868,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it's necessary at this stage to be overly pedantic in the motivation section -- or at least provide a concrete, helpful proposal. Suggest focusing more on expert technical review of the specification itself.",
      "created_at": "2025-10-26T21:23:49Z",
      "updated_at": "2025-10-26T21:23:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464117130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464117130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464118043",
      "pull_request_review_id": 3381442428,
      "id": 2464118043,
      "node_id": "PRRC_kwDOAN28mc6S33Ub",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.",
      "path": "bip-????.mediawiki",
      "position": 27,
      "original_position": 27,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463867856,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This BIP's main goal is to require users wanting to store large unencrypted files in the blockchain to disguise the data as financial data and/or break it up into multiple data pushes. Obviously doing so is considered an abuse of bitcoin and should be avoided, but if it does happen, this BIP strengthens the argument that data storage is not a supported use case, thus minimizing legal liability for users who run nodes.\r\n\r\nYes, there will always be ways to hide data in the blockchain, but we don't need to make it easy by giving users 100kB of OP_RETURN (which is _explicitly_ intended for arbitrary data), and any harmful data that does end up in the chain at least requires third-party software to decode.\r\n\r\nHowever, I wouldn't be against invalidating multiple OP_RETURN outputs in a single transaction if that has support.",
      "created_at": "2025-10-26T21:26:08Z",
      "updated_at": "2025-10-26T22:25:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464118043",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464118043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464120542",
      "pull_request_review_id": 3381442428,
      "id": 2464120542,
      "node_id": "PRRC_kwDOAN28mc6S337e",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.",
      "path": "bip-????.mediawiki",
      "position": 31,
      "original_position": 31,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463846177,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@mononaut Unfortunately yes, this proposal in its current form almost certainly will result in funds being at least frozen for a year. I don't see any easy way around this (other than just loudly warning users to migrate their funds ASAP) but I'm open to suggestions.\r\n\r\nDo you happen to know the use case for such a large tree?",
      "created_at": "2025-10-26T21:33:45Z",
      "updated_at": "2025-10-26T22:25:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464120542",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464120542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464123932",
      "pull_request_review_id": 3381442428,
      "id": 2464123932,
      "node_id": "PRRC_kwDOAN28mc6S34wc",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.",
      "path": "bip-????.mediawiki",
      "position": 73,
      "original_position": 73,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463544166,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unfortunately, 80 bytes is the standard on the network now, at least until 100kB OP_RETURNs start being reliably mined, so there are many use cases, including privacy-related protocols, that would break if we set OP_RETURN to zero. Hopefully this BIP will encourage a migration away from such inefficient protocols, but invalidating such uses does nothing to help this BIP's goals, as 80 bytes is too small for legally risky content.\r\n\r\nAlso, segwit would break: https://github.com/bitcoin/bips/pull/2017/files/3c718237072c107ced8c3531a487354fbdae55df#r2463933146",
      "created_at": "2025-10-26T21:43:28Z",
      "updated_at": "2025-10-26T22:25:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464123932",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464123932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464126593",
      "pull_request_review_id": 3381442428,
      "id": 2464126593,
      "node_id": "PRRC_kwDOAN28mc6S35aB",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.",
      "path": "bip-????.mediawiki",
      "position": 86,
      "original_position": 86,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463937695,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Neutral interpretation\" is the precise risk this BIP mitigates. Bitcoin does not, and should not, support arbitrary data storage for anything larger than 80 bytes (and even this is potentially too much. \"Support\" for up to 80 bytes in OP_RETURN does not exist because Bitcoin officially supports data storage as a use case; it merely exists in order to prevent more harmful methods of data storage, such as fake pubkeys).\r\n\r\nAll non-OP_RETURN data should be officially interpreted as financial data.",
      "created_at": "2025-10-26T21:50:53Z",
      "updated_at": "2025-10-26T22:25:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464126593",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464126593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": 75,
      "original_start_line": 75,
      "start_side": "RIGHT",
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464129608",
      "pull_request_review_id": 3381456406,
      "id": 2464129608,
      "node_id": "PRRC_kwDOAN28mc6S36JI",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I just find it odd to claim that Bitcoin is not speech given that a variety of aspects of developing and operating Bitcoin software are, in fact, covered by free speech protections.\r\n\r\nOn the other hand, the cypherpunk ethos does not really concern itself with the opinions of governments.",
      "created_at": "2025-10-26T21:59:23Z",
      "updated_at": "2025-10-26T22:00:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464129608",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464129608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464130410",
      "pull_request_review_id": 3381442428,
      "id": 2464130410,
      "node_id": "PRRC_kwDOAN28mc6S36Vq",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463926836,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@Jeremy-coding I think it's very unlikely that anyone, especially mining pools with large, prominent nodes, will want to stay on the old chain once it activates. Anyone, including mining nodes, is free to stay on the old chain. I just don't expect that chain to garner much hashpower (nor industry support) once miners understand how much this new rule set lowers their liability with respect to the old chain.\r\n\r\n@Rob1Ham Indeed, coordinating the reactive method will be difficult. Large mining pools will ideally be paying close attention until this BIP activates, in order to react quickly if needed.",
      "created_at": "2025-10-26T22:01:39Z",
      "updated_at": "2025-10-26T22:25:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464130410",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464130410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464131200",
      "pull_request_review_id": 3381457864,
      "id": 2464131200,
      "node_id": "PRRC_kwDOAN28mc6S36iA",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.",
      "path": "bip-????.mediawiki",
      "position": 321,
      "original_position": 321,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183272,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"No credible legal authority is seriously considering attaching liability to the automatic process our nodes undertake when dealing with Bitcoin.\"\r\n\r\nThe onus is on the authors and proponents of this BIP to present evidence to the contrary.",
      "created_at": "2025-10-26T22:03:53Z",
      "updated_at": "2025-10-26T22:19:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464131200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464131200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464131251",
      "pull_request_review_id": 3381442428,
      "id": 2464131251,
      "node_id": "PRRC_kwDOAN28mc6S36iz",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''",
      "path": "bip-????.mediawiki",
      "position": 189,
      "original_position": 189,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463940610,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See reply to @mononaut",
      "created_at": "2025-10-26T22:04:05Z",
      "updated_at": "2025-10-26T22:25:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464131251",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464131251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 189,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464132565",
      "pull_request_review_id": 3381459376,
      "id": 2464132565,
      "node_id": "PRRC_kwDOAN28mc6S363V",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.",
      "path": "bip-????.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178868,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given the coercive tone of the BIP, I believe that providing specifics around the supposed threat are highly warranted.",
      "created_at": "2025-10-26T22:08:07Z",
      "updated_at": "2025-10-26T22:21:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464132565",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464132565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464133128",
      "pull_request_review_id": 3381442428,
      "id": 2464133128,
      "node_id": "PRRC_kwDOAN28mc6S37AI",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:",
      "path": "bip-????.mediawiki",
      "position": 230,
      "original_position": 230,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463765982,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@ekzyis This BIP specifically targets forms of spam that are so legally toxic that having even a single instance in the chain represents a significant legal liability for users who run nodes. It might lead to a reduction of other forms of spam as well, but that would merely be a side effect. Spam without legal risk for users is best fought in policy rather than consensus.",
      "created_at": "2025-10-26T22:09:28Z",
      "updated_at": "2025-10-26T22:25:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464133128",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464133128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464133691",
      "pull_request_review_id": 3381460313,
      "id": 2464133691,
      "node_id": "PRRC_kwDOAN28mc6S37I7",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Core v30 transforms it from a \"system being abused via exploits\" to a \"system officially supporting this use case\".\r\n\r\nThis is a novel theory that is in great need of supporting evidence.",
      "created_at": "2025-10-26T22:10:42Z",
      "updated_at": "2025-10-26T22:10:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464133691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464133691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464133839",
      "pull_request_review_id": 3381460433,
      "id": 2464133839,
      "node_id": "PRRC_kwDOAN28mc6S37LP",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "tphyahoo",
        "id": 1337,
        "node_id": "MDQ6VXNlcjEzMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1337?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tphyahoo",
        "html_url": "https://github.com/tphyahoo",
        "followers_url": "https://api.github.com/users/tphyahoo/followers",
        "following_url": "https://api.github.com/users/tphyahoo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tphyahoo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tphyahoo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tphyahoo/subscriptions",
        "organizations_url": "https://api.github.com/users/tphyahoo/orgs",
        "repos_url": "https://api.github.com/users/tphyahoo/repos",
        "events_url": "https://api.github.com/users/tphyahoo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tphyahoo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> This has always been the case.\r\n\r\n\"The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\"\r\n\r\n\"storing and transmitting every transaction\" -- this is untrue. \r\n\r\nutreexod is an example of a fully validating node that downloads and validates but does not store transactions. \r\n\r\nhttps://github.com/utreexo/utreexod",
      "created_at": "2025-10-26T22:11:02Z",
      "updated_at": "2025-10-26T23:35:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464133839",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464133839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464135069",
      "pull_request_review_id": 3381442428,
      "id": 2464135069,
      "node_id": "PRRC_kwDOAN28mc6S37ed",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.\n+\n+Furthermore, fees provide an incentive to miners only, and do not in any case justify forcing the burden on node operators who have not all consented.\n+\n+'''How about OP_RETURN2/\"blobspace\" making the data optional for nodes?'''\n+\n+This has been attempted multiple times in the past.\n+There is perhaps no harm in trying yet again, and this proposal does not prevent doing so,\n+but ultimately these schemes depend on the cooperation of the sender, who usually wants to explicitly force the content on non-consenting node operators\n+(or they would be using other existing distribution methods already).\n+These other ideas also do not remove the dangerous risks mitigated herein.\n+\n+'''Shouldn't spam be fought in policy? Does this proposal affirm that policy is ineffective?'''\n+\n+It remains true that policy is still the best place to fight spam.\n+However, it is also true that policy cannot guarantee 100% effectiveness, particularly against bad actors who are mining.\n+This softfork minimises the impact of such malicious miners, closing the worst-case risks.\n+\n+'''Does this proposal solve spam completely?'''\n+\n+No.\n+It is impossible to solve spam completely, and typically spam is best fought with policy/filters, not consensus.\n+What this does is close the gap for a bad actor miner to mine a malicious block including contiguous data that alone can be [mis]interpreted to be an image.\n+\n+'''Why doesn't this proposal address non-Bitcoin tokens?'''\n+\n+There are a wide variety of non-Bitcoin tokens, mostly scams, that a significant portion of the community considers spam.\n+However, these schemes are best countered in policy rather than consensus, and besides, this proposal does not aim to eliminate spam entirely.\n+\n+'''Is this a slippery slope? If we make rules against data today, will we start banning tokens or other use cases we don't like tomorrow?'''\n+\n+No.\n+These rules may be new at the consensus level, but they are merely enshrining long-standing principles of Bitcoin, as necessary to address a direct, existential threat to the decentralization of the network.\n+Adopting this softfork does not require nor imply the adoption of any future softforks or spam filters.\n+\n+This softfork itself also specifically targets a certain subset of abuse of Bitcoin as an arbitrary data storage and distribution system, which has never been its intended purpose.\n+It does not attempt to impose restrictions on financial activity or the validity of monetary transactions themselves.\n+This clear distinction between mitigating a systemic risk from non-financial data abuse and interfering with actual financial use cases provides a strong barrier against future overreach.\n+\n+The explicitly temporary nature of the softfork further reinforces that this is a targeted intervention to mitigate a specific crisis, not a commitment or proposal of a new direction of development.\n+If no further action is taken by you, it will expire in a year.\n+Even if a followup softfork is proposed for that time, you retain the right to reject it.\n+\n+'''Why not reduce the block weight/size limit too?'''\n+\n+It is possible this softfork may activate before miners have fully upgraded.\n+To ensure continuity of Bitcoin through a potentially low-hashrate period, we must assume there's a possibility of each block taking 10 times as long as intended (ie, ~2 hours per block), which would mean 4 MWU per block would be a mere 333 kWU per 10 minutes.\n+\n+If there is community support for reducing block sizes, it should therefore be done separately and calmly, after the network has settled down.\n+\n+'''Why not activate CTV at the same time?'''\n+\n+CTV is still controversial with a minority of the community, and bundling it with an emergency softfork could be seen as an attempt to trick/force it on the network.",
      "path": "bip-????.mediawiki",
      "position": 402,
      "original_position": 402,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463942534,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@shocknet-justin This BIP officially offers no stance on CTV, other than to point out that it appears to be popular, and that if it indeed has consensus, a year from now could be a good time to activate it.",
      "created_at": "2025-10-26T22:13:50Z",
      "updated_at": "2025-10-26T22:25:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464135069",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464135069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 402,
      "original_line": 402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464135359",
      "pull_request_review_id": 3381461673,
      "id": 2464135359,
      "node_id": "PRRC_kwDOAN28mc6S37i_",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.",
      "path": "bip-????.mediawiki",
      "position": 350,
      "original_position": 350,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183707,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Bitcoin is already used on a regular basis to conduct immoral and illegal acts; more specification is warranted to clarify why the specific immoral / illegal acts that the BIP posits to prevent are an existential crisis while the others are not.",
      "created_at": "2025-10-26T22:14:38Z",
      "updated_at": "2025-10-26T22:28:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464135359",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464135359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464138710",
      "pull_request_review_id": 3381464550,
      "id": 2464138710,
      "node_id": "PRRC_kwDOAN28mc6S38XW",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.",
      "path": "bip-????.mediawiki",
      "position": 45,
      "original_position": 45,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463178868,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Marking further meta-commentary as off-topic here -- henceforth, please do that in the ML discussion and focus here on technical feedback on the specification (thanks).",
      "created_at": "2025-10-26T22:22:54Z",
      "updated_at": "2025-10-26T22:22:54Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464138710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464138710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464141330",
      "pull_request_review_id": 3381466827,
      "id": 2464141330,
      "node_id": "PRRC_kwDOAN28mc6S39AS",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.",
      "path": "bip-????.mediawiki",
      "position": 44,
      "original_position": 44,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": null,
      "user": {
        "login": "pakovm-git",
        "id": 17749198,
        "node_id": "MDQ6VXNlcjE3NzQ5MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/17749198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pakovm-git",
        "html_url": "https://github.com/pakovm-git",
        "followers_url": "https://api.github.com/users/pakovm-git/followers",
        "following_url": "https://api.github.com/users/pakovm-git/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pakovm-git/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pakovm-git/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pakovm-git/subscriptions",
        "organizations_url": "https://api.github.com/users/pakovm-git/orgs",
        "repos_url": "https://api.github.com/users/pakovm-git/repos",
        "events_url": "https://api.github.com/users/pakovm-git/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pakovm-git/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Illegal under which jurisdiction? Does this affect all common law, civil law and religious law jurisdictions equally?",
      "created_at": "2025-10-26T22:29:16Z",
      "updated_at": "2025-10-26T22:37:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464141330",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464141330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464141372",
      "pull_request_review_id": 3381466894,
      "id": 2464141372,
      "node_id": "PRRC_kwDOAN28mc6S39A8",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.\n+This softfork's rules are also no different from any other protocol rules currently enforced.\n+\n+Censorship would be selectively blocking specific users based on their identity.\n+These rules do the opposite:\n+they are applied universally, automatically, and impersonally to all transactions, regardless of origin.\n+\n+This is a matter of protocol maintenance, not content moderation.\n+Content is in general not the purpose of Bitcoin's finite, shared resources.\n+Multiple other networks (such as nostr) exist for distribution of content.\n+The network has always had rules to define its proper use.\n+This proposal simply refines those rules to mitigate an attack that poses a direct threat to the node operators who constitute the network.\n+\n+A permissionless network does not mean a network without rules:\n+it means the rules apply to everyone equally.\n+This softfork strengthens the network's ability to remain permissionless by protecting its operators from existential threats.\n+\n+'''Certain financial transactions are already illegal, so isn't this a non-issue?'''\n+\n+Performing financial transactions may indeed be illegal, but that is a completely different thing from keeping a record that it occurred.\n+Someone violating OFAC sanctions, for example, may be liable for sending or receiving a payment, but that does not impact the Bitcoin network as a whole.\n+\n+Illegal data is completely different:\n+nodes are not merely recording that it happened, they are active participants in storing and distributing the illegal content itself.\n+\n+'''Won't this hurt miners by reducing the fee revenue they could earn from large data transactions?'''\n+\n+On the contrary, it actually protects their businesses and revenue.\n+If Bitcoin ceases to exist, becomes illegal to use, or even loses its credibility and value, miners cannot continue to operate or will earn far less in terms of real value.\n+\n+Many miners are also subject to or opt into regulations and/or compliance policies.\n+These regulations/policies are typically more oppressive on services offering arbitrary data storage, regardless of content.\n+Often, they can even require the isolation of illegal content and turning over servers to the authorities, which can result in expensive downtime and/or mitigation costs.\n+\n+===Alternatives / Alsos===\n+\n+'''Aren't node operators protected by law, similar to ISPs or the Tor network?'''\n+\n+Laws vary around the world, but there are a few crucial differences to note:\n+\n+* ISPs are generally unaware of the illegal content. However, for Bitcoin to function, nodes must continue to distribute the blockchain long after and despite being aware of any content in it.\n+* ISPs are often required to quarantine and/or remove offending content to maintain their immunity. This option is not available for the Bitcoin network except by shutting down (which is likely to be considered a valid option that must be taken in many jurisdictions).\n+* The Internet, even using Tor, is generally a hostile environment to immoral content. However, if Bitcoin supports such content sharing, it easily becomes a very favourable network for these kinds of crimes.\n+\n+Furthermore, even if governments were to make special provisions exempting Bitcoin nodes, it would remain reprehensible to the general public to participate in such distribution (and for good reason).\n+\n+'''Why not let the fee market manage data storage?'''\n+\n+The fee market is designed to prioritize transactions based on economic urgency.\n+However, it fails when transactions impose externalities that are not properly weighed against the transaction fee.\n+\n+In this case, the externality is the existential legal and moral liability imposed on every node operator.\n+No transaction fee can compensate for the risk of imprisonment or the moral burden of distributing abhorrent content.",
      "path": "bip-????.mediawiki",
      "position": 350,
      "original_position": 350,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463183707,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "All, please don't repeat the same argument after having stated it once, otherwise marking as duplicate. Thanks.",
      "created_at": "2025-10-26T22:29:24Z",
      "updated_at": "2025-10-26T22:29:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464141372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464141372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464144524",
      "pull_request_review_id": 3381470295,
      "id": 2464144524,
      "node_id": "PRRC_kwDOAN28mc6S39yM",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@csuwildcat I think bitcoiners generally are aware of the legal risks and are fine accepting them because that's the price for Bitcoin's existence as permissionless global _money_.\r\n\r\nI don't the same can be said for permissionless uncensorable _data storage_, which carries much greater risks, and no benefits.",
      "created_at": "2025-10-26T22:38:59Z",
      "updated_at": "2025-10-26T22:39:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464144524",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464144524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464146006",
      "pull_request_review_id": 3381472001,
      "id": 2464146006,
      "node_id": "PRRC_kwDOAN28mc6S3-JW",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.",
      "path": "bip-????.mediawiki",
      "position": 49,
      "original_position": 49,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463179026,
      "user": {
        "login": "tphyahoo",
        "id": 1337,
        "node_id": "MDQ6VXNlcjEzMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1337?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tphyahoo",
        "html_url": "https://github.com/tphyahoo",
        "followers_url": "https://api.github.com/users/tphyahoo/followers",
        "following_url": "https://api.github.com/users/tphyahoo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tphyahoo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tphyahoo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tphyahoo/subscriptions",
        "organizations_url": "https://api.github.com/users/tphyahoo/orgs",
        "repos_url": "https://api.github.com/users/tphyahoo/repos",
        "events_url": "https://api.github.com/users/tphyahoo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tphyahoo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@dathonohm full nodes don't need to store data, only validate. (see my previous post) ",
      "created_at": "2025-10-26T22:42:06Z",
      "updated_at": "2025-10-26T22:42:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464146006",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464146006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464148595",
      "pull_request_review_id": 3381474701,
      "id": 2464148595,
      "node_id": "PRRC_kwDOAN28mc6S3-xz",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "dathonohm",
        "id": 239863417,
        "node_id": "U_kgDODkwGeQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/239863417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dathonohm",
        "html_url": "https://github.com/dathonohm",
        "followers_url": "https://api.github.com/users/dathonohm/followers",
        "following_url": "https://api.github.com/users/dathonohm/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dathonohm/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dathonohm/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dathonohm/subscriptions",
        "organizations_url": "https://api.github.com/users/dathonohm/orgs",
        "repos_url": "https://api.github.com/users/dathonohm/repos",
        "events_url": "https://api.github.com/users/dathonohm/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dathonohm/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@jlopp You're overthinking this. Money is speech; speech is not money (except for money, which is a kind of speech).\r\n\r\nTherefore, non-financial data is not money and does not belong in the blockchain, nor does it deserve to be stored and distributed, with no way to be censored, until the end of time.",
      "created_at": "2025-10-26T22:49:11Z",
      "updated_at": "2025-10-26T22:49:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464148595",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464148595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464152304",
      "pull_request_review_id": 3381478206,
      "id": 2464152304,
      "node_id": "PRRC_kwDOAN28mc6S3_rw",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Bitcoin is programmable money; the side effect of that is that people can use it as speech for data publication.",
      "created_at": "2025-10-26T22:58:34Z",
      "updated_at": "2025-10-26T22:58:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464152304",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464152304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464153981",
      "pull_request_review_id": 3381479894,
      "id": 2464153981,
      "node_id": "PRRC_kwDOAN28mc6S4AF9",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.",
      "path": "bip-????.mediawiki",
      "position": 180,
      "original_position": 180,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463926836,
      "user": {
        "login": "Jeremy-coding",
        "id": 5083663,
        "node_id": "MDQ6VXNlcjUwODM2NjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5083663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jeremy-coding",
        "html_url": "https://github.com/Jeremy-coding",
        "followers_url": "https://api.github.com/users/Jeremy-coding/followers",
        "following_url": "https://api.github.com/users/Jeremy-coding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Jeremy-coding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Jeremy-coding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Jeremy-coding/subscriptions",
        "organizations_url": "https://api.github.com/users/Jeremy-coding/orgs",
        "repos_url": "https://api.github.com/users/Jeremy-coding/repos",
        "events_url": "https://api.github.com/users/Jeremy-coding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Jeremy-coding/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe, maybe not. The history of Bitcoin is littered with chaos over supposedly predictable things - especially when it comes to any kind of fork (let alone an \"emergency\" one with an extremely short proposal > activation window).\r\n\r\nIn the case that the majority of miners ignore this sudden re-org (for their own inscrutable reasons, lack of time to be \"properly educated\" or whatever), what then? There will be no permanent damage to UTXO holders that are not transacting at the time of the crisis (which could occur at any moment) - but the reflection on BTC's stability could be considerable.  It's also possible for unfortunate or foolish users to get scammed out of BTC in a variety of ways, ending up on a short-lived withering chain. Surely this kind of change requires not only miner buy-in, but probably also vocal support from exchanges as well - at a minimum?",
      "created_at": "2025-10-26T23:03:06Z",
      "updated_at": "2025-10-26T23:03:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464153981",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464153981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464161358",
      "pull_request_review_id": 3381487522,
      "id": 2464161358,
      "node_id": "PRRC_kwDOAN28mc6S4B5O",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.\n+# Tapscripts including OP_SUCCESS* opcodes anywhere (even unexecuted) are invalid.\n+# Tapscripts executing the OP_IF or OP_NOTIF instruction (regardless of result) are invalid.\n+\n+==Motivation==\n+\n+The recent release of Bitcoin Core 30 presents a severe threat to Bitcoin's viability.\n+By formally standardizing rules for large-scale data storage (ie, 100kB OP_RETURNs), it proposes to redefine this behavior from an abuse of the system into a supported use case.\n+The true danger lies not merely in the release existing, but in its adoption.\n+The adoption of this release, even if by a minority of users, risks establishing this harmful redefinition as a new de facto standard for the entire network.\n+\n+This official sanction creates an immediate and severe threat.\n+The threat here is distinct from general spam or economic costs, which are typically handled with policy and the fee market.\n+It allows a malicious actor to mine a single transaction with illegal or universally abhorrent content and credibly claim that Bitcoin itself is a system for distributing it, rather than a system that was merely abused.\n+This directly threatens the ability and/or willingness of common people to run fully validating nodes due to the resulting legal and moral risks.\n+\n+A core principle of Bitcoin is \"don't trust, verify\".\n+The nature of Bitcoin requires users to run fully validating nodes, necessarily involving downloading, storing, and transmitting every transaction, even if they are fake/spam \"transactions\".\n+If the blockchain contains content that is illegal to possess or distribute, node operators are forced to choose between violating the law (or their conscience) or shutting down their node.\n+This unacceptable dilemma directly undermines the incentive to validate, leading to inevitable centralization and posing an existential threat to Bitcoin's security model.\n+\n+By enforcing these new rules, this softfork allows the community to reject the standardization of data storage at the consensus level, closing the gap being abused.\n+\n+Some of the rules may be severe limitations, especially on future protocol upgrades, so this softfork is explicitly temporary and self-expiring if no further action is taken to renew/extend them.\n+This also buys time to refine the new rules into less restrictive forms.\n+\n+==Rationale==\n+\n+===Specification nuance===\n+\n+'''Why limit scriptPubKeys to 34 bytes?'''\n+\n+scriptPubKeys must be stored indefinitely in quick-access memory (often RAM) by all fully validating nodes.\n+It generally cannot be pruned.\n+It is also a direct cost to the sender rather than the receiver. For these reasons, modern usage is all 34 bytes or smaller in practice:\n+actual spending conditions have been moved to the witness, and the scriptPubKey simply commits to them in advance with a hash.\n+\n+'''What about OP_RETURN? Why not get rid of it entirely?'''\n+\n+OP_RETURN outputs are provably unspendable, and nodes do not need to store it in the UTXO set.\n+Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam in other output scripts, and no legitimate uses have ever been found.\n+With the advent of pay-to-contract and Taproot, it is now also possible to commit to external data in the Taptree, making even hypothetical use of OP_RETURN deprecated.\n+However, to avoid breaking legacy protocols that still include such outputs, this proposal allows these outputs.\n+\n+'''Why limit other data to 256/257 bytes?'''\n+\n+With modern compression, it is plausible to represent objectionable images (often illegal to even possess) in as few as 300-400 bytes.\n+\n+256 bytes (2048 bits) is also more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography, reinforcing Bitcoin's intended purpose as a financial network.\n+\n+'''Won't spammers just spread their data over multiple fields?'''\n+\n+While it is impossible to fully prevent steganography, limiting data sizes ensures such abuses are non-contiguous and obfuscated within another intended meaning (script code, structure, etc).\n+As far as Bitcoin is concerned, the data has some meaning other than the spammers' misinterpretation, and any external code to \"reassemble\" the unintended data is responsible for producing it\n+(it is possible to write code that transforms *any* data into any other data - what matters is that Bitcoin has a well-defined meaning that is distinct from the unsupported one).\n+This proposal also sends a clear message that data storage abuses in general (legal or otherwise) are unwelcome rather than sanctioned or supported.\n+\n+'''Why is there an exception for BIP16 redeemScripts?'''\n+\n+The content of redeemScripts are another script, which is then executed.\n+Its contents are then also subject to the same OP_PUSHDATA* restrictions.\n+Restricting it is not only unnecessary, but would reduce the ability to make use of the intended script capabilities, and could impact legitimate real-world usage.\n+\n+'''Why make spending undefined witness/Tapleaf versions invalid?'''\n+\n+Since they are undefined, witness stacks spending these versions are completely unlimited currently to allow maximum flexibility in future upgrades.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why not make it invalid to send to undefined witness versions?'''\n+\n+This would require the senders of transactions to check the witness version prior to sending, and require additional coordination when a new witness version is intended to become used.\n+\n+'''Why not allow spending undefined witness versions with an empty witness?'''\n+\n+This has no use case, but would require nodes to track these UTXOs in case of potential spending.\n+By making spending invalid, it is possible for nodes to store them instead in slow memory not needed until this softfork expires.\n+(With proper planning, it also makes it possible for a future softfork making use of these witness versions to allow users to receive with an upgraded wallet even prior to activation of the upgrade.)\n+\n+'''Why make the Taproot annex invalid?'''\n+\n+The annex is currently undefined data with unlimited size.\n+It exists for future upgrades, but has no legitimate usage today.\n+Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it, and only safeguards against abuse in the meantime.\n+\n+'''Why is the Taproot control block limited to 257 bytes instead of 256?'''\n+\n+The control block is a series of hashes proving the Tapscript is part of the Taptree, plus a single byte with the leaf version and parity bit.\n+See BIP 341 for details.\n+\n+'''Why make OP_SUCCESS* invalid?'''\n+\n+OP_SUCCESS* is meant for future upgrades. See above regarding undefined witness versions.\n+\n+'''Why make OP_IF/OP_NOTIF invalid?'''\n+\n+OP_IF/OP_NOTIF originated in pre-Taproot Bitcoin script language as a way to execute different subscripts based on a condition.\n+With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path.\n+Furthermore, when the conditions are met, the intent is that the keypath spend path should be used instead, avoiding publishing any scripts at all.\n+\n+OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam that gets skipped at execution.\n+While it is impossible to fully prevent steganography, closing this gap eliminates one common abuse today basically for free, and sends a message that such abuses are not welcome.\n+\n+'''Why is the proposal so simple?'''\n+\n+A more complicated proposal could be envisioned that better balances innovation with safety, but implementing this properly would require extensive refactoring and review, delaying deployment when there is already no time to wait.\n+The rules proposed herein have been intentionally kept very simple to minimise review time and avoid unnecessary risks of overlooking unexpected side effects.\n+\n+'''Why is this softfork temporary?'''\n+\n+The impact of these restrictions would severely constrain future upgrades, potentially forcing them to be designed as a hardfork instead of a softfork.\n+Some restrictions are also not ideal, but an improved limit would be more complicated to develop and test -\n+by deploying these simpler restrictions now, we avoid making the perfect the enemy of the good enough, while still allowing for upgrading the limits to better variants in the future.\n+\n+Over the next year, interested developers can implement and propose a longer-term solution to address the needs of the protocol without the tradeoffs or blunt/simplified changes.\n+\n+===Tradeoffs===\n+\n+'''Are there any tradeoffs?'''\n+\n+Yes:\n+\n+# Limiting Taproot control blocks to 257 bytes directly constrains the size of the on-chain, consensus-enforced script tree. This could complicate or possibly even impede advanced smart contracting like BitVM, which relies on a large number of executable scripts. In the worst case scenario, these use cases may just need to wait until this softfork expires. As they are still in early development, testnet and sidechains should be sufficient for the next year while a more scalable rule is implemented.\n+# Upgrade hooks are not available for other softforks. As softforks need at least a year to activate, this shouldn't be a practical issue.\n+# In some hypothetical cases, OP_IF could require less data than additional tapscripts. If such a use case is discovered, this simply increases the fee until the softfork expires.\n+\n+'''Isn't the limit on Taproot control blocks too restrictive?'''\n+\n+Possibly.\n+The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts, which is obviously way more than anyone could ever need.\n+257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios.\n+However, it may prove too limiting for advanced off-chain functionality such as used by BitVM.\n+This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept in the short-term for the immediate benefits of this softfork.\n+The intent is to relax this restriction later, when this softfork expires, with a new approach allowing larger trees, yet to be developed.\n+\n+Do note that non-script (or non-Bitcoin-L1 scripts) usage of the taptree does not have this same limitation:\n+just a single of the 128 leaves could very well be an extension of the merkle tree to greater depths than enforced by this softfork.\n+\n+'''Aren't Taptrees intended to be unbalanced?'''\n+\n+While it is true that optimal use of Taptrees may often be unbalanced to favour more-likely-executed scripts, this is optional, and the full capacity (in this case, 128 scripts) can still be used if needed.\n+Additionally, in ideal/ordinary circumstances, neither the Taptree nor a merkle branch through it is ever published:\n+all counterparties ought to evaluate the conditions for spending off-chain and rebroadcast the transaction using the keypath spending.\n+Tapscripts are intended to only be used when one or more parties is unreachable or uncooperative; their existence mainly only serves to deter intentional non-cooperation by making it pointless.\n+\n+===Activation===\n+\n+Due to the unpredictable nature of the crisis this BIP addresses, we should move to limit on-chain data as quickly and orderly as possible, while being ready to react immediately in case illegal data appears in the chain before the new rules activate.\n+Thus this BIP presents two parallel methods of activation: the first proactive, the other reactive.\n+The proactive method involves a flag day activation of the rules, some time in early 2026. If no troublesome content appears in the chain, this BIP will activate smoothly via this proactive method.\n+If, however, some content appears in the chain that causes significant risks, we can fall back to the reactive method, which is a retroactive chain reorganization to invalidate the offending block (and any subsequent blocks) while immediately activating the new rules.\n+The mere existence of this BIP likely reduces the threat, since it demonstrates that, although Bitcoin Core 30 appears to sanction data storage as an official feature of the Bitcoin network, the network has not yet arrived at a consensus regarding this stance since there is an active opposition.\n+\n+===Proactive Deployment===\n+\n+TODO\n+\n+===Reactive Deployment===\n+\n+'''Doesn't this proposal activate too soon?'''\n+\n+In short, yes, it does.\n+Unfortunately, due to the release of Bitcoin Core 30 endorsing large data storage and actual illegal content being mined in proposed block <TODO:hash>, the network as it stands is already contaminated.\n+This is not a preemptive measure, but an emergency response to an immediate crisis.\n+Therefore, there is no time for lengthy signaling periods or careful deployment; the only remaining option is immediate and retroactive activation to mitigate the harm.\n+\n+However, because this is a softfork, old nodes will continue to follow the blockchain so long as it attains significant enough hashrate.\n+Even if non-upgraded miners continue to mine (now) invalid blocks, old nodes will continually replace them with valid blocks every time the valid chain overtakes the invalid one.\n+Since this results in an incoherent consensus system, unusable for actual currency, and loss of rewards for the lagging miners, they should quickly adapt and bring the softfork to near 100% compatibility quickly.\n+\n+The true risk is that for an initial period of time, nearly all nodes will cease to function as fully validating nodes.\n+This can only be mitigated by encouraging nodes to upgrade quickly, possibly by backporting the softfork to old and/or niche node software as necessary.\n+Toward this end, the actual changes in this softfork have been kept very simple.\n+\n+'''Does this cause a chain split?'''\n+\n+Generally, softforks do not cause chain splits.\n+However, since we are rejecting an already-mined block proposal, this softfork does indeed cause a chain split.\n+In fact, that is an important part of its purpose:\n+to keep the illegal content storage in block <TODO:hash> out of Bitcoin.\n+\n+To achieve this, the softfork must activate retroactively, invalidating that block and all its descendants.\n+The prior segment of the blockchain including this block will eventually (hopefully quickly) be discarded entirely, as the network adopts the softfork proposed herein.\n+\n+'''What is the expected impact on exchanges and other businesses, and how can they prepare?'''\n+\n+Depending on how quickly miners adopt this softfork, there is potential for significant disruption in the short-term.\n+Any econonomic node that continues to process deposits or payments should consider the risk of reversals or double-spending until the situation has fully resolved.\n+\n+The standard, industry-wide security procedure for any chain split event is to temporarily disable deposits and withdrawals until a single, stable chain has been decisively established with significant proof-of-work.\n+Each entity is responsible for monitoring the network and determining when it is safe to resume operations.\n+Before resuming operations, be sure your own nodes are updated to enforce the softfork for your own security.\n+\n+Depending on the situation, it may be safe to monitor multiple blockchains and accept payments that have confirmed on all of them.\n+Similarly, already-open Lightning channels can be used, but monitoring the channels themselves must be taken into consideration.\n+If the chain split is prolonged, it may be worth considering closing any high-value channels with untrusted counterparties.\n+\n+'''Is this unprecedented?'''\n+\n+No.\n+Bitcoin has deployed emergency softforks, including chain splits, in at least two past occasions:\n+\n+# In 2010 August, an inflation bug ([https://en.bitcoin.it/wiki/Value_overflow_incident CVE-2010-5139]) was exploited to create 184 billion BTC, violating the fundamental monetary policy of Bitcoin. To fix the bug, an emergency softfork rolled back the chain, discarding the inflationary block and its descendants 16 hours later.\n+# In 2013 March, Bitcoin Core 0.8.0 unintentionally introduced a hardfork attempt to increase block sizes ([https://en.bitcoin.it/wiki/BIP_0050 CVE-2013-3219]). While the hardfork was deemed desirable at the time, and eventually re-deployed in May, an emergency softfork was first rolled out in March to deliberately abandon and roll back the incompatible chain. The chain split went on for nearly 5 days before the big-block chain was discarded by 0.8.0 nodes.\n+\n+These incidents demonstrate the principle of prioritising fundamental integrity over short-term continuity.\n+\n+Notably, in both prior incidents, alternatives to reorganization were technically feasible:\n+\n+# In 2010, the inflation could have been addressed by a targeted soft fork that burned the inflationary outputs, without rolling back the blocks themselves.\n+# In 2013, the network could have chosen to favor the v0.8.0 chain, requiring users of older versions to upgrade or apply patches to restore consensus with the rest of the network (ie, simply accepting the hardfork as was later done in May).\n+\n+In both cases, reorganization was *chosen* as the preferred method to restore the network cleanly, even while other options were available.\n+The current crisis, however, presents an existential threat of a greater magnitude, and one where reorganization is required, rather than merely preferred.\n+In the prior incidents, the harm (incorrect balances or divergent consensus) could have been resolved through different technical means.\n+In this crisis, the harm is the legal and moral liability stemming from the possession and distribution of the data itself.\n+Since historical blockchain data cannot be completely removed after the fact, the only way to eliminate this liability is to ensure the data is not part of the canonical history.\n+\n+This incident is therefore more severe than past crises and uniquely requires this emergency response.\n+\n+'''Is this like the BIP148 UASF?'''\n+\n+In some ways, yes:\n+it only requires a significant minority to succeed;\n+miners need to upgrade to continue mining, and are incentivised to do so;\n+actual rejection requires a counter-softfork (aka URSF); etc.\n+\n+In other ways, no:\n+due to the circumstances, there is a temporary chain split and old nodes may need to catch up;\n+there is no signalling to coordinate activation;\n+hopefully there is no hostile standoff between users and miners;\n+there is a moral and legal impediment to any attempt to reject this softfork;\n+etc.\n+\n+'''Isn't this compulsory?'''\n+\n+No.\n+While it isn't viable to merely continue running old nodes as-is, if users truly wish to reject this softfork (and explicitly endorse forcing other compatible nodes to store and distribute the illegal content in block <TODO:hash>), they can do so simply by checkpointing that block.\n+\n+There are certainly practical concerns to take into consideration:\n+rejecting this softfork may subject you to legal or moral consequences,\n+or could result in you splitting off to a new altcoin like Bcash.\n+However, strictly speaking, you are free to choose.\n+\n+'''Is it hypocritical to rush this softfork, while at the same time delaying others?'''\n+\n+Activating a protocol change over a very short period of time carries significant risks.\n+Emergencies justify making this protocol change *despite* the risks.\n+No such emergency exists for upgrades, and so reasonable timeframes should be used for activation of them, to ensure full nodes mostly upgrade first.\n+\n+Emergency mitigations such as this softfork do not add new functionality or use upgrade hooks. Disabling upgrade hooks does not impede any other such emergencies.\n+\n+===Conceptual===\n+\n+'''Why is a consensus change needed to address a policy change?'''\n+\n+Policy (mempool/relay and mining rules) serves as the first line of defense against network abuse.\n+For general spam, policy is the appropriate tool, as it only needs to make abuse difficult and/or expensive, not impossible.\n+\n+When widely used node software relaxes default policies regarding data storage, it establishes, just as much as consensus rules, a new de facto standard way of using the network.\n+In the case of data storage, this standardization transforms the otherwise-subjective policy preference into a universal burden and legal risk if illegal or immoral content is then stored.\n+A single instance of such content mined into the blockchain imposes immediate legal and/or moral liability on all node operators.\n+Because the risk is existential, it is insufficient to merely make this abuse difficult or costly;\n+it is an absolute necessity to prevent it from occurring even once.\n+This absolute protection cannot be guaranteed by voluntary policy and can only be provided by consensus rules.\n+\n+'''Isn't this censorship? By rejecting blocks based on data content, aren't you violating the principles of free speech and a neutral, permissionless network?'''\n+\n+Bitcoin is money, not speech.",
      "path": "bip-????.mediawiki",
      "position": 298,
      "original_position": 298,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463182249,
      "user": {
        "login": "dr0ther",
        "id": 24509885,
        "node_id": "MDQ6VXNlcjI0NTA5ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/24509885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dr0ther",
        "html_url": "https://github.com/dr0ther",
        "followers_url": "https://api.github.com/users/dr0ther/followers",
        "following_url": "https://api.github.com/users/dr0ther/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dr0ther/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dr0ther/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dr0ther/subscriptions",
        "organizations_url": "https://api.github.com/users/dr0ther/orgs",
        "repos_url": "https://api.github.com/users/dr0ther/repos",
        "events_url": "https://api.github.com/users/dr0ther/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dr0ther/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> According to Citizens United v. Federal Election Commission, 558 U.S. 310, money is speech.\r\n> \r\n> Normally it would be irrelevant to reference legal rulings in the context of the protocol, but this BIP seems to rely heavily on legality.\r\n\r\nThis doesn't matter as the United States doe not recognize bitcoin as money",
      "created_at": "2025-10-26T23:21:08Z",
      "updated_at": "2025-10-26T23:21:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464161358",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464161358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464195671",
      "pull_request_review_id": 3381525752,
      "id": 2464195671,
      "node_id": "PRRC_kwDOAN28mc6S4KRX",
      "diff_hunk": "@@ -0,0 +1,437 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Reduced Data Temporary Softfork\n+  Author: Dathon Ohm <dathonohm+bip@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-10-24\n+  License: BSD-3-Clause\n+  Post-History: https://gnusha.org/pi/bitcoindev/aN_u-xB2ogn2D834@erisian.com.au/T/#mb71350c5dfb119efeb92c5ee738b6c8225bf15b6\n+</pre>\n+\n+==Abstract==\n+\n+Temporarily limit the size of data fields at the consensus level.\n+\n+==Copyright==\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+==Specification==\n+\n+Blocks with a height from (TBD) until and including 987424 are checked with these additional rules:\n+\n+# New output scriptPubKeys exceeding 34 bytes are invalid, unless the first opcode is OP_RETURN, in which case up to 83 bytes are valid.\n+# OP_PUSHDATA* with payloads larger than 256 bytes are invalid, except for the redeemScript push in BIP16 scriptSigs.\n+# Spending undefined witness (or Tapleaf) versions (ie, not Witness v0/BIP 141 nor Taproot/BIP 341) is invalid.\n+# Witness stacks with a Taproot annex are invalid.\n+# Taproot control blocks larger than 257 bytes (a merkle tree with 128 script leaves) are invalid.",
      "path": "bip-????.mediawiki",
      "position": 31,
      "original_position": 31,
      "commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "original_commit_id": "3c718237072c107ced8c3531a487354fbdae55df",
      "in_reply_to_id": 2463846177,
      "user": {
        "login": "bitcoin-eagle",
        "id": 72296314,
        "node_id": "MDQ6VXNlcjcyMjk2MzE0",
        "avatar_url": "https://avatars.githubusercontent.com/u/72296314?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-eagle",
        "html_url": "https://github.com/bitcoin-eagle",
        "followers_url": "https://api.github.com/users/bitcoin-eagle/followers",
        "following_url": "https://api.github.com/users/bitcoin-eagle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-eagle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-eagle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-eagle/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-eagle/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-eagle/repos",
        "events_url": "https://api.github.com/users/bitcoin-eagle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-eagle/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@dathonohm  Multisig 6-of-11 or greater implemented as 462 seperate 6-of-6 scripts (all combinations of 6 key subsets from 11 quorum). Which is the efficient way of doing multisig in taproot to save number of checksig operations and to avoid publishing unused pubkeys\r\n\r\nI find it a bit ironic to confiscate bitcoin specifically from people that use script in a way to minimize spamming the chain with unused pubkeys in a big multisig",
      "created_at": "2025-10-27T00:30:05Z",
      "updated_at": "2025-10-27T00:45:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/2017#discussion_r2464195671",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2464195671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/2017"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    }
  ]
}