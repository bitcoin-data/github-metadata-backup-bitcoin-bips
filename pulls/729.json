{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/729",
    "id": 220926354,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjIwOTI2MzU0",
    "html_url": "https://github.com/bitcoin/bips/pull/729",
    "diff_url": "https://github.com/bitcoin/bips/pull/729.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/729.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/729",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/729/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/729/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/729/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/1e0d7376207a9273017c89b64ab91822cf33eac0",
    "number": 729,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "BIP 79: Bustapay :: a practical coinjoin protocol",
    "user": {
      "login": "RHavar",
      "id": 9326759,
      "node_id": "MDQ6VXNlcjkzMjY3NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RHavar",
      "html_url": "https://github.com/RHavar",
      "followers_url": "https://api.github.com/users/RHavar/followers",
      "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
      "organizations_url": "https://api.github.com/users/RHavar/orgs",
      "repos_url": "https://api.github.com/users/RHavar/repos",
      "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/RHavar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Requesting a BIP number assignment",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2018-10-07T04:18:35Z",
    "updated_at": "2018-10-19T22:41:08Z",
    "closed_at": "2018-10-19T22:41:08Z",
    "mergeable_state": "unknown",
    "merged_at": "2018-10-19T22:41:08Z",
    "merge_commit_sha": "1e0d7376207a9273017c89b64ab91822cf33eac0",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "RHavar:master",
      "ref": "master",
      "sha": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 147128989,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDcxMjg5ODk=",
        "name": "bips",
        "full_name": "RHavar/bips",
        "owner": {
          "login": "RHavar",
          "id": 9326759,
          "node_id": "MDQ6VXNlcjkzMjY3NTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/RHavar",
          "html_url": "https://github.com/RHavar",
          "followers_url": "https://api.github.com/users/RHavar/followers",
          "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
          "organizations_url": "https://api.github.com/users/RHavar/orgs",
          "repos_url": "https://api.github.com/users/RHavar/repos",
          "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/RHavar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/RHavar/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/RHavar/bips",
        "archive_url": "https://api.github.com/repos/RHavar/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/RHavar/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/RHavar/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/RHavar/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/RHavar/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/RHavar/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/RHavar/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/RHavar/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/RHavar/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/RHavar/bips/contributors",
        "deployments_url": "https://api.github.com/repos/RHavar/bips/deployments",
        "downloads_url": "https://api.github.com/repos/RHavar/bips/downloads",
        "events_url": "https://api.github.com/repos/RHavar/bips/events",
        "forks_url": "https://api.github.com/repos/RHavar/bips/forks",
        "git_commits_url": "https://api.github.com/repos/RHavar/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/RHavar/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/RHavar/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/RHavar/bips.git",
        "issue_comment_url": "https://api.github.com/repos/RHavar/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/RHavar/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/RHavar/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/RHavar/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/RHavar/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/RHavar/bips/languages",
        "merges_url": "https://api.github.com/repos/RHavar/bips/merges",
        "milestones_url": "https://api.github.com/repos/RHavar/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/RHavar/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/RHavar/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/RHavar/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:RHavar/bips.git",
        "stargazers_url": "https://api.github.com/repos/RHavar/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/RHavar/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/RHavar/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/RHavar/bips/subscription",
        "tags_url": "https://api.github.com/repos/RHavar/bips/tags",
        "teams_url": "https://api.github.com/repos/RHavar/bips/teams",
        "trees_url": "https://api.github.com/repos/RHavar/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/RHavar/bips.git",
        "hooks_url": "https://api.github.com/repos/RHavar/bips/hooks",
        "svn_url": "https://github.com/RHavar/bips",
        "homepage": "bitcoin.org",
        "language": "Python",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 5192,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2019-01-27T05:02:02Z",
        "created_at": "2018-09-02T23:21:11Z",
        "updated_at": "2018-10-29T04:18:44Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4b21d2794687aa44325075dceb4fe7d4cef7a1c0",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5535,
        "stargazers_count": 8220,
        "watchers_count": 8220,
        "size": 13787,
        "default_branch": "master",
        "open_issues_count": 112,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T12:09:15Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-08-01T09:08:43Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 124,
    "deletions": 0,
    "changed_files": 1,
    "commits": 5,
    "review_comments": 27,
    "comments": 5
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 1889125869,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTg4OTEyNTg2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1889125869",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-07T18:47:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1889126416,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTg4OTEyNjQxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1889126416",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-07T18:48:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1889133714,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTg4OTEzMzcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1889133714",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-07T19:07:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1889139868,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTg4OTEzOTg2OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1889139868",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-07T19:24:31Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjA1YzMxYTllMDFjMWNiMDExM2NjYTkxODExNTcxZDdhZDQ4ZjNjOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "tree": {
        "sha": "9ce36546d7f1e03574b1888ae6fc32d4b09f656a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9ce36546d7f1e03574b1888ae6fc32d4b09f656a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ad3a16baab521bc6005cb0577f44a0677f24fe08",
          "sha": "ad3a16baab521bc6005cb0577f44a0677f24fe08",
          "html_url": "https://github.com/bitcoin/bips/commit/ad3a16baab521bc6005cb0577f44a0677f24fe08"
        }
      ],
      "message": "Add bip for bustapay",
      "committer": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-07T19:53:25Z"
      },
      "author": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-07T19:53:25Z"
      },
      "sha": "605c31a9e01c1cb0113cca91811571d7ad48f3c8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1889151026,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTg4OTE1MTAyNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1889151026",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-07T19:53:35Z"
    },
    {
      "event": "reviewed",
      "id": 165049565,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY1MDQ5NTY1",
      "url": null,
      "actor": null,
      "commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/729#pullrequestreview-165049565",
      "submitted_at": "2018-10-16T08:51:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/729"
    },
    {
      "event": "reviewed",
      "id": 165050761,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY1MDUwNzYx",
      "url": null,
      "actor": null,
      "commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "This feels like it wants to be a BIP70 extension.\r\n\r\nNeeds a section addressing backwards compatibility.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/729#pullrequestreview-165050761",
      "submitted_at": "2018-10-16T09:10:56Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/729"
    },
    {
      "event": "labeled",
      "id": 1906218898,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE5MDYyMTg4OTg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1906218898",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-16T09:11:18Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjMyMjg2NWU5ZDkxMDEyMDc3MjU4NDIzODEzODdhZmI4ZTI0MWQxNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6322865e9d9101207725842381387afb8e241d17",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6322865e9d9101207725842381387afb8e241d17",
      "tree": {
        "sha": "735e205363d768bd3114a3cbac68e0dbf34f82ac",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/735e205363d768bd3114a3cbac68e0dbf34f82ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/605c31a9e01c1cb0113cca91811571d7ad48f3c8",
          "sha": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
          "html_url": "https://github.com/bitcoin/bips/commit/605c31a9e01c1cb0113cca91811571d7ad48f3c8"
        }
      ],
      "message": "Address review comments",
      "committer": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-16T22:02:01Z"
      },
      "author": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-16T22:02:01Z"
      },
      "sha": "6322865e9d9101207725842381387afb8e241d17"
    },
    {
      "event": "commented",
      "id": 430417300,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQxNzMwMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/430417300",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-16T22:03:52Z",
      "updated_at": "2018-10-16T22:03:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "@luke-jr  I think I addressed most of your comments, except adding a backwards compatibility section -- as I'm not quite sure what I should put there. I don't think there's really any backwards compatibility issues",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/729#issuecomment-430417300",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/729"
    },
    {
      "event": "mentioned",
      "id": 1908073201,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTkwODA3MzIwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1908073201",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-16T22:03:52Z"
    },
    {
      "event": "subscribed",
      "id": 1908073203,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE5MDgwNzMyMDM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1908073203",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-16T22:03:52Z"
    },
    {
      "event": "commented",
      "id": 430429123,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQyOTEyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/430429123",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-16T22:53:42Z",
      "updated_at": "2018-10-16T22:53:42Z",
      "author_association": "MEMBER",
      "body": "The backwards compatibility section is in fact the only part required to be assigned a BIP number.\r\n\r\nIt should probably discuss compatibility with existing wallets, BIP 21, and BIP 70. Simply saying why there are no issues should be fine.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/729#issuecomment-430429123",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/729"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Y2FkNDNmMmY1YjQyYmFkYzcxODViZmRjYzBlM2IwNTIxYWE2OWMwYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cad43f2f5b42badc7185bfdcc0e3b0521aa69c0b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/cad43f2f5b42badc7185bfdcc0e3b0521aa69c0b",
      "tree": {
        "sha": "56f218e11246fff1518a8b0a4f1ab7c116236a78",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/56f218e11246fff1518a8b0a4f1ab7c116236a78"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6322865e9d9101207725842381387afb8e241d17",
          "sha": "6322865e9d9101207725842381387afb8e241d17",
          "html_url": "https://github.com/bitcoin/bips/commit/6322865e9d9101207725842381387afb8e241d17"
        }
      ],
      "message": "Add backwards compatibility section",
      "committer": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-16T23:35:16Z"
      },
      "author": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-16T23:35:16Z"
      },
      "sha": "cad43f2f5b42badc7185bfdcc0e3b0521aa69c0b"
    },
    {
      "event": "commented",
      "id": 430437657,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQzNzY1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/430437657",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-16T23:36:06Z",
      "updated_at": "2018-10-16T23:36:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Great! Thanks for all the feedback so far. Updated.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/729#issuecomment-430437657",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/729"
    },
    {
      "event": "renamed",
      "id": 1908933928,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTkwODkzMzkyOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1908933928",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-17T08:59:58Z",
      "rename": {
        "from": "Add bip for bustapay :: a practical sender/receiver coinjoin protocol",
        "to": "BIP 79: Bustapay :: a practical sender/receiver coinjoin protocol"
      }
    },
    {
      "event": "commented",
      "id": 430548008,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDU0ODAwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/430548008",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-17T09:00:16Z",
      "updated_at": "2018-10-17T09:00:16Z",
      "author_association": "MEMBER",
      "body": "Assigned BIP 79, but note that the current title is too long (max length 44 chars)",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/729#issuecomment-430548008",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/729"
    },
    {
      "event": "reviewed",
      "id": 165884800,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY1ODg0ODAw",
      "url": null,
      "actor": null,
      "commit_id": "cad43f2f5b42badc7185bfdcc0e3b0521aa69c0b",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Gutoey",
        "id": 43917150,
        "node_id": "MDQ6VXNlcjQzOTE3MTUw",
        "avatar_url": "https://avatars.githubusercontent.com/u/43917150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Gutoey",
        "html_url": "https://github.com/Gutoey",
        "followers_url": "https://api.github.com/users/Gutoey/followers",
        "following_url": "https://api.github.com/users/Gutoey/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Gutoey/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Gutoey/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Gutoey/subscriptions",
        "organizations_url": "https://api.github.com/users/Gutoey/orgs",
        "repos_url": "https://api.github.com/users/Gutoey/repos",
        "events_url": "https://api.github.com/users/Gutoey/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Gutoey/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/729#pullrequestreview-165884800",
      "submitted_at": "2018-10-18T00:14:42Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/729"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NGEwNWYyOTljZTM5OWE2YWM0NzU1MWFiZmRmZWNhMmM4Y2I2MTEzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4a05f299ce399a6ac47551abfdfeca2c8cb61131",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4a05f299ce399a6ac47551abfdfeca2c8cb61131",
      "tree": {
        "sha": "7bfc183b6573f48975995060944337b6cef81e01",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7bfc183b6573f48975995060944337b6cef81e01"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cad43f2f5b42badc7185bfdcc0e3b0521aa69c0b",
          "sha": "cad43f2f5b42badc7185bfdcc0e3b0521aa69c0b",
          "html_url": "https://github.com/bitcoin/bips/commit/cad43f2f5b42badc7185bfdcc0e3b0521aa69c0b"
        }
      ],
      "message": "Retitle and move to bip79",
      "committer": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-19T05:27:42Z"
      },
      "author": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-19T05:27:42Z"
      },
      "sha": "4a05f299ce399a6ac47551abfdfeca2c8cb61131"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1913918325,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTkxMzkxODMyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1913918325",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-19T05:27:52Z"
    },
    {
      "event": "renamed",
      "id": 1914575326,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTkxNDU3NTMyNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1914575326",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-19T11:59:34Z",
      "rename": {
        "from": "BIP 79: Bustapay :: a practical sender/receiver coinjoin protocol",
        "to": "BIP 79: Bustapay :: a practical coinjoin protocol"
      }
    },
    {
      "event": "commented",
      "id": 431339640,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTMzOTY0MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/431339640",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-19T12:00:25Z",
      "updated_at": "2018-10-19T12:00:25Z",
      "author_association": "MEMBER",
      "body": "```\r\nInvalid date format in bip-0079.mediawiki at scripts/buildtable.pl line 164, <$F> line 10.\r\n```",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/729#issuecomment-431339640",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/729"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MWUwZDczNzYyMDdhOTI3MzAxN2M4OWI2NGFiOTE4MjJjZjMzZWFjMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1e0d7376207a9273017c89b64ab91822cf33eac0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1e0d7376207a9273017c89b64ab91822cf33eac0",
      "tree": {
        "sha": "9613a1b11df04c4f0d778af6adc181d6266f6abb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9613a1b11df04c4f0d778af6adc181d6266f6abb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4a05f299ce399a6ac47551abfdfeca2c8cb61131",
          "sha": "4a05f299ce399a6ac47551abfdfeca2c8cb61131",
          "html_url": "https://github.com/bitcoin/bips/commit/4a05f299ce399a6ac47551abfdfeca2c8cb61131"
        }
      ],
      "message": "Fix date format",
      "committer": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-19T22:22:30Z"
      },
      "author": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2018-10-19T22:22:30Z"
      },
      "sha": "1e0d7376207a9273017c89b64ab91822cf33eac0"
    },
    {
      "event": "merged",
      "id": 1915873565,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTkxNTg3MzU2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1915873565",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/1e0d7376207a9273017c89b64ab91822cf33eac0",
      "created_at": "2018-10-19T22:41:08Z"
    },
    {
      "event": "closed",
      "id": 1915873567,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTkxNTg3MzU2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1915873567",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-19T22:41:08Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225450969",
      "pull_request_review_id": 165049565,
      "id": 225450969,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1MDk2OQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 2,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please don't make up BIP numbers.",
      "created_at": "2018-10-16T08:51:39Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225450969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225450969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225451855",
      "pull_request_review_id": 165050761,
      "id": 225451855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1MTg1NQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 70,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems like this is a problem. What happens if the receiver sends a 422 and then broadcasts it anyway? The user might try to pay again, possibly with different inputs, thinking that the first send failed...",
      "created_at": "2018-10-16T08:54:20Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225451855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225451855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225452100",
      "pull_request_review_id": 165050761,
      "id": 225452100,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1MjEwMA==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 64,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it signed or unsigned?",
      "created_at": "2018-10-16T08:55:07Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225452100",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225452100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225453019",
      "pull_request_review_id": 165050761,
      "id": 225453019,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1MzAxOQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "422 seems to be WebDAV-specific. I'm not familiar with WebDAV. Is this protocol compatible with it?\r\n\r\nIf not WebDAV-compatible, the only appropriate response I know of for this is 400.",
      "created_at": "2018-10-16T08:57:54Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225453019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225453019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225453462",
      "pull_request_review_id": 165050761,
      "id": 225453462,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1MzQ2Mg==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 82,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand \"...nor increase, and generally not increase...\"",
      "created_at": "2018-10-16T08:59:12Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225453462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225453462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225453615",
      "pull_request_review_id": 165050761,
      "id": 225453615,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1MzYxNQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.\n+\n+=== Returning the partial transaction ===\n+\n+The receiver must sign all contributed inputs in the partial transaction. The partial transaction should also remove all witnesses from the the original template transaction as they are no longer valid, and need to be recalculated by the sender. The receiver returns the partial transaction as a binary-encoded HTTP response with a status code of 200.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 86,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Content MIME types might be good to specify",
      "created_at": "2018-10-16T08:59:38Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225453615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225453615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225454028",
      "pull_request_review_id": 165050761,
      "id": 225454028,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1NDAyOA==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.\n+\n+=== Returning the partial transaction ===\n+\n+The receiver must sign all contributed inputs in the partial transaction. The partial transaction should also remove all witnesses from the the original template transaction as they are no longer valid, and need to be recalculated by the sender. The receiver returns the partial transaction as a binary-encoded HTTP response with a status code of 200.\n+\n+\n+=== Sender Validation ===\n+\n+The sender *must* do important validation on the partial transaction. They *must* verify:\n+\n+* All template transaction inputs are in the partial transaction (but perhaps different order) and have the same sequence numbers.\n+* The partial transaction contains at least one new (and signed) segwit input (owned by the receiver)\n+* All outputs from the template transaction exist in the partial transaction, except they are allowed to be reordered and have their amounts increased (but *never* decreased)",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 95,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should the sender verify that its change has not increased? That might be a confusing situation for the user.",
      "created_at": "2018-10-16T09:00:48Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225454028",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225454028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225454487",
      "pull_request_review_id": 165050761,
      "id": 225454487,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1NDQ4Nw==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.\n+\n+=== Returning the partial transaction ===\n+\n+The receiver must sign all contributed inputs in the partial transaction. The partial transaction should also remove all witnesses from the the original template transaction as they are no longer valid, and need to be recalculated by the sender. The receiver returns the partial transaction as a binary-encoded HTTP response with a status code of 200.\n+\n+\n+=== Sender Validation ===\n+\n+The sender *must* do important validation on the partial transaction. They *must* verify:\n+\n+* All template transaction inputs are in the partial transaction (but perhaps different order) and have the same sequence numbers.\n+* The partial transaction contains at least one new (and signed) segwit input (owned by the receiver)\n+* All outputs from the template transaction exist in the partial transaction, except they are allowed to be reordered and have their amounts increased (but *never* decreased)\n+\n+=== Creating Final Transaction ===\n+\n+After validating the partial transaction, the sender signs all its inputs to create what is now the final transaction. It is important that the sender is careful to not be tricked by the receiver into signing other inputs it owns. The sender must only sign inputs that existed in the template transaction. If the sender is not careful the receiver may \"contribute\" inputs that are actually owned with by the sender, with the hope the sender blindly signs everything.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 99,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What happens if both the sender and receiver have the same private key in their wallets?",
      "created_at": "2018-10-16T09:02:10Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225454487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225454487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225455760",
      "pull_request_review_id": 165050761,
      "id": 225455760,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1NTc2MA==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 31,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "First sentence is nonsensical?",
      "created_at": "2018-10-16T09:05:44Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225455760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225455760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225456385",
      "pull_request_review_id": 165050761,
      "id": 225456385,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1NjM4NQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since the receiver is the most interested party to the transaction confirming, it would seem ideal for a norm where the sender does not contribute any fees (or perhaps only fees covering its inputs) and the receiver contributes whatever fees they desire.",
      "created_at": "2018-10-16T09:07:19Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225456385",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225456385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225456951",
      "pull_request_review_id": 165050761,
      "id": 225456951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1Njk1MQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 62,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not drop the address, and have the server add the output? This enables the recipient to use any output it wants (not limited to merely address-representable outputs the sender already can understand; eg, it could use a native segwit output even with senders that don't support Bech32), as well as choose a key per-request (so the URI can be placed on a static webpage, yet still avoid address reuse).",
      "created_at": "2018-10-16T09:09:04Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225456951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225456951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225457171",
      "pull_request_review_id": 165050761,
      "id": 225457171,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTQ1NzE3MQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 64,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why only segwit inputs?",
      "created_at": "2018-10-16T09:09:43Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225457171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225457171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225704776",
      "pull_request_review_id": 165364123,
      "id": 225704776,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcwNDc3Ng==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 64,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225452100,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is fully signed. This is important so the receiver can push the transaction onto the network (make it cost spending a utxo to learn one of the receivers utxos)",
      "created_at": "2018-10-16T20:56:11Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225704776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225704776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225705604",
      "pull_request_review_id": 165365168,
      "id": 225705604,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcwNTYwNA==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225453019,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is not WebDav-compatible.  I find it's a lot nicer to use more specific error codes than 400, as something like 400 is frequently used by reverse-proxies and http libraries in general. \r\n\r\nIf you want, I'll change it over to 400, but I think 422 is better.",
      "created_at": "2018-10-16T20:58:47Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225705604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225705604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225707989",
      "pull_request_review_id": 165368088,
      "id": 225707989,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcwNzk4OQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 82,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225453462,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I meant to write \"generally should not\", i'll rework this whole paragraph",
      "created_at": "2018-10-16T21:06:26Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225707989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225707989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225710489",
      "pull_request_review_id": 165371219,
      "id": 225710489,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcxMDQ4OQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.\n+\n+=== Returning the partial transaction ===\n+\n+The receiver must sign all contributed inputs in the partial transaction. The partial transaction should also remove all witnesses from the the original template transaction as they are no longer valid, and need to be recalculated by the sender. The receiver returns the partial transaction as a binary-encoded HTTP response with a status code of 200.\n+\n+\n+=== Sender Validation ===\n+\n+The sender *must* do important validation on the partial transaction. They *must* verify:\n+\n+* All template transaction inputs are in the partial transaction (but perhaps different order) and have the same sequence numbers.\n+* The partial transaction contains at least one new (and signed) segwit input (owned by the receiver)\n+* All outputs from the template transaction exist in the partial transaction, except they are allowed to be reordered and have their amounts increased (but *never* decreased)",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 95,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225454028,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably not a big problem, I've updated the \"output adjustment\" section to actually allow this situation -- as I just don't see it as a problem. And it might be kind of useful if a receiver wants to incentivize or reimburse users using bustapay (like refunding a \"consolidation fee\" that some services like bitpay put on the invoice)",
      "created_at": "2018-10-16T21:15:24Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225710489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225710489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225711019",
      "pull_request_review_id": 165371915,
      "id": 225711019,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcxMTAxOQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.\n+\n+=== Returning the partial transaction ===\n+\n+The receiver must sign all contributed inputs in the partial transaction. The partial transaction should also remove all witnesses from the the original template transaction as they are no longer valid, and need to be recalculated by the sender. The receiver returns the partial transaction as a binary-encoded HTTP response with a status code of 200.\n+\n+\n+=== Sender Validation ===\n+\n+The sender *must* do important validation on the partial transaction. They *must* verify:\n+\n+* All template transaction inputs are in the partial transaction (but perhaps different order) and have the same sequence numbers.\n+* The partial transaction contains at least one new (and signed) segwit input (owned by the receiver)\n+* All outputs from the template transaction exist in the partial transaction, except they are allowed to be reordered and have their amounts increased (but *never* decreased)\n+\n+=== Creating Final Transaction ===\n+\n+After validating the partial transaction, the sender signs all its inputs to create what is now the final transaction. It is important that the sender is careful to not be tricked by the receiver into signing other inputs it owns. The sender must only sign inputs that existed in the template transaction. If the sender is not careful the receiver may \"contribute\" inputs that are actually owned with by the sender, with the hope the sender blindly signs everything.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 99,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225454487,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not really a problem. In the \"reference implementation\" it does support using the same wallet for both sending and receiving. As long as you verify the inputs were in the template transaction, as opposed to checking if you \"own\" them (like it says here).  ",
      "created_at": "2018-10-16T21:17:21Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225711019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225711019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225712672",
      "pull_request_review_id": 165373945,
      "id": 225712672,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcxMjY3Mg==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225456385,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The anti-spy/anti-DoS  aspect of this proposal is based around the receiver being able to propagate the template-transaction if the sender doesn't go through with the whole process. \r\nIt's now possible for a receiver to reimburse some of the txfees though by increasing the change amount (Although that's not particularly reliable, as the sender doesn't even need to use change). ",
      "created_at": "2018-10-16T21:23:20Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225712672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225712672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225714447",
      "pull_request_review_id": 165376162,
      "id": 225714447,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcxNDQ0Nw==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 62,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225456951,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The big reason is that if the receiver an arbitrarily change his output, the sender has no way to validate it. Any MITM  (imagine cloudflare) could change the output to their own, and then the sender would send them money. While with the current design, a MITM can only function as a DoS  (in which case the sender will just fall back to a normal send).\r\n\r\nThere was a suggestion that in the \"payment request\" it encodes what the \"new output\" would be changed to. However, I didn't think I could justify the complexity at this point in time.",
      "created_at": "2018-10-16T21:29:34Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225714447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225714447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225715763",
      "pull_request_review_id": 165377805,
      "id": 225715763,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcxNTc2Mw==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 64,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225457171,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Simplicity/txid malleability.\r\n\r\nThe receiver needs to watch the network for the final payment, and needs to differentiate a normal payment and a bustapayment to the same address. So if there's no transaction id malleability this is simpler as the final transaction will have the same txid as the partial transaction txid.\r\n\r\nIt definitely would be possible to support \"legacy\" transactions, just not worth the effort. ",
      "created_at": "2018-10-16T21:34:20Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225715763",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225715763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225732600",
      "pull_request_review_id": 165398487,
      "id": 225732600,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTczMjYwMA==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 64,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225452100,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As soon as a signed transaction is sent (even privately), we must assume the transaction has successfully completed, and cannot give the user the impression it failed.",
      "created_at": "2018-10-16T22:46:40Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225732600",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225732600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225732756",
      "pull_request_review_id": 165398669,
      "id": 225732756,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTczMjc1Ng==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225453019,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose the BIP can itself define the 422 outside of the WebDAV context.",
      "created_at": "2018-10-16T22:47:27Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225732756",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225732756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225732975",
      "pull_request_review_id": 165398954,
      "id": 225732975,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTczMjk3NQ==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.\n+\n+=== Returning the partial transaction ===\n+\n+The receiver must sign all contributed inputs in the partial transaction. The partial transaction should also remove all witnesses from the the original template transaction as they are no longer valid, and need to be recalculated by the sender. The receiver returns the partial transaction as a binary-encoded HTTP response with a status code of 200.\n+\n+\n+=== Sender Validation ===\n+\n+The sender *must* do important validation on the partial transaction. They *must* verify:\n+\n+* All template transaction inputs are in the partial transaction (but perhaps different order) and have the same sequence numbers.\n+* The partial transaction contains at least one new (and signed) segwit input (owned by the receiver)\n+* All outputs from the template transaction exist in the partial transaction, except they are allowed to be reordered and have their amounts increased (but *never* decreased)",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 95,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225454028,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Someone using BitPay won't be able to implement this BIP - only BitPay themselves could. And in that case, they can just not add the fee...",
      "created_at": "2018-10-16T22:48:38Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225732975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225732975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225733173",
      "pull_request_review_id": 165399200,
      "id": 225733173,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTczMzE3Mw==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.\n+\n+=== Returning the partial transaction ===\n+\n+The receiver must sign all contributed inputs in the partial transaction. The partial transaction should also remove all witnesses from the the original template transaction as they are no longer valid, and need to be recalculated by the sender. The receiver returns the partial transaction as a binary-encoded HTTP response with a status code of 200.\n+\n+\n+=== Sender Validation ===\n+\n+The sender *must* do important validation on the partial transaction. They *must* verify:\n+\n+* All template transaction inputs are in the partial transaction (but perhaps different order) and have the same sequence numbers.\n+* The partial transaction contains at least one new (and signed) segwit input (owned by the receiver)\n+* All outputs from the template transaction exist in the partial transaction, except they are allowed to be reordered and have their amounts increased (but *never* decreased)\n+\n+=== Creating Final Transaction ===\n+\n+After validating the partial transaction, the sender signs all its inputs to create what is now the final transaction. It is important that the sender is careful to not be tricked by the receiver into signing other inputs it owns. The sender must only sign inputs that existed in the template transaction. If the sender is not careful the receiver may \"contribute\" inputs that are actually owned with by the sender, with the hope the sender blindly signs everything.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 99,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225454487,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The receiver-contributed input *won't* have been in the template transaction.",
      "created_at": "2018-10-16T22:49:41Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225733173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225733173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225733467",
      "pull_request_review_id": 165399553,
      "id": 225733467,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTczMzQ2Nw==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225456385,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder if it might be appropriate to use SIGHASH_SINGLE or such so that the receiver can add its input/output *and* propagate the new transaction without going back through the sender...",
      "created_at": "2018-10-16T22:51:08Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225733467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225733467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225733602",
      "pull_request_review_id": 165399731,
      "id": 225733602,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTczMzYwMg==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.\n+\n+Should the receiver reject a transaction, it should not attempt to propagate it on the network.\n+\n+=== Contributed Input Choice ===\n+\n+The receiver must add at least one input to the transaction (the \"contributed inputs\"). If the receiver has no inputs, it should use a 500 internal server error, so the client can send the transaction as per normal (or try again later). Its generally advised to only add a single contributed input, however they are circumstances where adding more than a single input can be useful.\n+\n+To prevent an attack where a receiver is continually sent variations of the same transaction to enumerate the receivers utxo set, it is essential that the receiver always returns the same contributed inputs when it's seen the same inputs.\n+\n+It is strongly preferable that the receiver makes an effort to pick a contributed input of the same type as much the other transaction inputs if possible.\n+\n+=== Output Adjustment ===\n+\n+After adding inputs to the transaction, the receiver will generally want to adjust the output that pays himself. This is the *only* output that the receiver should adjust. All other outputs *must* be left intact. The receiver *must never* decrease the amount they get paid nor increase, and generally not increase it by more than the contributed input amount.\n+\n+=== Returning the partial transaction ===\n+\n+The receiver must sign all contributed inputs in the partial transaction. The partial transaction should also remove all witnesses from the the original template transaction as they are no longer valid, and need to be recalculated by the sender. The receiver returns the partial transaction as a binary-encoded HTTP response with a status code of 200.\n+\n+\n+=== Sender Validation ===\n+\n+The sender *must* do important validation on the partial transaction. They *must* verify:\n+\n+* All template transaction inputs are in the partial transaction (but perhaps different order) and have the same sequence numbers.\n+* The partial transaction contains at least one new (and signed) segwit input (owned by the receiver)\n+* All outputs from the template transaction exist in the partial transaction, except they are allowed to be reordered and have their amounts increased (but *never* decreased)",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 95,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225454028,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When bitpay creates an invoice they won't know if you will pay via a normal transaction or bustpay. They have to always assume that a normal transaction will be used to make the payment, so the invoice amount will reflect that. But if the invoice is finally paid via bustpay, they could potentially offer a discount (if they wanted)",
      "created_at": "2018-10-16T22:51:53Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225733602",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225733602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225734113",
      "pull_request_review_id": 165400308,
      "id": 225734113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTczNDExMw==",
      "diff_hunk": "@@ -0,0 +1,120 @@\n+<pre>\n+  BIP: 69\n+  Layer: Applications\n+  Title: Bustapay :: a practical sender/receiver coinjoin protocol\n+  Author: Ryan Havar <rhavar@protonmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-bustapay\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2018-10-5\n+  License: CC0-1.0\n+</pre>\n+\n+\n+==Abstract==\n+\n+The way bitcoin transactions are normally created leaks more information than desirable, and as a result has been exploited by unreasonably effective blockchain analysis techniques to jeopardizes important properties that is expected of a useful currency.\n+\n+Bustapay is a simple and practical protocol for the sender and receiver of a payment to collaboratively sign a bitcoin transaction in such a way that busts some analysis assumptions to immediate benefit of the sender and receiver. Furthermore it does so in such a way that gives a significant amount of control to the receiver to help manage their utxo set size, a constant problem for bitcoin merchants.\n+\n+==Copyright==\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+==Motivation==\n+\n+One of the most powerful blockchain analysis heuristics has been to assume all inputs of a transaction are controlled by a single party unless otherwise known (such as by the distinctive structure of a traditional coinjoin, or multisig spends that are validated onchain). Combined with other techniques (notably change-output guessing) this has lead to unexpectedly accurate tracking that has exposed bitcoin participants to unacceptable personal, business and financial risks -- undermining bitcoin's utility and fungibility -- and ultimately jeopardizing its ability to function as useful money.\n+\n+We however can bust these assumption, in a relatively simple way with a sender-receiver coinjoin. With our protocol we bypass many of the DoS and complexity problems that have plagued previous coinjoin protocols and hampered hopes of adoption. Besides being efficient and simple, bustapay most promisingly does have an identifiable structure for attackers, which erodes the confidence of their entire models, providing positive externalities for the entire bitcoin ecosystem.\n+\n+Bustapay transactions also they do not grow the receiver's count of unspent transaction outputs, and in fact gives the receiver an opportunity to better manage their utxo set, something normally only done when sending payments. Large utxo sets are often problematic and expensive, and frequently requiring privacy-destroying consolidation.  Besides busting clustering assumptions, bustapay also provides a layer of obfuscation of send amounts.\n+\n+It is worth noting that this specification has eschewed complexity and potentially useful extensions on the assumption that simplicity is of the most important to encourage adoption.\n+\n+\n+==Overview==\n+\n+A bustapay payment is made from a sender to a receiver.\n+\n+====Step 1. Sender creates a bitcoin transaction paying the receiver====\n+\n+This transaction must use segwit for all inputs, and be fully valid and signed. The transaction must be eligible for propagation on the network (but not done so at this stage)\n+\n+====Step 2. Sender gives the \"template transaction\" to the receiver====\n+\n+This is done via an HTTP POST request, sent to a \"bustapay url\"\n+\n+====Step 3. Receiver processes the transaction and returns a partially signed coinjoin====\n+\n+The receiver validates the transaction, and pays himself. The receiver then adds one or more of his own inputs (known as the ''contributed inputs'') and (optionally) increases the output that pays himself (generally by the sum of the ''contributed inputs''). Doing so creates a ''partial transaction'', which the receiver returns to the sender. It is called such as it requires the sender to resign his own inputs.\n+\n+====Step 4. Receiver validates, re-signs, and propagates on the bitcoin network====\n+\n+The receiver MUST validate the ''partial transaction'' was changed correctly and non-maliciously (to allow using potentially untrusted communication channels), resign its original inputs and propagates the final transaction over the bitcoin network.\n+\n+====Step 5. Receiver observes the finalized transaction on the bitcoin network====\n+\n+Once the receiver has seen the finalized transactions on the network (and has enough confirmations) it can process it like a normal payment for the sent amount (as opposed to the amount that it looks like on the network). If the receiver does not see the finalized transaction after a timeout will propagate the original \"template transaction\" to ensure the payment happens and function a strong anti-DoS mechanism.\n+\n+== Specification ==\n+\n+The standard way of letting a sender know where to send a bustapay transaction is done via a bip21 encoded address. The key value \"bpu\" (short for \"BustaPayUrl\") should be used. An example such address would be bitcoin:2NABbUr9yeRCp1oUCtVmgJF8HGRCo3ifpTT?bpu=https://bp.bustabit.com/submit  It is highly encouraged that urls are kept short.\n+\n+When the sender is creating a \"template transaction\" it is done almost identically to creating a normal send, with the exception that *only* segwit inputs may be used. The sender is also encouraged to use a slightly more aggressive feerate than usual as well as BIP125 (Opt-in Full Replace-by-Fee Signaling), but neither is strictly required.\n+\n+The template transaction should be sent to the receiver via an HTTP POST to the bustapay url, with a binary encoded body.\n+\n+The receiver is then responsible for validating the template transaction. If there is a problem with the transaction, or the receiver is generally unhappy with the transaction (e.g. fees are too small) the HTTP response code of 422 should be used and a human-readable string containing information on why which can be directly given to the user.",
      "path": "bip-bustapay.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "1e0d7376207a9273017c89b64ab91822cf33eac0",
      "original_commit_id": "605c31a9e01c1cb0113cca91811571d7ad48f3c8",
      "in_reply_to_id": 225456385,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That would be more robust against spies/DoS, but would make it obvious what is a bustapayment transactions and thus negate the primary privacy benefits bustapay offers",
      "created_at": "2018-10-16T22:54:21Z",
      "updated_at": "2018-10-19T22:22:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/729#discussion_r225734113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/225734113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    }
  ]
}