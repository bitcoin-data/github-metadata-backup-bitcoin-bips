{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1541",
    "id": 1684909184,
    "node_id": "PR_kwDOAN28mc5kbayA",
    "html_url": "https://github.com/bitcoin/bips/pull/1541",
    "diff_url": "https://github.com/bitcoin/bips/pull/1541.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1541.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1541",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1541/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1541/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1541/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
    "number": 1541,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Opt-In Policy For More Robust Fee-bumping",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A specification is useful for coordination between node impls that want to implement the same policy and applications that want to use it. For those that are not interested in the details of v3 policy, this also serves as a writeup of the specific pinning problems we aim to address. There has been discussion of using this in other protocol design and multiple requests for its documentation to exist in the BIPs repository, so I'm opening a PR here.\r\n\r\nImplementation:\r\n- https://github.com/bitcoin/bitcoin/pull/28948\r\n\r\nExample usage and things built on top:\r\n- Package RBF\r\n  - https://github.com/bitcoin/bitcoin/pull/28984\r\n- Ephemeral Anchors\r\n  - https://github.com/bitcoin/bitcoin/pull/29001\r\n  - https://github.com/bitcoin/bips/pull/1524\r\n- LN commitment transactions\r\n  - https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418\r\n  - https://github.com/instagibbs/bolts/commits/zero_fee_commitment\r\n- LN-Symmetry\r\n  - https://delvingbitcoin.org/t/ln-symmetry-project-recap/359\r\n  - https://github.com/instagibbs/lightning/tree/eltoo_support\r\n\r\nDiscussion and history:\r\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html\r\n- https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff\r\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html\r\n- https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340\r\n- https://github.com/bitcoin/bitcoin/pull/25038",
    "labels": [],
    "created_at": "2024-01-18T14:01:13Z",
    "updated_at": "2024-02-19T23:56:39Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merge_commit_sha": "569929448957a4e54863704c388a89202b9ad5e5",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "glozow:2024-01-v3-prio",
      "ref": "2024-01-v3-prio",
      "sha": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 481603389,
        "node_id": "R_kgDOHLSvPQ",
        "name": "bips",
        "full_name": "glozow/bips",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bips",
        "archive_url": "https://api.github.com/repos/glozow/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bips/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bips/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bips/downloads",
        "events_url": "https://api.github.com/repos/glozow/bips/events",
        "forks_url": "https://api.github.com/repos/glozow/bips/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bips.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bips/languages",
        "merges_url": "https://api.github.com/repos/glozow/bips/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bips.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bips/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bips/tags",
        "teams_url": "https://api.github.com/repos/glozow/bips/teams",
        "trees_url": "https://api.github.com/repos/glozow/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bips.git",
        "hooks_url": "https://api.github.com/repos/glozow/bips/hooks",
        "svn_url": "https://github.com/glozow/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 15141,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-01-22T12:35:04Z",
        "created_at": "2022-04-14T12:52:36Z",
        "updated_at": "2023-06-12T10:57:22Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "deae64bfd31f6938253c05392aa355bf6d7e7605",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5769,
        "stargazers_count": 8694,
        "watchers_count": 8694,
        "size": 13739,
        "default_branch": "master",
        "open_issues_count": 141,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-02-19T14:46:32Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2024-02-19T17:36:50Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 301,
    "deletions": 0,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 11,
    "comments": 4
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 11525945502,
      "node_id": "HRFPE_lADOAN28mc58eb5UzwAAAAKu__ie",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11525945502",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T14:26:50Z"
    },
    {
      "event": "commented",
      "id": 1898819757,
      "node_id": "IC_kwDOAN28mc5xLbCt",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1898819757",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T16:31:32Z",
      "updated_at": "2024-01-18T16:31:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "FWIW, concept ACK :)",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1541#issuecomment-1898819757",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1541"
    },
    {
      "event": "reviewed",
      "id": 1833321526,
      "node_id": "PRR_kwDOAN28mc5tRkQ2",
      "url": null,
      "actor": null,
      "commit_id": "4bd12d5698404e28c70d4486316f4e1cca356896",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "ACK 4bd12d5698404e28c70d4486316f4e1cca356896",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1541#pullrequestreview-1833321526",
      "submitted_at": "2024-01-19T18:09:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11554734832,
      "node_id": "HRFPE_lADOAN28mc58eb5UzwAAAAKwt0Lw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11554734832",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T10:29:07Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T10:33:36Z",
      "updated_at": "2024-01-22T10:33:36Z",
      "source": {
        "issue": {
          "id": 2012508541,
          "node_id": "PR_kwDOABII585gc3y_",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28948",
          "number": 28948,
          "state": "closed",
          "state_reason": null,
          "title": "v3 transaction policy for anti-pinning",
          "body": "See #27463 for overall package relay tracking.\r\n\r\nDelving Bitcoin discussion thread: https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340\r\nDelving Bitcoin discussion for LN usage: https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418\r\n\r\nRationale:\r\n- There are various pinning problems with RBF and our general ancestor/descendant limits. These policies help mitigate many pinning attacks and make package RBF feasible (see #28984 which implements package RBF on top of this). I would focus the most here on Rule 3 pinning. [1][2]\r\n- Switching to a cluster-based mempool (see #27677 and #28676) requires the removal of CPFP carve out, which applications depend on. V3 + package RBF + ephemeral anchors + 1-parent-1-child package relay provides an intermediate solution.\r\n\r\nV3 policy is for \"Priority Transactions.\" [3][4] It allows users to opt in to more restrictive topological limits for shared transactions, in exchange for the more robust fee-bumping abilities that offers. Even though we don't have cluster limits, we are able to treat these transactions as having as having a maximum cluster size of 2.\r\n\r\nImmediate benefits:\r\n\r\n- You can presign a transaction with 0 fees (not just 1sat/vB!) and add a fee-bump later.\r\n- Rule 3 pinning is reduced by a significant amount, since the attacker can only attach a maximum of 1000vB to your shared transaction.\r\n \r\nThis also enables some other cool things (again see #27463 for overall roadmap):\r\n- Ephemeral Anchors\r\n- Package RBF for these 1-parent-1-child packages. That means e.g. a commitment tx + child can replace another commitment tx using the child's fees.\r\n- We can transition to a \"single anchor\" universe without worrying about package limit pinning. So current users of CPFP carve out would have something else to use.\r\n- We can switch to a cluster-based mempool [5] (#27677 #28676), which removes CPFP carve out [6].\r\n\r\n[1]: Original mailing list post and discussion about RBF pinning problems https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html\r\n[2]: A FAQ is \"we need this for cluster mempool, but is this still necessary afterwards?\" There are some pinning issues that are fixed here and not fully fixed in cluster mempool, so we will still want this or something similar afterward.\r\n[3]: Mailing list post for v3 https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html\r\n[4]: Original PR #25038 also contains a lot of the discussion\r\n[5]: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/7\r\n[6]: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 84,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28948",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28948.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28948.patch"
          },
          "closed_at": "2024-02-10T04:38:12Z",
          "created_at": "2023-11-27T15:17:11Z",
          "updated_at": "2024-02-19T03:46:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1903700074,
      "node_id": "IC_kwDOAN28mc5xeChq",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1903700074",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T10:34:57Z",
      "updated_at": "2024-01-22T10:35:33Z",
      "author_association": "MEMBER",
      "body": "Thanks @murchandamus, took all your suggestions (4bd12d5...af8e903)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1541#issuecomment-1903700074",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1541"
    },
    {
      "event": "mentioned",
      "id": 11554806752,
      "node_id": "MEE_lADOAN28mc58eb5UzwAAAAKwuFvg",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11554806752",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T10:34:57Z"
    },
    {
      "event": "subscribed",
      "id": 11554806776,
      "node_id": "SE_lADOAN28mc58eb5UzwAAAAKwuFv4",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11554806776",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T10:34:57Z"
    },
    {
      "event": "reviewed",
      "id": 1836176115,
      "node_id": "PRR_kwDOAN28mc5tcdLz",
      "url": null,
      "actor": null,
      "commit_id": "af8e9038e6142264b55d6bb2d2599fd9f5adbc43",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK ",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1541#pullrequestreview-1836176115",
      "submitted_at": "2024-01-22T11:45:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11555885898,
      "node_id": "HRFPE_lADOAN28mc58eb5UzwAAAAKwyNNK",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11555885898",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T12:11:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11555971913,
      "node_id": "HRFPE_lADOAN28mc58eb5UzwAAAAKwyiNJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11555971913",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T12:19:36Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDU0MmY4MzNkOTgyMjNiOGRkZDJlNWI5M2Q5ZDFhMGFjM2U0ZTRmNGQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "tree": {
        "sha": "b525bb14ed2a0ee0144c4e1c278ca3d91087be72",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b525bb14ed2a0ee0144c4e1c278ca3d91087be72"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/156e8aabe24c1253b38d61459791a939550a4b60",
          "sha": "156e8aabe24c1253b38d61459791a939550a4b60",
          "html_url": "https://github.com/bitcoin/bips/commit/156e8aabe24c1253b38d61459791a939550a4b60"
        }
      ],
      "message": "BIP for v3 transaction policy",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-22T12:35:01Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-15T16:26:55Z"
      },
      "sha": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11556145379,
      "node_id": "HRFPE_lADOAN28mc58eb5UzwAAAAKwzMjj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11556145379",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T12:35:05Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T16:43:29Z",
      "updated_at": "2024-01-22T16:43:29Z",
      "source": {
        "issue": {
          "id": 2034511280,
          "node_id": "PR_kwDOAN28mc5hnrqV",
          "url": "https://api.github.com/repos/bitcoin/bips/issues/1524",
          "repository_url": "https://api.github.com/repos/bitcoin/bips",
          "labels_url": "https://api.github.com/repos/bitcoin/bips/issues/1524/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1524/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bips/issues/1524/events",
          "html_url": "https://github.com/bitcoin/bips/pull/1524",
          "number": 1524,
          "state": "open",
          "state_reason": null,
          "title": "Ephemeral anchors",
          "body": "Opening to allow discussion on the text separately from the Bitcoin Core implementation here https://github.com/bitcoin/bitcoin/pull/29001\r\n\r\nExample usage:\r\nhttps://github.com/instagibbs/bolts/commits/zero_fee_commitment\r\nhttps://github.com/instagibbs/lightning/commits/commit_zero_fees",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bips/pulls/1524",
            "html_url": "https://github.com/bitcoin/bips/pull/1524",
            "diff_url": "https://github.com/bitcoin/bips/pull/1524.diff",
            "patch_url": "https://github.com/bitcoin/bips/pull/1524.patch"
          },
          "created_at": "2023-12-10T19:56:50Z",
          "updated_at": "2024-01-24T12:17:37Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1952789440,
      "node_id": "IC_kwDOAN28mc50ZTPA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1952789440",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-19T16:12:11Z",
      "updated_at": "2024-02-19T16:12:11Z",
      "author_association": "MEMBER",
      "body": "@luke-jr this has been open for a month, would you mind taking a look?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1541#issuecomment-1952789440",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1541"
    },
    {
      "event": "mentioned",
      "id": 11851876664,
      "node_id": "MEE_lADOAN28mc58eb5UzwAAAALCbUk4",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11851876664",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-19T16:12:12Z"
    },
    {
      "event": "subscribed",
      "id": 11851876700,
      "node_id": "SE_lADOAN28mc58eb5UzwAAAALCbUlc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11851876700",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-19T16:12:12Z"
    },
    {
      "event": "commented",
      "id": 1953290125,
      "node_id": "IC_kwDOAN28mc50bNeN",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1953290125",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-19T23:56:37Z",
      "updated_at": "2024-02-19T23:56:37Z",
      "author_association": "MEMBER",
      "body": "I think this should document that 1000 vb child limit is experimental and it cannot be relied on by downstream projects.\r\nThis opt-in policy is not robust towards NTA pinning (cf. “The Good, The Bad, The Ugly” 2020 mail) and “loophole” pinning exposed in Core’s #28948. This can note that additional opt-in policy might be applied on top of nversion=3 see Core’s #29454.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1541#issuecomment-1953290125",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1541"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459403454",
      "pull_request_review_id": 1833321526,
      "id": 1459403454,
      "node_id": "PRRC_kwDOAN28mc5W_Lq-",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping abilities.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 15,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "4bd12d5698404e28c70d4486316f4e1cca356896",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It’s not obvious to me what you are thinking of when you mention \"improved fee-bumping abilities\". Is that referring to the possibility of relaying a 0-fee transaction in a package? Otherwise, perhaps:\r\n\r\n```suggestion\r\nUsers can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping reliability.\r\n```",
      "created_at": "2024-01-19T17:29:48Z",
      "updated_at": "2024-01-19T18:09:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1459403454",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459403454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459409445",
      "pull_request_review_id": 1833321526,
      "id": 1459409445,
      "node_id": "PRRC_kwDOAN28mc5W_NIl",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping abilities.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depends on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 41,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "4bd12d5698404e28c70d4486316f4e1cca356896",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nWhen the funds available to be redeemed by each party depend on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\r\n```",
      "created_at": "2024-01-19T17:33:28Z",
      "updated_at": "2024-01-19T18:09:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1459409445",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459409445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459427035",
      "pull_request_review_id": 1833321526,
      "id": 1459427035,
      "node_id": "PRRC_kwDOAN28mc5W_Rbb",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping abilities.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depends on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+\n+Combined with Rule 1, this gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Additionally, checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. A v3 transaction's unconfirmed ancestors must all be v3.\n+<ref>Rationale:\n+\n+Ensure the ancestor feerate rule does not underestimate a to-be-replaced v3 mempool transaction's incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "4bd12d5698404e28c70d4486316f4e1cca356896",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The \"mempool\" here throws me off:\r\n\r\n```suggestion\r\nEnsure the ancestor feerate rule does not underestimate a to-be-replaced v3 transaction's incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.\r\n```",
      "created_at": "2024-01-19T17:41:49Z",
      "updated_at": "2024-01-19T18:09:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1459427035",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459427035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459437308",
      "pull_request_review_id": 1833321526,
      "id": 1459437308,
      "node_id": "PRRC_kwDOAN28mc5W_T78",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping abilities.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depends on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+\n+Combined with Rule 1, this gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Additionally, checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. A v3 transaction's unconfirmed ancestors must all be v3.\n+<ref>Rationale:\n+\n+Ensure the ancestor feerate rule does not underestimate a to-be-replaced v3 mempool transaction's incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.\n+</ref>\n+\n+4. A v3 transaction cannot have more than 1 unconfirmed descendant. CPFP Carve Out is not granted to v3 transactions.\n+<ref>Rationale: The larger the descendant limit, the more transactions may need to be replaced. We want to address RBF Pinning with Rule 3 and Rule 5.\n+\n+Combined with the other rules, we have an effective cluster limit using the existing ancestor and descendant limits. We cannot increase the descendant limit any further without losing this bound on cluster size.\n+\n+<br />Q: Why allow any descendants at all?\n+<br />At least 1 descendant is required to allow CPFP of the presigned transaction. Without package RBF, multiple anchor outputs would be required to allow each counterparty to fee-bump any presigned transaction. With package RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+</ref>\n+\n+5. A v3 transaction that has an unconfirmed v3 ancestor cannot have a sigop-adjusted virtual size larger than 1000vB.\n+<ref>Rationale: Limit the amount of virtual bytes (and thus fees) that may need to be replaced, while leaving a comfortable amount of space for inputs to fund the transaction.\n+<br />Q: Why not bigger?\n+<br />The larger the descendant size limit, the more vbytes may need to be replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional 100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB bounds the potential fees by a factor of 100.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 118,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "4bd12d5698404e28c70d4486316f4e1cca356896",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How about:\r\n\r\n```suggestion\r\n<br />The larger the descendant size limit, the more vbytes may need to be replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional 100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB reduces the upper bound of the additional fees by a factor of 100.\r\n```",
      "created_at": "2024-01-19T17:47:51Z",
      "updated_at": "2024-01-19T18:09:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1459437308",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459437308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459449494",
      "pull_request_review_id": 1833321526,
      "id": 1459449494,
      "node_id": "PRRC_kwDOAN28mc5W_W6W",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping abilities.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depends on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+\n+Combined with Rule 1, this gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Additionally, checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. A v3 transaction's unconfirmed ancestors must all be v3.\n+<ref>Rationale:\n+\n+Ensure the ancestor feerate rule does not underestimate a to-be-replaced v3 mempool transaction's incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.\n+</ref>\n+\n+4. A v3 transaction cannot have more than 1 unconfirmed descendant. CPFP Carve Out is not granted to v3 transactions.\n+<ref>Rationale: The larger the descendant limit, the more transactions may need to be replaced. We want to address RBF Pinning with Rule 3 and Rule 5.\n+\n+Combined with the other rules, we have an effective cluster limit using the existing ancestor and descendant limits. We cannot increase the descendant limit any further without losing this bound on cluster size.\n+\n+<br />Q: Why allow any descendants at all?\n+<br />At least 1 descendant is required to allow CPFP of the presigned transaction. Without package RBF, multiple anchor outputs would be required to allow each counterparty to fee-bump any presigned transaction. With package RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+</ref>\n+\n+5. A v3 transaction that has an unconfirmed v3 ancestor cannot have a sigop-adjusted virtual size larger than 1000vB.\n+<ref>Rationale: Limit the amount of virtual bytes (and thus fees) that may need to be replaced, while leaving a comfortable amount of space for inputs to fund the transaction.\n+<br />Q: Why not bigger?\n+<br />The larger the descendant size limit, the more vbytes may need to be replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional 100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB bounds the potential fees by a factor of 100.\n+\n+<br />This rule is also easily tacked on to existing logic for policy and wallets. A maximum size standard transaction (100KvB) can have up to 1000vB of descendants to be within the default descendant limit (101KvB).\n+\n+<br />Q: Why not smaller?\n+<br/>The smaller this limit, the fewer UTXOs a child may use to fund this fee-bump. For example, only allowing the v3 child to have 2 inputs would require wallets to maintain a pool of high-value confirmed UTXOs. However, as the fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice. With a limit of 1000vB and usage of taproot outputs, the child can have 15 inputs and 2 outputs (calculated using [https://bitcoinops.org/en/tools/calc-size/ this tool]).\n+</ref>\n+\n+6. A v3 transaction cannot have more than 1 unconfirmed ancestor.\n+<ref>Rationale: Prevent the child of an unconfirmed v3 transaction from bringing in more unconfirmed ancestors. See #2 in Rule 3 Pinning section above.\n+Combined with the other rules, we have an effective cluster limit using the existing ancestor and descendant limits. We cannot increase the ancestor limit any further without losing this bound on cluster size.\n+</ref>\n+\n+7. An individual v3 transaction is permitted to be below the mempool min relay feerate, assuming it is considered within a package that meets the mempool's feerate requirements.\n+<ref>Rationale: This allows contracting protocols to create presigned transactions with 0 fees and fee-bump them using CPFP at broadcast time.\n+</ref>\n+\n+This 1-parent-1-child (aka cluster size 2) topology restriction makes v3 transactions much easier to reason about, which enables implementing additional RBF features\n+<ref>\n+For example, [https://github.com/bitcoin/bitcoin/pull/28984 this implementation] of package RBF compares the replacement and to-be-replaced transaction(s) using their ancestor scores. This score is accurate for v3 transactions due to their limited cluster size.\n+</ref>.\n+\n+\n+Implementation: https://github.com/bitcoin/bitcoin/pull/28948 and https://github.com/bitcoin/bitcoin/pull/28984\n+\n+==Backward Compatibility==\n+\n+Transactions with <code>nVersion=3</code> were previously nonstandard. There are no known conflicts with previous usage.\n+\n+==Intended Usage==\n+\n+Generally, users with no interest in spending unconfirmed outputs from a transaction can use v3 for more robust RBF abilities.\n+\n+This proposal allows for a different solution to fee-bumping in LN, in which commitment transations are signed with 0 fees and include a single anchor that can later be used to add fees at broadcast time\n+<ref>Proposals for changes to LN commitment transaction format using v3 and a single anchor:\n+* [https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418 \"Lightning transactions with v3 and ephemeral anchors\"]\n+* [https://github.com/instagibbs/bolts/commits/zero_fee_commitment bolts proposal branch]\n+* See \"Intended usage for LN\" section in [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html \"New transaction policies (nVersion=3) for contracting protocols\"]\n+</ref>.\n+A similar fee-bumping model can also be used in other contracting protocols\n+<ref>Examples of non-LN protocols that have shown interest in, designed, or built fee-bumping using v3:\n+* A LN-Symmetry implementation using v3 and ephemeral anchors: [https://delvingbitcoin.org/t/ln-symmetry-project-recap/359 LN-Symmetry Project Recap] [https://github.com/instagibbs/lightning/tree/eltoo_support branch]\n+* See \"Managing Fees Safely\" mentioning ephemeral anchors in [https://jameso.be/vaults.pdf \"Vaults and Covenants\"]\n+</ref>.\n+\n+==Related Work==\n+\n+The [https://github.com/instagibbs/bips/blob/ephemeral_anchor/bip-ephemeralanchors.mediawiki Ephemeral Anchors] proposal builds on top of this one to add more features.\n+It changes the anchor script to be anyone can spend, allowing anybody to add fees and reducing the onchain footprint and fee costs.\n+It also allows anchor outputs to have 0 value, eliminating the need to deduct anchor output amounts from the channel balance.\n+\n+The [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/7 Cluster Mempool] proposal makes deeper changes to mempool structure and policy rules, allowing for more incentive-compatible RBF rules for all transactions (not just ones with special topology restrictions like v3), among other things.\n+\n+Cluster Mempool provides a more wholistic solution to some of the problems listed (such as adding an incentive compatibility requirement to RBF and safely enabling package RBF for more complex topologies). However, it does not help resolve RBF Pinning through Rule 3 and Rule 5. Also, since Cluster Mempool removes CPFP Carve Out<ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>, a policy like v3 is a beneficial intermediate step for applications that rely on it.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "4bd12d5698404e28c70d4486316f4e1cca356896",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nCluster Mempool provides a more holistic solution to some of the problems listed (such as adding an incentive compatibility requirement to RBF and safely enabling package RBF for more complex topologies). However, it does not help resolve RBF Pinning through Rule 3 and Rule 5. Also, since Cluster Mempool removes CPFP Carve Out<ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>, a policy like v3 is a beneficial intermediate step for applications that rely on it.\r\n```",
      "created_at": "2024-01-19T17:55:11Z",
      "updated_at": "2024-01-19T18:09:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1459449494",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459449494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459469874",
      "pull_request_review_id": 1833321526,
      "id": 1459469874,
      "node_id": "PRRC_kwDOAN28mc5W_b4y",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping abilities.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depends on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+\n+Combined with Rule 1, this gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Additionally, checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. A v3 transaction's unconfirmed ancestors must all be v3.\n+<ref>Rationale:\n+\n+Ensure the ancestor feerate rule does not underestimate a to-be-replaced v3 mempool transaction's incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "4bd12d5698404e28c70d4486316f4e1cca356896",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The last sentence makes use of Rule 4 which is only defined below. Perhaps the order of these two rules should be swapped?",
      "created_at": "2024-01-19T18:07:58Z",
      "updated_at": "2024-01-19T18:09:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1459469874",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1459469874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461663070",
      "pull_request_review_id": 1836154484,
      "id": 1461663070,
      "node_id": "PRRC_kwDOAN28mc5XHzVe",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping abilities.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depends on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+\n+Combined with Rule 1, this gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Additionally, checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. A v3 transaction's unconfirmed ancestors must all be v3.\n+<ref>Rationale:\n+\n+Ensure the ancestor feerate rule does not underestimate a to-be-replaced v3 mempool transaction's incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "4bd12d5698404e28c70d4486316f4e1cca356896",
      "in_reply_to_id": 1459469874,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consolidated the rules a bit to be more understandable and not have these referencing problems.",
      "created_at": "2024-01-22T10:34:40Z",
      "updated_at": "2024-01-22T10:34:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1461663070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461663070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461680558",
      "pull_request_review_id": 1836176115,
      "id": 1461680558,
      "node_id": "PRRC_kwDOAN28mc5XH3mu",
      "diff_hunk": "@@ -0,0 +1,250 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping reliability.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depend on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. A v3 transaction's unconfirmed ancestors must all be v3. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+* Requiring packages to be all-or-none v3 makes it possible to enforce v3 toplogy limits. For example, the v3 descendant limit would not be very meaningful if it could be bypassed by creating a non-v3 child.\n+* Combined with Rule 1, inheriting v3 gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. An unconfirmed v3 transaction cannot have more than 1 unconfirmed ancestor. An unconfirmed v3 transaction cannot have more than 1 unconfirmed descendant. CPFP Carve Out is not granted to v3 transactions.\n+<ref>Rationale:\n+* The larger the descendant limit, the more transactions may need to be replaced. See #1 in Rule 3 Pinning section above. This also makes pinning using Rule 5 more difficult, since a directly conflicting transaction has fewer possible descendants.\n+* These two limits (ancestor count 2, descendant count 2) effectively create a cluster limit using the existing ancestor and descendant limits. Increasing them to 3 would imply an infinite cluster count limit.\n+* This 1-parent-1-child topology makes it possible to use ancestor score (minimum of ancestor feerate and individual feerate) as a measure of incentive compatibility.\n+\n+<br />Q: Why not allow multiple parents to enable batched fee-bumping?\n+<br />To mitigate Rule 3 pinning, we need to prevent a child of an unconfirmed v3 transaction from bringing in more unconfirmed ancestors. See #2 in Rule 3 Pinning section above.\n+\n+<br />Q: Why not allow another child?\n+<br />Allowing another child disables the ability to use ancestor score to measure incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.\n+\n+<br />Q: Why allow any descendants at all?\n+<br />At least 1 descendant is required to allow CPFP of the presigned transaction. Without package RBF, multiple anchor outputs would be required to allow each counterparty to fee-bump any presigned transaction. With package RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+</ref>\n+\n+4. A v3 transaction that has an unconfirmed v3 ancestor cannot have a sigop-adjusted virtual size larger than 1000vB.\n+<ref>Rationale: Limit the amount of virtual bytes (and thus fees) that may need to be replaced, while leaving a comfortable amount of space for inputs to fund the transaction.\n+<br />Q: Why not bigger?\n+<br />The larger the descendant size limit, the more vbytes may need to be replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional 100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB reduces the upper bound of the additional fees by a factor of 100.\n+\n+<br />This rule is also easily tacked on to existing logic for policy and wallets. A maximum size standard transaction (100KvB) can have up to 1000vB of descendants to be within the default descendant limit (101KvB).\n+\n+<br />Q: Why not smaller?\n+<br/>The smaller this limit, the fewer UTXOs a child may use to fund this fee-bump. For example, only allowing the v3 child to have 2 inputs would require wallets to maintain a pool of high-value confirmed UTXOs. However, as the fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice. With a limit of 1000vB and usage of taproot outputs, the child can have 15 inputs and 2 outputs (calculated using [https://bitcoinops.org/en/tools/calc-size/ this tool]).\n+</ref>\n+\n+5. An individual v3 transaction is permitted to be below the mempool min relay feerate, assuming it is considered within a package that meets the mempool's feerate requirements.\n+<ref>Rationale: This allows contracting protocols to create presigned transactions with 0 fees and fee-bump them using CPFP at broadcast time.\n+</ref>\n+\n+This 1-parent-1-child (aka cluster size 2) topology restriction makes v3 transactions much easier to reason about, which enables implementing additional RBF features\n+<ref>\n+For example, [https://github.com/bitcoin/bitcoin/pull/28984 this implementation] of package RBF compares the replacement and to-be-replaced transaction(s) using their ancestor scores. This score is accurate for v3 transactions due to their limited cluster size.\n+</ref>.\n+\n+\n+Implementation: https://github.com/bitcoin/bitcoin/pull/28948 and https://github.com/bitcoin/bitcoin/pull/28984\n+\n+==Backward Compatibility==\n+\n+Transactions with <code>nVersion=3</code> were previously nonstandard. There are no known conflicts with previous usage.\n+\n+==Intended Usage==\n+\n+Generally, users with no interest in spending unconfirmed outputs from a transaction can use v3 for more robust RBF abilities.\n+\n+This proposal allows for a different solution to fee-bumping in LN, in which commitment transations are signed with 0 fees and include a single anchor that can later be used to add fees at broadcast time\n+<ref>Proposals for changes to LN commitment transaction format using v3 and a single anchor:\n+* [https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418 \"Lightning transactions with v3 and ephemeral anchors\"]",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 149,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "af8e9038e6142264b55d6bb2d2599fd9f5adbc43",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThis proposal allows for a different solution to fee-bumping in LN, in which commitment transactions are signed with 0 fees and include a single anchor that can later be used to add fees at broadcast time\r\n<ref>Proposals for changes to LN commitment transaction format using v3 and a single anchor:\r\n* [https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418 \"Lightning transactions with v3 and ephemeral anchors\"]\r\n```",
      "created_at": "2024-01-22T10:46:25Z",
      "updated_at": "2024-01-22T11:45:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1461680558",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461680558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": 147,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461688616",
      "pull_request_review_id": 1836176115,
      "id": 1461688616,
      "node_id": "PRRC_kwDOAN28mc5XH5ko",
      "diff_hunk": "@@ -0,0 +1,250 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping reliability.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depend on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. A v3 transaction's unconfirmed ancestors must all be v3. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+* Requiring packages to be all-or-none v3 makes it possible to enforce v3 toplogy limits. For example, the v3 descendant limit would not be very meaningful if it could be bypassed by creating a non-v3 child.\n+* Combined with Rule 1, inheriting v3 gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. An unconfirmed v3 transaction cannot have more than 1 unconfirmed ancestor. An unconfirmed v3 transaction cannot have more than 1 unconfirmed descendant. CPFP Carve Out is not granted to v3 transactions.\n+<ref>Rationale:\n+* The larger the descendant limit, the more transactions may need to be replaced. See #1 in Rule 3 Pinning section above. This also makes pinning using Rule 5 more difficult, since a directly conflicting transaction has fewer possible descendants.\n+* These two limits (ancestor count 2, descendant count 2) effectively create a cluster limit using the existing ancestor and descendant limits. Increasing them to 3 would imply an infinite cluster count limit.\n+* This 1-parent-1-child topology makes it possible to use ancestor score (minimum of ancestor feerate and individual feerate) as a measure of incentive compatibility.\n+\n+<br />Q: Why not allow multiple parents to enable batched fee-bumping?\n+<br />To mitigate Rule 3 pinning, we need to prevent a child of an unconfirmed v3 transaction from bringing in more unconfirmed ancestors. See #2 in Rule 3 Pinning section above.\n+\n+<br />Q: Why not allow another child?\n+<br />Allowing another child disables the ability to use ancestor score to measure incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.\n+\n+<br />Q: Why allow any descendants at all?\n+<br />At least 1 descendant is required to allow CPFP of the presigned transaction. Without package RBF, multiple anchor outputs would be required to allow each counterparty to fee-bump any presigned transaction. With package RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+</ref>\n+\n+4. A v3 transaction that has an unconfirmed v3 ancestor cannot have a sigop-adjusted virtual size larger than 1000vB.\n+<ref>Rationale: Limit the amount of virtual bytes (and thus fees) that may need to be replaced, while leaving a comfortable amount of space for inputs to fund the transaction.\n+<br />Q: Why not bigger?\n+<br />The larger the descendant size limit, the more vbytes may need to be replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional 100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB reduces the upper bound of the additional fees by a factor of 100.\n+\n+<br />This rule is also easily tacked on to existing logic for policy and wallets. A maximum size standard transaction (100KvB) can have up to 1000vB of descendants to be within the default descendant limit (101KvB).\n+\n+<br />Q: Why not smaller?\n+<br/>The smaller this limit, the fewer UTXOs a child may use to fund this fee-bump. For example, only allowing the v3 child to have 2 inputs would require wallets to maintain a pool of high-value confirmed UTXOs. However, as the fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice. With a limit of 1000vB and usage of taproot outputs, the child can have 15 inputs and 2 outputs (calculated using [https://bitcoinops.org/en/tools/calc-size/ this tool]).\n+</ref>\n+\n+5. An individual v3 transaction is permitted to be below the mempool min relay feerate, assuming it is considered within a package that meets the mempool's feerate requirements.\n+<ref>Rationale: This allows contracting protocols to create presigned transactions with 0 fees and fee-bump them using CPFP at broadcast time.\n+</ref>\n+\n+This 1-parent-1-child (aka cluster size 2) topology restriction makes v3 transactions much easier to reason about, which enables implementing additional RBF features\n+<ref>\n+For example, [https://github.com/bitcoin/bitcoin/pull/28984 this implementation] of package RBF compares the replacement and to-be-replaced transaction(s) using their ancestor scores. This score is accurate for v3 transactions due to their limited cluster size.\n+</ref>.\n+\n+\n+Implementation: https://github.com/bitcoin/bitcoin/pull/28948 and https://github.com/bitcoin/bitcoin/pull/28984\n+\n+==Backward Compatibility==\n+\n+Transactions with <code>nVersion=3</code> were previously nonstandard. There are no known conflicts with previous usage.\n+\n+==Intended Usage==\n+\n+Generally, users with no interest in spending unconfirmed outputs from a transaction can use v3 for more robust RBF abilities.\n+\n+This proposal allows for a different solution to fee-bumping in LN, in which commitment transations are signed with 0 fees and include a single anchor that can later be used to add fees at broadcast time\n+<ref>Proposals for changes to LN commitment transaction format using v3 and a single anchor:\n+* [https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418 \"Lightning transactions with v3 and ephemeral anchors\"]\n+* [https://github.com/instagibbs/bolts/commits/zero_fee_commitment bolts proposal branch]\n+* See \"Intended usage for LN\" section in [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html \"New transaction policies (nVersion=3) for contracting protocols\"]\n+</ref>.\n+A similar fee-bumping model can also be used in other contracting protocols\n+<ref>Examples of non-LN protocols that have shown interest in, designed, or built fee-bumping using v3:\n+* A LN-Symmetry implementation using v3 and ephemeral anchors: [https://delvingbitcoin.org/t/ln-symmetry-project-recap/359 LN-Symmetry Project Recap] [https://github.com/instagibbs/lightning/tree/eltoo_support branch]\n+* See \"Managing Fees Safely\" mentioning ephemeral anchors in [https://jameso.be/vaults.pdf \"Vaults and Covenants\"]\n+</ref>.\n+\n+==Related Work==\n+\n+The [https://github.com/instagibbs/bips/blob/ephemeral_anchor/bip-ephemeralanchors.mediawiki Ephemeral Anchors] proposal builds on top of this one to add more features.\n+It changes the anchor script to be anyone can spend, allowing anybody to add fees and reducing the onchain footprint and fee costs.\n+It also allows anchor outputs to have 0 value, eliminating the need to deduct anchor output amounts from the channel balance.\n+\n+The [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/7 Cluster Mempool] proposal makes deeper changes to mempool structure and policy rules, allowing for more incentive-compatible RBF rules for all transactions (not just ones with special topology restrictions like v3), among other things.\n+\n+Cluster Mempool provides a more holistic solution to some of the problems listed (such as adding an incentive compatibility requirement to RBF and safely enabling package RBF for more complex topologies). However, it does not help resolve RBF Pinning through Rule 3 and Rule 5. Also, since Cluster Mempool removes CPFP Carve Out<ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>, a policy like v3 is a beneficial intermediate step for applications that rely on it.\n+\n+[https://bitcoinops.org/en/topics/package-relay Package Relay] includes changes in p2p protocol, transaction relay logic, and mempool policy to enable nodes to accept and relay packages of transactions. Much of this proposal's utility relies on the existence of package relay for 1 parent and 1 child (the package topology v3 supports).\n+\n+==Alternatives==\n+\n+Various alternatives have been proposed across multiple discussion threads\n+<ref>Proposals and discussions dedicated to improving RBF:\n+* [https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff \"RBF Improvements\"]\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html \"Improving RBF Policy\"]\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/016998.html \"[PROPOSAL] Emergency RBF (BIP 125)\"]\n+<br />Proposals and discussions dedicated to improving or creating new fee-bumping mechanisms:\n+* [https://github.com/lightning/bolts/pull/1036 \"Add option to sign commitments at various feerates\"]\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019243.html \"A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent\"]\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html \"A Replacement for RBF and CPFP: Non-Destructive TXID Dependencies for Fee Sponsoring\"]\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019879.html \"Thoughts on fee bumping\"]\n+</ref>.\n+Some alternatives work in conjunction with this proposal (see Related Work).\n+\n+A few popular ideas that were not incorporated into this work are summarized here.\n+\n+===Alternatives: add static incentive compatibility rule in RBF policy===\n+\n+Add incentive compatibility requirement to RBF policy using some existing score or static calculation\n+<ref>Examples of such proposals and suggestions:\n+* [https://github.com/bitcoin/bitcoin/pull/23121 \"check ancestor feerate in RBF, remove BIP125 Rule2\"]\n+* [https://github.com/bitcoin/bitcoin/pull/26451 \"Enforce incentive compatibility for all RBF replacements\"]\n+* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019841.html\n+* https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff?permalink_comment_id=4081349#gistcomment-4081349\n+</ref>.\n+\n+As the incentive compatibility \"score\" of a transaction must be dynamically calculated given the structure of mempools today, there is no satisfactory solution. A full calculation is too computationally expensive. Static values can overestimate or underestimate, leading to more pinning problems <ref>Four examples of static calculations and an example in which they are all inaccurate: https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff#mining-score-of-a-mempool-transaction</ref>.\n+The ability to calculate incentive compatibility scores efficiently is a primary feature and motivation for both v3 and cluster mempool.\n+\n+===Alternatives: replace by feerate===\n+\n+Instead of using Rule 3 and 4, allow replacements with a higher feerate.\n+One variation of this proposal is to apply this rule in certain exceptional scenarios or when the replacement would confirm \"soon\"\n+<ref>Examples of such proposals and suggestions:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/016998.html \"[PROPOSAL] Emergency RBF (BIP 125)\"]\n+* [https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff#fees-in-next-block-and-feerate-for-the-rest-of-the-mempool]\n+</ref>.\n+\n+A general removal of Rule 3 and 4 is not feasible as it opens the door to DoS attacks. It seems unclear how to design and implement a useful and safe threshold at which the rules can be bypassed (the notion of confirming \"soon\" is messy and may be too complex to implement), if such a threshold exists at all\n+<ref>Concerns\n+* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017020.html\n+* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017002.html\n+* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019879.html\n+* https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff?permalink_comment_id=4044451#gistcomment-4044451\n+</ref>.\n+As such, the v3 proposal just aims to help users avoid such scenarios as much as possible.\n+\n+===Alternatives: implement rate-limiting without fee rules===\n+Since Rule 3 and 4 are for rate-limiting, replace them with a mempool-wide or per-peer rate limits on replacements by outpoint and/or bandwidth\n+<ref>Examples of such proposals and suggestions:\n+* https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff?permalink_comment_id=4081349#gistcomment-4081349\n+* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019820.html\n+* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017024.html\n+<br />Related proposal for changing the amount of bandwidth that replacement transations use:",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 225,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "af8e9038e6142264b55d6bb2d2599fd9f5adbc43",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n<br />Related proposal for changing the amount of bandwidth that replacement transactions use:\r\n```",
      "created_at": "2024-01-22T10:53:20Z",
      "updated_at": "2024-01-22T11:45:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1461688616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461688616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461702468",
      "pull_request_review_id": 1836176115,
      "id": 1461702468,
      "node_id": "PRRC_kwDOAN28mc5XH89E",
      "diff_hunk": "@@ -0,0 +1,250 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping reliability.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depend on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. A v3 transaction's unconfirmed ancestors must all be v3. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+* Requiring packages to be all-or-none v3 makes it possible to enforce v3 toplogy limits. For example, the v3 descendant limit would not be very meaningful if it could be bypassed by creating a non-v3 child.\n+* Combined with Rule 1, inheriting v3 gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. An unconfirmed v3 transaction cannot have more than 1 unconfirmed ancestor. An unconfirmed v3 transaction cannot have more than 1 unconfirmed descendant. CPFP Carve Out is not granted to v3 transactions.\n+<ref>Rationale:\n+* The larger the descendant limit, the more transactions may need to be replaced. See #1 in Rule 3 Pinning section above. This also makes pinning using Rule 5 more difficult, since a directly conflicting transaction has fewer possible descendants.\n+* These two limits (ancestor count 2, descendant count 2) effectively create a cluster limit using the existing ancestor and descendant limits. Increasing them to 3 would imply an infinite cluster count limit.\n+* This 1-parent-1-child topology makes it possible to use ancestor score (minimum of ancestor feerate and individual feerate) as a measure of incentive compatibility.\n+\n+<br />Q: Why not allow multiple parents to enable batched fee-bumping?\n+<br />To mitigate Rule 3 pinning, we need to prevent a child of an unconfirmed v3 transaction from bringing in more unconfirmed ancestors. See #2 in Rule 3 Pinning section above.\n+\n+<br />Q: Why not allow another child?\n+<br />Allowing another child disables the ability to use ancestor score to measure incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.\n+\n+<br />Q: Why allow any descendants at all?\n+<br />At least 1 descendant is required to allow CPFP of the presigned transaction. Without package RBF, multiple anchor outputs would be required to allow each counterparty to fee-bump any presigned transaction. With package RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+</ref>\n+\n+4. A v3 transaction that has an unconfirmed v3 ancestor cannot have a sigop-adjusted virtual size larger than 1000vB.\n+<ref>Rationale: Limit the amount of virtual bytes (and thus fees) that may need to be replaced, while leaving a comfortable amount of space for inputs to fund the transaction.\n+<br />Q: Why not bigger?\n+<br />The larger the descendant size limit, the more vbytes may need to be replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional 100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB reduces the upper bound of the additional fees by a factor of 100.\n+\n+<br />This rule is also easily tacked on to existing logic for policy and wallets. A maximum size standard transaction (100KvB) can have up to 1000vB of descendants to be within the default descendant limit (101KvB).\n+\n+<br />Q: Why not smaller?\n+<br/>The smaller this limit, the fewer UTXOs a child may use to fund this fee-bump. For example, only allowing the v3 child to have 2 inputs would require wallets to maintain a pool of high-value confirmed UTXOs. However, as the fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice. With a limit of 1000vB and usage of taproot outputs, the child can have 15 inputs and 2 outputs (calculated using [https://bitcoinops.org/en/tools/calc-size/ this tool]).\n+</ref>\n+\n+5. An individual v3 transaction is permitted to be below the mempool min relay feerate, assuming it is considered within a package that meets the mempool's feerate requirements.\n+<ref>Rationale: This allows contracting protocols to create presigned transactions with 0 fees and fee-bump them using CPFP at broadcast time.\n+</ref>\n+\n+This 1-parent-1-child (aka cluster size 2) topology restriction makes v3 transactions much easier to reason about, which enables implementing additional RBF features\n+<ref>\n+For example, [https://github.com/bitcoin/bitcoin/pull/28984 this implementation] of package RBF compares the replacement and to-be-replaced transaction(s) using their ancestor scores. This score is accurate for v3 transactions due to their limited cluster size.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 133,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "af8e9038e6142264b55d6bb2d2599fd9f5adbc43",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The implementation is now using the fee rate diagram for incentive compatibility check",
      "created_at": "2024-01-22T11:05:14Z",
      "updated_at": "2024-01-22T11:45:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1461702468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461702468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461859382",
      "pull_request_review_id": 1836465848,
      "id": 1461859382,
      "node_id": "PRRC_kwDOAN28mc5XIjQ2",
      "diff_hunk": "@@ -0,0 +1,250 @@\n+<pre>\n+  BIP: ???\n+  Layer: Applications\n+  Title: Opt-in Policy For More Robust Fee-bumping\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-URI:\n+  Status: Draft\n+  Type: ???\n+  Created: 2024-01-10\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+Users can set <code>nVersion=3</code> on a transaction (making it a \"v3 transaction\") to opt in to restrictions on spending unconfirmed outputs in exchange for improved fee-bumping reliability.\n+Mempools apply a different set of policies to these transactions, including topology restrictions that make it easier to assess their incentive compatibility.\n+\n+==Motivation==\n+\n+Mempools typically accept and relay transactions that spend outputs from other unconfirmed transactions, restricting package sizes through ancestor and descendant limits\n+<ref>https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-limits.md</ref>\n+to limit the computational complexity of mempool operations and mitigate Denial of Service attacks.\n+\n+Users may also create unconfirmed transactions that conflict with -- or are \"double spends\" of -- each other by spending the same input(s) in both.\n+Instead of always keeping the first transaction, many mempools also have some kind of Replace by Fee (RBF) policy\n+<ref>\n+[https://github.com/bitcoin/bitcoin/blob/632a2bb731804dffe52bd4cbd90bfee352d25ede/doc/policy/mempool-replacements.md Bitcoin Core's RBF policy] at the time of writing. It is slightly different from what is described in BIP 125.\n+</ref>\n+to keep the transaction that would be more profitable for a miner. RBF is often employed by users as a fee-bumping mechanism.\n+\n+However, these policies that make trade-offs between incentive compatibility and DoS-resistance are not always perfect. In some cases, malicious actors may exploit limitations to prevent incentive-compatible transactions from being accepted or fee-bumped (''pinning'').\n+\n+Pinning is very relevant to contracting protocols in which untrusted parties construct and sign time-sensitive transactions to be broadcast on-chain later\n+<ref>Posts about pinning in LN and LN-Symmetry:\n+* [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020458.html \"Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002639.html \"RBF Pinning with Counterparties and Competing Interest\"]\n+* [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html \"Pinning : The Good, The Bad, The Ugly\"]\n+* [https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md \"Pinning Attacks\"]\n+* [https://gist.github.com/instagibbs/60264606e181451e977e439a49f69fe1 \"Eltoo Pinning\"]\n+</ref>.\n+When the funds available to be redeemed by each party depend on a transaction confirming within a specific time window, a malicious party may be able to steal money if the honest party cannot get their transaction confirmed. As such, the ability to fee-bump a transaction to entice miners to include it in their blocks is important to security.\n+\n+===RBF pinning through Rule 3===\n+\n+Imagine that counterparties Alice and Mallory have transactions (or packages) A and B, respectively, which conflict with each other. Alice broadcasts A and Mallory broadcasts B. RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions (\"Rule 3\"). This means Mallory may increase the fees required to replace B beyond what Alice was planning to pay for A's fees.\n+\n+1. Adding transaction(s) that descend from B and pay a low feerate (too low to fee-bump B through CPFP)<ref>Example: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html</ref>.\n+\n+2. Adding a high-fee descendant of B that also spends from another large, low-feerate mempool transaction (where the ancestor feerate of the descendant is too low to fee-bump B through CPFP)<ref>Example: https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394</ref>.\n+\n+===RBF pinning through Rule 5===\n+\n+RBF rules require that no replacement trigger the removal of more than 100 transactions (\"Rule 5\"). This number includes the descendants of the conflicted mempool transactions. Mallory can make it more difficult to replace transactions by attaching lots of descendants to them. For example, if Alice wants to replace 5 transactions and each has 21 or more descendants, the replacement will be rejected regardless of its fees.\n+\n+===RBF has no incentive compatibility requirement===\n+\n+There is currently no rule to enforce that a replacement transaction would be a better candidate for mining (Rule 6 is insufficient). A user could create a replacement transaction that pays more fees and is higher feerate, but would confirm slower than the original transaction.\n+\n+As a result, all transactions signed with SIGHASH_ANYONECANPAY are vulnerable to being replaced by a transaction that will confirm later than the original. <ref>https://github.com/bitcoin/bitcoin/pull/23121#pullrequestreview-766271585</ref>\n+\n+===Child fees don't count towards RBF rules===\n+\n+A transaction must meet all fee-related requirements (Rules 3, 4, 6) alone; its child's fees cannot be used. A ''Package RBF'' policy would allow a transaction's child to be used for its RBF requirements.\n+\n+In LN, conflicting commitment transactions signed with the same fees cannot replace each other, even if accompanied by a fee-bumping child. This limitation necessitates the presence of two anchor outputs, allowing both parties to fee-bump either commitment transaction that enters their mempool.\n+\n+===Package limit pinning and replacing CPFP Carve Out===\n+\n+Policy limits the number and total virtual size of an unconfirmed transaction's descendants. A fee-bumping child of an unconfirmed transaction (CPFP) may be rejected for exceeding the descendant limit. When a transaction has multiple outputs owned by different parties, a malicious party can prevent the other(s) from CPFPing their transaction by attaching enough descendants to monopolize the descendant limit (''package limit pinning'').\n+\n+LN commitment transactions rely on CPFP carve out <ref>[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html \"CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)\"]</ref> to avoid package limit pinning.\n+\n+There are weaknesses with this approach of using 2 anchors and CPFP Carve Out. This proposal helps address a few of them (see Related Work for how other weaknesses are addressed):\n+\n+* A switch to cluster mempool necessitates the removal of CPFP Carve Out <ref>https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12</ref>.\n+* CPFP Carve Out only allows *one more* child to be added to the transaction. This means it cannot guarantee the ability to CPFP for more than 2 parties of a shared transaction.\n+\n+==Specification==\n+\n+This document describes one set of policy rules that can realistically be deployed today and is useful to today's applications. If mempool improvements enable more accurate rules or new application requirements emerge, it may be appropriate to implement a different set of policy rules to achieve the same goal.\n+<ref>Examples of potential changes:\n+* If increasing the maximum child size enables a new use case while still providing acceptable pinning bounds, we can loosen that rule.\n+* If [https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393 cluster mempool] is implemented and some of the rules could be applied to all transactions instead of just v3, there is no need to specify them as additional rules.\n+* The implementation of things like \"replacement must be more incentive compatible\" could change.\n+</ref>\n+\n+===1 Parent with 1 Small Child===\n+\n+In addition to the node's other standardness and policy rules, the following rules apply to transactions with <code>nVersion</code> field set to 3 (\"v3 transaction\").\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability.\n+\n+2. A v3 transaction's unconfirmed ancestors must all be v3. Any descendant of an unconfirmed v3 transaction must also be v3.\n+<ref>Rationale:\n+* Requiring packages to be all-or-none v3 makes it possible to enforce v3 toplogy limits. For example, the v3 descendant limit would not be very meaningful if it could be bypassed by creating a non-v3 child.\n+* Combined with Rule 1, inheriting v3 gives us the property of \"inherited signaling\" when descendants of unconfirmed transactions are created. Checking whether a transaction signals replaceability this way does not require mempool traversal, and does not change based on what transactions are mined.\n+</ref>\n+Note: A v3 transaction can spend outputs from _confirmed_ non-v3 transactions.\n+\n+3. An unconfirmed v3 transaction cannot have more than 1 unconfirmed ancestor. An unconfirmed v3 transaction cannot have more than 1 unconfirmed descendant. CPFP Carve Out is not granted to v3 transactions.\n+<ref>Rationale:\n+* The larger the descendant limit, the more transactions may need to be replaced. See #1 in Rule 3 Pinning section above. This also makes pinning using Rule 5 more difficult, since a directly conflicting transaction has fewer possible descendants.\n+* These two limits (ancestor count 2, descendant count 2) effectively create a cluster limit using the existing ancestor and descendant limits. Increasing them to 3 would imply an infinite cluster count limit.\n+* This 1-parent-1-child topology makes it possible to use ancestor score (minimum of ancestor feerate and individual feerate) as a measure of incentive compatibility.\n+\n+<br />Q: Why not allow multiple parents to enable batched fee-bumping?\n+<br />To mitigate Rule 3 pinning, we need to prevent a child of an unconfirmed v3 transaction from bringing in more unconfirmed ancestors. See #2 in Rule 3 Pinning section above.\n+\n+<br />Q: Why not allow another child?\n+<br />Allowing another child disables the ability to use ancestor score to measure incentive compatibility. Imagine the original transaction, A, has a child B and co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original transactions and thus its ancestor feerate must be lower than the package's. However, this may be an underestimation because D can bump C without B's help. This is resolved if v3 transactions can only have v3 ancestors, as then C cannot have another child.\n+\n+<br />Q: Why allow any descendants at all?\n+<br />At least 1 descendant is required to allow CPFP of the presigned transaction. Without package RBF, multiple anchor outputs would be required to allow each counterparty to fee-bump any presigned transaction. With package RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+</ref>\n+\n+4. A v3 transaction that has an unconfirmed v3 ancestor cannot have a sigop-adjusted virtual size larger than 1000vB.\n+<ref>Rationale: Limit the amount of virtual bytes (and thus fees) that may need to be replaced, while leaving a comfortable amount of space for inputs to fund the transaction.\n+<br />Q: Why not bigger?\n+<br />The larger the descendant size limit, the more vbytes may need to be replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional 100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB reduces the upper bound of the additional fees by a factor of 100.\n+\n+<br />This rule is also easily tacked on to existing logic for policy and wallets. A maximum size standard transaction (100KvB) can have up to 1000vB of descendants to be within the default descendant limit (101KvB).\n+\n+<br />Q: Why not smaller?\n+<br/>The smaller this limit, the fewer UTXOs a child may use to fund this fee-bump. For example, only allowing the v3 child to have 2 inputs would require wallets to maintain a pool of high-value confirmed UTXOs. However, as the fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice. With a limit of 1000vB and usage of taproot outputs, the child can have 15 inputs and 2 outputs (calculated using [https://bitcoinops.org/en/tools/calc-size/ this tool]).\n+</ref>\n+\n+5. An individual v3 transaction is permitted to be below the mempool min relay feerate, assuming it is considered within a package that meets the mempool's feerate requirements.\n+<ref>Rationale: This allows contracting protocols to create presigned transactions with 0 fees and fee-bump them using CPFP at broadcast time.\n+</ref>\n+\n+This 1-parent-1-child (aka cluster size 2) topology restriction makes v3 transactions much easier to reason about, which enables implementing additional RBF features\n+<ref>\n+For example, [https://github.com/bitcoin/bitcoin/pull/28984 this implementation] of package RBF compares the replacement and to-be-replaced transaction(s) using their ancestor scores. This score is accurate for v3 transactions due to their limited cluster size.",
      "path": "bip-v3.mediawiki",
      "position": null,
      "original_position": 133,
      "commit_id": "542f833d98223b8ddd2e5b93d9d1a0ac3e4e4f4d",
      "original_commit_id": "af8e9038e6142264b55d6bb2d2599fd9f5adbc43",
      "in_reply_to_id": 1461702468,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Made the language more ambiguous",
      "created_at": "2024-01-22T13:25:42Z",
      "updated_at": "2024-01-22T13:25:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1541#discussion_r1461859382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1461859382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1541"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    }
  ]
}